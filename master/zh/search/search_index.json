{"config":{"indexing":"full","lang":["en","es","fr","pt","ru","ja"],"min_search_length":3,"prebuild_index":true,"separator":"[\\s\\-\\_]+"},"docs":[{"location":"","text":"QMK\u673a\u68b0\u952e\u76d8\u56fa\u4ef6 \u00b6 \u4ec0\u4e48\u662f QMK \u56fa\u4ef6? \u00b6 QMK ( Quantum Mechanical Keyboard ) \u662f\u4e00\u4e2a\u793e\u533a\u7ef4\u62a4\u7684\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5305\u62ec QMK \u56fa\u4ef6, QMK \u5de5\u5177\u7bb1, qmk.fm\u7f51\u7ad9, \u548c\u8fd9\u4e9b\u6587\u6863\u3002QMK \u56fa\u4ef6\u662f\u4e00\u4e2a\u57fa\u4e8e tmk_keyboard \u7684\u952e\u76d8\u56fa\u4ef6\uff0c\u5b83\u5728\u7231\u7279\u6885\u5c14AVR\u5fae\u63a7\u5236\u5668\u5b9e\u73b0\u4e00\u4e9b\u6709\u7528\u7684\u529f\u80fd,\u786e\u5207\u5730\u8bf4, \u662f\u5728 OLKB product line , \u5728 ErgoDox EZ \u952e\u76d8, \u548c Clueboard product line . \u4e0a\u3002\u5b83\u88ab\u79fb\u690d\u5230\u4f7f\u7528ChibiOS\u7684ARM\u82af\u7247\u4e0a. \u5b83\u53ef\u4ee5\u5728\u98de\u7ebf\u952e\u76d8\u6216\u5b9a\u5236PCB\u952e\u76d8\u4e2d\u53d1\u6325\u529f\u80fd. \u5982\u4f55\u5f97\u5230\u5b83 \u00b6 \u5982\u679c\u4f60\u6253\u7b97\u8d21\u732e\u5e03\u5c40, \u952e\u76d8, \u6216\u8005\u5176\u4ed6QMK\u7279\u6027, \u4e00\u4e0b\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff1a \u4eceGitHub\u83b7\u5f97repo\u5206\u652f , \u5e76\u514b\u9686\u4f60\u7684repo\u5230\u672c\u5730\u8fdb\u884c\u7f16\u8f91\uff0c\u63a8\u9001\uff0c\u7136\u540e\u4ece\u4f60\u7684\u5206\u652f\u6253\u5f00 Pull Request . \u6b64\u5916, \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d ( zip , tar ), \u6216\u8005\u4ecegit\u514b\u9686 ( git@github.com:qmk/qmk_firmware.git ), \u6216 https ( https://github.com/qmk/qmk_firmware.git ). \u5982\u4f55\u7f16\u8bd1 \u00b6 \u5728\u4f60\u80fd\u7f16\u8bd1\u4e4b\u524d, \u4f60\u9700\u8981 \u90e8\u7f72\u73af\u5883 \u7528\u4e8e AVR or/and ARM \u5f00\u53d1\u3002\u5b8c\u6210\u540e, \u4f60\u53ef\u4ee5\u4f7f\u7528 make \u547d\u4ee4\u6765\u7f16\u8bd1\u4e00\u4e2a\u952e\u76d8\u548c\u5e03\u5c40\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4: make planck/rev4:default \u8fd9\u5c06\u5efa\u7acb planck \u7684 rev4 \u4fee\u8ba2\u7248\u672c\u5e76\u4f7f\u7528 default \u5e03\u5c40\u3002\u5e76\u975e\u6240\u6709\u952e\u76d8\u90fd\u6709\u4fee\u8ba2\u7248\u672c (\u4e5f\u53eb\u505a\u5b50\u9879\u76ee\u6216\u6587\u4ef6\u5939)\uff0c\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u4fee\u8ba2\u7248\u672c\u53ef\u4ee5\u7701\u7565\uff0c\u5982\u4e0b: make preonic:default \u5982\u4f55\u5b9a\u5236 \u00b6 QMK \u6709\u8bb8\u591a \u7279\u6027 \u6765\u63a2\u7d22\uff0c\u4e5f\u6709\u5f88\u591a \u53c2\u8003\u6587\u6863 \u4f9b\u60a8\u53d1\u6398\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 \u5e03\u5c40 \u548c \u952e\u7801 \u6765\u5229\u7528\u8bb8\u591a\u7279\u6027\u3002","title":"Home"},{"location":"#qmk","text":"","title":"QMK\u673a\u68b0\u952e\u76d8\u56fa\u4ef6"},{"location":"#qmk_1","text":"QMK ( Quantum Mechanical Keyboard ) \u662f\u4e00\u4e2a\u793e\u533a\u7ef4\u62a4\u7684\u5f00\u6e90\u8f6f\u4ef6\uff0c\u5305\u62ec QMK \u56fa\u4ef6, QMK \u5de5\u5177\u7bb1, qmk.fm\u7f51\u7ad9, \u548c\u8fd9\u4e9b\u6587\u6863\u3002QMK \u56fa\u4ef6\u662f\u4e00\u4e2a\u57fa\u4e8e tmk_keyboard \u7684\u952e\u76d8\u56fa\u4ef6\uff0c\u5b83\u5728\u7231\u7279\u6885\u5c14AVR\u5fae\u63a7\u5236\u5668\u5b9e\u73b0\u4e00\u4e9b\u6709\u7528\u7684\u529f\u80fd,\u786e\u5207\u5730\u8bf4, \u662f\u5728 OLKB product line , \u5728 ErgoDox EZ \u952e\u76d8, \u548c Clueboard product line . \u4e0a\u3002\u5b83\u88ab\u79fb\u690d\u5230\u4f7f\u7528ChibiOS\u7684ARM\u82af\u7247\u4e0a. \u5b83\u53ef\u4ee5\u5728\u98de\u7ebf\u952e\u76d8\u6216\u5b9a\u5236PCB\u952e\u76d8\u4e2d\u53d1\u6325\u529f\u80fd.","title":"\u4ec0\u4e48\u662f QMK \u56fa\u4ef6?"},{"location":"#_1","text":"\u5982\u679c\u4f60\u6253\u7b97\u8d21\u732e\u5e03\u5c40, \u952e\u76d8, \u6216\u8005\u5176\u4ed6QMK\u7279\u6027, \u4e00\u4e0b\u662f\u6700\u7b80\u5355\u7684\u65b9\u6cd5\uff1a \u4eceGitHub\u83b7\u5f97repo\u5206\u652f , \u5e76\u514b\u9686\u4f60\u7684repo\u5230\u672c\u5730\u8fdb\u884c\u7f16\u8f91\uff0c\u63a8\u9001\uff0c\u7136\u540e\u4ece\u4f60\u7684\u5206\u652f\u6253\u5f00 Pull Request . \u6b64\u5916, \u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4e0b\u8f7d ( zip , tar ), \u6216\u8005\u4ecegit\u514b\u9686 ( git@github.com:qmk/qmk_firmware.git ), \u6216 https ( https://github.com/qmk/qmk_firmware.git ).","title":"\u5982\u4f55\u5f97\u5230\u5b83"},{"location":"#_2","text":"\u5728\u4f60\u80fd\u7f16\u8bd1\u4e4b\u524d, \u4f60\u9700\u8981 \u90e8\u7f72\u73af\u5883 \u7528\u4e8e AVR or/and ARM \u5f00\u53d1\u3002\u5b8c\u6210\u540e, \u4f60\u53ef\u4ee5\u4f7f\u7528 make \u547d\u4ee4\u6765\u7f16\u8bd1\u4e00\u4e2a\u952e\u76d8\u548c\u5e03\u5c40\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4: make planck/rev4:default \u8fd9\u5c06\u5efa\u7acb planck \u7684 rev4 \u4fee\u8ba2\u7248\u672c\u5e76\u4f7f\u7528 default \u5e03\u5c40\u3002\u5e76\u975e\u6240\u6709\u952e\u76d8\u90fd\u6709\u4fee\u8ba2\u7248\u672c (\u4e5f\u53eb\u505a\u5b50\u9879\u76ee\u6216\u6587\u4ef6\u5939)\uff0c\u5728\u6b64\u60c5\u51b5\u4e0b\uff0c\u4fee\u8ba2\u7248\u672c\u53ef\u4ee5\u7701\u7565\uff0c\u5982\u4e0b: make preonic:default","title":"\u5982\u4f55\u7f16\u8bd1"},{"location":"#_3","text":"QMK \u6709\u8bb8\u591a \u7279\u6027 \u6765\u63a2\u7d22\uff0c\u4e5f\u6709\u5f88\u591a \u53c2\u8003\u6587\u6863 \u4f9b\u60a8\u53d1\u6398\u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 \u5e03\u5c40 \u548c \u952e\u7801 \u6765\u5229\u7528\u8bb8\u591a\u7279\u6027\u3002","title":"\u5982\u4f55\u5b9a\u5236"},{"location":"_summary/","text":"\u5b8c\u5168\u83dc\u9e1f\u6307\u5357 \u5165\u95e8 \u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u5237\u65b0\u56fa\u4ef6 \u6d4b\u8bd5\u548c\u8c03\u8bd5 Git\u6700\u4f73\u5b9e\u8df5 \u4f7f\u7528\u4f60\u5206\u53c9(fork)\u7684\u4e3b\u5206\u652f(master) \u89e3\u51b3\u5408\u5e76\u51b2\u7a81 \u91cd\u65b0\u540c\u6b65\u4e00\u4e2a\u5206\u652f \u5b66\u4e60\u8d44\u6e90 QMK\u57fa\u7840 QMK\u7b80\u4ecb QMK\u547d\u4ee4\u884c\u5de5\u5177 QMK\u547d\u4ee4\u884c\u5de5\u5177\u914d\u7f6e \u5411QMK\u8d21\u732e\u4ee3\u7801 \u5982\u4f55\u4f7f\u7528GitHub \u83b7\u5f97\u5e2e\u52a9 \u975e\u517c\u5bb9\u6027\u4fee\u6539 \u6211\u7684PR\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u975e\u517c\u5bb9\u6027\u4fee\u6539 2019\u5e748\u670830\u65e5 \u95ee\u9898\u4e0e\u89e3\u7b54 \u4e00\u822c\u95ee\u9898 \u6784\u5efa/\u7f16\u8bd1 \u8c03\u8bd5/\u6545\u969c\u6392\u9664 \u5e03\u5c40 Zadig\u9a71\u52a8\u5b89\u88c5 \u8be6\u7ec6\u6307\u5357 \u5b89\u88c5\u6784\u5efa\u5de5\u5177 vagrant\u6307\u5357 \u6784\u5efa/\u7f16\u8bd1\u6307\u5357 \u5237\u65b0\u56fa\u4ef6 \u5b9a\u5236\u529f\u80fd \u5e03\u5c40\u6982\u8ff0 \u786c\u4ef6 \u517c\u5bb9\u7684\u5355\u7247\u673a AVR\u5904\u7406\u5668 \u9a71\u52a8 \u53c2\u8003 \u952e\u76d8\u6307\u5357 \u914d\u7f6e\u9009\u9879 \u952e\u7801 \u4ee3\u7801\u4e66\u5199\u89c4\u8303 - C \u4ee3\u7801\u4e66\u5199\u89c4\u8303 - Python \u6587\u6863\u4e66\u5199\u89c4\u8303 \u6587\u6863\u6a21\u677f \u672f\u8bed\u8868 \u5355\u5143\u6d4b\u8bd5 \u5b9e\u7528\u51fd\u6570 \u914d\u7f6e\u5668\u652f\u6301 info.json \u683c\u5f0f Python \u547d\u4ee4\u884c\u5f00\u53d1 \u7279\u6027 \u57fa\u672c\u952e\u7801 US ANSI\u63a7\u5236\u7801 \u91cf\u5b50\u952e\u7801 \u9ad8\u7ea7\u952e\u7801 \u97f3\u9891 \u81ea\u52a8shift \u80cc\u5149 \u84dd\u7259 \u70ed\u6539\u952e \u7ec4\u5408 \u547d\u4ee4 \u6d88\u6296 API \u62e8\u52a8\u5f00\u5173 \u52a8\u6001\u5b8f\u6307\u4ee4 \u7f16\u7801\u5668 \u91cd\u97f3\u53f7Esc\u590d\u5408\u952e \u89e6\u6478\u53cd\u9988 HD44780 LCD\u63a7\u5236\u5668 \u81ea\u9501\u952e \u5e03\u5c40 \u524d\u5bfc\u952e LED\u9635\u5217 \u5b8f\u6307\u4ee4 \u9f20\u6807\u952e OLED\u9a71\u52a8 \u4e00\u952e\u529f\u80fd \u6307\u9488\u8bbe\u5907 PS/2\u9f20\u6807 RGB\u706f\u5149 RGB\u77e9\u9635 \u7a7a\u683c\u5019\u8865\u6362\u6321 \u5206\u4f53\u952e\u76d8 \u901f\u5f55\u673a \u6362\u624b \u591a\u51fb\u952e \u7ec8\u7aef \u70ed\u654f\u6253\u5370\u673a Unicode \u7528\u6237\u7a7a\u95f4 \u901f\u5ea6\u952e \u5236\u9020\u548c\u5b9a\u5236\u8005\u6307\u5357 \u624b\u5de5\u8fde\u7ebf\u6307\u5357 ISP\u5237\u65b0\u6307\u5357 ARM\u8c03\u8bd5\u6307\u5357 ADC\u8bbe\u5907 I2C\u8bbe\u5907 SPI\u8bbe\u5907 WS2812\u8bbe\u5907 EEPROM\u8bbe\u5907 GPIO\u63a7\u5236 \u81ea\u5b9a\u4e49\u952e\u76d8\u77e9\u9635 Proton C\u8f6c\u6362 \u6df1\u5165\u4e86\u89e3 \u952e\u76d8\u5de5\u4f5c\u539f\u7406 \u6df1\u5165\u4e86\u89e3QMK \u5176\u4ed6\u8bdd\u9898 \u4f7f\u7528Eclipse\u5f00\u53d1QMK \u4f7f\u7528VSCode\u5f00\u53d1QMK \u652f\u6301 \u7ffb\u8bd1QMK\u6587\u6863 QMK \u5185\u6784 (\u6b63\u5728\u7f16\u5199) \u5b9a\u4e49 \u8f93\u5165\u56de\u8c03\u5bc4\u5b58\u5668 Midi\u8bbe\u5907 Midi\u8bbe\u5907\u914d\u7f6e\u8fc7\u7a0b Midi\u5de5\u5177\u5e93 \u53d1\u9001\u51fd\u6570 Sysex\u5de5\u5177","title":" summary"},{"location":"adc_driver/","text":"ADC Driver \u00b6 QMK can leverage the Analog-to-Digital Converter (ADC) on supported MCUs to measure voltages on certain pins. This can be useful for implementing things such as battery level indicators for Bluetooth keyboards, or volume controls using a potentiometer, as opposed to a rotary encoder . This driver currently supports both AVR and a limited selection of ARM devices. The values returned are 10-bit integers (0-1023) mapped between 0V and VCC (usually 5V or 3.3V for AVR, 3.3V only for ARM), however on ARM there is more flexibility in control of operation through #define s if you need more precision. Usage \u00b6 To use this driver, add the following to your rules.mk : SRC += analog.c Then place this include at the top of your code: #include \"analog.h\" Channels \u00b6 AVR \u00b6 Channel AT90USB64/128 ATmega16/32U4 ATmega32A ATmega328/P 0 F0 F0 A0 C0 1 F1 F1 A1 C1 2 F2 A2 C2 3 F3 A3 C3 4 F4 F4 A4 C4 5 F5 F5 A5 C5 6 F6 F6 A6 * 7 F7 F7 A7 * 8 D4 9 D6 10 D7 11 B4 12 B5 13 B6 * The ATmega328/P possesses two extra ADC channels; however, they are not present on the DIP pinout, and are not shared with GPIO pins. You can use adc_read() directly to gain access to these. ARM \u00b6 Note that some of these pins are doubled-up on ADCs with the same channel. This is because the pins can be used for either ADC. Also note that the F0 and F3 use different numbering schemes. The F0 has a single ADC and the channels are 0-indexed, whereas the F3 has 4 ADCs and the channels are 1-indexed. This is because the F0 uses the ADCv1 implementation of the ADC, whereas the F3 uses the ADCv3 implementation. ADC Channel STM32F0xx STM32F1xx STM32F3xx STM32F4xx 1 0 A0 A0 A0 1 1 A1 A1 A0 A1 1 2 A2 A2 A1 A2 1 3 A3 A3 A2 A3 1 4 A4 A4 A3 A4 1 5 A5 A5 F4 A5 1 6 A6 A6 C0 A6 1 7 A7 A7 C1 A7 1 8 B0 B0 C2 B0 1 9 B1 B1 C3 B1 1 10 C0 C0 F2 C0 1 11 C1 C1 C1 1 12 C2 C2 C2 1 13 C3 C3 C3 1 14 C4 C4 C4 1 15 C5 C5 C5 1 16 2 0 A0 \u00b9 A0 \u00b2 2 1 A1 \u00b9 A4 A1 \u00b2 2 2 A2 \u00b9 A5 A2 \u00b2 2 3 A3 \u00b9 A6 A3 \u00b2 2 4 A4 \u00b9 A7 A4 \u00b2 2 5 A5 \u00b9 C4 A5 \u00b2 2 6 A6 \u00b9 C0 A6 \u00b2 2 7 A7 \u00b9 C1 A7 \u00b2 2 8 B0 \u00b9 C2 B0 \u00b2 2 9 B1 \u00b9 C3 B1 \u00b2 2 10 C0 \u00b9 F2 C0 \u00b2 2 11 C1 \u00b9 C5 C1 \u00b2 2 12 C2 \u00b9 B2 C2 \u00b2 2 13 C3 \u00b9 C3 \u00b2 2 14 C4 \u00b9 C4 \u00b2 2 15 C5 \u00b9 C5 \u00b2 2 16 3 0 A0 \u00b9 A0 \u00b2 3 1 A1 \u00b9 B1 A1 \u00b2 3 2 A2 \u00b9 E9 A2 \u00b2 3 3 A3 \u00b9 E13 A3 \u00b2 3 4 F6 \u00b9 F6 \u00b2 3 5 F7 \u00b9 B13 F7 \u00b2 3 6 F8 \u00b9 E8 F8 \u00b2 3 7 F9 \u00b9 D10 F9 \u00b2 3 8 F10 \u00b9 D11 F10 \u00b2 3 9 D12 F3 \u00b2 3 10 C0 \u00b9 D13 C0 \u00b2 3 11 C1 \u00b9 D14 C1 \u00b2 3 12 C2 \u00b9 B0 C2 \u00b2 3 13 C3 \u00b9 E7 C3 \u00b2 3 14 E10 F4 \u00b2 3 15 E11 F5 \u00b2 3 16 E12 4 1 E14 4 2 E15 4 3 B12 4 4 B14 4 5 B15 4 6 E8 4 7 D10 4 8 D11 4 9 D12 4 10 D13 4 11 D14 4 12 D8 4 13 D9 4 14 4 15 4 16 \u00b9 As of ChibiOS 20.3.4, the ADC driver for STM32F1xx devices supports only ADC1, therefore any configurations involving ADC2 or ADC3 cannot actually be used. In particular, pins F6 \u2026 F10 , which are present at least on some STM32F103x[C-G] devices, cannot be used as ADC inputs because of this driver limitation. \u00b2 Not all STM32F4xx devices have ADC2 and/or ADC3, therefore some configurations shown in this table may be unavailable; in particular, pins F4 \u2026 F10 cannot be used as ADC inputs on devices which do not have ADC3. Check the device datasheet to confirm which pin functions are supported. Functions \u00b6 AVR \u00b6 Function Description analogReference(mode) Sets the analog voltage reference source. Must be one of ADC_REF_EXTERNAL , ADC_REF_POWER or ADC_REF_INTERNAL . analogReadPin(pin) Reads the value from the specified pin, eg. F6 for ADC6 on the ATmega32U4. pinToMux(pin) Translates a given pin to a mux value. If an unsupported pin is given, returns the mux value for \"0V (GND)\". adc_read(mux) Reads the value from the ADC according to the specified mux. See your MCU's datasheet for more information. ARM \u00b6 Function Description analogReadPin(pin) Reads the value from the specified pin, eg. A0 for channel 0 on the STM32F0 and ADC1 channel 1 on the STM32F3. Note that if a pin can be used for multiple ADCs, it will pick the lower numbered ADC for this function. eg. C0 will be channel 6 of ADC 1 when it could be used for ADC 2 as well. analogReadPinAdc(pin, adc) Reads the value from the specified pin and ADC, eg. C0, 1 will read from channel 6, ADC 2 instead of ADC 1. Note that the ADCs are 0-indexed for this function. pinToMux(pin) Translates a given pin to a channel and ADC combination. If an unsupported pin is given, returns the mux value for \"0V (GND)\". adc_read(mux) Reads the value from the ADC according to the specified pin and ADC combination. See your MCU's datasheet for more information. Configuration \u00b6 ARM \u00b6 The ARM implementation of the ADC has a few additional options that you can override in your own keyboards and keymaps to change how it operates. Please consult the corresponding hal_adc_lld.h in ChibiOS for your specific microcontroller for further documentation on your available options. #define Type Default Description ADC_CIRCULAR_BUFFER bool false If true , then the implementation will use a circular buffer. ADC_NUM_CHANNELS int 1 Sets the number of channels that will be scanned as part of an ADC operation. The current implementation only supports 1 . ADC_BUFFER_DEPTH int 2 Sets the depth of each result. Since we are only getting a 10-bit result by default, we set this to 2 bytes so we can contain our one value. This could be set to 1 if you opt for an 8-bit or lower result. ADC_SAMPLING_RATE int ADC_SMPR_SMP_1P5 Sets the sampling rate of the ADC. By default, it is set to the fastest setting. ADC_RESOLUTION int ADC_CFGR1_RES_10BIT or ADC_CFGR_RES_10BITS The resolution of your result. We choose 10 bit by default, but you can opt for 12, 10, 8, or 6 bit. Different MCUs use slightly different names for the resolution constants.","title":"ADC\u8bbe\u5907"},{"location":"adc_driver/#adc-driver","text":"QMK can leverage the Analog-to-Digital Converter (ADC) on supported MCUs to measure voltages on certain pins. This can be useful for implementing things such as battery level indicators for Bluetooth keyboards, or volume controls using a potentiometer, as opposed to a rotary encoder . This driver currently supports both AVR and a limited selection of ARM devices. The values returned are 10-bit integers (0-1023) mapped between 0V and VCC (usually 5V or 3.3V for AVR, 3.3V only for ARM), however on ARM there is more flexibility in control of operation through #define s if you need more precision.","title":"ADC Driver"},{"location":"adc_driver/#usage","text":"To use this driver, add the following to your rules.mk : SRC += analog.c Then place this include at the top of your code: #include \"analog.h\"","title":"Usage"},{"location":"adc_driver/#channels","text":"","title":"Channels"},{"location":"adc_driver/#avr","text":"Channel AT90USB64/128 ATmega16/32U4 ATmega32A ATmega328/P 0 F0 F0 A0 C0 1 F1 F1 A1 C1 2 F2 A2 C2 3 F3 A3 C3 4 F4 F4 A4 C4 5 F5 F5 A5 C5 6 F6 F6 A6 * 7 F7 F7 A7 * 8 D4 9 D6 10 D7 11 B4 12 B5 13 B6 * The ATmega328/P possesses two extra ADC channels; however, they are not present on the DIP pinout, and are not shared with GPIO pins. You can use adc_read() directly to gain access to these.","title":"AVR"},{"location":"adc_driver/#arm","text":"Note that some of these pins are doubled-up on ADCs with the same channel. This is because the pins can be used for either ADC. Also note that the F0 and F3 use different numbering schemes. The F0 has a single ADC and the channels are 0-indexed, whereas the F3 has 4 ADCs and the channels are 1-indexed. This is because the F0 uses the ADCv1 implementation of the ADC, whereas the F3 uses the ADCv3 implementation. ADC Channel STM32F0xx STM32F1xx STM32F3xx STM32F4xx 1 0 A0 A0 A0 1 1 A1 A1 A0 A1 1 2 A2 A2 A1 A2 1 3 A3 A3 A2 A3 1 4 A4 A4 A3 A4 1 5 A5 A5 F4 A5 1 6 A6 A6 C0 A6 1 7 A7 A7 C1 A7 1 8 B0 B0 C2 B0 1 9 B1 B1 C3 B1 1 10 C0 C0 F2 C0 1 11 C1 C1 C1 1 12 C2 C2 C2 1 13 C3 C3 C3 1 14 C4 C4 C4 1 15 C5 C5 C5 1 16 2 0 A0 \u00b9 A0 \u00b2 2 1 A1 \u00b9 A4 A1 \u00b2 2 2 A2 \u00b9 A5 A2 \u00b2 2 3 A3 \u00b9 A6 A3 \u00b2 2 4 A4 \u00b9 A7 A4 \u00b2 2 5 A5 \u00b9 C4 A5 \u00b2 2 6 A6 \u00b9 C0 A6 \u00b2 2 7 A7 \u00b9 C1 A7 \u00b2 2 8 B0 \u00b9 C2 B0 \u00b2 2 9 B1 \u00b9 C3 B1 \u00b2 2 10 C0 \u00b9 F2 C0 \u00b2 2 11 C1 \u00b9 C5 C1 \u00b2 2 12 C2 \u00b9 B2 C2 \u00b2 2 13 C3 \u00b9 C3 \u00b2 2 14 C4 \u00b9 C4 \u00b2 2 15 C5 \u00b9 C5 \u00b2 2 16 3 0 A0 \u00b9 A0 \u00b2 3 1 A1 \u00b9 B1 A1 \u00b2 3 2 A2 \u00b9 E9 A2 \u00b2 3 3 A3 \u00b9 E13 A3 \u00b2 3 4 F6 \u00b9 F6 \u00b2 3 5 F7 \u00b9 B13 F7 \u00b2 3 6 F8 \u00b9 E8 F8 \u00b2 3 7 F9 \u00b9 D10 F9 \u00b2 3 8 F10 \u00b9 D11 F10 \u00b2 3 9 D12 F3 \u00b2 3 10 C0 \u00b9 D13 C0 \u00b2 3 11 C1 \u00b9 D14 C1 \u00b2 3 12 C2 \u00b9 B0 C2 \u00b2 3 13 C3 \u00b9 E7 C3 \u00b2 3 14 E10 F4 \u00b2 3 15 E11 F5 \u00b2 3 16 E12 4 1 E14 4 2 E15 4 3 B12 4 4 B14 4 5 B15 4 6 E8 4 7 D10 4 8 D11 4 9 D12 4 10 D13 4 11 D14 4 12 D8 4 13 D9 4 14 4 15 4 16 \u00b9 As of ChibiOS 20.3.4, the ADC driver for STM32F1xx devices supports only ADC1, therefore any configurations involving ADC2 or ADC3 cannot actually be used. In particular, pins F6 \u2026 F10 , which are present at least on some STM32F103x[C-G] devices, cannot be used as ADC inputs because of this driver limitation. \u00b2 Not all STM32F4xx devices have ADC2 and/or ADC3, therefore some configurations shown in this table may be unavailable; in particular, pins F4 \u2026 F10 cannot be used as ADC inputs on devices which do not have ADC3. Check the device datasheet to confirm which pin functions are supported.","title":"ARM"},{"location":"adc_driver/#functions","text":"","title":"Functions"},{"location":"adc_driver/#avr_1","text":"Function Description analogReference(mode) Sets the analog voltage reference source. Must be one of ADC_REF_EXTERNAL , ADC_REF_POWER or ADC_REF_INTERNAL . analogReadPin(pin) Reads the value from the specified pin, eg. F6 for ADC6 on the ATmega32U4. pinToMux(pin) Translates a given pin to a mux value. If an unsupported pin is given, returns the mux value for \"0V (GND)\". adc_read(mux) Reads the value from the ADC according to the specified mux. See your MCU's datasheet for more information.","title":"AVR"},{"location":"adc_driver/#arm_1","text":"Function Description analogReadPin(pin) Reads the value from the specified pin, eg. A0 for channel 0 on the STM32F0 and ADC1 channel 1 on the STM32F3. Note that if a pin can be used for multiple ADCs, it will pick the lower numbered ADC for this function. eg. C0 will be channel 6 of ADC 1 when it could be used for ADC 2 as well. analogReadPinAdc(pin, adc) Reads the value from the specified pin and ADC, eg. C0, 1 will read from channel 6, ADC 2 instead of ADC 1. Note that the ADCs are 0-indexed for this function. pinToMux(pin) Translates a given pin to a channel and ADC combination. If an unsupported pin is given, returns the mux value for \"0V (GND)\". adc_read(mux) Reads the value from the ADC according to the specified pin and ADC combination. See your MCU's datasheet for more information.","title":"ARM"},{"location":"adc_driver/#configuration","text":"","title":"Configuration"},{"location":"adc_driver/#arm_2","text":"The ARM implementation of the ADC has a few additional options that you can override in your own keyboards and keymaps to change how it operates. Please consult the corresponding hal_adc_lld.h in ChibiOS for your specific microcontroller for further documentation on your available options. #define Type Default Description ADC_CIRCULAR_BUFFER bool false If true , then the implementation will use a circular buffer. ADC_NUM_CHANNELS int 1 Sets the number of channels that will be scanned as part of an ADC operation. The current implementation only supports 1 . ADC_BUFFER_DEPTH int 2 Sets the depth of each result. Since we are only getting a 10-bit result by default, we set this to 2 bytes so we can contain our one value. This could be set to 1 if you opt for an 8-bit or lower result. ADC_SAMPLING_RATE int ADC_SMPR_SMP_1P5 Sets the sampling rate of the ADC. By default, it is set to the fastest setting. ADC_RESOLUTION int ADC_CFGR1_RES_10BIT or ADC_CFGR_RES_10BITS The resolution of your result. We choose 10 bit by default, but you can opt for 12, 10, 8, or 6 bit. Different MCUs use slightly different names for the resolution constants.","title":"ARM"},{"location":"api_development_environment/","text":"Development Environment Setup \u00b6 To setup a development stack head over to the qmk_web_stack .","title":"Development Environment Setup"},{"location":"api_development_environment/#development-environment-setup","text":"To setup a development stack head over to the qmk_web_stack .","title":"Development Environment Setup"},{"location":"api_development_overview/","text":"QMK Compiler Development Guide \u00b6 This page attempts to introduce developers to the QMK Compiler. It does not go into nitty gritty details- for that you should read code. What this will give you is a framework to hang your understanding on as you read the code. Overview \u00b6 The QMK Compile API consists of a few movings parts: API Clients interact exclusively with the API service. This is where they submit jobs, check status, and download results. The API service inserts compile jobs into Redis Queue and checks both RQ and S3 for the results of those jobs. Workers fetch new compile jobs from RQ, compile them, and then upload the source and the binary to an S3 compatible storage engine. Workers \u00b6 QMK Compiler Workers are responsible for doing the actual building. When a worker pulls a job from RQ it does several things to complete that job: Make a fresh qmk_firmware checkout Use the supplied layers and keyboard metadata to build a keymap.c Build the firmware Zip a copy of the source Upload the firmware, source zip, and a metadata file to S3. Report the status of the job to RQ API Service \u00b6 The API service is a relatively simple Flask application. There are a few main views you should understand. @app.route('/v1/compile', methods=['POST']) \u00b6 This is the main entrypoint for the API. A client's interaction starts here. The client POST's a JSON document describing their keyboard, and the API does some (very) basic validation of that JSON before submitting the compile job. @app.route('/v1/compile/<string:job_id>', methods=['GET']) \u00b6 This is the most frequently called endpoint. It pulls the job details from redis, if they're still available, or the cached job details on S3 if they're not. @app.route('/v1/compile/<string:job_id>/download', methods=['GET']) \u00b6 This method allows users to download the compiled firmware file. @app.route('/v1/compile/<string:job_id>/source', methods=['GET']) \u00b6 This method allows users to download the source for their firmware.","title":"QMK Compiler Development Guide"},{"location":"api_development_overview/#qmk-compiler-development-guide","text":"This page attempts to introduce developers to the QMK Compiler. It does not go into nitty gritty details- for that you should read code. What this will give you is a framework to hang your understanding on as you read the code.","title":"QMK Compiler Development Guide"},{"location":"api_development_overview/#overview","text":"The QMK Compile API consists of a few movings parts: API Clients interact exclusively with the API service. This is where they submit jobs, check status, and download results. The API service inserts compile jobs into Redis Queue and checks both RQ and S3 for the results of those jobs. Workers fetch new compile jobs from RQ, compile them, and then upload the source and the binary to an S3 compatible storage engine.","title":"Overview"},{"location":"api_development_overview/#workers","text":"QMK Compiler Workers are responsible for doing the actual building. When a worker pulls a job from RQ it does several things to complete that job: Make a fresh qmk_firmware checkout Use the supplied layers and keyboard metadata to build a keymap.c Build the firmware Zip a copy of the source Upload the firmware, source zip, and a metadata file to S3. Report the status of the job to RQ","title":"Workers"},{"location":"api_development_overview/#api-service","text":"The API service is a relatively simple Flask application. There are a few main views you should understand.","title":"API Service"},{"location":"api_development_overview/#approutev1compile-methodspost","text":"This is the main entrypoint for the API. A client's interaction starts here. The client POST's a JSON document describing their keyboard, and the API does some (very) basic validation of that JSON before submitting the compile job.","title":"@app.route('/v1/compile', methods=['POST'])"},{"location":"api_development_overview/#approutev1compilestringjob_id-methodsget","text":"This is the most frequently called endpoint. It pulls the job details from redis, if they're still available, or the cached job details on S3 if they're not.","title":"@app.route('/v1/compile/&lt;string:job_id&gt;', methods=['GET'])"},{"location":"api_development_overview/#approutev1compilestringjob_iddownload-methodsget","text":"This method allows users to download the compiled firmware file.","title":"@app.route('/v1/compile/&lt;string:job_id&gt;/download', methods=['GET'])"},{"location":"api_development_overview/#approutev1compilestringjob_idsource-methodsget","text":"This method allows users to download the source for their firmware.","title":"@app.route('/v1/compile/&lt;string:job_id&gt;/source', methods=['GET'])"},{"location":"api_docs/","text":"QMK API \u00b6 This page describes using the QMK API. If you are an application developer you can use this API to compile firmware for any QMK Keyboard. Overview \u00b6 This service is an asynchronous API for compiling custom keymaps. You POST some JSON to the API, periodically check the status, and when your firmware has finished compiling you can download the resulting firmware and (if desired) source code for that firmware. Example JSON Payload: \u00b6 { \"keyboard\" : \"clueboard/66/rev2\" , \"keymap\" : \"my_awesome_keymap\" , \"layout\" : \"LAYOUT_all\" , \"layers\" : [ [ \"KC_GRV\" , \"KC_1\" , \"KC_2\" , \"KC_3\" , \"KC_4\" , \"KC_5\" , \"KC_6\" , \"KC_7\" , \"KC_8\" , \"KC_9\" , \"KC_0\" , \"KC_MINS\" , \"KC_EQL\" , \"KC_GRV\" , \"KC_BSPC\" , \"KC_PGUP\" , \"KC_TAB\" , \"KC_Q\" , \"KC_W\" , \"KC_E\" , \"KC_R\" , \"KC_T\" , \"KC_Y\" , \"KC_U\" , \"KC_I\" , \"KC_O\" , \"KC_P\" , \"KC_LBRC\" , \"KC_RBRC\" , \"KC_BSLS\" , \"KC_PGDN\" , \"KC_CAPS\" , \"KC_A\" , \"KC_S\" , \"KC_D\" , \"KC_F\" , \"KC_G\" , \"KC_H\" , \"KC_J\" , \"KC_K\" , \"KC_L\" , \"KC_SCLN\" , \"KC_QUOT\" , \"KC_NUHS\" , \"KC_ENT\" , \"KC_LSFT\" , \"KC_NUBS\" , \"KC_Z\" , \"KC_X\" , \"KC_C\" , \"KC_V\" , \"KC_B\" , \"KC_N\" , \"KC_M\" , \"KC_COMM\" , \"KC_DOT\" , \"KC_SLSH\" , \"KC_RO\" , \"KC_RSFT\" , \"KC_UP\" , \"KC_LCTL\" , \"KC_LGUI\" , \"KC_LALT\" , \"KC_MHEN\" , \"KC_SPC\" , \"KC_SPC\" , \"KC_HENK\" , \"KC_RALT\" , \"KC_RCTL\" , \"MO(1)\" , \"KC_LEFT\" , \"KC_DOWN\" , \"KC_RIGHT\" ], [ \"KC_ESC\" , \"KC_F1\" , \"KC_F2\" , \"KC_F3\" , \"KC_F4\" , \"KC_F5\" , \"KC_F6\" , \"KC_F7\" , \"KC_F8\" , \"KC_F9\" , \"KC_F10\" , \"KC_F11\" , \"KC_F12\" , \"KC_TRNS\" , \"KC_DEL\" , \"BL_STEP\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"_______\" , \"KC_TRNS\" , \"KC_PSCR\" , \"KC_SLCK\" , \"KC_PAUS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"MO(2)\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_PGUP\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"MO(1)\" , \"KC_LEFT\" , \"KC_PGDN\" , \"KC_RGHT\" ], [ \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"RESET\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"MO(2)\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"MO(1)\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" ] ] } As you can see the payload describes all aspects of a keyboard necessary to create and generate a firmware. Each layer is a single list of QMK keycodes the same length as the keyboard's LAYOUT macro. If a keyboard supports mulitple LAYOUT macros you can specify which macro to use. Submitting a Compile Job \u00b6 To compile your keymap into a firmware simply POST your JSON to the /v1/compile endpoint. In the following example we've placed the JSON payload into a file named json_data . $ curl -H \"Content-Type: application/json\" -X POST -d \"$(< json_data)\" https://api.qmk.fm/v1/compile { \"enqueued\": true, \"job_id\": \"ea1514b3-bdfc-4a7b-9b5c-08752684f7f6\" } Checking The Status \u00b6 After submitting your keymap you can check the status using a simple HTTP GET call: $ curl https://api.qmk.fm/v1/compile/ea1514b3-bdfc-4a7b-9b5c-08752684f7f6 { \"created_at\": \"Sat, 19 Aug 2017 21:39:12 GMT\", \"enqueued_at\": \"Sat, 19 Aug 2017 21:39:12 GMT\", \"id\": \"f5f9b992-73b4-479b-8236-df1deb37c163\", \"status\": \"running\", \"result\": null } This shows us that the job has made it through the queue and is currently running. There are 5 possible statuses: failed : Something about the compiling service has broken. finished : The compilation is complete and you should check result to see the results. queued : The keymap is waiting for a compilation server to become available. running : The compilation is in progress and should be complete soon. unknown : A serious error has occurred and you should file a bug . Examining Finished Results \u00b6 Once your compile job has finished you'll check the result key. The value of this key is a hash containing several key bits of information: firmware_binary_url : A list of URLs for the the flashable firmware firmware_keymap_url : A list of URLs for the the keymap.c firmware_source_url : A list of URLs for the full firmware source code output : The stdout and stderr for this compile job. Errors will be found here.","title":"QMK API"},{"location":"api_docs/#qmk-api","text":"This page describes using the QMK API. If you are an application developer you can use this API to compile firmware for any QMK Keyboard.","title":"QMK API"},{"location":"api_docs/#overview","text":"This service is an asynchronous API for compiling custom keymaps. You POST some JSON to the API, periodically check the status, and when your firmware has finished compiling you can download the resulting firmware and (if desired) source code for that firmware.","title":"Overview"},{"location":"api_docs/#submitting-a-compile-job","text":"To compile your keymap into a firmware simply POST your JSON to the /v1/compile endpoint. In the following example we've placed the JSON payload into a file named json_data . $ curl -H \"Content-Type: application/json\" -X POST -d \"$(< json_data)\" https://api.qmk.fm/v1/compile { \"enqueued\": true, \"job_id\": \"ea1514b3-bdfc-4a7b-9b5c-08752684f7f6\" }","title":"Submitting a Compile Job"},{"location":"api_docs/#checking-the-status","text":"After submitting your keymap you can check the status using a simple HTTP GET call: $ curl https://api.qmk.fm/v1/compile/ea1514b3-bdfc-4a7b-9b5c-08752684f7f6 { \"created_at\": \"Sat, 19 Aug 2017 21:39:12 GMT\", \"enqueued_at\": \"Sat, 19 Aug 2017 21:39:12 GMT\", \"id\": \"f5f9b992-73b4-479b-8236-df1deb37c163\", \"status\": \"running\", \"result\": null } This shows us that the job has made it through the queue and is currently running. There are 5 possible statuses: failed : Something about the compiling service has broken. finished : The compilation is complete and you should check result to see the results. queued : The keymap is waiting for a compilation server to become available. running : The compilation is in progress and should be complete soon. unknown : A serious error has occurred and you should file a bug .","title":"Checking The Status"},{"location":"api_docs/#examining-finished-results","text":"Once your compile job has finished you'll check the result key. The value of this key is a hash containing several key bits of information: firmware_binary_url : A list of URLs for the the flashable firmware firmware_keymap_url : A list of URLs for the the keymap.c firmware_source_url : A list of URLs for the full firmware source code output : The stdout and stderr for this compile job. Errors will be found here.","title":"Examining Finished Results"},{"location":"api_overview/","text":"QMK API \u00b6 The QMK API provides an asynchronous API that Web and GUI tools can use to compile arbitrary keymaps for any keyboard supported by QMK . The stock keymap template supports all QMK keycodes that do not require supporting C code. Keyboard maintainers can supply their own custom templates to enable more functionality. App Developers \u00b6 If you are an app developer interested in using this API in your application you should head over to Using The API . Keyboard Maintainers \u00b6 If you would like to enhance your keyboard's support in the QMK Compiler API head over to the Keyboard Support section. Backend Developers \u00b6 If you are interested in working on the API itself you should start by setting up a Development Environment , then check out Hacking On The API .","title":"QMK API"},{"location":"api_overview/#qmk-api","text":"The QMK API provides an asynchronous API that Web and GUI tools can use to compile arbitrary keymaps for any keyboard supported by QMK . The stock keymap template supports all QMK keycodes that do not require supporting C code. Keyboard maintainers can supply their own custom templates to enable more functionality.","title":"QMK API"},{"location":"api_overview/#app-developers","text":"If you are an app developer interested in using this API in your application you should head over to Using The API .","title":"App Developers"},{"location":"api_overview/#keyboard-maintainers","text":"If you would like to enhance your keyboard's support in the QMK Compiler API head over to the Keyboard Support section.","title":"Keyboard Maintainers"},{"location":"api_overview/#backend-developers","text":"If you are interested in working on the API itself you should start by setting up a Development Environment , then check out Hacking On The API .","title":"Backend Developers"},{"location":"arm_debugging/","text":"ARM Debugging using Eclipse \u00b6 This page describes how to setup debugging for ARM MCUs using an SWD adapter and open-source/free tools. In this guide we will install GNU MCU Eclipse IDE for C/C++ Developers and OpenOCD together with all the necessary dependencies. This guide is catered towards advance users and assumes you can compile an ARM compatible keyboard on your machine using the MAKE flow. Installing the software \u00b6 The main objective here is to get the MCU Eclipse IDE correctly installed on our machine. The necessary instructions are derived from this install guide. The xPack Manager \u00b6 This tool is a software package manager and it is used to help us get the necessary dependencies. XPM runs using Node.js so grab that from here . After installation, open a terminal and type npm -v . A reply with the version number means that the installation was successful. XPM installation instructions can be found here and are OS specific. Entering xpm --version to your terminal should return the software version. The ARM Toolchain \u00b6 Using XPM it is very easy to install the ARM toolchain. Enter the command xpm install --global @xpack-dev-tools/arm-none-eabi-gcc . Windows build tools \u00b6 If you are using windows you need to install this! xpm install --global @gnu-mcu-eclipse/windows-build-tools Programmer/Debugger Drivers \u00b6 Now it's time to install your programmer's drivers. This tutorial was made using an ST-Link v2 which you can get from almost anywhere. If you have an ST-Link the drivers can be found here otherwise consult the manufacturer of your tool. OpenOCD \u00b6 This dependency allows SWD access from GDB and it is essential for debugging. Run xpm install --global @xpack-dev-tools/openocd . Java \u00b6 Java is needed by Eclipse so please download it from here . GNU MCU Eclipse IDE \u00b6 Now its finally time to install the IDE. Use the Release page here to get the latest version. Configuring Eclipse \u00b6 Open up the Eclipse IDE we just downloaded. To import our QMK directory select File -> Import -> C/C++ -> Existing Code as Makefile Project. Select Next and use Browse to select your QMK folder. In the tool-chain list select ARM Cross GCC and select Finish. Now you can see the QMK folder on the left hand side. Right click it and select Properties. On the left hand side, expand MCU and select ARM Toolchains Paths. Press xPack and OK. Repeat for OpenOCD Path and if you are on Windows for Build Tools Path. Select Apply and Close. Now its time to install the necessary MCU packages. Go to Packs perspective by selecting Window -> Perspective -> Open Perspective -> Other... -> Packs. Now select the yellow refresh symbol next to the Packs tab. This will take a long time as it is requesting the MCU definitions from various places. If some of the links fail you can probably select Ignore. When this finishes you must find the MCU which we will be building/debugging for. In this example I will be using the STM32F3 series MCUs. On the left, select STMicroelectronics -> STM32F3 Series. On the middle window we can see the pack. Right click and select Install. Once that is done we can go back to the default perspective, Window -> Perspective -> Open Perspective -> Other... -> C/C++. We need to let eclipse know the device we intent to build QMK on. Right click on the QMK folder -> Properties -> C/C++ Build -> Settings. Select the Devices tab and under Devices select the appropriate variant of your MCU. For my example it is STM32F303CC While we are here let's setup the build command as well. Select C/C++ Build and then the Behavior tab. On the Build command, replace all with your necessary make command. For example for a rev6 Planck with the default keymap this would be planck/rev6:default . Select Apply and Close. Building \u00b6 If you have setup everything correctly pressing the hammer button should build the firmware for you and a .bin file should appear. Debugging \u00b6 Connecting the Debugger \u00b6 ARM MCUs use the Single Wire Debug (SWD) protocol which comprises of the clock (SWCLK) signal and the data (SWDIO) signal. Connecting this two wires and ground should be enough to allow full manipulation of the MCU. Here we assume that the keyboard will be powered though USB. The RESET signal is not necessary as we can manually assert it using the reset button. For a more advance setup, the SWO signal can be used which pipes printf and scanf asynchronously to the host but for our setup we will ignore it. NOTE: Make sure the SWCLK and SWDIO pins are not used in the matrix of your keyboard. If they are you can temporarily switch them for some other pins. Configuring the Debugger \u00b6 Right click on your QMK folder, select Debug As -> Debug Configurations... . Here double click on GDB OpenOCD Debugging. Select the Debugger tab and enter the configuration necessary for your MCU. This might take some fiddling and Googling to find out. The default script for the STM32F3 is called stm32f3discovery.cfg . To let OpenOCD know, in the Config options enter -f board/stm32f3discovery.cfg . NOTE: In my case this configuration script requires editing to disable the reset assertion. The locations of the scripts can be found in the actual executable field usually under the path openocd/version/.content/scripts/board . Here I edited reset_config srst_only to reset_config none . Select Apply and Close. Running the Debugger. \u00b6 Reset your keyboard. Press the bug icon and if all goes well you should soon find yourself in the Debug perspective. Here the program counter will pause at the beginning of the main function and wait for you to press Play. Most of the features of all debuggers work on Arm MCUs but for exact details Google is your friend! Happy debugging!","title":"ARM\u8c03\u8bd5\u6307\u5357"},{"location":"arm_debugging/#arm-debugging-using-eclipse","text":"This page describes how to setup debugging for ARM MCUs using an SWD adapter and open-source/free tools. In this guide we will install GNU MCU Eclipse IDE for C/C++ Developers and OpenOCD together with all the necessary dependencies. This guide is catered towards advance users and assumes you can compile an ARM compatible keyboard on your machine using the MAKE flow.","title":"ARM Debugging using Eclipse"},{"location":"arm_debugging/#installing-the-software","text":"The main objective here is to get the MCU Eclipse IDE correctly installed on our machine. The necessary instructions are derived from this install guide.","title":"Installing the software"},{"location":"arm_debugging/#the-xpack-manager","text":"This tool is a software package manager and it is used to help us get the necessary dependencies. XPM runs using Node.js so grab that from here . After installation, open a terminal and type npm -v . A reply with the version number means that the installation was successful. XPM installation instructions can be found here and are OS specific. Entering xpm --version to your terminal should return the software version.","title":"The xPack Manager"},{"location":"arm_debugging/#the-arm-toolchain","text":"Using XPM it is very easy to install the ARM toolchain. Enter the command xpm install --global @xpack-dev-tools/arm-none-eabi-gcc .","title":"The ARM Toolchain"},{"location":"arm_debugging/#windows-build-tools","text":"If you are using windows you need to install this! xpm install --global @gnu-mcu-eclipse/windows-build-tools","title":"Windows build tools"},{"location":"arm_debugging/#programmerdebugger-drivers","text":"Now it's time to install your programmer's drivers. This tutorial was made using an ST-Link v2 which you can get from almost anywhere. If you have an ST-Link the drivers can be found here otherwise consult the manufacturer of your tool.","title":"Programmer/Debugger Drivers"},{"location":"arm_debugging/#openocd","text":"This dependency allows SWD access from GDB and it is essential for debugging. Run xpm install --global @xpack-dev-tools/openocd .","title":"OpenOCD"},{"location":"arm_debugging/#java","text":"Java is needed by Eclipse so please download it from here .","title":"Java"},{"location":"arm_debugging/#gnu-mcu-eclipse-ide","text":"Now its finally time to install the IDE. Use the Release page here to get the latest version.","title":"GNU MCU Eclipse IDE"},{"location":"arm_debugging/#configuring-eclipse","text":"Open up the Eclipse IDE we just downloaded. To import our QMK directory select File -> Import -> C/C++ -> Existing Code as Makefile Project. Select Next and use Browse to select your QMK folder. In the tool-chain list select ARM Cross GCC and select Finish. Now you can see the QMK folder on the left hand side. Right click it and select Properties. On the left hand side, expand MCU and select ARM Toolchains Paths. Press xPack and OK. Repeat for OpenOCD Path and if you are on Windows for Build Tools Path. Select Apply and Close. Now its time to install the necessary MCU packages. Go to Packs perspective by selecting Window -> Perspective -> Open Perspective -> Other... -> Packs. Now select the yellow refresh symbol next to the Packs tab. This will take a long time as it is requesting the MCU definitions from various places. If some of the links fail you can probably select Ignore. When this finishes you must find the MCU which we will be building/debugging for. In this example I will be using the STM32F3 series MCUs. On the left, select STMicroelectronics -> STM32F3 Series. On the middle window we can see the pack. Right click and select Install. Once that is done we can go back to the default perspective, Window -> Perspective -> Open Perspective -> Other... -> C/C++. We need to let eclipse know the device we intent to build QMK on. Right click on the QMK folder -> Properties -> C/C++ Build -> Settings. Select the Devices tab and under Devices select the appropriate variant of your MCU. For my example it is STM32F303CC While we are here let's setup the build command as well. Select C/C++ Build and then the Behavior tab. On the Build command, replace all with your necessary make command. For example for a rev6 Planck with the default keymap this would be planck/rev6:default . Select Apply and Close.","title":"Configuring Eclipse"},{"location":"arm_debugging/#building","text":"If you have setup everything correctly pressing the hammer button should build the firmware for you and a .bin file should appear.","title":"Building"},{"location":"arm_debugging/#debugging","text":"","title":"Debugging"},{"location":"arm_debugging/#connecting-the-debugger","text":"ARM MCUs use the Single Wire Debug (SWD) protocol which comprises of the clock (SWCLK) signal and the data (SWDIO) signal. Connecting this two wires and ground should be enough to allow full manipulation of the MCU. Here we assume that the keyboard will be powered though USB. The RESET signal is not necessary as we can manually assert it using the reset button. For a more advance setup, the SWO signal can be used which pipes printf and scanf asynchronously to the host but for our setup we will ignore it. NOTE: Make sure the SWCLK and SWDIO pins are not used in the matrix of your keyboard. If they are you can temporarily switch them for some other pins.","title":"Connecting the Debugger"},{"location":"arm_debugging/#configuring-the-debugger","text":"Right click on your QMK folder, select Debug As -> Debug Configurations... . Here double click on GDB OpenOCD Debugging. Select the Debugger tab and enter the configuration necessary for your MCU. This might take some fiddling and Googling to find out. The default script for the STM32F3 is called stm32f3discovery.cfg . To let OpenOCD know, in the Config options enter -f board/stm32f3discovery.cfg . NOTE: In my case this configuration script requires editing to disable the reset assertion. The locations of the scripts can be found in the actual executable field usually under the path openocd/version/.content/scripts/board . Here I edited reset_config srst_only to reset_config none . Select Apply and Close.","title":"Configuring the Debugger"},{"location":"arm_debugging/#running-the-debugger","text":"Reset your keyboard. Press the bug icon and if all goes well you should soon find yourself in the Debug perspective. Here the program counter will pause at the beginning of the main function and wait for you to press Play. Most of the features of all debuggers work on Arm MCUs but for exact details Google is your friend! Happy debugging!","title":"Running the Debugger."},{"location":"audio_driver/","text":"Audio Driver \u00b6 The Audio feature breaks the hardware specifics out into separate, exchangeable driver units, with a common interface to the audio-\"core\" - which itself handles playing songs and notes while tracking their progress in an internal state, initializing/starting/stopping the driver as needed. Not all MCUs support every available driver, either the platform-support is not there (yet?) or the MCU simply does not have the required hardware peripheral. AVR \u00b6 Boards built around an Atmega32U4 can use two sets of PWM capable pins, each driving a separate speaker. The possible configurations are: Timer3 Timer1 one speaker C4,C5 or C6 one speaker B4, B5 or B7 two speakers C4,C5 or C6 B4, B5 or B7 Currently there is only one/default driver for AVR based boards, which is automatically configured to: AUDIO_DRIVER = pwm_hardware ARM \u00b6 For Arm based boards, QMK depends on ChibiOS - hence any MCU supported by the later is likely usable, as long as certain hardware peripherals are available. Supported wiring configurations, with their ChibiOS/MCU peripheral requirement are listed below; piezo speakers are marked with :one: for the first/primary and :two: for the secondary. driver GPTD6 Tim6 GPTD7 Tim7 GPTD8 Tim8 PWMD1 1 Tim1_Ch1 dac_basic A4+DACD1 = :one: A5+DACD2 = :one: state A4+DACD1 = :one: + Gnd A5+DACD2 = :two: + Gnd state A4+DACD1 = :two: + Gnd A5+DACD2 = :one: + Gnd state A4+DACD1 = :one: + Gnd state A5+DACD2 = :one: + Gnd state dac_additive A4+DACD1 = :one: + Gnd A5+DACD2 = :one: + Gnd A4+DACD1 + A5+DACD2 = :one: 2 pwm_software state-update any = :one: pwm hardware state-update A8 = :one: 3 1 : the routing and alternate functions for PWM differ sometimes between STM32 MCUs, if in doubt consult the data-sheet 2 : one piezo connected to A4 and A5, with AUDIO_PIN_ALT_AS_NEGATIVE set 3 : TIM1_CH1 = A8 on STM32F103C8, other combinations are possible, see Data-sheet. configured with: AUDIO_PWM_DRIVER and AUDIO_PWM_CHANNEL DAC basic \u00b6 The default driver for ARM boards, in absence of an overriding configuration. This driver needs one Timer per enabled/used DAC channel, to trigger conversion; and a third timer to trigger state updates with the audio-core. Additionally, in the board config, you'll want to make changes to enable the DACs, GPT for Timers 6, 7 and 8: //halconf.h: #define HAL_USE_DAC TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_DAC_USE_DAC1_CH1 #define STM32_DAC_USE_DAC1_CH1 TRUE #undef STM32_DAC_USE_DAC1_CH2 #define STM32_DAC_USE_DAC1_CH2 TRUE #undef STM32_GPT_USE_TIM6 #define STM32_GPT_USE_TIM6 TRUE #undef STM32_GPT_USE_TIM7 #define STM32_GPT_USE_TIM7 TRUE #undef STM32_GPT_USE_TIM8 #define STM32_GPT_USE_TIM8 TRUE Note DAC1 (A4) uses TIM6, DAC2 (A5) uses TIM7, and the audio state timer uses TIM8 (configurable). You can also change the timer used for the overall audio state by defining the driver. For instance: #define AUDIO_STATE_TIMER GPTD9 DAC additive \u00b6 only needs one timer (GPTD6, Tim6) to trigger the DAC unit to do a conversion; the audio state updates are in turn triggered during the DAC callback. Additionally, in the board config, you'll want to make changes to enable the DACs, GPT for Timer 6: //halconf.h: #define HAL_USE_DAC TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_DAC_USE_DAC1_CH1 #define STM32_DAC_USE_DAC1_CH1 TRUE #undef STM32_DAC_USE_DAC1_CH2 #define STM32_DAC_USE_DAC1_CH2 TRUE #undef STM32_GPT_USE_TIM6 #define STM32_GPT_USE_TIM6 TRUE DAC Config \u00b6 | Define | Defaults | Description --------------------------------------------------------------------------------------------- | | AUDIO_DAC_SAMPLE_MAX | 4095U | Highest value allowed. Lower value means lower volume. And 4095U is the upper limit, since this is limited to a 12 bit value. Only effects non-pregenerated samples. | | AUDIO_DAC_OFF_VALUE | AUDIO_DAC_SAMPLE_MAX / 2 | The value of the DAC when notplaying anything. Some setups may require a high ( AUDIO_DAC_SAMPLE_MAX ) or low ( 0 ) value here. | | AUDIO_MAX_SIMULTANEOUS_TONES | see next table | The number of tones that can be played simultaneously. A value that is too high may freeze the controller or glitch out when too many tones are being played. | | AUDIO_DAC_SAMPLE_RATE | see next table | Effective bit rate of the DAC (in hertz), higher limits simultaneous tones, and lower sacrifices quality. | There are a number of predefined quality settings that you can use, with \"sane minimum\" being the default. You can use custom values by simply defining the sample rate and number of simultaneous tones, instead of using one of the listed presets. | Define | Sample Rate | Simultaneous tones | | AUDIO_DAC_QUALITY_VERY_LOW | 11025U | 8 | | AUDIO_DAC_QUALITY_LOW | 22040U | 4 | | AUDIO_DAC_QUALITY_HIGH | 44100U | 2 | | AUDIO_DAC_QUALITY_VERY_HIGH | 88200U | 1 | | AUDIO_DAC_QUALITY_SANE_MINIMUM | 16384U | 8 | /* zero crossing (or approach, whereas zero == DAC_OFF_VALUE, which can be configured to anything from 0 to DAC_SAMPLE_MAX) * ============================*=*========================== AUDIO_DAC_SAMPLE_MAX * * * * * * * --------------------------------------------------------- * * * } AUDIO_DAC_SAMPLE_MAX/100 * --------------------------------------------------------- AUDIO_DAC_OFF_VALUE * * * } AUDIO_DAC_SAMPLE_MAX/100 * --------------------------------------------------------- * * * * * * * * * =====*=*================================================= 0x0 */ PWM hardware \u00b6 This driver uses the ChibiOS-PWM system to produce a square-wave on specific output pins that are connected to the PWM hardware. The hardware directly toggles the pin via its alternate function. See your MCU's data-sheet for which pin can be driven by what timer - looking for TIMx_CHy and the corresponding alternate function. A configuration example for the STM32F103C8 would be: //halconf.h: #define HAL_USE_PWM TRUE #define HAL_USE_PAL TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_PWM_USE_TIM1 #define STM32_PWM_USE_TIM1 TRUE #undef STM32_GPT_USE_TIM4 #define STM32_GPT_USE_TIM4 TRUE If we now target pin A8, looking through the data-sheet of the STM32F103C8, for the timers and alternate functions - TIM1_CH1 = PA8 <- alternate0 - TIM1_CH2 = PA9 - TIM1_CH3 = PA10 - TIM1_CH4 = PA11 with all this information, the configuration would contain these lines: //config.h: #define AUDIO_PIN A8 #define AUDIO_PWM_DRIVER PWMD1 #define AUDIO_PWM_CHANNEL 1 #define AUDIO_STATE_TIMER GPTD4 ChibiOS uses GPIOv1 for the F103, which only knows of one alternate function. On 'larger' STM32s, GPIOv2 or GPIOv3 are used; with them it is also necessary to configure AUDIO_PWM_PAL_MODE to the correct alternate function for the selected pin, timer and timer-channel. PWM software \u00b6 This driver uses the PWM callbacks from PWMD1 with TIM1_CH1 to toggle the selected AUDIO_PIN in software. During the same callback, with AUDIO_PIN_ALT_AS_NEGATIVE set, the AUDIO_PIN_ALT is toggled inversely to AUDIO_PIN. This is useful for setups that drive a piezo from two pins (instead of one and Gnd). You can also change the timer used for software PWM by defining the driver. For instance: #define AUDIO_STATE_TIMER GPTD8 Testing Notes \u00b6 While not an exhaustive list, the following table provides the scenarios that have been partially validated: DAC basic DAC additive PWM hardware PWM software Atmega32U4 :o: :o: :heavy_check_mark: :o: STM32F103C8 (bluepill) :x: :x: :heavy_check_mark: :heavy_check_mark: STM32F303CCT6 (proton-c) :heavy_check_mark: :heavy_check_mark: ? :heavy_check_mark: STM32F405VG :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: L0xx :x: (no Tim8) ? ? ? :heavy_check_mark: : works and was tested :o: : does not apply :x: : not supported by MCU Other supported ChibiOS boards and/or pins may function, it will be highly chip and configuration dependent.","title":"Audio Driver {: id=audio-driver }"},{"location":"audio_driver/#audio-driver","text":"The Audio feature breaks the hardware specifics out into separate, exchangeable driver units, with a common interface to the audio-\"core\" - which itself handles playing songs and notes while tracking their progress in an internal state, initializing/starting/stopping the driver as needed. Not all MCUs support every available driver, either the platform-support is not there (yet?) or the MCU simply does not have the required hardware peripheral.","title":"Audio Driver"},{"location":"audio_driver/#avr","text":"Boards built around an Atmega32U4 can use two sets of PWM capable pins, each driving a separate speaker. The possible configurations are: Timer3 Timer1 one speaker C4,C5 or C6 one speaker B4, B5 or B7 two speakers C4,C5 or C6 B4, B5 or B7 Currently there is only one/default driver for AVR based boards, which is automatically configured to: AUDIO_DRIVER = pwm_hardware","title":"AVR"},{"location":"audio_driver/#arm","text":"For Arm based boards, QMK depends on ChibiOS - hence any MCU supported by the later is likely usable, as long as certain hardware peripherals are available. Supported wiring configurations, with their ChibiOS/MCU peripheral requirement are listed below; piezo speakers are marked with :one: for the first/primary and :two: for the secondary. driver GPTD6 Tim6 GPTD7 Tim7 GPTD8 Tim8 PWMD1 1 Tim1_Ch1 dac_basic A4+DACD1 = :one: A5+DACD2 = :one: state A4+DACD1 = :one: + Gnd A5+DACD2 = :two: + Gnd state A4+DACD1 = :two: + Gnd A5+DACD2 = :one: + Gnd state A4+DACD1 = :one: + Gnd state A5+DACD2 = :one: + Gnd state dac_additive A4+DACD1 = :one: + Gnd A5+DACD2 = :one: + Gnd A4+DACD1 + A5+DACD2 = :one: 2 pwm_software state-update any = :one: pwm hardware state-update A8 = :one: 3 1 : the routing and alternate functions for PWM differ sometimes between STM32 MCUs, if in doubt consult the data-sheet 2 : one piezo connected to A4 and A5, with AUDIO_PIN_ALT_AS_NEGATIVE set 3 : TIM1_CH1 = A8 on STM32F103C8, other combinations are possible, see Data-sheet. configured with: AUDIO_PWM_DRIVER and AUDIO_PWM_CHANNEL","title":"ARM"},{"location":"audio_driver/#dac-basic","text":"The default driver for ARM boards, in absence of an overriding configuration. This driver needs one Timer per enabled/used DAC channel, to trigger conversion; and a third timer to trigger state updates with the audio-core. Additionally, in the board config, you'll want to make changes to enable the DACs, GPT for Timers 6, 7 and 8: //halconf.h: #define HAL_USE_DAC TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_DAC_USE_DAC1_CH1 #define STM32_DAC_USE_DAC1_CH1 TRUE #undef STM32_DAC_USE_DAC1_CH2 #define STM32_DAC_USE_DAC1_CH2 TRUE #undef STM32_GPT_USE_TIM6 #define STM32_GPT_USE_TIM6 TRUE #undef STM32_GPT_USE_TIM7 #define STM32_GPT_USE_TIM7 TRUE #undef STM32_GPT_USE_TIM8 #define STM32_GPT_USE_TIM8 TRUE Note DAC1 (A4) uses TIM6, DAC2 (A5) uses TIM7, and the audio state timer uses TIM8 (configurable). You can also change the timer used for the overall audio state by defining the driver. For instance: #define AUDIO_STATE_TIMER GPTD9","title":"DAC basic"},{"location":"audio_driver/#dac-additive","text":"only needs one timer (GPTD6, Tim6) to trigger the DAC unit to do a conversion; the audio state updates are in turn triggered during the DAC callback. Additionally, in the board config, you'll want to make changes to enable the DACs, GPT for Timer 6: //halconf.h: #define HAL_USE_DAC TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_DAC_USE_DAC1_CH1 #define STM32_DAC_USE_DAC1_CH1 TRUE #undef STM32_DAC_USE_DAC1_CH2 #define STM32_DAC_USE_DAC1_CH2 TRUE #undef STM32_GPT_USE_TIM6 #define STM32_GPT_USE_TIM6 TRUE","title":"DAC additive"},{"location":"audio_driver/#dac-config","text":"| Define | Defaults | Description --------------------------------------------------------------------------------------------- | | AUDIO_DAC_SAMPLE_MAX | 4095U | Highest value allowed. Lower value means lower volume. And 4095U is the upper limit, since this is limited to a 12 bit value. Only effects non-pregenerated samples. | | AUDIO_DAC_OFF_VALUE | AUDIO_DAC_SAMPLE_MAX / 2 | The value of the DAC when notplaying anything. Some setups may require a high ( AUDIO_DAC_SAMPLE_MAX ) or low ( 0 ) value here. | | AUDIO_MAX_SIMULTANEOUS_TONES | see next table | The number of tones that can be played simultaneously. A value that is too high may freeze the controller or glitch out when too many tones are being played. | | AUDIO_DAC_SAMPLE_RATE | see next table | Effective bit rate of the DAC (in hertz), higher limits simultaneous tones, and lower sacrifices quality. | There are a number of predefined quality settings that you can use, with \"sane minimum\" being the default. You can use custom values by simply defining the sample rate and number of simultaneous tones, instead of using one of the listed presets. | Define | Sample Rate | Simultaneous tones | | AUDIO_DAC_QUALITY_VERY_LOW | 11025U | 8 | | AUDIO_DAC_QUALITY_LOW | 22040U | 4 | | AUDIO_DAC_QUALITY_HIGH | 44100U | 2 | | AUDIO_DAC_QUALITY_VERY_HIGH | 88200U | 1 | | AUDIO_DAC_QUALITY_SANE_MINIMUM | 16384U | 8 | /* zero crossing (or approach, whereas zero == DAC_OFF_VALUE, which can be configured to anything from 0 to DAC_SAMPLE_MAX) * ============================*=*========================== AUDIO_DAC_SAMPLE_MAX * * * * * * * --------------------------------------------------------- * * * } AUDIO_DAC_SAMPLE_MAX/100 * --------------------------------------------------------- AUDIO_DAC_OFF_VALUE * * * } AUDIO_DAC_SAMPLE_MAX/100 * --------------------------------------------------------- * * * * * * * * * =====*=*================================================= 0x0 */","title":"DAC Config"},{"location":"audio_driver/#pwm-hardware","text":"This driver uses the ChibiOS-PWM system to produce a square-wave on specific output pins that are connected to the PWM hardware. The hardware directly toggles the pin via its alternate function. See your MCU's data-sheet for which pin can be driven by what timer - looking for TIMx_CHy and the corresponding alternate function. A configuration example for the STM32F103C8 would be: //halconf.h: #define HAL_USE_PWM TRUE #define HAL_USE_PAL TRUE #define HAL_USE_GPT TRUE #include_next <halconf.h> // mcuconf.h: #include_next <mcuconf.h> #undef STM32_PWM_USE_TIM1 #define STM32_PWM_USE_TIM1 TRUE #undef STM32_GPT_USE_TIM4 #define STM32_GPT_USE_TIM4 TRUE If we now target pin A8, looking through the data-sheet of the STM32F103C8, for the timers and alternate functions - TIM1_CH1 = PA8 <- alternate0 - TIM1_CH2 = PA9 - TIM1_CH3 = PA10 - TIM1_CH4 = PA11 with all this information, the configuration would contain these lines: //config.h: #define AUDIO_PIN A8 #define AUDIO_PWM_DRIVER PWMD1 #define AUDIO_PWM_CHANNEL 1 #define AUDIO_STATE_TIMER GPTD4 ChibiOS uses GPIOv1 for the F103, which only knows of one alternate function. On 'larger' STM32s, GPIOv2 or GPIOv3 are used; with them it is also necessary to configure AUDIO_PWM_PAL_MODE to the correct alternate function for the selected pin, timer and timer-channel.","title":"PWM hardware"},{"location":"audio_driver/#pwm-software","text":"This driver uses the PWM callbacks from PWMD1 with TIM1_CH1 to toggle the selected AUDIO_PIN in software. During the same callback, with AUDIO_PIN_ALT_AS_NEGATIVE set, the AUDIO_PIN_ALT is toggled inversely to AUDIO_PIN. This is useful for setups that drive a piezo from two pins (instead of one and Gnd). You can also change the timer used for software PWM by defining the driver. For instance: #define AUDIO_STATE_TIMER GPTD8","title":"PWM software"},{"location":"audio_driver/#testing-notes","text":"While not an exhaustive list, the following table provides the scenarios that have been partially validated: DAC basic DAC additive PWM hardware PWM software Atmega32U4 :o: :o: :heavy_check_mark: :o: STM32F103C8 (bluepill) :x: :x: :heavy_check_mark: :heavy_check_mark: STM32F303CCT6 (proton-c) :heavy_check_mark: :heavy_check_mark: ? :heavy_check_mark: STM32F405VG :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: :heavy_check_mark: L0xx :x: (no Tim8) ? ? ? :heavy_check_mark: : works and was tested :o: : does not apply :x: : not supported by MCU Other supported ChibiOS boards and/or pins may function, it will be highly chip and configuration dependent.","title":"Testing Notes"},{"location":"breaking_changes/","text":"Breaking Changes \u00b6 This document describes QMK's Breaking Change process. A Breaking Change is any change which modifies how QMK behaves in a way that in incompatible or potentially dangerous. We limit these changes so that users can have confidence that updating their QMK tree will not break their keymaps. The breaking change period is when we will merge PR's that change QMK in dangerous or unexpected ways. There is a built-in period of testing so we are confident that any problems caused are rare or unable to be predicted. What has been included in past Breaking Changes? \u00b6 2021 May 29 2021 Feb 27 2020 Nov 28 2020 Aug 29 2020 May 30 2020 Feb 29 2019 Aug 30 When is the next Breaking Change? \u00b6 The next Breaking Change is scheduled for August 28, 2021. Important Dates \u00b6 2021 May 29 - develop is created. Each push to master is subsequently merged to develop 2021 Jul 31 - develop closed to new PR's. 2021 Jul 31 - Call for testers. 2021 Aug 26 - master is locked, no PR's merged. 2021 Aug 28 - Merge develop to master . 2021 Aug 28 - master is unlocked. PR's can be merged again. What changes will be included? \u00b6 To see a list of breaking change candidates you can look at the breaking_change label . New changes might be added between now and when develop is closed, and a PR with that label applied is not guaranteed to be merged. If you want your breaking change to be included in this round you need to create a PR with the breaking_change label and have it accepted before develop closes. After develop closes no new breaking changes will be accepted. Criteria for acceptance: PR is complete and ready to merge PR has a ChangeLog Checklists \u00b6 This section documents various processes we use when running the Breaking Changes process. Creating the develop branch \u00b6 This happens immediately after the previous develop branch is merged. qmk_firmware git commands git checkout master git pull --ff-only git checkout -b develop Edit readme.md Add a big notice at the top that this is a testing branch. Include a link to this document git commit -m 'Branch point for <DATE> Breaking Change' git tag breakpoint_<YYYY>_<MM>_<DD> git tag <next_version> # Prevent the breakpoint tag from confusing version incrementing git push upstream develop git push --tags 4 Weeks Before Merge \u00b6 develop is now closed to new PR's, only fixes for current PR's may be merged Post call for testers Discord GitHub PR https://reddit.com/r/olkb 1 Week Before Merge \u00b6 Announce that master will be closed from <2 Days Before> to Discord GitHub PR https://reddit.com/r/olkb 2 Days Before Merge \u00b6 Announce that master is closed for 2 days Discord GitHub PR https://reddit.com/r/olkb Day Of Merge \u00b6 qmk_firmware git commands git checkout develop git pull --ff-only Edit readme.md Remove the notes about develop Roll up the ChangeLog into one file. git commit -m 'Merge point for <DATE> Breaking Change' git push upstream develop GitHub Actions Create a PR for develop Make sure travis comes back clean Turn off 'Automatically delete head branches' for the repository -- confirm with @qmk/directors that it is done before continuing qmk_firmware git commands git checkout master git pull --ff-only git merge --no-ff develop git push upstream master","title":"Overview"},{"location":"breaking_changes/#breaking-changes","text":"This document describes QMK's Breaking Change process. A Breaking Change is any change which modifies how QMK behaves in a way that in incompatible or potentially dangerous. We limit these changes so that users can have confidence that updating their QMK tree will not break their keymaps. The breaking change period is when we will merge PR's that change QMK in dangerous or unexpected ways. There is a built-in period of testing so we are confident that any problems caused are rare or unable to be predicted.","title":"Breaking Changes"},{"location":"breaking_changes/#what-has-been-included-in-past-breaking-changes","text":"2021 May 29 2021 Feb 27 2020 Nov 28 2020 Aug 29 2020 May 30 2020 Feb 29 2019 Aug 30","title":"What has been included in past Breaking Changes?"},{"location":"breaking_changes/#when-is-the-next-breaking-change","text":"The next Breaking Change is scheduled for August 28, 2021.","title":"When is the next Breaking Change?"},{"location":"breaking_changes/#important-dates","text":"2021 May 29 - develop is created. Each push to master is subsequently merged to develop 2021 Jul 31 - develop closed to new PR's. 2021 Jul 31 - Call for testers. 2021 Aug 26 - master is locked, no PR's merged. 2021 Aug 28 - Merge develop to master . 2021 Aug 28 - master is unlocked. PR's can be merged again.","title":"Important Dates"},{"location":"breaking_changes/#what-changes-will-be-included","text":"To see a list of breaking change candidates you can look at the breaking_change label . New changes might be added between now and when develop is closed, and a PR with that label applied is not guaranteed to be merged. If you want your breaking change to be included in this round you need to create a PR with the breaking_change label and have it accepted before develop closes. After develop closes no new breaking changes will be accepted. Criteria for acceptance: PR is complete and ready to merge PR has a ChangeLog","title":"What changes will be included?"},{"location":"breaking_changes/#checklists","text":"This section documents various processes we use when running the Breaking Changes process.","title":"Checklists"},{"location":"breaking_changes/#creating-the-develop-branch","text":"This happens immediately after the previous develop branch is merged. qmk_firmware git commands git checkout master git pull --ff-only git checkout -b develop Edit readme.md Add a big notice at the top that this is a testing branch. Include a link to this document git commit -m 'Branch point for <DATE> Breaking Change' git tag breakpoint_<YYYY>_<MM>_<DD> git tag <next_version> # Prevent the breakpoint tag from confusing version incrementing git push upstream develop git push --tags","title":"Creating the develop branch"},{"location":"breaking_changes/#4-weeks-before-merge","text":"develop is now closed to new PR's, only fixes for current PR's may be merged Post call for testers Discord GitHub PR https://reddit.com/r/olkb","title":"4 Weeks Before Merge"},{"location":"breaking_changes/#1-week-before-merge","text":"Announce that master will be closed from <2 Days Before> to Discord GitHub PR https://reddit.com/r/olkb","title":"1 Week Before Merge"},{"location":"breaking_changes/#2-days-before-merge","text":"Announce that master is closed for 2 days Discord GitHub PR https://reddit.com/r/olkb","title":"2 Days Before Merge"},{"location":"breaking_changes/#day-of-merge","text":"qmk_firmware git commands git checkout develop git pull --ff-only Edit readme.md Remove the notes about develop Roll up the ChangeLog into one file. git commit -m 'Merge point for <DATE> Breaking Change' git push upstream develop GitHub Actions Create a PR for develop Make sure travis comes back clean Turn off 'Automatically delete head branches' for the repository -- confirm with @qmk/directors that it is done before continuing qmk_firmware git commands git checkout master git pull --ff-only git merge --no-ff develop git push upstream master","title":"Day Of Merge"},{"location":"breaking_changes_history/","text":"Past Breaking Changes \u00b6 This page links to all previous changelogs from the QMK Breaking Changes process. 2021 May 29 - version 0.13.0 2021 Feb 27 - version 0.12.0 2020 Nov 28 - version 0.11.0 2020 Aug 29 - version 0.10.0 2020 May 30 - version 0.9.0 2020 Feb 29 - version 0.8.0 2019 Aug 30 - version 0.7.0","title":"Past Breaking Changes"},{"location":"breaking_changes_history/#past-breaking-changes","text":"This page links to all previous changelogs from the QMK Breaking Changes process. 2021 May 29 - version 0.13.0 2021 Feb 27 - version 0.12.0 2020 Nov 28 - version 0.11.0 2020 Aug 29 - version 0.10.0 2020 May 30 - version 0.9.0 2020 Feb 29 - version 0.8.0 2019 Aug 30 - version 0.7.0","title":"Past Breaking Changes"},{"location":"breaking_changes_instructions/","text":"Breaking Changes: My Pull Request Was Flagged \u00b6 A QMK member may have replied to your pull request stating that your submission is a breaking change. In their judgment, the changes you have proposed have greater implications for either QMK, or its users. Some things that may cause a pull request to be flagged are: Edits to User Keymaps A user may submit their keymap to QMK, then some time later open a pull request with further updates, only to find it can't be merged because it was edited in the qmk/qmk_firmware repository. As not all users are proficient at using Git or GitHub, the user may find themself unable to fix the issue on their own. Changes to Expected Behavior Changes to QMK behavior may cause users to believe their hardware or QMK is broken if they flash new firmware that incorporates changes to existing QMK features, and find themselves without a means to restore the desired behavior. Changes Requiring User Action Changes may also require action to be taken by users, such as updating a toolchain or taking some action in Git. Changes Necessitating Increased Scrutiny On occasion, a submission may have implications for QMK as a project. This could be copyright/licensing issues, coding conventions, large feature overhauls, \"high-risk\" changes that need wider testing by our community, or something else entirely. Changes Requiring Communication to End Users This includes warnings about future deprecations, outdated practices, and anything else that needs to be communicated but doesn't fit into one of the above categories. What Do I Do? \u00b6 If it is determined that your submission is a breaking change, there are a few things you can do to smooth the process: Consider Splitting Up Your PR \u00b6 If you are contributing core code, and the only reason it needs to go through breaking changes is that you are updating keymaps to match your change, consider whether you can submit your feature in a way that the old keymaps continue to work. Then submit a separate PR that goes through the breaking changes process to remove the old code. Contribute a ChangeLog Entry \u00b6 We require submissions that go through the Breaking Change process to include a changelog entry. The entry should be a short summary of the changes your pull request makes \u2013 each section here started as a changelog . Your changelog should be located at docs/ChangeLog/YYYYMMDD/PR####.md , where YYYYMMDD is the date on which QMK's breaking change branch \u2013 usually named develop \u2013 will be merged into the master branch, and #### is the number of your pull request. If your submission requires action on the part of users, your changelog should instruct users what action(s) must be taken, or link to a location that does so. Document Your Changes \u00b6 Understanding the purpose for your submission, and possible implications or actions it will require can make the review process more straightforward. A changelog may suffice for this purpose, but more extensive changes may require a level of detail that is ill-suited for a changelog. Commenting on your pull request and being responsive to questions, comments, and change requests is much appreciated. Ask for Help \u00b6 Having your submission flagged may have caught you off guard. If you find yourself intimidated or overwhelmed, let us know. Comment on your pull request, or reach out to the QMK team on Discord .","title":"\u6211\u7684PR\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e3a\u975e\u517c\u5bb9\u6027\u4fee\u6539"},{"location":"breaking_changes_instructions/#breaking-changes-my-pull-request-was-flagged","text":"A QMK member may have replied to your pull request stating that your submission is a breaking change. In their judgment, the changes you have proposed have greater implications for either QMK, or its users. Some things that may cause a pull request to be flagged are: Edits to User Keymaps A user may submit their keymap to QMK, then some time later open a pull request with further updates, only to find it can't be merged because it was edited in the qmk/qmk_firmware repository. As not all users are proficient at using Git or GitHub, the user may find themself unable to fix the issue on their own. Changes to Expected Behavior Changes to QMK behavior may cause users to believe their hardware or QMK is broken if they flash new firmware that incorporates changes to existing QMK features, and find themselves without a means to restore the desired behavior. Changes Requiring User Action Changes may also require action to be taken by users, such as updating a toolchain or taking some action in Git. Changes Necessitating Increased Scrutiny On occasion, a submission may have implications for QMK as a project. This could be copyright/licensing issues, coding conventions, large feature overhauls, \"high-risk\" changes that need wider testing by our community, or something else entirely. Changes Requiring Communication to End Users This includes warnings about future deprecations, outdated practices, and anything else that needs to be communicated but doesn't fit into one of the above categories.","title":"Breaking Changes: My Pull Request Was Flagged"},{"location":"breaking_changes_instructions/#what-do-i-do","text":"If it is determined that your submission is a breaking change, there are a few things you can do to smooth the process:","title":"What Do I Do?"},{"location":"breaking_changes_instructions/#consider-splitting-up-your-pr","text":"If you are contributing core code, and the only reason it needs to go through breaking changes is that you are updating keymaps to match your change, consider whether you can submit your feature in a way that the old keymaps continue to work. Then submit a separate PR that goes through the breaking changes process to remove the old code.","title":"Consider Splitting Up Your PR"},{"location":"breaking_changes_instructions/#contribute-a-changelog-entry","text":"We require submissions that go through the Breaking Change process to include a changelog entry. The entry should be a short summary of the changes your pull request makes \u2013 each section here started as a changelog . Your changelog should be located at docs/ChangeLog/YYYYMMDD/PR####.md , where YYYYMMDD is the date on which QMK's breaking change branch \u2013 usually named develop \u2013 will be merged into the master branch, and #### is the number of your pull request. If your submission requires action on the part of users, your changelog should instruct users what action(s) must be taken, or link to a location that does so.","title":"Contribute a ChangeLog Entry"},{"location":"breaking_changes_instructions/#document-your-changes","text":"Understanding the purpose for your submission, and possible implications or actions it will require can make the review process more straightforward. A changelog may suffice for this purpose, but more extensive changes may require a level of detail that is ill-suited for a changelog. Commenting on your pull request and being responsive to questions, comments, and change requests is much appreciated.","title":"Document Your Changes"},{"location":"breaking_changes_instructions/#ask-for-help","text":"Having your submission flagged may have caught you off guard. If you find yourself intimidated or overwhelmed, let us know. Comment on your pull request, or reach out to the QMK team on Discord .","title":"Ask for Help"},{"location":"cli/","text":"QMK CLI \u00b6 Overview \u00b6 The QMK CLI makes building and working with QMK keyboards easier. We have provided a number of commands to simplify and streamline tasks such as obtaining and compiling the QMK firmware, creating keymaps, and more. Requirements \u00b6 QMK requires Python 3.6 or greater. We try to keep the number of requirements small but you will also need to install the packages listed in requirements.txt . These are installed automatically when you install the QMK CLI. Install Using Homebrew (macOS, some Linux) \u00b6 If you have installed Homebrew you can tap and install QMK: brew install qmk/qmk/qmk export QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware` qmk setup # This will clone `qmk/qmk_firmware` and optionally set up your build environment Install Using pip {: id=install-using-easy }_install-or-pip \u00b6 If your system is not listed above you can install QMK manually. First ensure that you have Python 3.6 (or later) installed and have installed pip. Then install QMK with this command: python3 -m pip install qmk export QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware` qmk setup # This will clone `qmk/qmk_firmware` and optionally set up your build environment Packaging For Other Operating Systems \u00b6 We are looking for people to create and maintain a qmk package for more operating systems. If you would like to create a package for your OS please follow these guidelines: Follow best practices for your OS when they conflict with these guidelines Document why in a comment when you do deviate Install using a virtualenv Instruct the user to set the environment variable QMK_HOME to have the firmware source checked out somewhere other than ~/qmk_firmware .","title":"QMK\u547d\u4ee4\u884c\u5de5\u5177"},{"location":"cli/#qmk-cli","text":"","title":"QMK CLI"},{"location":"cli/#overview","text":"The QMK CLI makes building and working with QMK keyboards easier. We have provided a number of commands to simplify and streamline tasks such as obtaining and compiling the QMK firmware, creating keymaps, and more.","title":"Overview"},{"location":"cli/#requirements","text":"QMK requires Python 3.6 or greater. We try to keep the number of requirements small but you will also need to install the packages listed in requirements.txt . These are installed automatically when you install the QMK CLI.","title":"Requirements"},{"location":"cli/#install-using-homebrew","text":"If you have installed Homebrew you can tap and install QMK: brew install qmk/qmk/qmk export QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware` qmk setup # This will clone `qmk/qmk_firmware` and optionally set up your build environment","title":"Install Using Homebrew (macOS, some Linux)"},{"location":"cli/#install-using-pip-idinstall-using-easy-_install-or-pip","text":"If your system is not listed above you can install QMK manually. First ensure that you have Python 3.6 (or later) installed and have installed pip. Then install QMK with this command: python3 -m pip install qmk export QMK_HOME='~/qmk_firmware' # Optional, set the location for `qmk_firmware` qmk setup # This will clone `qmk/qmk_firmware` and optionally set up your build environment","title":"Install Using pip {: id=install-using-easy }_install-or-pip"},{"location":"cli/#packaging-for-other-operating-systems","text":"We are looking for people to create and maintain a qmk package for more operating systems. If you would like to create a package for your OS please follow these guidelines: Follow best practices for your OS when they conflict with these guidelines Document why in a comment when you do deviate Install using a virtualenv Instruct the user to set the environment variable QMK_HOME to have the firmware source checked out somewhere other than ~/qmk_firmware .","title":"Packaging For Other Operating Systems"},{"location":"cli_commands/","text":"QMK CLI Commands \u00b6 User Commands \u00b6 qmk compile \u00b6 This command allows you to compile firmware from any directory. You can compile JSON exports from https://config.qmk.fm , compile keymaps in the repo, or compile the keyboard in the current working directory. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage for Configurator Exports : qmk compile [-c] <configuratorExport.json> Usage for Keymaps : qmk compile [-c] [-e <var>=<value>] -kb <keyboard_name> -km <keymap_name> Usage in Keyboard Directory : Must be in keyboard directory with a default keymap, or in keymap directory for keyboard, or supply one with --keymap <keymap_name> qmk compile Usage for building all keyboards that support a specific keymap : qmk compile -kb all -km <keymap_name> Example : $ qmk config compile.keymap=default $ cd ~/qmk_firmware/keyboards/planck/rev6 $ qmk compile \u03a8 Compiling keymap with make planck/rev6:default ... or with optional keymap argument $ cd ~/qmk_firmware/keyboards/clueboard/66/rev4 $ qmk compile -km 66_iso \u03a8 Compiling keymap with make clueboard/66/rev4:66_iso ... or in keymap directory $ cd ~/qmk_firmware/keyboards/gh60/satan/keymaps/colemak $ qmk compile \u03a8 Compiling keymap with make make gh60/satan:colemak ... Usage in Layout Directory : Must be under qmk_firmware/layouts/ , and in a keymap folder. qmk compile -kb <keyboard_name> Example : $ cd ~/qmk_firmware/layouts/community/60_ansi/mechmerlin-ansi $ qmk compile -kb dz60 \u03a8 Compiling keymap with make dz60:mechmerlin-ansi ... qmk flash \u00b6 This command is similar to qmk compile , but can also target a bootloader. The bootloader is optional, and is set to :flash by default. To specify a different bootloader, use -bl <bootloader> . Visit the Flashing Firmware guide for more details of the available bootloaders. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage for Configurator Exports : qmk flash [-bl <bootloader>] [-c] [-e <var>=<value>] <configuratorExport.json> Usage for Keymaps : qmk flash -kb <keyboard_name> -km <keymap_name> [-bl <bootloader>] [-c] [-e <var>=<value>] Listing the Bootloaders qmk flash -b qmk config \u00b6 This command lets you configure the behavior of QMK. For the full qmk config documentation see CLI Configuration . Usage : qmk config [-ro] [config_token1] [config_token2] [...] [config_tokenN] qmk console \u00b6 This command lets you connect to keyboard consoles to get debugging messages. It only works if your keyboard firmware has been compiled with CONSOLE_ENABLED=yes . Usage : qmk console [-d <pid>:<vid>[:<index>]] [-l] [-n] [-t] [-w <seconds>] Examples : Connect to all available keyboards and show their console messages: qmk console List all devices: qmk console -l Show only messages from clueboard/66/rev3 keyboards: qmk console -d C1ED:2370 Show only messages from the second clueboard/66/rev3: qmk console -d C1ED:2370:2 Show timestamps and VID:PID instead of names: qmk console -n -t Disable bootloader messages: qmk console --no-bootloaders qmk doctor \u00b6 This command examines your environment and alerts you to potential build or flash problems. It can fix many of them if you want it to. Usage : qmk doctor [-y] [-n] Examples : Check your environment for problems and prompt to fix them: qmk doctor Check your environment and automatically fix any problems found: qmk doctor -y Check your environment and report problems only: qmk doctor -n qmk format-json \u00b6 Formats a JSON file in a (mostly) human-friendly way. Will usually correctly detect the format of the JSON (info.json or keymap.json) but you can override this with --format if neccesary. Usage : qmk format-json [-f FORMAT] <json_file> qmk info \u00b6 Displays information about keyboards and keymaps in QMK. You can use this to get information about a keyboard, show the layouts, display the underlying key matrix, or to pretty-print JSON keymaps. Usage : qmk info [-f FORMAT] [-m] [-l] [-km KEYMAP] [-kb KEYBOARD] This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Examples : Show basic information for a keyboard: qmk info -kb planck/rev5 Show the matrix for a keyboard: qmk info -kb ergodox_ez -m Show a JSON keymap for a keyboard: qmk info -kb clueboard/california -km default qmk json2c \u00b6 Creates a keymap.c from a QMK Configurator export. Usage : qmk json2c [-o OUTPUT] filename qmk c2json \u00b6 Creates a keymap.json from a keymap.c. Note: Parsing C source files is not easy, therefore this subcommand may not work with your keymap. In some cases not using the C pre-processor helps. Usage : qmk c2json -km KEYMAP -kb KEYBOARD [-q] [--no-cpp] [-o OUTPUT] filename qmk lint \u00b6 Checks over a keyboard and/or keymap and highlights common errors, problems, and anti-patterns. Usage : qmk lint [-km KEYMAP] [-kb KEYBOARD] [--strict] This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Examples : Do a basic lint check: qmk lint -kb rominronin/katana60/rev2 qmk list-keyboards \u00b6 This command lists all the keyboards currently defined in qmk_firmware Usage : qmk list-keyboards qmk list-keymaps \u00b6 This command lists all the keymaps for a specified keyboard (and revision). This command is directory aware. It will automatically fill in KEYBOARD if you are in a keyboard directory. Usage : qmk list-keymaps -kb planck/ez qmk new-keyboard \u00b6 This command creates a new keyboard based on available templates. This command will prompt for input to guide you though the generation process. Usage : qmk new-keyboard qmk new-keymap \u00b6 This command creates a new keymap based on a keyboard's existing default keymap. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage : qmk new-keymap [-kb KEYBOARD] [-km KEYMAP] qmk clean \u00b6 This command cleans up the .build folder. If --all is passed, any .hex or .bin files present in the qmk_firmware directory will also be deleted. Usage : qmk clean [-a] Developer Commands \u00b6 qmk cformat \u00b6 This command formats C code using clang-format. Run it with no arguments to format all core code that has been changed. Default checks origin/master with git diff , branch can be changed using -b <branch_name> Run it with -a to format all core code, or pass filenames on the command line to run it on specific files. Usage for specified files : qmk cformat [file1] [file2] [...] [fileN] Usage for all core files : qmk cformat -a Usage for only changed files against origin/master : qmk cformat Usage for only changed files against branch_name : qmk cformat -b branch_name qmk docs \u00b6 This command starts a local HTTP server which you can use for browsing or improving the docs. Default port is 8936. Use the -b / --browser flag to automatically open the local webserver in your default browser. Usage : qmk docs [-b] [-p PORT] qmk generate-docs \u00b6 This command allows you to generate QMK documentation locally. It can be uses for general browsing or improving the docs. External tools such as serve can be used to browse the generated files. Usage : qmk generate-docs qmk generate-rgb-breathe-table \u00b6 This command generates a lookup table (LUT) header file for the RGB Lighting feature's breathing animation. Place this file in your keyboard or keymap directory as rgblight_breathe_table.h to override the default LUT in quantum/ . Usage : qmk generate-rgb-breathe-table [-q] [-o OUTPUT] [-m MAX] [-c CENTER] qmk kle2json \u00b6 This command allows you to convert from raw KLE data to QMK Configurator JSON. It accepts either an absolute file path, or a file name in the current directory. By default it will not overwrite info.json if it is already present. Use the -f or --force flag to overwrite. Usage : qmk kle2json [-f] <filename> Examples : $ qmk kle2json kle.txt \u2612 File info.json already exists, use -f or --force to overwrite. $ qmk kle2json -f kle.txt -f \u03a8 Wrote out to info.json qmk pyformat \u00b6 This command formats python code in qmk_firmware . Usage : qmk pyformat qmk pytest \u00b6 This command runs the python test suite. If you make changes to python code you should ensure this runs successfully. Usage : qmk pytest","title":"QMK CLI Commands"},{"location":"cli_commands/#qmk-cli-commands","text":"","title":"QMK CLI Commands"},{"location":"cli_commands/#user-commands","text":"","title":"User Commands"},{"location":"cli_commands/#qmk-compile","text":"This command allows you to compile firmware from any directory. You can compile JSON exports from https://config.qmk.fm , compile keymaps in the repo, or compile the keyboard in the current working directory. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage for Configurator Exports : qmk compile [-c] <configuratorExport.json> Usage for Keymaps : qmk compile [-c] [-e <var>=<value>] -kb <keyboard_name> -km <keymap_name> Usage in Keyboard Directory : Must be in keyboard directory with a default keymap, or in keymap directory for keyboard, or supply one with --keymap <keymap_name> qmk compile Usage for building all keyboards that support a specific keymap : qmk compile -kb all -km <keymap_name> Example : $ qmk config compile.keymap=default $ cd ~/qmk_firmware/keyboards/planck/rev6 $ qmk compile \u03a8 Compiling keymap with make planck/rev6:default ... or with optional keymap argument $ cd ~/qmk_firmware/keyboards/clueboard/66/rev4 $ qmk compile -km 66_iso \u03a8 Compiling keymap with make clueboard/66/rev4:66_iso ... or in keymap directory $ cd ~/qmk_firmware/keyboards/gh60/satan/keymaps/colemak $ qmk compile \u03a8 Compiling keymap with make make gh60/satan:colemak ... Usage in Layout Directory : Must be under qmk_firmware/layouts/ , and in a keymap folder. qmk compile -kb <keyboard_name> Example : $ cd ~/qmk_firmware/layouts/community/60_ansi/mechmerlin-ansi $ qmk compile -kb dz60 \u03a8 Compiling keymap with make dz60:mechmerlin-ansi ...","title":"qmk compile"},{"location":"cli_commands/#qmk-flash","text":"This command is similar to qmk compile , but can also target a bootloader. The bootloader is optional, and is set to :flash by default. To specify a different bootloader, use -bl <bootloader> . Visit the Flashing Firmware guide for more details of the available bootloaders. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage for Configurator Exports : qmk flash [-bl <bootloader>] [-c] [-e <var>=<value>] <configuratorExport.json> Usage for Keymaps : qmk flash -kb <keyboard_name> -km <keymap_name> [-bl <bootloader>] [-c] [-e <var>=<value>] Listing the Bootloaders qmk flash -b","title":"qmk flash"},{"location":"cli_commands/#qmk-config","text":"This command lets you configure the behavior of QMK. For the full qmk config documentation see CLI Configuration . Usage : qmk config [-ro] [config_token1] [config_token2] [...] [config_tokenN]","title":"qmk config"},{"location":"cli_commands/#qmk-console","text":"This command lets you connect to keyboard consoles to get debugging messages. It only works if your keyboard firmware has been compiled with CONSOLE_ENABLED=yes . Usage : qmk console [-d <pid>:<vid>[:<index>]] [-l] [-n] [-t] [-w <seconds>] Examples : Connect to all available keyboards and show their console messages: qmk console List all devices: qmk console -l Show only messages from clueboard/66/rev3 keyboards: qmk console -d C1ED:2370 Show only messages from the second clueboard/66/rev3: qmk console -d C1ED:2370:2 Show timestamps and VID:PID instead of names: qmk console -n -t Disable bootloader messages: qmk console --no-bootloaders","title":"qmk console"},{"location":"cli_commands/#qmk-doctor","text":"This command examines your environment and alerts you to potential build or flash problems. It can fix many of them if you want it to. Usage : qmk doctor [-y] [-n] Examples : Check your environment for problems and prompt to fix them: qmk doctor Check your environment and automatically fix any problems found: qmk doctor -y Check your environment and report problems only: qmk doctor -n","title":"qmk doctor"},{"location":"cli_commands/#qmk-format-json","text":"Formats a JSON file in a (mostly) human-friendly way. Will usually correctly detect the format of the JSON (info.json or keymap.json) but you can override this with --format if neccesary. Usage : qmk format-json [-f FORMAT] <json_file>","title":"qmk format-json"},{"location":"cli_commands/#qmk-info","text":"Displays information about keyboards and keymaps in QMK. You can use this to get information about a keyboard, show the layouts, display the underlying key matrix, or to pretty-print JSON keymaps. Usage : qmk info [-f FORMAT] [-m] [-l] [-km KEYMAP] [-kb KEYBOARD] This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Examples : Show basic information for a keyboard: qmk info -kb planck/rev5 Show the matrix for a keyboard: qmk info -kb ergodox_ez -m Show a JSON keymap for a keyboard: qmk info -kb clueboard/california -km default","title":"qmk info"},{"location":"cli_commands/#qmk-json2c","text":"Creates a keymap.c from a QMK Configurator export. Usage : qmk json2c [-o OUTPUT] filename","title":"qmk json2c"},{"location":"cli_commands/#qmk-c2json","text":"Creates a keymap.json from a keymap.c. Note: Parsing C source files is not easy, therefore this subcommand may not work with your keymap. In some cases not using the C pre-processor helps. Usage : qmk c2json -km KEYMAP -kb KEYBOARD [-q] [--no-cpp] [-o OUTPUT] filename","title":"qmk c2json"},{"location":"cli_commands/#qmk-lint","text":"Checks over a keyboard and/or keymap and highlights common errors, problems, and anti-patterns. Usage : qmk lint [-km KEYMAP] [-kb KEYBOARD] [--strict] This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Examples : Do a basic lint check: qmk lint -kb rominronin/katana60/rev2","title":"qmk lint"},{"location":"cli_commands/#qmk-list-keyboards","text":"This command lists all the keyboards currently defined in qmk_firmware Usage : qmk list-keyboards","title":"qmk list-keyboards"},{"location":"cli_commands/#qmk-list-keymaps","text":"This command lists all the keymaps for a specified keyboard (and revision). This command is directory aware. It will automatically fill in KEYBOARD if you are in a keyboard directory. Usage : qmk list-keymaps -kb planck/ez","title":"qmk list-keymaps"},{"location":"cli_commands/#qmk-new-keyboard","text":"This command creates a new keyboard based on available templates. This command will prompt for input to guide you though the generation process. Usage : qmk new-keyboard","title":"qmk new-keyboard"},{"location":"cli_commands/#qmk-new-keymap","text":"This command creates a new keymap based on a keyboard's existing default keymap. This command is directory aware. It will automatically fill in KEYBOARD and/or KEYMAP if you are in a keyboard or keymap directory. Usage : qmk new-keymap [-kb KEYBOARD] [-km KEYMAP]","title":"qmk new-keymap"},{"location":"cli_commands/#qmk-clean","text":"This command cleans up the .build folder. If --all is passed, any .hex or .bin files present in the qmk_firmware directory will also be deleted. Usage : qmk clean [-a]","title":"qmk clean"},{"location":"cli_commands/#developer-commands","text":"","title":"Developer Commands"},{"location":"cli_commands/#qmk-cformat","text":"This command formats C code using clang-format. Run it with no arguments to format all core code that has been changed. Default checks origin/master with git diff , branch can be changed using -b <branch_name> Run it with -a to format all core code, or pass filenames on the command line to run it on specific files. Usage for specified files : qmk cformat [file1] [file2] [...] [fileN] Usage for all core files : qmk cformat -a Usage for only changed files against origin/master : qmk cformat Usage for only changed files against branch_name : qmk cformat -b branch_name","title":"qmk cformat"},{"location":"cli_commands/#qmk-docs","text":"This command starts a local HTTP server which you can use for browsing or improving the docs. Default port is 8936. Use the -b / --browser flag to automatically open the local webserver in your default browser. Usage : qmk docs [-b] [-p PORT]","title":"qmk docs"},{"location":"cli_commands/#qmk-generate-docs","text":"This command allows you to generate QMK documentation locally. It can be uses for general browsing or improving the docs. External tools such as serve can be used to browse the generated files. Usage : qmk generate-docs","title":"qmk generate-docs"},{"location":"cli_commands/#qmk-generate-rgb-breathe-table","text":"This command generates a lookup table (LUT) header file for the RGB Lighting feature's breathing animation. Place this file in your keyboard or keymap directory as rgblight_breathe_table.h to override the default LUT in quantum/ . Usage : qmk generate-rgb-breathe-table [-q] [-o OUTPUT] [-m MAX] [-c CENTER]","title":"qmk generate-rgb-breathe-table"},{"location":"cli_commands/#qmk-kle2json","text":"This command allows you to convert from raw KLE data to QMK Configurator JSON. It accepts either an absolute file path, or a file name in the current directory. By default it will not overwrite info.json if it is already present. Use the -f or --force flag to overwrite. Usage : qmk kle2json [-f] <filename> Examples : $ qmk kle2json kle.txt \u2612 File info.json already exists, use -f or --force to overwrite. $ qmk kle2json -f kle.txt -f \u03a8 Wrote out to info.json","title":"qmk kle2json"},{"location":"cli_commands/#qmk-pyformat","text":"This command formats python code in qmk_firmware . Usage : qmk pyformat","title":"qmk pyformat"},{"location":"cli_commands/#qmk-pytest","text":"This command runs the python test suite. If you make changes to python code you should ensure this runs successfully. Usage : qmk pytest","title":"qmk pytest"},{"location":"cli_configuration/","text":"QMK CLI Configuration \u00b6 This document explains how qmk config works. Introduction \u00b6 Configuration for the QMK CLI is a key/value system. Each key consists of a subcommand and an argument name separated by a period. This allows for a straightforward and direct translation between config keys and the arguments they set. Simple Example \u00b6 As an example let's look at the command qmk compile --keyboard clueboard/66/rev4 --keymap default . There are two command line arguments that could be read from configuration instead: compile.keyboard compile.keymap Let's set these now: $ qmk config compile.keyboard=clueboard/66/rev4 compile.keymap=default compile.keyboard: None -> clueboard/66/rev4 compile.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' Now I can run qmk compile without specifying my keyboard and keymap each time. Setting User Defaults \u00b6 Sometimes you want to share a setting between multiple commands. For example, multiple commands take the argument --keyboard . Rather than setting this value for every command you can set a user value which will be used by any command that takes that argument. Example: $ qmk config user.keyboard=clueboard/66/rev4 user.keymap=default user.keyboard: None -> clueboard/66/rev4 user.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' CLI Documentation ( qmk config ) \u00b6 The qmk config command is used to interact with the underlying configuration. When run with no argument it shows the current configuration. When arguments are supplied they are assumed to be configuration tokens, which are strings containing no spaces with the following form: <subcommand|general|default>[.<key>][=<value>] Setting Configuration Values \u00b6 You can set configuration values by putting an equal sign (=) into your config key. The key must always be the full <section>.<key> form. Example: $ qmk config default.keymap=default default.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' Reading Configuration Values \u00b6 You can read configuration values for the entire configuration, a single key, or for an entire section. You can also specify multiple keys to display more than one value. Entire Configuration Example \u00b6 qmk config Whole Section Example \u00b6 qmk config compile Single Key Example \u00b6 qmk config compile.keyboard Multiple Keys Example \u00b6 qmk config user compile.keyboard compile.keymap Deleting Configuration Values \u00b6 You can delete a configuration value by setting it to the special string None . Example: $ qmk config default.keymap=None default.keymap: default -> None \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' Multiple Operations \u00b6 You can combine multiple read and write operations into a single command. They will be executed and displayed in order: $ qmk config compile default.keymap=default compile.keymap=None compile.keymap=skully compile.keyboard=clueboard/66_hotswap/gen1 default.keymap: None -> default compile.keymap: skully -> None \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' User Configuration Options \u00b6 Key Default Value Description user.keyboard None The keyboard path (Example: clueboard/66/rev4 ) user.keymap None The keymap name (Example: default ) user.name None The user's GitHub username. All Configuration Options \u00b6 Key Default Value Description compile.keyboard None The keyboard path (Example: clueboard/66/rev4 ) compile.keymap None The keymap name (Example: default ) hello.name None The name to greet when run. new_keyboard.keyboard None The keyboard path (Example: clueboard/66/rev4 ) new_keyboard.keymap None The keymap name (Example: default )","title":"QMK\u547d\u4ee4\u884c\u5de5\u5177\u914d\u7f6e"},{"location":"cli_configuration/#qmk-cli-configuration","text":"This document explains how qmk config works.","title":"QMK CLI Configuration"},{"location":"cli_configuration/#introduction","text":"Configuration for the QMK CLI is a key/value system. Each key consists of a subcommand and an argument name separated by a period. This allows for a straightforward and direct translation between config keys and the arguments they set.","title":"Introduction"},{"location":"cli_configuration/#simple-example","text":"As an example let's look at the command qmk compile --keyboard clueboard/66/rev4 --keymap default . There are two command line arguments that could be read from configuration instead: compile.keyboard compile.keymap Let's set these now: $ qmk config compile.keyboard=clueboard/66/rev4 compile.keymap=default compile.keyboard: None -> clueboard/66/rev4 compile.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini' Now I can run qmk compile without specifying my keyboard and keymap each time.","title":"Simple Example"},{"location":"cli_configuration/#setting-user-defaults","text":"Sometimes you want to share a setting between multiple commands. For example, multiple commands take the argument --keyboard . Rather than setting this value for every command you can set a user value which will be used by any command that takes that argument. Example: $ qmk config user.keyboard=clueboard/66/rev4 user.keymap=default user.keyboard: None -> clueboard/66/rev4 user.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini'","title":"Setting User Defaults"},{"location":"cli_configuration/#cli-documentation-qmk-config","text":"The qmk config command is used to interact with the underlying configuration. When run with no argument it shows the current configuration. When arguments are supplied they are assumed to be configuration tokens, which are strings containing no spaces with the following form: <subcommand|general|default>[.<key>][=<value>]","title":"CLI Documentation (qmk config)"},{"location":"cli_configuration/#setting-configuration-values","text":"You can set configuration values by putting an equal sign (=) into your config key. The key must always be the full <section>.<key> form. Example: $ qmk config default.keymap=default default.keymap: None -> default \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini'","title":"Setting Configuration Values"},{"location":"cli_configuration/#reading-configuration-values","text":"You can read configuration values for the entire configuration, a single key, or for an entire section. You can also specify multiple keys to display more than one value.","title":"Reading Configuration Values"},{"location":"cli_configuration/#entire-configuration-example","text":"qmk config","title":"Entire Configuration Example"},{"location":"cli_configuration/#whole-section-example","text":"qmk config compile","title":"Whole Section Example"},{"location":"cli_configuration/#single-key-example","text":"qmk config compile.keyboard","title":"Single Key Example"},{"location":"cli_configuration/#multiple-keys-example","text":"qmk config user compile.keyboard compile.keymap","title":"Multiple Keys Example"},{"location":"cli_configuration/#deleting-configuration-values","text":"You can delete a configuration value by setting it to the special string None . Example: $ qmk config default.keymap=None default.keymap: default -> None \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini'","title":"Deleting Configuration Values"},{"location":"cli_configuration/#multiple-operations","text":"You can combine multiple read and write operations into a single command. They will be executed and displayed in order: $ qmk config compile default.keymap=default compile.keymap=None compile.keymap=skully compile.keyboard=clueboard/66_hotswap/gen1 default.keymap: None -> default compile.keymap: skully -> None \u03a8 Wrote configuration to '/Users/example/Library/Application Support/qmk/qmk.ini'","title":"Multiple Operations"},{"location":"cli_configuration/#user-configuration-options","text":"Key Default Value Description user.keyboard None The keyboard path (Example: clueboard/66/rev4 ) user.keymap None The keymap name (Example: default ) user.name None The user's GitHub username.","title":"User Configuration Options"},{"location":"cli_configuration/#all-configuration-options","text":"Key Default Value Description compile.keyboard None The keyboard path (Example: clueboard/66/rev4 ) compile.keymap None The keymap name (Example: default ) hello.name None The name to greet when run. new_keyboard.keyboard None The keyboard path (Example: clueboard/66/rev4 ) new_keyboard.keymap None The keymap name (Example: default )","title":"All Configuration Options"},{"location":"cli_development/","text":"QMK CLI Development \u00b6 This document has useful information for developers wishing to write new qmk subcommands. Overview \u00b6 The QMK CLI operates using the subcommand pattern made famous by git. The main qmk script is simply there to setup the environment and pick the correct entrypoint to run. Each subcommand is a self-contained module with an entrypoint (decorated by @cli.subcommand() ) that performs some action and returns a shell returncode, or None. Developer mode: \u00b6 If you intend to maintain keyboards and/or contribute to QMK, you can enable the CLI's \"Developer\" mode: qmk config user.developer=True This will allow you to see all available subcommands. Note: You will have to install additional requirements: python3 -m pip install -r requirements-dev.txt Subcommands \u00b6 MILC is the CLI framework qmk uses to handle argument parsing, configuration, logging, and many other features. It lets you focus on writing your tool without wasting your time writing glue code. Subcommands in the local CLI are always found in qmk_firmware/lib/python/qmk/cli . Let's start by looking at an example subcommand. This is lib/python/qmk/cli/hello.py : \"\"\"QMK Python Hello World This is an example QMK CLI script. \"\"\" from milc import cli @cli . argument ( '-n' , '--name' , default = 'World' , help = 'Name to greet.' ) @cli . subcommand ( 'QMK Hello World.' ) def hello ( cli ): \"\"\"Log a friendly greeting. \"\"\" cli . log . info ( 'Hello, %s !' , cli . config . hello . name ) First we import the cli object from milc . This is how we interact with the user and control the script's behavior. We use @cli.argument() to define a command line flag, --name . This also creates a configuration variable named hello.name (and the corresponding user.name ) which the user can set so they don't have to specify the argument. The cli.subcommand() decorator designates this function as a subcommand. The name of the subcommand will be taken from the name of the function. Once inside our function we find a typical \"Hello, World!\" program. We use cli.log to access the underlying Logger Object , whose behavior is user controllable. We also access the value for name supplied by the user as cli.config.hello.name . The value for cli.config.hello.name will be determined by looking at the --name argument supplied by the user, if not provided it will use the value in the qmk.ini config file, and if neither of those is provided it will fall back to the default supplied in the cli.argument() decorator. User Interaction \u00b6 MILC and the QMK CLI have several nice tools for interacting with the user. Using these standard tools will allow you to colorize your text for easier interactions, and allow the user to control when and how that information is displayed and stored. Printing Text \u00b6 There are two main methods for outputting text in a subcommand- cli.log and cli.echo() . They operate in similar ways but you should prefer to use cli.log.info() for most general purpose printing. You can use special tokens to colorize your text, to make it easier to understand the output of your program. See Colorizing Text below. Both of these methods support built-in string formatting using python's printf style string format operations . You can use tokens such as %s and %d within your text strings then pass the values as arguments. See our Hello, World program above for an example. You should never use the format operator ( % ) directly, always pass values as arguments. Logging ( cli.log ) \u00b6 The cli.log object gives you access to a Logger Object . We have configured our log output to show the user a nice emoji for each log level (or the log level name if their terminal does not support unicode.) This way the user can tell at a glance which messages are most important when something goes wrong. The default log level is INFO . If the user runs qmk -v <subcommand> the default log level will be set to DEBUG . Function Emoji cli.log.critical {bg_red}{fg_white}\u00ac_\u00ac{style_reset_all} cli.log.error {fg_red}\u2612{style_reset_all} cli.log.warning {fg_yellow}\u26a0{style_reset_all} cli.log.info {fg_blue}\u03a8{style_reset_all} cli.log.debug {fg_cyan}\u2610{style_reset_all} cli.log.notset {style_reset_all}\u00af\\\\_(o_o)_/\u00af Printing ( cli.echo ) \u00b6 Sometimes you simply need to print text outside of the log system. This is appropriate if you are outputting fixed data or writing out something that should never be logged. Most of the time you should prefer cli.log.info() over cli.echo . Colorizing Text \u00b6 You can colorize the output of your text by including color tokens within text. Use color to highlight, not to convey information. Remember that the user can disable color, and your subcommand should still be usable if they do. You should generally avoid setting the background color, unless it's integral to what you are doing. Remember that users have a lot of preferences when it comes to their terminal color, so you should pick colors that work well against both black and white backgrounds. Colors prefixed with 'fg' will affect the foreground (text) color. Colors prefixed with 'bg' will affect the background color. Color Background Extended Background Foreground Extended Foreground Black {bg_black} {bg_lightblack_ex} {fg_black} {fg_lightblack_ex} Blue {bg_blue} {bg_lightblue_ex} {fg_blue} {fg_lightblue_ex} Cyan {bg_cyan} {bg_lightcyan_ex} {fg_cyan} {fg_lightcyan_ex} Green {bg_green} {bg_lightgreen_ex} {fg_green} {fg_lightgreen_ex} Magenta {bg_magenta} {bg_lightmagenta_ex} {fg_magenta} {fg_lightmagenta_ex} Red {bg_red} {bg_lightred_ex} {fg_red} {fg_lightred_ex} White {bg_white} {bg_lightwhite_ex} {fg_white} {fg_lightwhite_ex} Yellow {bg_yellow} {bg_lightyellow_ex} {fg_yellow} {fg_lightyellow_ex} There are also control sequences that can be used to change the behavior of ANSI output: Control Sequences Description {style_bright} Make the text brighter {style_dim} Make the text dimmer {style_normal} Make the text normal (neither {style_bright} nor {style_dim} ) {style_reset_all} Reset all text attributes to default. (This is automatically added to the end of every string.) {bg_reset} Reset the background color to the user's default {fg_reset} Reset the foreground color to the user's default Arguments and Configuration \u00b6 QMK handles the details of argument parsing and configuration for you. When you add a new argument it is automatically incorporated into the config tree based on your subcommand's name and the long name of the argument. You can access this configuration in cli.config , using either attribute-style access ( cli.config.<subcommand>.<argument> ) or dictionary-style access ( cli.config['<subcommand>']['<argument>'] ). Under the hood QMK uses ConfigParser to store configurations. This gives us an easy and straightforward way to represent the configuration in a human-editable way. We have wrapped access to this configuration to provide some nicities that ConfigParser does not normally have. Reading Configuration Values \u00b6 You can interact with cli.config in all the ways you'd normally expect. For example the qmk compile command gets the keyboard name from cli.config.compile.keyboard . It does not need to know whether that value came from the command line, an environment variable, or the configuration file. Iteration is also supported: for section in cli.config: for key in cli.config[section]: cli.log.info('%s.%s: %s', section, key, cli.config[section][key]) Setting Configuration Values \u00b6 You can set configuration values in the usual ways. Dictionary style: cli.config['<section>']['<key>'] = <value> Attribute style: cli.config.<section>.<key> = <value> Deleting Configuration Values \u00b6 You can delete configuration values in the usual ways. Dictionary style: del(cli.config['<section>']['<key>']) Attribute style: del(cli.config.<section>.<key>) Writing The Configuration File \u00b6 The configuration is not written out when it is changed. Most commands do not need to do this. We prefer to have the user change their configuration deliberitely using qmk config . You can use cli.save_config() to write out the configuration. Excluding Arguments From Configuration \u00b6 Some arguments should not be propagated to the configuration file. These can be excluded by adding arg_only=True when creating the argument. Example: @cli . argument ( '-o' , '--output' , arg_only = True , help = 'File to write to' ) @cli . argument ( 'filename' , arg_only = True , help = 'Configurator JSON file' ) @cli . subcommand ( 'Create a keymap.c from a QMK Configurator export.' ) def json_keymap ( cli ): pass You will only be able to access these arguments using cli.args . For example: cli . log . info ( 'Reading from %s and writing to %s ' , cli . args . filename , cli . args . output ) Testing, and Linting, and Formatting (oh my!) \u00b6 We use nose2, flake8, and yapf to test, lint, and format code. You can use the pytest and pyformat subcommands to run these tests: Testing and Linting \u00b6 qmk pytest Formatting \u00b6 qmk pyformat Formatting Details \u00b6 We use yapf to automatically format code. Our configuration is in the [yapf] section of setup.cfg . Tip Many editors can use yapf as a plugin to automatically format code as you type. Testing Details \u00b6 Our tests can be found in lib/python/qmk/tests/ . You will find both unit and integration tests in this directory. We hope you will write both unit and integration tests for your code, but if you do not please favor integration tests. If your PR does not include a comprehensive set of tests please add comments like this to your code so that other people know where they can help: # TODO(unassigned/<your_github_username>): Write <unit|integration> tests We use nose2 to run our tests. You can refer to the nose2 documentation for more details on what you can do in your test functions. Linting Details \u00b6 We use flake8 to lint our code. Your code should pass flake8 before you open a PR. This will be checked when you run qmk pytest and by CI when you submit a PR.","title":"Python \u547d\u4ee4\u884c\u5f00\u53d1"},{"location":"cli_development/#qmk-cli-development","text":"This document has useful information for developers wishing to write new qmk subcommands.","title":"QMK CLI Development"},{"location":"cli_development/#overview","text":"The QMK CLI operates using the subcommand pattern made famous by git. The main qmk script is simply there to setup the environment and pick the correct entrypoint to run. Each subcommand is a self-contained module with an entrypoint (decorated by @cli.subcommand() ) that performs some action and returns a shell returncode, or None.","title":"Overview"},{"location":"cli_development/#developer-mode","text":"If you intend to maintain keyboards and/or contribute to QMK, you can enable the CLI's \"Developer\" mode: qmk config user.developer=True This will allow you to see all available subcommands. Note: You will have to install additional requirements: python3 -m pip install -r requirements-dev.txt","title":"Developer mode:"},{"location":"cli_development/#subcommands","text":"MILC is the CLI framework qmk uses to handle argument parsing, configuration, logging, and many other features. It lets you focus on writing your tool without wasting your time writing glue code. Subcommands in the local CLI are always found in qmk_firmware/lib/python/qmk/cli . Let's start by looking at an example subcommand. This is lib/python/qmk/cli/hello.py : \"\"\"QMK Python Hello World This is an example QMK CLI script. \"\"\" from milc import cli @cli . argument ( '-n' , '--name' , default = 'World' , help = 'Name to greet.' ) @cli . subcommand ( 'QMK Hello World.' ) def hello ( cli ): \"\"\"Log a friendly greeting. \"\"\" cli . log . info ( 'Hello, %s !' , cli . config . hello . name ) First we import the cli object from milc . This is how we interact with the user and control the script's behavior. We use @cli.argument() to define a command line flag, --name . This also creates a configuration variable named hello.name (and the corresponding user.name ) which the user can set so they don't have to specify the argument. The cli.subcommand() decorator designates this function as a subcommand. The name of the subcommand will be taken from the name of the function. Once inside our function we find a typical \"Hello, World!\" program. We use cli.log to access the underlying Logger Object , whose behavior is user controllable. We also access the value for name supplied by the user as cli.config.hello.name . The value for cli.config.hello.name will be determined by looking at the --name argument supplied by the user, if not provided it will use the value in the qmk.ini config file, and if neither of those is provided it will fall back to the default supplied in the cli.argument() decorator.","title":"Subcommands"},{"location":"cli_development/#user-interaction","text":"MILC and the QMK CLI have several nice tools for interacting with the user. Using these standard tools will allow you to colorize your text for easier interactions, and allow the user to control when and how that information is displayed and stored.","title":"User Interaction"},{"location":"cli_development/#printing-text","text":"There are two main methods for outputting text in a subcommand- cli.log and cli.echo() . They operate in similar ways but you should prefer to use cli.log.info() for most general purpose printing. You can use special tokens to colorize your text, to make it easier to understand the output of your program. See Colorizing Text below. Both of these methods support built-in string formatting using python's printf style string format operations . You can use tokens such as %s and %d within your text strings then pass the values as arguments. See our Hello, World program above for an example. You should never use the format operator ( % ) directly, always pass values as arguments.","title":"Printing Text"},{"location":"cli_development/#logging-clilog","text":"The cli.log object gives you access to a Logger Object . We have configured our log output to show the user a nice emoji for each log level (or the log level name if their terminal does not support unicode.) This way the user can tell at a glance which messages are most important when something goes wrong. The default log level is INFO . If the user runs qmk -v <subcommand> the default log level will be set to DEBUG . Function Emoji cli.log.critical {bg_red}{fg_white}\u00ac_\u00ac{style_reset_all} cli.log.error {fg_red}\u2612{style_reset_all} cli.log.warning {fg_yellow}\u26a0{style_reset_all} cli.log.info {fg_blue}\u03a8{style_reset_all} cli.log.debug {fg_cyan}\u2610{style_reset_all} cli.log.notset {style_reset_all}\u00af\\\\_(o_o)_/\u00af","title":"Logging (cli.log)"},{"location":"cli_development/#printing-cliecho","text":"Sometimes you simply need to print text outside of the log system. This is appropriate if you are outputting fixed data or writing out something that should never be logged. Most of the time you should prefer cli.log.info() over cli.echo .","title":"Printing (cli.echo)"},{"location":"cli_development/#colorizing-text","text":"You can colorize the output of your text by including color tokens within text. Use color to highlight, not to convey information. Remember that the user can disable color, and your subcommand should still be usable if they do. You should generally avoid setting the background color, unless it's integral to what you are doing. Remember that users have a lot of preferences when it comes to their terminal color, so you should pick colors that work well against both black and white backgrounds. Colors prefixed with 'fg' will affect the foreground (text) color. Colors prefixed with 'bg' will affect the background color. Color Background Extended Background Foreground Extended Foreground Black {bg_black} {bg_lightblack_ex} {fg_black} {fg_lightblack_ex} Blue {bg_blue} {bg_lightblue_ex} {fg_blue} {fg_lightblue_ex} Cyan {bg_cyan} {bg_lightcyan_ex} {fg_cyan} {fg_lightcyan_ex} Green {bg_green} {bg_lightgreen_ex} {fg_green} {fg_lightgreen_ex} Magenta {bg_magenta} {bg_lightmagenta_ex} {fg_magenta} {fg_lightmagenta_ex} Red {bg_red} {bg_lightred_ex} {fg_red} {fg_lightred_ex} White {bg_white} {bg_lightwhite_ex} {fg_white} {fg_lightwhite_ex} Yellow {bg_yellow} {bg_lightyellow_ex} {fg_yellow} {fg_lightyellow_ex} There are also control sequences that can be used to change the behavior of ANSI output: Control Sequences Description {style_bright} Make the text brighter {style_dim} Make the text dimmer {style_normal} Make the text normal (neither {style_bright} nor {style_dim} ) {style_reset_all} Reset all text attributes to default. (This is automatically added to the end of every string.) {bg_reset} Reset the background color to the user's default {fg_reset} Reset the foreground color to the user's default","title":"Colorizing Text"},{"location":"cli_development/#arguments-and-configuration","text":"QMK handles the details of argument parsing and configuration for you. When you add a new argument it is automatically incorporated into the config tree based on your subcommand's name and the long name of the argument. You can access this configuration in cli.config , using either attribute-style access ( cli.config.<subcommand>.<argument> ) or dictionary-style access ( cli.config['<subcommand>']['<argument>'] ). Under the hood QMK uses ConfigParser to store configurations. This gives us an easy and straightforward way to represent the configuration in a human-editable way. We have wrapped access to this configuration to provide some nicities that ConfigParser does not normally have.","title":"Arguments and Configuration"},{"location":"cli_development/#reading-configuration-values","text":"You can interact with cli.config in all the ways you'd normally expect. For example the qmk compile command gets the keyboard name from cli.config.compile.keyboard . It does not need to know whether that value came from the command line, an environment variable, or the configuration file. Iteration is also supported: for section in cli.config: for key in cli.config[section]: cli.log.info('%s.%s: %s', section, key, cli.config[section][key])","title":"Reading Configuration Values"},{"location":"cli_development/#setting-configuration-values","text":"You can set configuration values in the usual ways. Dictionary style: cli.config['<section>']['<key>'] = <value> Attribute style: cli.config.<section>.<key> = <value>","title":"Setting Configuration Values"},{"location":"cli_development/#deleting-configuration-values","text":"You can delete configuration values in the usual ways. Dictionary style: del(cli.config['<section>']['<key>']) Attribute style: del(cli.config.<section>.<key>)","title":"Deleting Configuration Values"},{"location":"cli_development/#writing-the-configuration-file","text":"The configuration is not written out when it is changed. Most commands do not need to do this. We prefer to have the user change their configuration deliberitely using qmk config . You can use cli.save_config() to write out the configuration.","title":"Writing The Configuration File"},{"location":"cli_development/#excluding-arguments-from-configuration","text":"Some arguments should not be propagated to the configuration file. These can be excluded by adding arg_only=True when creating the argument. Example: @cli . argument ( '-o' , '--output' , arg_only = True , help = 'File to write to' ) @cli . argument ( 'filename' , arg_only = True , help = 'Configurator JSON file' ) @cli . subcommand ( 'Create a keymap.c from a QMK Configurator export.' ) def json_keymap ( cli ): pass You will only be able to access these arguments using cli.args . For example: cli . log . info ( 'Reading from %s and writing to %s ' , cli . args . filename , cli . args . output )","title":"Excluding Arguments From Configuration"},{"location":"cli_development/#testing-and-linting-and-formatting-oh-my","text":"We use nose2, flake8, and yapf to test, lint, and format code. You can use the pytest and pyformat subcommands to run these tests:","title":"Testing, and Linting, and Formatting (oh my!)"},{"location":"cli_development/#testing-and-linting","text":"qmk pytest","title":"Testing and Linting"},{"location":"cli_development/#formatting","text":"qmk pyformat","title":"Formatting"},{"location":"cli_development/#formatting-details","text":"We use yapf to automatically format code. Our configuration is in the [yapf] section of setup.cfg . Tip Many editors can use yapf as a plugin to automatically format code as you type.","title":"Formatting Details"},{"location":"cli_development/#testing-details","text":"Our tests can be found in lib/python/qmk/tests/ . You will find both unit and integration tests in this directory. We hope you will write both unit and integration tests for your code, but if you do not please favor integration tests. If your PR does not include a comprehensive set of tests please add comments like this to your code so that other people know where they can help: # TODO(unassigned/<your_github_username>): Write <unit|integration> tests We use nose2 to run our tests. You can refer to the nose2 documentation for more details on what you can do in your test functions.","title":"Testing Details"},{"location":"cli_development/#linting-details","text":"We use flake8 to lint our code. Your code should pass flake8 before you open a PR. This will be checked when you run qmk pytest and by CI when you submit a PR.","title":"Linting Details"},{"location":"cli_tab_complete/","text":"Tab Completion for QMK \u00b6 If you are using Bash 4.2 or later, Zsh, or FiSH you can enable Tab Completion for the QMK CLI. This will let you tab complete the names of flags, keyboards, files, and other qmk options. Setup \u00b6 There are several ways you can setup tab completion. For Your User Only \u00b6 Add this to the end of your .profile or .bashrc : source ~/qmk_firmware/util/qmk_tab_complete.sh If you put qmk_firmware into another location you will need to adjust this path. System Wide Symlink \u00b6 If you want the tab completion available to all users of the system you can add a symlink to the qmk_tab_complete.sh script: `ln -s ~/qmk_firmware/util/qmk_tab_complete.sh /etc/profile.d/qmk_tab_complete.sh` System Wide Copy \u00b6 In some cases a symlink may not work. Instead you can copy the file directly into place. Be aware that updates to the tab complete script may happen from time to time, you will want to recopy the file periodically. cp util/qmk_tab_complete.sh /etc/profile.d","title":"Tab Completion for QMK"},{"location":"cli_tab_complete/#tab-completion-for-qmk","text":"If you are using Bash 4.2 or later, Zsh, or FiSH you can enable Tab Completion for the QMK CLI. This will let you tab complete the names of flags, keyboards, files, and other qmk options.","title":"Tab Completion for QMK"},{"location":"cli_tab_complete/#setup","text":"There are several ways you can setup tab completion.","title":"Setup"},{"location":"cli_tab_complete/#for-your-user-only","text":"Add this to the end of your .profile or .bashrc : source ~/qmk_firmware/util/qmk_tab_complete.sh If you put qmk_firmware into another location you will need to adjust this path.","title":"For Your User Only"},{"location":"cli_tab_complete/#system-wide-symlink","text":"If you want the tab completion available to all users of the system you can add a symlink to the qmk_tab_complete.sh script: `ln -s ~/qmk_firmware/util/qmk_tab_complete.sh /etc/profile.d/qmk_tab_complete.sh`","title":"System Wide Symlink"},{"location":"cli_tab_complete/#system-wide-copy","text":"In some cases a symlink may not work. Instead you can copy the file directly into place. Be aware that updates to the tab complete script may happen from time to time, you will want to recopy the file periodically. cp util/qmk_tab_complete.sh /etc/profile.d","title":"System Wide Copy"},{"location":"coding_conventions_c/","text":"Coding Conventions (C) \u00b6 Most of our style is pretty easy to pick up on, but right now it's not entirely consistent. You should match the style of the code surrounding your change, but if that code is inconsistent or unclear use the following guidelines: We indent using four (4) spaces (soft tabs) We use a modified One True Brace Style Opening Brace: At the end of the same line as the statement that opens the block Closing Brace: Lined up with the first character of the statement that opens the block Else If: Place the closing brace at the beginning of the line and the next opening brace at the end of the same line. Optional Braces: Always include optional braces. Good: if (condition) { return false; } Bad: if (condition) return false; We encourage use of C style comments: /* */ Think of them as a story describing the feature Use them liberally to explain why particular decisions were made. Do not write obvious comments If you're not sure if a comment is obvious, go ahead and include it. In general we don't wrap lines, they can be as long as needed. If you do choose to wrap lines please do not wrap any wider than 76 columns. We use #pragma once at the start of header files rather than old-style include guards ( #ifndef THIS_FILE_H , #define THIS_FILE_H , ..., #endif ) We accept both forms of preprocessor if's: #ifdef DEFINED and #if defined(DEFINED) If you are not sure which to prefer use the #if defined(DEFINED) form. Do not change existing code from one style to the other, except when moving to a multiple condition #if . When deciding how (or if) to indent preprocessor directives, keep these points in mind: Readability is more important than consistency. Follow the file's existing style. If the file is mixed, follow the style that makes sense for the section you are modifying. When indenting, keep the hash at the start of the line and add whitespace between # and if , starting with 4 spaces after the # . You can follow the indention level of the surrounding C code, or preprocessor directives can have their own indentation levels. Choose the style that best communicates the intent of your code. Here is an example for easy reference: /* Enums for foo */ enum foo_state { FOO_BAR , FOO_BAZ , }; /* Returns a value */ int foo ( void ) { if ( some_condition ) { return FOO_BAR ; } else { return -1 ; } } Auto-formatting with clang-format \u00b6 Clang-format is part of LLVM and can automatically format your code for you, because ain't nobody got time to do it manually. We supply a configuration file for it that applies most of the coding conventions listed above. It will only change whitespace and newlines, so you will still have to remember to include optional braces yourself. Use the full LLVM installer to get clang-format on Windows, or use sudo apt install clang-format on Ubuntu. If you run it from the command-line, pass -style=file as an option and it will automatically find the .clang-format configuration file in the QMK root directory. If you use VSCode, the standard C/C++ plugin supports clang-format, alternatively there is a separate extension for it. Some things (like LAYOUT macros) are destroyed by clang-format, so either don't run it on those files, or wrap the sensitive code in // clang-format off and // clang-format on .","title":"\u4ee3\u7801\u4e66\u5199\u89c4\u8303 - C"},{"location":"coding_conventions_c/#coding-conventions-c","text":"Most of our style is pretty easy to pick up on, but right now it's not entirely consistent. You should match the style of the code surrounding your change, but if that code is inconsistent or unclear use the following guidelines: We indent using four (4) spaces (soft tabs) We use a modified One True Brace Style Opening Brace: At the end of the same line as the statement that opens the block Closing Brace: Lined up with the first character of the statement that opens the block Else If: Place the closing brace at the beginning of the line and the next opening brace at the end of the same line. Optional Braces: Always include optional braces. Good: if (condition) { return false; } Bad: if (condition) return false; We encourage use of C style comments: /* */ Think of them as a story describing the feature Use them liberally to explain why particular decisions were made. Do not write obvious comments If you're not sure if a comment is obvious, go ahead and include it. In general we don't wrap lines, they can be as long as needed. If you do choose to wrap lines please do not wrap any wider than 76 columns. We use #pragma once at the start of header files rather than old-style include guards ( #ifndef THIS_FILE_H , #define THIS_FILE_H , ..., #endif ) We accept both forms of preprocessor if's: #ifdef DEFINED and #if defined(DEFINED) If you are not sure which to prefer use the #if defined(DEFINED) form. Do not change existing code from one style to the other, except when moving to a multiple condition #if . When deciding how (or if) to indent preprocessor directives, keep these points in mind: Readability is more important than consistency. Follow the file's existing style. If the file is mixed, follow the style that makes sense for the section you are modifying. When indenting, keep the hash at the start of the line and add whitespace between # and if , starting with 4 spaces after the # . You can follow the indention level of the surrounding C code, or preprocessor directives can have their own indentation levels. Choose the style that best communicates the intent of your code. Here is an example for easy reference: /* Enums for foo */ enum foo_state { FOO_BAR , FOO_BAZ , }; /* Returns a value */ int foo ( void ) { if ( some_condition ) { return FOO_BAR ; } else { return -1 ; } }","title":"Coding Conventions (C)"},{"location":"coding_conventions_c/#auto-formatting-with-clang-format","text":"Clang-format is part of LLVM and can automatically format your code for you, because ain't nobody got time to do it manually. We supply a configuration file for it that applies most of the coding conventions listed above. It will only change whitespace and newlines, so you will still have to remember to include optional braces yourself. Use the full LLVM installer to get clang-format on Windows, or use sudo apt install clang-format on Ubuntu. If you run it from the command-line, pass -style=file as an option and it will automatically find the .clang-format configuration file in the QMK root directory. If you use VSCode, the standard C/C++ plugin supports clang-format, alternatively there is a separate extension for it. Some things (like LAYOUT macros) are destroyed by clang-format, so either don't run it on those files, or wrap the sensitive code in // clang-format off and // clang-format on .","title":"Auto-formatting with clang-format"},{"location":"coding_conventions_python/","text":"Coding Conventions (Python) \u00b6 Most of our style follows PEP8 with some local modifications to make things less nit-picky. We target Python 3.6 for compatability with all supported platforms. We indent using four (4) spaces (soft tabs) We encourage liberal use of comments Think of them as a story describing the feature Use them liberally to explain why particular decisions were made. Do not write obvious comments If you're not sure if a comment is obvious, go ahead and include it. We require useful docstrings for all functions. In general we don't wrap lines, they can be as long as needed. If you do choose to wrap lines please do not wrap any wider than 76 columns. Some of our practices conflict with the wider python community to make our codebase more approachable to non-pythonistas. YAPF \u00b6 You can use yapf to style your code. We provide a config in setup.cfg . Imports \u00b6 We don't have a hard and fast rule for when to use import ... vs from ... import ... . Understandability and maintainability is our ultimate goal. Generally we prefer to import specific function and class names from a module to keep code shorter and easier to understand. Sometimes this results in a name that is ambiguous, and in such cases we prefer to import the module instead. You should avoid using the \"as\" keyword when importing, unless you are importing a compatability module. Imports should be one line per module. We group import statements together using the standard python rules- system, 3rd party, local. Do not use from foo import * . Supply a list of objects you want to import instead, or import the whole module. Import Examples \u00b6 Good: from qmk import effects effects.echo() Bad: from qmk.effects import echo echo() # It's unclear where echo comes from Good: from qmk.keymap import compile_firmware compile_firmware() OK, but the above is better: import qmk.keymap qmk.keymap.compile_firmware() Statements \u00b6 One statement per line. Even when allowed (EG if foo: bar ) we do not combine 2 statements onto a single line. Naming \u00b6 module_name , package_name , ClassName , method_name , ExceptionName , function_name , GLOBAL_CONSTANT_NAME , global_var_name , instance_var_name , function_parameter_name , local_var_name . Function names, variable names, and filenames should be descriptive; eschew abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word. Always use a .py filename extension. Never use dashes. Names to Avoid \u00b6 single character names except for counters or iterators. You may use e as an exception identifier in try/except statements. dashes ( - ) in any package/module name __double_leading_and_trailing_underscore__ names (reserved by Python) Docstrings \u00b6 To maintain consistency with our docstrings we've set out the following guidelines. Use markdown formatting Always use triple-dquote docstrings with at least one linebreak: \"\"\"\\n\"\"\" First line is a short (< 70 char) description of what the function does If you need more in your docstring leave a blank line between the description and the rest. Start indented lines at the same indent level as the opening triple-dquote Document all function arguments using the format described below If present, Args:, Returns:, and Raises: should be the last three things in the docstring, separated by a blank line each. Simple docstring example \u00b6 def my_awesome_function(): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. \"\"\" return int(time.time()) Complex docstring example \u00b6 def my_awesome_function(): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. This function always returns an integer number of seconds. \"\"\" return int(time.time()) Function arguments docstring example \u00b6 def my_awesome_function(start=None, offset=0): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. This function always returns an integer number of seconds. Args: start The time to start at instead of 1970 Jan 1 00:00 UTC offset Return an answer that has this number of seconds subtracted first Returns: An integer describing a number of seconds. Raises: ValueError When `start` or `offset` are not positive numbers \"\"\" if start < 0 or offset < 0: raise ValueError('start and offset must be positive numbers.') if not start: start = time.time() return int(start - offset) Exceptions \u00b6 Exceptions are used to handle exceptional situations. They should not be used for flow control. This is a break from the python norm of \"ask for forgiveness.\" If you are catching an exception it should be to handle a situation that is unusual. If you use a catch-all exception for any reason you must log the exception and stacktrace using cli.log. Make your try/except blocks as short as possible. If you need a lot of try statements you may need to restructure your code. Tuples \u00b6 When defining one-item tuples always include a trailing comma so that it is obvious you are using a tuple. Do not rely on implicit one-item tuple unpacking. Better still use a list which is unambiguous. This is particularly important when using the printf-style format strings that are commonly used. Lists and Dictionaries \u00b6 We have configured YAPF to differentiate between sequence styles with a trailing comma. When a trailing comma is omitted YAPF will format the sequence as a single line. When a trailing comma is included YAPF will format the sequence with one item per line. You should generally prefer to keep short definition on a single line. Break out to multiple lines sooner rather than later to aid readability and maintainability. Parentheses \u00b6 Avoid excessive parentheses, but do use parentheses to make code easier to understand. Do not use them in return statements unless you are explicitly returning a tuple, or it is part of a math expression. Format Strings \u00b6 We generally prefer printf-style format strings. Example: name = 'World' print('Hello, %s!' % (name,)) This style is used by the logging module, which we make use of extensively, and we have adopted it in other places for consistency. It is also more familiar to C programmers, who are a big part of our casual audience. Our included CLI module has support for using these without using the percent (%) operator. Look at cli.echo() and the various cli.log functions (EG, cli.log.info() ) for more details. Comprehensions & Generator Expressions \u00b6 We encourage the liberal use of comprehensions and generators, but do not let them get too complex. If you need complexity fall back to a for loop that is easier to understand. Lambdas \u00b6 OK to use but probably should be avoided. With comprehensions and generators the need for lambdas is not as strong as it once was. Conditional Expressions \u00b6 OK in variable assignment, but otherwise should be avoided. Conditional expressions are if statements that are in line with code. For example: x = 1 if cond else 2 It's generally not a good idea to use these as function arguments, sequence items, etc. It's too easy to overlook. Default Argument Values \u00b6 Encouraged, but values must be immutable objects. When specifying default values in argument lists always be careful to specify objects that can't be modified in place. If you use a mutable object the changes you make will persist between calls, which is usually not what you want. Even if that is what you intend to do it is confusing for others and will hinder understanding. Bad: def my_func(foo={}): pass Good: def my_func(foo=None): if not foo: foo = {} Properties \u00b6 Always use properties instead of getter and setter functions. class Foo(object): def __init__(self): self._bar = None @property def bar(self): return self._bar @bar.setter def bar(self, bar): self._bar = bar True/False Evaluations \u00b6 You should generally prefer the implicit True/False evaluation in if statements, rather than checking equivalency. Bad: if foo == True: pass if bar == False: pass Good: if foo: pass if not bar: pass Decorators \u00b6 Use when appropriate. Try to avoid too much magic unless it helps with understanding. Threading and Multiprocessing \u00b6 Should be avoided. If you need this you will have to make a strong case before we merge your code. Power Features \u00b6 Python is an extremely flexible language and gives you many fancy features such as custom metaclasses, access to bytecode, on-the-fly compilation, dynamic inheritance, object reparenting, import hacks, reflection, modification of system internals, etc. Don't use these. Performance is not a critical concern for us, and code understandability is. We want our codebase to be approachable by someone who only has a day or two to play with it. These features generally come with a cost to easy understanding, and we would prefer to have code that can be readily understood over faster or more compact code. Note that some standard library modules use these techniques and it is ok to make use of those modules. But please keep readability and understandability in mind when using them. Type Annotated Code \u00b6 For now we are not using any type annotation system, and would prefer that code remain unannotated. We may revisit this in the future. Function length \u00b6 Prefer small and focused functions. We recognize that long functions are sometimes appropriate, so no hard limit is placed on function length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program. Even if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code. You could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces. FIXMEs \u00b6 It is OK to leave FIXMEs in code. Why? Encouraging people to at least document parts of code that need to be thought out more (or that are confusing) is better than leaving this code undocumented. All FIXMEs should be formatted like: FIXME(username): Revisit this code when the frob feature is done. ...where username is your GitHub username. Testing \u00b6 We use a combination of Integration and Unit testing to ensure that the our code is as bug-free as possible. All the tests can be found in lib/python/qmk/tests/ . You can run all the tests with qmk pytest . At the time of this writing our tests are not very comprehensive. Looking at the current tests and writing new test cases for untested situations is a great way to both familiarize yourself with the codebase and contribute to QMK. Integration Tests \u00b6 Integration tests can be found in lib/python/qmk/tests/test_cli_commands.py . This is where CLI commands are actually run and their overall behavior is verified. We use subprocess to launch each CLI command and a combination of checking output and returncode to determine if the right thing happened. Unit Tests \u00b6 The other test_*.py files in lib/python/qmk/tests/ contain unit tests. You can write tests for individual functions inside lib/python/qmk/ here. Generally these files are named after the module, with dots replaced by underscores. At the time of this writing we do not do any mocking for our tests. If you would like to help us change this please open an issue or join #cli on Discord and start a conversation there.","title":"\u4ee3\u7801\u4e66\u5199\u89c4\u8303 - Python"},{"location":"coding_conventions_python/#coding-conventions-python","text":"Most of our style follows PEP8 with some local modifications to make things less nit-picky. We target Python 3.6 for compatability with all supported platforms. We indent using four (4) spaces (soft tabs) We encourage liberal use of comments Think of them as a story describing the feature Use them liberally to explain why particular decisions were made. Do not write obvious comments If you're not sure if a comment is obvious, go ahead and include it. We require useful docstrings for all functions. In general we don't wrap lines, they can be as long as needed. If you do choose to wrap lines please do not wrap any wider than 76 columns. Some of our practices conflict with the wider python community to make our codebase more approachable to non-pythonistas.","title":"Coding Conventions (Python)"},{"location":"coding_conventions_python/#yapf","text":"You can use yapf to style your code. We provide a config in setup.cfg .","title":"YAPF"},{"location":"coding_conventions_python/#imports","text":"We don't have a hard and fast rule for when to use import ... vs from ... import ... . Understandability and maintainability is our ultimate goal. Generally we prefer to import specific function and class names from a module to keep code shorter and easier to understand. Sometimes this results in a name that is ambiguous, and in such cases we prefer to import the module instead. You should avoid using the \"as\" keyword when importing, unless you are importing a compatability module. Imports should be one line per module. We group import statements together using the standard python rules- system, 3rd party, local. Do not use from foo import * . Supply a list of objects you want to import instead, or import the whole module.","title":"Imports"},{"location":"coding_conventions_python/#import-examples","text":"Good: from qmk import effects effects.echo() Bad: from qmk.effects import echo echo() # It's unclear where echo comes from Good: from qmk.keymap import compile_firmware compile_firmware() OK, but the above is better: import qmk.keymap qmk.keymap.compile_firmware()","title":"Import Examples"},{"location":"coding_conventions_python/#statements","text":"One statement per line. Even when allowed (EG if foo: bar ) we do not combine 2 statements onto a single line.","title":"Statements"},{"location":"coding_conventions_python/#naming","text":"module_name , package_name , ClassName , method_name , ExceptionName , function_name , GLOBAL_CONSTANT_NAME , global_var_name , instance_var_name , function_parameter_name , local_var_name . Function names, variable names, and filenames should be descriptive; eschew abbreviation. In particular, do not use abbreviations that are ambiguous or unfamiliar to readers outside your project, and do not abbreviate by deleting letters within a word. Always use a .py filename extension. Never use dashes.","title":"Naming"},{"location":"coding_conventions_python/#names-to-avoid","text":"single character names except for counters or iterators. You may use e as an exception identifier in try/except statements. dashes ( - ) in any package/module name __double_leading_and_trailing_underscore__ names (reserved by Python)","title":"Names to Avoid"},{"location":"coding_conventions_python/#docstrings","text":"To maintain consistency with our docstrings we've set out the following guidelines. Use markdown formatting Always use triple-dquote docstrings with at least one linebreak: \"\"\"\\n\"\"\" First line is a short (< 70 char) description of what the function does If you need more in your docstring leave a blank line between the description and the rest. Start indented lines at the same indent level as the opening triple-dquote Document all function arguments using the format described below If present, Args:, Returns:, and Raises: should be the last three things in the docstring, separated by a blank line each.","title":"Docstrings"},{"location":"coding_conventions_python/#simple-docstring-example","text":"def my_awesome_function(): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. \"\"\" return int(time.time())","title":"Simple docstring example"},{"location":"coding_conventions_python/#complex-docstring-example","text":"def my_awesome_function(): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. This function always returns an integer number of seconds. \"\"\" return int(time.time())","title":"Complex docstring example"},{"location":"coding_conventions_python/#function-arguments-docstring-example","text":"def my_awesome_function(start=None, offset=0): \"\"\"Return the number of seconds since 1970 Jan 1 00:00 UTC. This function always returns an integer number of seconds. Args: start The time to start at instead of 1970 Jan 1 00:00 UTC offset Return an answer that has this number of seconds subtracted first Returns: An integer describing a number of seconds. Raises: ValueError When `start` or `offset` are not positive numbers \"\"\" if start < 0 or offset < 0: raise ValueError('start and offset must be positive numbers.') if not start: start = time.time() return int(start - offset)","title":"Function arguments docstring example"},{"location":"coding_conventions_python/#exceptions","text":"Exceptions are used to handle exceptional situations. They should not be used for flow control. This is a break from the python norm of \"ask for forgiveness.\" If you are catching an exception it should be to handle a situation that is unusual. If you use a catch-all exception for any reason you must log the exception and stacktrace using cli.log. Make your try/except blocks as short as possible. If you need a lot of try statements you may need to restructure your code.","title":"Exceptions"},{"location":"coding_conventions_python/#tuples","text":"When defining one-item tuples always include a trailing comma so that it is obvious you are using a tuple. Do not rely on implicit one-item tuple unpacking. Better still use a list which is unambiguous. This is particularly important when using the printf-style format strings that are commonly used.","title":"Tuples"},{"location":"coding_conventions_python/#lists-and-dictionaries","text":"We have configured YAPF to differentiate between sequence styles with a trailing comma. When a trailing comma is omitted YAPF will format the sequence as a single line. When a trailing comma is included YAPF will format the sequence with one item per line. You should generally prefer to keep short definition on a single line. Break out to multiple lines sooner rather than later to aid readability and maintainability.","title":"Lists and Dictionaries"},{"location":"coding_conventions_python/#parentheses","text":"Avoid excessive parentheses, but do use parentheses to make code easier to understand. Do not use them in return statements unless you are explicitly returning a tuple, or it is part of a math expression.","title":"Parentheses"},{"location":"coding_conventions_python/#format-strings","text":"We generally prefer printf-style format strings. Example: name = 'World' print('Hello, %s!' % (name,)) This style is used by the logging module, which we make use of extensively, and we have adopted it in other places for consistency. It is also more familiar to C programmers, who are a big part of our casual audience. Our included CLI module has support for using these without using the percent (%) operator. Look at cli.echo() and the various cli.log functions (EG, cli.log.info() ) for more details.","title":"Format Strings"},{"location":"coding_conventions_python/#comprehensions-generator-expressions","text":"We encourage the liberal use of comprehensions and generators, but do not let them get too complex. If you need complexity fall back to a for loop that is easier to understand.","title":"Comprehensions &amp; Generator Expressions"},{"location":"coding_conventions_python/#lambdas","text":"OK to use but probably should be avoided. With comprehensions and generators the need for lambdas is not as strong as it once was.","title":"Lambdas"},{"location":"coding_conventions_python/#conditional-expressions","text":"OK in variable assignment, but otherwise should be avoided. Conditional expressions are if statements that are in line with code. For example: x = 1 if cond else 2 It's generally not a good idea to use these as function arguments, sequence items, etc. It's too easy to overlook.","title":"Conditional Expressions"},{"location":"coding_conventions_python/#default-argument-values","text":"Encouraged, but values must be immutable objects. When specifying default values in argument lists always be careful to specify objects that can't be modified in place. If you use a mutable object the changes you make will persist between calls, which is usually not what you want. Even if that is what you intend to do it is confusing for others and will hinder understanding. Bad: def my_func(foo={}): pass Good: def my_func(foo=None): if not foo: foo = {}","title":"Default Argument Values"},{"location":"coding_conventions_python/#properties","text":"Always use properties instead of getter and setter functions. class Foo(object): def __init__(self): self._bar = None @property def bar(self): return self._bar @bar.setter def bar(self, bar): self._bar = bar","title":"Properties"},{"location":"coding_conventions_python/#truefalse-evaluations","text":"You should generally prefer the implicit True/False evaluation in if statements, rather than checking equivalency. Bad: if foo == True: pass if bar == False: pass Good: if foo: pass if not bar: pass","title":"True/False Evaluations"},{"location":"coding_conventions_python/#decorators","text":"Use when appropriate. Try to avoid too much magic unless it helps with understanding.","title":"Decorators"},{"location":"coding_conventions_python/#threading-and-multiprocessing","text":"Should be avoided. If you need this you will have to make a strong case before we merge your code.","title":"Threading and Multiprocessing"},{"location":"coding_conventions_python/#power-features","text":"Python is an extremely flexible language and gives you many fancy features such as custom metaclasses, access to bytecode, on-the-fly compilation, dynamic inheritance, object reparenting, import hacks, reflection, modification of system internals, etc. Don't use these. Performance is not a critical concern for us, and code understandability is. We want our codebase to be approachable by someone who only has a day or two to play with it. These features generally come with a cost to easy understanding, and we would prefer to have code that can be readily understood over faster or more compact code. Note that some standard library modules use these techniques and it is ok to make use of those modules. But please keep readability and understandability in mind when using them.","title":"Power Features"},{"location":"coding_conventions_python/#type-annotated-code","text":"For now we are not using any type annotation system, and would prefer that code remain unannotated. We may revisit this in the future.","title":"Type Annotated Code"},{"location":"coding_conventions_python/#function-length","text":"Prefer small and focused functions. We recognize that long functions are sometimes appropriate, so no hard limit is placed on function length. If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program. Even if your long function works perfectly now, someone modifying it in a few months may add new behavior. This could result in bugs that are hard to find. Keeping your functions short and simple makes it easier for other people to read and modify your code. You could find long and complicated functions when working with some code. Do not be intimidated by modifying existing code: if working with such a function proves to be difficult, you find that errors are hard to debug, or you want to use a piece of it in several different contexts, consider breaking up the function into smaller and more manageable pieces.","title":"Function length"},{"location":"coding_conventions_python/#fixmes","text":"It is OK to leave FIXMEs in code. Why? Encouraging people to at least document parts of code that need to be thought out more (or that are confusing) is better than leaving this code undocumented. All FIXMEs should be formatted like: FIXME(username): Revisit this code when the frob feature is done. ...where username is your GitHub username.","title":"FIXMEs"},{"location":"coding_conventions_python/#testing","text":"We use a combination of Integration and Unit testing to ensure that the our code is as bug-free as possible. All the tests can be found in lib/python/qmk/tests/ . You can run all the tests with qmk pytest . At the time of this writing our tests are not very comprehensive. Looking at the current tests and writing new test cases for untested situations is a great way to both familiarize yourself with the codebase and contribute to QMK.","title":"Testing"},{"location":"coding_conventions_python/#integration-tests","text":"Integration tests can be found in lib/python/qmk/tests/test_cli_commands.py . This is where CLI commands are actually run and their overall behavior is verified. We use subprocess to launch each CLI command and a combination of checking output and returncode to determine if the right thing happened.","title":"Integration Tests"},{"location":"coding_conventions_python/#unit-tests","text":"The other test_*.py files in lib/python/qmk/tests/ contain unit tests. You can write tests for individual functions inside lib/python/qmk/ here. Generally these files are named after the module, with dots replaced by underscores. At the time of this writing we do not do any mocking for our tests. If you would like to help us change this please open an issue or join #cli on Discord and start a conversation there.","title":"Unit Tests"},{"location":"compatible_microcontrollers/","text":"Compatible Microcontrollers \u00b6 QMK runs on any USB-capable AVR or ARM microcontroller with enough flash space - generally 32kB or more, though it will just squeeze into 16kB with most features disabled. Atmel AVR \u00b6 The following use LUFA as the USB stack: ATmega16U2 / ATmega32U2 ATmega16U4 / ATmega32U4 AT90USB64 / AT90USB128 AT90USB162 Certain MCUs which do not have native USB will use V-USB instead: ATmega32A ATmega328P ATmega328 ARM \u00b6 You can also use any ARM chip with USB that ChibiOS supports. Most have plenty of flash. Known to work are: STMicroelectronics (STM32) \u00b6 STM32F0x2 STM32F103 STM32F303 STM32F401 STM32F411 STM32F446 STM32G431 STM32G474 STM32L433 STM32L443 NXP (Kinetis) \u00b6 MKL26Z64 MK20DX128 MK20DX256 Atmel ATSAM \u00b6 There is limited support for one of Atmel's ATSAM microcontrollers, that being the ATSAMD51J18A used by the Massdrop keyboards .","title":"\u517c\u5bb9\u7684\u5355\u7247\u673a"},{"location":"compatible_microcontrollers/#compatible-microcontrollers","text":"QMK runs on any USB-capable AVR or ARM microcontroller with enough flash space - generally 32kB or more, though it will just squeeze into 16kB with most features disabled.","title":"Compatible Microcontrollers"},{"location":"compatible_microcontrollers/#atmel-avr","text":"The following use LUFA as the USB stack: ATmega16U2 / ATmega32U2 ATmega16U4 / ATmega32U4 AT90USB64 / AT90USB128 AT90USB162 Certain MCUs which do not have native USB will use V-USB instead: ATmega32A ATmega328P ATmega328","title":"Atmel AVR"},{"location":"compatible_microcontrollers/#arm","text":"You can also use any ARM chip with USB that ChibiOS supports. Most have plenty of flash. Known to work are:","title":"ARM"},{"location":"compatible_microcontrollers/#stmicroelectronics-stm32","text":"STM32F0x2 STM32F103 STM32F303 STM32F401 STM32F411 STM32F446 STM32G431 STM32G474 STM32L433 STM32L443","title":"STMicroelectronics (STM32)"},{"location":"compatible_microcontrollers/#nxp-kinetis","text":"MKL26Z64 MK20DX128 MK20DX256","title":"NXP (Kinetis)"},{"location":"compatible_microcontrollers/#atmel-atsam","text":"There is limited support for one of Atmel's ATSAM microcontrollers, that being the ATSAMD51J18A used by the Massdrop keyboards .","title":"Atmel ATSAM"},{"location":"config_options/","text":"Configuring QMK \u00b6 QMK is nearly infinitely configurable. Wherever possible we err on the side of allowing users to customize their keyboard, even at the expense of code size. That level of flexibility makes for a daunting configuration experience, however. There are two main types of configuration files in QMK- config.h and rules.mk . These files exist at various levels in QMK and all files of the same type are combined to build the final configuration. The levels, from lowest priority to highest priority, are: QMK Default Keyboard Folders (Up to 5 levels deep) Keymap QMK Default \u00b6 Every available setting in QMK has a default. If that setting is not set at the Keyboard, Folder, or Keymap level this is the setting that will be used. Keyboard \u00b6 This level contains config options that should apply to the whole keyboard. Some settings won't change in revisions, or most keymaps. Other settings are merely defaults for this keyboard and can be overridden by folders and/or keymaps. Folders \u00b6 Some keyboards have folders and sub-folders to allow for different hardware configurations. Most keyboards only go 1 folder deep, but QMK supports structures up to 5 folders deep. Each folder can have its own config.h and rules.mk files that are incorporated into the final configuration. Keymap \u00b6 This level contains all of the options for that particular keymap. If you wish to override a previous declaration, you can use #undef <variable> to undefine it, where you can then redefine it without an error. The config.h File \u00b6 This is a C header file that is one of the first things included, and will persist over the whole project (if included). Lots of variables can be set here and accessed elsewhere. The config.h file shouldn't be including other config.h files, or anything besides this: #include \"config_common.h\" Hardware Options \u00b6 #define VENDOR_ID 0x1234 defines your VID, and for most DIY projects, can be whatever you want #define PRODUCT_ID 0x5678 defines your PID, and for most DIY projects, can be whatever you want #define DEVICE_VER 0 defines the device version (often used for revisions) #define MANUFACTURER Me generally who/whatever brand produced the board #define PRODUCT Board the name of the keyboard #define MATRIX_ROWS 5 the number of rows in your keyboard's matrix #define MATRIX_COLS 15 the number of columns in your keyboard's matrix #define MATRIX_ROW_PINS { D0, D5, B5, B6 } pins of the rows, from top to bottom #define MATRIX_COL_PINS { F1, F0, B0, C7, F4, F5, F6, F7, D4, D6, B4, D7 } pins of the columns, from left to right #define MATRIX_IO_DELAY 30 the delay in microseconds when between changing matrix pin state and reading values #define UNUSED_PINS { D1, D2, D3, B1, B2, B3 } pins unused by the keyboard for reference #define MATRIX_HAS_GHOST define is matrix has ghost (unlikely) #define DIODE_DIRECTION COL2ROW COL2ROW or ROW2COL - how your matrix is configured. COL2ROW means the black mark on your diode is facing to the rows, and between the switch and the rows. #define DIRECT_PINS { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } pins mapped to rows and columns, from left to right. Defines a matrix where each switch is connected to a separate pin and ground. #define AUDIO_VOICES turns on the alternate audio voices (to cycle through) #define C4_AUDIO enables audio on pin C4 Deprecated. Use #define AUDIO_PIN C4 #define C5_AUDIO enables audio on pin C5 Deprecated. Use #define AUDIO_PIN C5 #define C6_AUDIO enables audio on pin C6 Deprecated. Use #define AUDIO_PIN C6 #define B5_AUDIO enables audio on pin B5 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B5 , or use #define AUDIO_PIN_ALT B5 if a C pin is enabled with AUDIO_PIN #define B6_AUDIO enables audio on pin B6 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B6 , or use #define AUDIO_PIN_ALT B6 if a C pin is enabled with AUDIO_PIN #define B7_AUDIO enables audio on pin B7 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B7 , or use #define AUDIO_PIN_ALT B7 if a C pin is enabled with AUDIO_PIN #define BACKLIGHT_PIN B7 pin of the backlight #define BACKLIGHT_LEVELS 3 number of levels your backlight will have (maximum 31 excluding off) #define BACKLIGHT_BREATHING enables backlight breathing #define BREATHING_PERIOD 6 the length of one backlight \"breath\" in seconds #define DEBOUNCE 5 the delay when reading the value of the pin (5 is default) #define LOCKING_SUPPORT_ENABLE mechanical locking support. Use KC_LCAP, KC_LNUM or KC_LSCR instead in keymap #define LOCKING_RESYNC_ENABLE tries to keep switch state consistent with keyboard LED state #define IS_COMMAND() (get_mods() == MOD_MASK_SHIFT) key combination that allows the use of magic commands (useful for debugging) #define USB_MAX_POWER_CONSUMPTION 500 sets the maximum power (in mA) over USB for the device (default: 500) #define USB_POLLING_INTERVAL_MS 10 sets the USB polling rate in milliseconds for the keyboard, mouse, and shared (NKRO/media keys) interfaces #define USB_SUSPEND_WAKEUP_DELAY 200 set the number of milliseconde to pause after sending a wakeup packet #define F_SCL 100000L sets the I2C clock rate speed for keyboards using I2C. The default is 400000L , except for keyboards using split_common , where the default is 100000L . Features That Can Be Disabled \u00b6 If you define these options you will disable the associated feature, which can save on code size. #define NO_DEBUG disable debugging #define NO_PRINT disable printing/debugging using hid_listen #define NO_ACTION_LAYER disable layers #define NO_ACTION_TAPPING disable tap dance and other tapping features #define NO_ACTION_ONESHOT disable one-shot modifiers #define NO_ACTION_MACRO disable old-style macro handling using MACRO() , action_get_macro() (deprecated) #define NO_ACTION_FUNCTION disable old-style function handling using fn_actions , action_function() (deprecated) Features That Can Be Enabled \u00b6 If you define these options you will enable the associated feature, which may increase your code size. #define FORCE_NKRO NKRO by default requires to be turned on, this forces it on during keyboard startup regardless of EEPROM setting. NKRO can still be turned off but will be turned on again if the keyboard reboots. #define STRICT_LAYER_RELEASE force a key release to be evaluated using the current layer stack instead of remembering which layer it came from (used for advanced cases) Behaviors That Can Be Configured \u00b6 #define TAPPING_TERM 200 how long before a tap becomes a hold, if set above 500, a key tapped during the tapping term will turn it into a hold too #define TAPPING_TERM_PER_KEY enables handling for per key TAPPING_TERM settings #define RETRO_TAPPING tap anyway, even after TAPPING_TERM, if there was no other key interruption between press and release See Retro Tapping for details #define RETRO_TAPPING_PER_KEY enables handling for per key RETRO_TAPPING settings #define TAPPING_TOGGLE 2 how many taps before triggering the toggle #define PERMISSIVE_HOLD makes tap and hold keys trigger the hold if another key is pressed before releasing, even if it hasn't hit the TAPPING_TERM See Permissive Hold for details #define PERMISSIVE_HOLD_PER_KEY enabled handling for per key PERMISSIVE_HOLD settings #define IGNORE_MOD_TAP_INTERRUPT makes it possible to do rolling combos (zx) with keys that convert to other keys on hold, by enforcing the TAPPING_TERM for both keys. See Ignore Mod Tap Interrupt for details #define IGNORE_MOD_TAP_INTERRUPT_PER_KEY enables handling for per key IGNORE_MOD_TAP_INTERRUPT settings #define TAPPING_FORCE_HOLD makes it possible to use a dual role key as modifier shortly after having been tapped See Tapping Force Hold Breaks any Tap Toggle functionality ( TT or the One Shot Tap Toggle) #define TAPPING_FORCE_HOLD_PER_KEY enables handling for per key TAPPING_FORCE_HOLD settings #define LEADER_TIMEOUT 300 how long before the leader key times out If you're having issues finishing the sequence before it times out, you may need to increase the timeout setting. Or you may want to enable the LEADER_PER_KEY_TIMING option, which resets the timeout after each key is tapped. #define LEADER_PER_KEY_TIMING sets the timer for leader key chords to run on each key press rather than overall #define LEADER_KEY_STRICT_KEY_PROCESSING Disables keycode filtering for Mod-Tap and Layer-Tap keycodes. Eg, if you enable this, you would need to specify MT(MOD_CTL, KC_A) if you want to use KC_A . #define ONESHOT_TIMEOUT 300 how long before oneshot times out #define ONESHOT_TAP_TOGGLE 2 how many taps before oneshot toggle is triggered #define QMK_KEYS_PER_SCAN 4 Allows sending more than one key per scan. By default, only one key event gets sent via process_record() per scan. This has little impact on most typing, but if you're doing a lot of chords, or your scan rate is slow to begin with, you can have some delay in processing key events. Each press and release is a separate event. For a keyboard with 1ms or so scan times, even a very fast typist isn't going to produce the 500 keystrokes a second needed to actually get more than a few ms of delay from this. But if you're doing chording on something with 3-4ms scan times? You probably want this. #define COMBO_COUNT 2 Set this to the number of combos that you're using in the Combo feature. #define COMBO_TERM 200 how long for the Combo keys to be detected. Defaults to TAPPING_TERM if not defined. #define TAP_CODE_DELAY 100 Sets the delay between register_code and unregister_code , if you're having issues with it registering properly (common on VUSB boards). The value is in milliseconds. #define TAP_HOLD_CAPS_DELAY 80 Sets the delay for Tap Hold keys ( LT , MT ) when using KC_CAPSLOCK keycode, as this has some special handling on MacOS. The value is in milliseconds, and defaults to 80 ms if not defined. For macOS, you may want to set this to 200 or higher. RGB Light Configuration \u00b6 #define RGB_DI_PIN D7 pin the DI on the WS2812 is hooked-up to #define RGBLIGHT_ANIMATIONS run RGB animations #define RGBLIGHT_LAYERS Lets you define lighting layers that can be toggled on or off. Great for showing the current keyboard layer or caps lock state. #define RGBLIGHT_MAX_LAYERS Defaults to 8. Can be expanded up to 32 if more lighting layers are needed. Note: Increasing the maximum will increase the firmware size and slow sync on split keyboards. #define RGBLIGHT_LAYER_BLINK Adds ability to blink a lighting layer for a specified number of milliseconds (e.g. to acknowledge an action). #define RGBLIGHT_LAYERS_OVERRIDE_RGB_OFF If defined, then lighting layers will be shown even if RGB Light is off. #define RGBLED_NUM 12 number of LEDs #define RGBLIGHT_SPLIT Needed if both halves of the board have RGB LEDs wired directly to the RGB output pin on the controllers instead of passing the output of the left half to the input of the right half #define RGBLED_SPLIT { 6, 6 } number of LEDs connected that are directly wired to RGB_DI_PIN on each half of a split keyboard First value indicates number of LEDs for left half, second value is for the right half When RGBLED_SPLIT is defined, RGBLIGHT_SPLIT is implicitly defined. #define RGBLIGHT_HUE_STEP 12 units to step when in/decreasing hue #define RGBLIGHT_SAT_STEP 25 units to step when in/decreasing saturation #define RGBLIGHT_VAL_STEP 12 units to step when in/decreasing value (brightness) #define RGBW Enables RGBW LED support Mouse Key Options \u00b6 #define MOUSEKEY_INTERVAL 20 #define MOUSEKEY_DELAY 0 #define MOUSEKEY_TIME_TO_MAX 60 #define MOUSEKEY_MAX_SPEED 7 #define MOUSEKEY_WHEEL_DELAY 0 Split Keyboard Options \u00b6 Split Keyboard specific options, make sure you have 'SPLIT_KEYBOARD = yes' in your rules.mk SPLIT_TRANSPORT = custom Allows replacing the standard split communication routines with a custom one. ARM based split keyboards must use this at present. Setting Handedness \u00b6 One thing to remember, the side that the USB port is plugged into is always the master half. The side not plugged into USB is the slave. There are a few different ways to set handedness for split keyboards (listed in order of precedence): Set SPLIT_HAND_PIN : Reads a pin to determine handedness. If pin is high, it's the left side, if low, the half is determined to be the right side Set EE_HANDS and flash eeprom-lefthand.eep / eeprom-righthand.eep to each half * For boards with DFU bootloader you can use :dfu-split-left / :dfu-split-right to flash these EEPROM files * For boards with Caterina bootloader (like stock Pro Micros), use :avrdude-split-left / :avrdude-split-right * For boards with ARM DFU bootloader (like Proton C), use :dfu-util-split-left / :dfu-util-split-right Set MASTER_RIGHT : Half that is plugged into the USB port is determined to be the master and right half (inverse of the default) Default: The side that is plugged into the USB port is the master half and is assumed to be the left half. The slave side is the right half Defines for handedness \u00b6 #define SPLIT_HAND_PIN B7 For using high/low pin to determine handedness, low = right hand, high = left hand. Replace B7 with the pin you are using. This is optional, and if you leave SPLIT_HAND_PIN undefined, then you can still use the EE_HANDS method or MASTER_LEFT / MASTER_RIGHT defines like the stock Let's Split uses. #define SPLIT_HAND_MATRIX_GRID <out_pin>,<in_pin> The handedness is determined by using the intersection of the keyswitches in the key matrix, which does not exist. Normally, when this intersection is shorted (level low), it is considered left. If you define #define SPLIT_HAND_MATRIX_GRID_LOW_IS_RIGHT , it is determined to be right when the level is low. #define EE_HANDS (only works if SPLIT_HAND_PIN and SPLIT_HAND_MATRIX_GRID are not defined) Reads the handedness value stored in the EEPROM after eeprom-lefthand.eep / eeprom-righthand.eep has been flashed to their respective halves. #define MASTER_RIGHT Master half is defined to be the right half. Other Options \u00b6 #define USE_I2C For using I2C instead of Serial (defaults to serial) #define SOFT_SERIAL_PIN D0 When using serial, define this. D0 or D1 , D2 , D3 , E6 . #define MATRIX_ROW_PINS_RIGHT { <row pins> } #define MATRIX_COL_PINS_RIGHT { <col pins> } If you want to specify a different pinout for the right half than the left half, you can define MATRIX_ROW_PINS_RIGHT / MATRIX_COL_PINS_RIGHT . Currently, the size of MATRIX_ROW_PINS must be the same as MATRIX_ROW_PINS_RIGHT and likewise for the definition of columns. #define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } If you want to specify a different direct pinout for the right half than the left half, you can define DIRECT_PINS_RIGHT . Currently, the size of DIRECT_PINS must be the same as DIRECT_PINS_RIGHT . #define RGBLED_SPLIT { 6, 6 } See RGB Light Configuration #define SELECT_SOFT_SERIAL_SPEED <speed> (default speed is 1) Sets the protocol speed when using serial communication Speeds: 0: about 189kbps (Experimental only) 1: about 137kbps (default) 2: about 75kbps 3: about 39kbps 4: about 26kbps 5: about 20kbps #define SPLIT_USB_DETECT Detect (with timeout) USB connection when delegating master/slave Default behavior for ARM Required for AVR Teensy #define SPLIT_USB_TIMEOUT 2000 Maximum timeout when detecting master/slave when using SPLIT_USB_DETECT #define SPLIT_USB_TIMEOUT_POLL 10 Poll frequency when detecting master/slave when using SPLIT_USB_DETECT The rules.mk File \u00b6 This is a make file that is included by the top-level Makefile . It is used to set some information about the MCU that we will be compiling for as well as enabling and disabling certain features. Build Options \u00b6 DEFAULT_FOLDER Used to specify a default folder when a keyboard has more than one sub-folder. FIRMWARE_FORMAT Defines which format (bin, hex) is copied to the root qmk_firmware folder after building. SRC Used to add files to the compilation/linking list. LIB_SRC Used to add files as a library to the compilation/linking list. The files specified by LIB_SRC is linked after the files specified by SRC . For example, if you specify: SRC += a.c LIB_SRC += lib_b.c SRC += c.c LIB_SRC += lib_d.c The link order is as follows. ... a.o c.o ... lib_b.a lib_d.a ... LAYOUTS A list of layouts this keyboard supports. LTO_ENABLE Enables Link Time Optimization (LTO) when compiling the keyboard. This makes the process take longer, but it can significantly reduce the compiled size (and since the firmware is small, the added time is not noticeable). However, this will automatically disable the legacy TMK Macros and Functions features, as these break when LTO is enabled. It does this by automatically defining NO_ACTION_MACRO and NO_ACTION_FUNCTION . (Note: This does not affect QMK Macros and Layers .) AVR MCU Options \u00b6 MCU = atmega32u4 F_CPU = 16000000 ARCH = AVR8 F_USB = $(F_CPU) OPT_DEFS += -DINTERRUPT_CONTROL_ENDPOINT BOOTLOADER = atmel-dfu with the following options: atmel-dfu lufa-dfu qmk-dfu halfkay caterina bootloadHID USBasp Feature Options \u00b6 Use these to enable or disable building certain features. The more you have enabled the bigger your firmware will be, and you run the risk of building a firmware too large for your MCU. BOOTMAGIC_ENABLE Virtual DIP switch configuration MOUSEKEY_ENABLE Mouse keys EXTRAKEY_ENABLE Audio control and System control CONSOLE_ENABLE Console for debug COMMAND_ENABLE Commands for debug and configuration COMBO_ENABLE Key combo feature NKRO_ENABLE USB N-Key Rollover - if this doesn't work, see here: https://github.com/tmk/tmk_keyboard/wiki/FAQ#nkro-doesnt-work AUDIO_ENABLE Enable the audio subsystem. RGBLIGHT_ENABLE Enable keyboard underlight functionality LEADER_ENABLE Enable leader key chording MIDI_ENABLE MIDI controls UNICODE_ENABLE Unicode BLUETOOTH Current options are AdafruitBLE, RN42 SPLIT_KEYBOARD Enables split keyboard support (dual MCU like the let's split and bakingpy's boards) and includes all necessary files located at quantum/split_common CUSTOM_MATRIX Allows replacing the standard matrix scanning routine with a custom one. DEBOUNCE_TYPE Allows replacing the standard key debouncing routine with an alternative or custom one. WAIT_FOR_USB Forces the keyboard to wait for a USB connection to be established before it starts up NO_USB_STARTUP_CHECK Disables usb suspend check after keyboard startup. Usually the keyboard waits for the host to wake it up before any tasks are performed. This is useful for split keyboards as one half will not get a wakeup call but must send commands to the master. USB Endpoint Limitations \u00b6 In order to provide services over USB, QMK has to use USB endpoints. These are a finite resource: each microcontroller has only a certain number. This limits what features can be enabled together. If the available endpoints are exceeded, a build error is thrown. The following features can require separate endpoints: MOUSEKEY_ENABLE EXTRAKEY_ENABLE CONSOLE_ENABLE NKRO_ENABLE MIDI_ENABLE RAW_ENABLE VIRTSER_ENABLE In order to improve utilisation of the endpoints, the HID features can be combined to use a single endpoint. By default, MOUSEKEY , EXTRAKEY , and NKRO are combined into a single endpoint. The base keyboard functionality can also be combined into the endpoint, by setting KEYBOARD_SHARED_EP = yes . This frees up one more endpoint, but it can prevent the keyboard working in some BIOSes, as they do not implement Boot Keyboard protocol switching. Combining the mouse also breaks Boot Mouse compatibility. The mouse can be uncombined by setting MOUSE_SHARED_EP = no if this functionality is required.","title":"\u914d\u7f6e\u9009\u9879"},{"location":"config_options/#configuring-qmk","text":"QMK is nearly infinitely configurable. Wherever possible we err on the side of allowing users to customize their keyboard, even at the expense of code size. That level of flexibility makes for a daunting configuration experience, however. There are two main types of configuration files in QMK- config.h and rules.mk . These files exist at various levels in QMK and all files of the same type are combined to build the final configuration. The levels, from lowest priority to highest priority, are: QMK Default Keyboard Folders (Up to 5 levels deep) Keymap","title":"Configuring QMK"},{"location":"config_options/#qmk-default","text":"Every available setting in QMK has a default. If that setting is not set at the Keyboard, Folder, or Keymap level this is the setting that will be used.","title":"QMK Default"},{"location":"config_options/#keyboard","text":"This level contains config options that should apply to the whole keyboard. Some settings won't change in revisions, or most keymaps. Other settings are merely defaults for this keyboard and can be overridden by folders and/or keymaps.","title":"Keyboard"},{"location":"config_options/#folders","text":"Some keyboards have folders and sub-folders to allow for different hardware configurations. Most keyboards only go 1 folder deep, but QMK supports structures up to 5 folders deep. Each folder can have its own config.h and rules.mk files that are incorporated into the final configuration.","title":"Folders"},{"location":"config_options/#keymap","text":"This level contains all of the options for that particular keymap. If you wish to override a previous declaration, you can use #undef <variable> to undefine it, where you can then redefine it without an error.","title":"Keymap"},{"location":"config_options/#the-configh-file","text":"This is a C header file that is one of the first things included, and will persist over the whole project (if included). Lots of variables can be set here and accessed elsewhere. The config.h file shouldn't be including other config.h files, or anything besides this: #include \"config_common.h\"","title":"The config.h File"},{"location":"config_options/#hardware-options","text":"#define VENDOR_ID 0x1234 defines your VID, and for most DIY projects, can be whatever you want #define PRODUCT_ID 0x5678 defines your PID, and for most DIY projects, can be whatever you want #define DEVICE_VER 0 defines the device version (often used for revisions) #define MANUFACTURER Me generally who/whatever brand produced the board #define PRODUCT Board the name of the keyboard #define MATRIX_ROWS 5 the number of rows in your keyboard's matrix #define MATRIX_COLS 15 the number of columns in your keyboard's matrix #define MATRIX_ROW_PINS { D0, D5, B5, B6 } pins of the rows, from top to bottom #define MATRIX_COL_PINS { F1, F0, B0, C7, F4, F5, F6, F7, D4, D6, B4, D7 } pins of the columns, from left to right #define MATRIX_IO_DELAY 30 the delay in microseconds when between changing matrix pin state and reading values #define UNUSED_PINS { D1, D2, D3, B1, B2, B3 } pins unused by the keyboard for reference #define MATRIX_HAS_GHOST define is matrix has ghost (unlikely) #define DIODE_DIRECTION COL2ROW COL2ROW or ROW2COL - how your matrix is configured. COL2ROW means the black mark on your diode is facing to the rows, and between the switch and the rows. #define DIRECT_PINS { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } pins mapped to rows and columns, from left to right. Defines a matrix where each switch is connected to a separate pin and ground. #define AUDIO_VOICES turns on the alternate audio voices (to cycle through) #define C4_AUDIO enables audio on pin C4 Deprecated. Use #define AUDIO_PIN C4 #define C5_AUDIO enables audio on pin C5 Deprecated. Use #define AUDIO_PIN C5 #define C6_AUDIO enables audio on pin C6 Deprecated. Use #define AUDIO_PIN C6 #define B5_AUDIO enables audio on pin B5 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B5 , or use #define AUDIO_PIN_ALT B5 if a C pin is enabled with AUDIO_PIN #define B6_AUDIO enables audio on pin B6 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B6 , or use #define AUDIO_PIN_ALT B6 if a C pin is enabled with AUDIO_PIN #define B7_AUDIO enables audio on pin B7 (duophony is enabled if one of B pins is enabled along with one of C pins) Deprecated. Use #define AUDIO_PIN B7 , or use #define AUDIO_PIN_ALT B7 if a C pin is enabled with AUDIO_PIN #define BACKLIGHT_PIN B7 pin of the backlight #define BACKLIGHT_LEVELS 3 number of levels your backlight will have (maximum 31 excluding off) #define BACKLIGHT_BREATHING enables backlight breathing #define BREATHING_PERIOD 6 the length of one backlight \"breath\" in seconds #define DEBOUNCE 5 the delay when reading the value of the pin (5 is default) #define LOCKING_SUPPORT_ENABLE mechanical locking support. Use KC_LCAP, KC_LNUM or KC_LSCR instead in keymap #define LOCKING_RESYNC_ENABLE tries to keep switch state consistent with keyboard LED state #define IS_COMMAND() (get_mods() == MOD_MASK_SHIFT) key combination that allows the use of magic commands (useful for debugging) #define USB_MAX_POWER_CONSUMPTION 500 sets the maximum power (in mA) over USB for the device (default: 500) #define USB_POLLING_INTERVAL_MS 10 sets the USB polling rate in milliseconds for the keyboard, mouse, and shared (NKRO/media keys) interfaces #define USB_SUSPEND_WAKEUP_DELAY 200 set the number of milliseconde to pause after sending a wakeup packet #define F_SCL 100000L sets the I2C clock rate speed for keyboards using I2C. The default is 400000L , except for keyboards using split_common , where the default is 100000L .","title":"Hardware Options"},{"location":"config_options/#features-that-can-be-disabled","text":"If you define these options you will disable the associated feature, which can save on code size. #define NO_DEBUG disable debugging #define NO_PRINT disable printing/debugging using hid_listen #define NO_ACTION_LAYER disable layers #define NO_ACTION_TAPPING disable tap dance and other tapping features #define NO_ACTION_ONESHOT disable one-shot modifiers #define NO_ACTION_MACRO disable old-style macro handling using MACRO() , action_get_macro() (deprecated) #define NO_ACTION_FUNCTION disable old-style function handling using fn_actions , action_function() (deprecated)","title":"Features That Can Be Disabled"},{"location":"config_options/#features-that-can-be-enabled","text":"If you define these options you will enable the associated feature, which may increase your code size. #define FORCE_NKRO NKRO by default requires to be turned on, this forces it on during keyboard startup regardless of EEPROM setting. NKRO can still be turned off but will be turned on again if the keyboard reboots. #define STRICT_LAYER_RELEASE force a key release to be evaluated using the current layer stack instead of remembering which layer it came from (used for advanced cases)","title":"Features That Can Be Enabled"},{"location":"config_options/#behaviors-that-can-be-configured","text":"#define TAPPING_TERM 200 how long before a tap becomes a hold, if set above 500, a key tapped during the tapping term will turn it into a hold too #define TAPPING_TERM_PER_KEY enables handling for per key TAPPING_TERM settings #define RETRO_TAPPING tap anyway, even after TAPPING_TERM, if there was no other key interruption between press and release See Retro Tapping for details #define RETRO_TAPPING_PER_KEY enables handling for per key RETRO_TAPPING settings #define TAPPING_TOGGLE 2 how many taps before triggering the toggle #define PERMISSIVE_HOLD makes tap and hold keys trigger the hold if another key is pressed before releasing, even if it hasn't hit the TAPPING_TERM See Permissive Hold for details #define PERMISSIVE_HOLD_PER_KEY enabled handling for per key PERMISSIVE_HOLD settings #define IGNORE_MOD_TAP_INTERRUPT makes it possible to do rolling combos (zx) with keys that convert to other keys on hold, by enforcing the TAPPING_TERM for both keys. See Ignore Mod Tap Interrupt for details #define IGNORE_MOD_TAP_INTERRUPT_PER_KEY enables handling for per key IGNORE_MOD_TAP_INTERRUPT settings #define TAPPING_FORCE_HOLD makes it possible to use a dual role key as modifier shortly after having been tapped See Tapping Force Hold Breaks any Tap Toggle functionality ( TT or the One Shot Tap Toggle) #define TAPPING_FORCE_HOLD_PER_KEY enables handling for per key TAPPING_FORCE_HOLD settings #define LEADER_TIMEOUT 300 how long before the leader key times out If you're having issues finishing the sequence before it times out, you may need to increase the timeout setting. Or you may want to enable the LEADER_PER_KEY_TIMING option, which resets the timeout after each key is tapped. #define LEADER_PER_KEY_TIMING sets the timer for leader key chords to run on each key press rather than overall #define LEADER_KEY_STRICT_KEY_PROCESSING Disables keycode filtering for Mod-Tap and Layer-Tap keycodes. Eg, if you enable this, you would need to specify MT(MOD_CTL, KC_A) if you want to use KC_A . #define ONESHOT_TIMEOUT 300 how long before oneshot times out #define ONESHOT_TAP_TOGGLE 2 how many taps before oneshot toggle is triggered #define QMK_KEYS_PER_SCAN 4 Allows sending more than one key per scan. By default, only one key event gets sent via process_record() per scan. This has little impact on most typing, but if you're doing a lot of chords, or your scan rate is slow to begin with, you can have some delay in processing key events. Each press and release is a separate event. For a keyboard with 1ms or so scan times, even a very fast typist isn't going to produce the 500 keystrokes a second needed to actually get more than a few ms of delay from this. But if you're doing chording on something with 3-4ms scan times? You probably want this. #define COMBO_COUNT 2 Set this to the number of combos that you're using in the Combo feature. #define COMBO_TERM 200 how long for the Combo keys to be detected. Defaults to TAPPING_TERM if not defined. #define TAP_CODE_DELAY 100 Sets the delay between register_code and unregister_code , if you're having issues with it registering properly (common on VUSB boards). The value is in milliseconds. #define TAP_HOLD_CAPS_DELAY 80 Sets the delay for Tap Hold keys ( LT , MT ) when using KC_CAPSLOCK keycode, as this has some special handling on MacOS. The value is in milliseconds, and defaults to 80 ms if not defined. For macOS, you may want to set this to 200 or higher.","title":"Behaviors That Can Be Configured"},{"location":"config_options/#rgb-light-configuration","text":"#define RGB_DI_PIN D7 pin the DI on the WS2812 is hooked-up to #define RGBLIGHT_ANIMATIONS run RGB animations #define RGBLIGHT_LAYERS Lets you define lighting layers that can be toggled on or off. Great for showing the current keyboard layer or caps lock state. #define RGBLIGHT_MAX_LAYERS Defaults to 8. Can be expanded up to 32 if more lighting layers are needed. Note: Increasing the maximum will increase the firmware size and slow sync on split keyboards. #define RGBLIGHT_LAYER_BLINK Adds ability to blink a lighting layer for a specified number of milliseconds (e.g. to acknowledge an action). #define RGBLIGHT_LAYERS_OVERRIDE_RGB_OFF If defined, then lighting layers will be shown even if RGB Light is off. #define RGBLED_NUM 12 number of LEDs #define RGBLIGHT_SPLIT Needed if both halves of the board have RGB LEDs wired directly to the RGB output pin on the controllers instead of passing the output of the left half to the input of the right half #define RGBLED_SPLIT { 6, 6 } number of LEDs connected that are directly wired to RGB_DI_PIN on each half of a split keyboard First value indicates number of LEDs for left half, second value is for the right half When RGBLED_SPLIT is defined, RGBLIGHT_SPLIT is implicitly defined. #define RGBLIGHT_HUE_STEP 12 units to step when in/decreasing hue #define RGBLIGHT_SAT_STEP 25 units to step when in/decreasing saturation #define RGBLIGHT_VAL_STEP 12 units to step when in/decreasing value (brightness) #define RGBW Enables RGBW LED support","title":"RGB Light Configuration"},{"location":"config_options/#mouse-key-options","text":"#define MOUSEKEY_INTERVAL 20 #define MOUSEKEY_DELAY 0 #define MOUSEKEY_TIME_TO_MAX 60 #define MOUSEKEY_MAX_SPEED 7 #define MOUSEKEY_WHEEL_DELAY 0","title":"Mouse Key Options"},{"location":"config_options/#split-keyboard-options","text":"Split Keyboard specific options, make sure you have 'SPLIT_KEYBOARD = yes' in your rules.mk SPLIT_TRANSPORT = custom Allows replacing the standard split communication routines with a custom one. ARM based split keyboards must use this at present.","title":"Split Keyboard Options"},{"location":"config_options/#setting-handedness","text":"One thing to remember, the side that the USB port is plugged into is always the master half. The side not plugged into USB is the slave. There are a few different ways to set handedness for split keyboards (listed in order of precedence): Set SPLIT_HAND_PIN : Reads a pin to determine handedness. If pin is high, it's the left side, if low, the half is determined to be the right side Set EE_HANDS and flash eeprom-lefthand.eep / eeprom-righthand.eep to each half * For boards with DFU bootloader you can use :dfu-split-left / :dfu-split-right to flash these EEPROM files * For boards with Caterina bootloader (like stock Pro Micros), use :avrdude-split-left / :avrdude-split-right * For boards with ARM DFU bootloader (like Proton C), use :dfu-util-split-left / :dfu-util-split-right Set MASTER_RIGHT : Half that is plugged into the USB port is determined to be the master and right half (inverse of the default) Default: The side that is plugged into the USB port is the master half and is assumed to be the left half. The slave side is the right half","title":"Setting Handedness"},{"location":"config_options/#other-options","text":"#define USE_I2C For using I2C instead of Serial (defaults to serial) #define SOFT_SERIAL_PIN D0 When using serial, define this. D0 or D1 , D2 , D3 , E6 . #define MATRIX_ROW_PINS_RIGHT { <row pins> } #define MATRIX_COL_PINS_RIGHT { <col pins> } If you want to specify a different pinout for the right half than the left half, you can define MATRIX_ROW_PINS_RIGHT / MATRIX_COL_PINS_RIGHT . Currently, the size of MATRIX_ROW_PINS must be the same as MATRIX_ROW_PINS_RIGHT and likewise for the definition of columns. #define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } If you want to specify a different direct pinout for the right half than the left half, you can define DIRECT_PINS_RIGHT . Currently, the size of DIRECT_PINS must be the same as DIRECT_PINS_RIGHT . #define RGBLED_SPLIT { 6, 6 } See RGB Light Configuration #define SELECT_SOFT_SERIAL_SPEED <speed> (default speed is 1) Sets the protocol speed when using serial communication Speeds: 0: about 189kbps (Experimental only) 1: about 137kbps (default) 2: about 75kbps 3: about 39kbps 4: about 26kbps 5: about 20kbps #define SPLIT_USB_DETECT Detect (with timeout) USB connection when delegating master/slave Default behavior for ARM Required for AVR Teensy #define SPLIT_USB_TIMEOUT 2000 Maximum timeout when detecting master/slave when using SPLIT_USB_DETECT #define SPLIT_USB_TIMEOUT_POLL 10 Poll frequency when detecting master/slave when using SPLIT_USB_DETECT","title":"Other Options"},{"location":"config_options/#the-rulesmk-file","text":"This is a make file that is included by the top-level Makefile . It is used to set some information about the MCU that we will be compiling for as well as enabling and disabling certain features.","title":"The rules.mk File"},{"location":"config_options/#build-options","text":"DEFAULT_FOLDER Used to specify a default folder when a keyboard has more than one sub-folder. FIRMWARE_FORMAT Defines which format (bin, hex) is copied to the root qmk_firmware folder after building. SRC Used to add files to the compilation/linking list. LIB_SRC Used to add files as a library to the compilation/linking list. The files specified by LIB_SRC is linked after the files specified by SRC . For example, if you specify: SRC += a.c LIB_SRC += lib_b.c SRC += c.c LIB_SRC += lib_d.c The link order is as follows. ... a.o c.o ... lib_b.a lib_d.a ... LAYOUTS A list of layouts this keyboard supports. LTO_ENABLE Enables Link Time Optimization (LTO) when compiling the keyboard. This makes the process take longer, but it can significantly reduce the compiled size (and since the firmware is small, the added time is not noticeable). However, this will automatically disable the legacy TMK Macros and Functions features, as these break when LTO is enabled. It does this by automatically defining NO_ACTION_MACRO and NO_ACTION_FUNCTION . (Note: This does not affect QMK Macros and Layers .)","title":"Build Options"},{"location":"config_options/#avr-mcu-options","text":"MCU = atmega32u4 F_CPU = 16000000 ARCH = AVR8 F_USB = $(F_CPU) OPT_DEFS += -DINTERRUPT_CONTROL_ENDPOINT BOOTLOADER = atmel-dfu with the following options: atmel-dfu lufa-dfu qmk-dfu halfkay caterina bootloadHID USBasp","title":"AVR MCU Options"},{"location":"config_options/#feature-options","text":"Use these to enable or disable building certain features. The more you have enabled the bigger your firmware will be, and you run the risk of building a firmware too large for your MCU. BOOTMAGIC_ENABLE Virtual DIP switch configuration MOUSEKEY_ENABLE Mouse keys EXTRAKEY_ENABLE Audio control and System control CONSOLE_ENABLE Console for debug COMMAND_ENABLE Commands for debug and configuration COMBO_ENABLE Key combo feature NKRO_ENABLE USB N-Key Rollover - if this doesn't work, see here: https://github.com/tmk/tmk_keyboard/wiki/FAQ#nkro-doesnt-work AUDIO_ENABLE Enable the audio subsystem. RGBLIGHT_ENABLE Enable keyboard underlight functionality LEADER_ENABLE Enable leader key chording MIDI_ENABLE MIDI controls UNICODE_ENABLE Unicode BLUETOOTH Current options are AdafruitBLE, RN42 SPLIT_KEYBOARD Enables split keyboard support (dual MCU like the let's split and bakingpy's boards) and includes all necessary files located at quantum/split_common CUSTOM_MATRIX Allows replacing the standard matrix scanning routine with a custom one. DEBOUNCE_TYPE Allows replacing the standard key debouncing routine with an alternative or custom one. WAIT_FOR_USB Forces the keyboard to wait for a USB connection to be established before it starts up NO_USB_STARTUP_CHECK Disables usb suspend check after keyboard startup. Usually the keyboard waits for the host to wake it up before any tasks are performed. This is useful for split keyboards as one half will not get a wakeup call but must send commands to the master.","title":"Feature Options"},{"location":"config_options/#usb-endpoint-limitations","text":"In order to provide services over USB, QMK has to use USB endpoints. These are a finite resource: each microcontroller has only a certain number. This limits what features can be enabled together. If the available endpoints are exceeded, a build error is thrown. The following features can require separate endpoints: MOUSEKEY_ENABLE EXTRAKEY_ENABLE CONSOLE_ENABLE NKRO_ENABLE MIDI_ENABLE RAW_ENABLE VIRTSER_ENABLE In order to improve utilisation of the endpoints, the HID features can be combined to use a single endpoint. By default, MOUSEKEY , EXTRAKEY , and NKRO are combined into a single endpoint. The base keyboard functionality can also be combined into the endpoint, by setting KEYBOARD_SHARED_EP = yes . This frees up one more endpoint, but it can prevent the keyboard working in some BIOSes, as they do not implement Boot Keyboard protocol switching. Combining the mouse also breaks Boot Mouse compatibility. The mouse can be uncombined by setting MOUSE_SHARED_EP = no if this functionality is required.","title":"USB Endpoint Limitations"},{"location":"configurator_architecture/","text":"QMK Configurator Architecture \u00b6 This page describes the web architecture behind QMK Configurator at a high level. If you are interested in the architecture of the QMK Configurator code itself you should start at the qmk_configurator repository. Overview \u00b6 Detailed Description \u00b6 QMK Configurator is a Single Page Application that allows users to create custom keymaps for their QMK-compatible keyboard. They can export JSON representation of their keymaps and compile firmware binaries that can be flashed to their keyboard using a tool like QMK Toolbox . Configurator gets metadata about keyboards from the Keyboard Metadata store and submits compile requests to the QMK API. The results of those compile requests will be made available on Digital Ocean Spaces , an S3-compatible data store. Configurator Frontend \u00b6 Address: https://config.qmk.fm The Configurator Frontend is compiled into a set of static files that are served by Github Pages. This action happens every time a commit is pushed to the qmk_configurator master branch. You can view the status of these jobs on the qmk_configurator actions tab . Keyboard Metadata \u00b6 Address: https://keyboards.qmk.fm The Keyboard Metadata is generated every time a keyboard in qmk_firmware changes. The resulting JSON files are uploaded to Spaces and used by Configurator to generate UI for each keyboard. You can view the status of this job on the qmk_firmware actions tab . If you are a QMK Collaborator you can manually run this job using the workflow_dispatch event trigger. QMK API \u00b6 Address: http://api.qmk.fm The QMK API accepts keymap.json files for compilation. These are the same files you can use directly with qmk compile and qmk flash . When a keymap.json is submitted the browser will poll the status of the job periodically (every 2 seconds or longer, preferably) until the job has completed. The final status JSON will contain pointers to source and binary downloads for the keymap. QMK API always presents the source and binary downloads side-by-side to comply with the GPL. There are 3 non-error status responses from the API- Compile Job Queued Compile Job Running Compile Job Finished Compile Job Queued \u00b6 This status indicates that the job has not yet been picked up by a QMK Compiler node. Configurator shows this status as \"Waiting for an oven\". Compile Job Running \u00b6 This status indicates that the job has started compiling. Configurator shows this status as \"Baking\". Compile Job Finished \u00b6 This status indicates that the job has completed. There will be keys in the status JSON for source and binary downloads. Redis/RQ \u00b6 QMK API uses RQ to distribute jobs to the available QMK Compiler nodes. When a keymap.json is received it's put into the RQ queue, where a qmk_compiler node will pick it up from. QMK Compiler \u00b6 QMK Compiler is what actually performs the compilation of the keymap.json . It does so by checking out the requested qmk_firmware branch, running qmk compile keymap.json , and then uploading the resulting source and binary to Digital Ocean Spaces. When users download their source/binary, API will redirect them to the authenticated Spaces download URL.","title":"QMK Configurator Architecture"},{"location":"configurator_architecture/#qmk-configurator-architecture","text":"This page describes the web architecture behind QMK Configurator at a high level. If you are interested in the architecture of the QMK Configurator code itself you should start at the qmk_configurator repository.","title":"QMK Configurator Architecture"},{"location":"configurator_architecture/#overview","text":"","title":"Overview"},{"location":"configurator_architecture/#detailed-description","text":"QMK Configurator is a Single Page Application that allows users to create custom keymaps for their QMK-compatible keyboard. They can export JSON representation of their keymaps and compile firmware binaries that can be flashed to their keyboard using a tool like QMK Toolbox . Configurator gets metadata about keyboards from the Keyboard Metadata store and submits compile requests to the QMK API. The results of those compile requests will be made available on Digital Ocean Spaces , an S3-compatible data store.","title":"Detailed Description"},{"location":"configurator_architecture/#configurator-frontend","text":"Address: https://config.qmk.fm The Configurator Frontend is compiled into a set of static files that are served by Github Pages. This action happens every time a commit is pushed to the qmk_configurator master branch. You can view the status of these jobs on the qmk_configurator actions tab .","title":"Configurator Frontend"},{"location":"configurator_architecture/#keyboard-metadata","text":"Address: https://keyboards.qmk.fm The Keyboard Metadata is generated every time a keyboard in qmk_firmware changes. The resulting JSON files are uploaded to Spaces and used by Configurator to generate UI for each keyboard. You can view the status of this job on the qmk_firmware actions tab . If you are a QMK Collaborator you can manually run this job using the workflow_dispatch event trigger.","title":"Keyboard Metadata"},{"location":"configurator_architecture/#qmk-api","text":"Address: http://api.qmk.fm The QMK API accepts keymap.json files for compilation. These are the same files you can use directly with qmk compile and qmk flash . When a keymap.json is submitted the browser will poll the status of the job periodically (every 2 seconds or longer, preferably) until the job has completed. The final status JSON will contain pointers to source and binary downloads for the keymap. QMK API always presents the source and binary downloads side-by-side to comply with the GPL. There are 3 non-error status responses from the API- Compile Job Queued Compile Job Running Compile Job Finished","title":"QMK API"},{"location":"configurator_architecture/#compile-job-queued","text":"This status indicates that the job has not yet been picked up by a QMK Compiler node. Configurator shows this status as \"Waiting for an oven\".","title":"Compile Job Queued"},{"location":"configurator_architecture/#compile-job-running","text":"This status indicates that the job has started compiling. Configurator shows this status as \"Baking\".","title":"Compile Job Running"},{"location":"configurator_architecture/#compile-job-finished","text":"This status indicates that the job has completed. There will be keys in the status JSON for source and binary downloads.","title":"Compile Job Finished"},{"location":"configurator_architecture/#redisrq","text":"QMK API uses RQ to distribute jobs to the available QMK Compiler nodes. When a keymap.json is received it's put into the RQ queue, where a qmk_compiler node will pick it up from.","title":"Redis/RQ"},{"location":"configurator_architecture/#qmk-compiler","text":"QMK Compiler is what actually performs the compilation of the keymap.json . It does so by checking out the requested qmk_firmware branch, running qmk compile keymap.json , and then uploading the resulting source and binary to Digital Ocean Spaces. When users download their source/binary, API will redirect them to the authenticated Spaces download URL.","title":"QMK Compiler"},{"location":"configurator_default_keymaps/","text":"Adding Default Keymaps to QMK Configurator \u00b6 This page covers how to add a default keymap for a keyboard to QMK Configurator. Technical Information \u00b6 QMK Configurator uses JSON as its native file format for keymaps. As much as possible, these should be kept such that they behave the same as running make <keyboard>:default from qmk_firmware . Keymaps in this directory require four key-value pairs: keyboard (string) This is the name of the keyboard, the same as would be used when running a compile job through make (e.g. make 1upkeyboards/1up60rgb:default ). keymap (string) Should be set to default . layout (string) This is the layout macro used by the default keymap. layers (array) The keymap itself. This key should contain one array per layer, which themselves should contain the keycodes that make up that layer. Additionally, most keymaps contain a commit key. This key is not consumed by the API that back-stops QMK Configurator, but is used by Configurator's maintainers to tell which version of a keymap was used to create the JSON keymap in this repository. The value is the SHA of the last commit to modify a board's default keymap.c in the qmk_firmware repository. The SHA is found by checking out the master branch of the qmk/qmk_firmware repository and running git log -1 --pretty=oneline -- keyboards/<keyboard>/keymaps/default/keymap.c (use keymap.json if the keyboard in question has this file instead), which should return something similar to: f14629ed1cd7c7ec9089604d64f29a99981558e8 Remove/migrate action_get_macro () s from default keymaps ( #5625) In this example, f14629ed1cd7c7ec9089604d64f29a99981558e8 is the value that should be used for commit . Example \u00b6 If one wished to add a default keymap for the H87a by Hineybush, one would run the git log command above against the H87a's default keymap in qmk_firmware : user ~/qmk_firmware ( master ) $ git log -1 --pretty = oneline master -- keyboards/hineybush/h87a/keymaps/default/keymap.c ef8878fba5d3786e3f9c66436da63a560cd36ac9 Hineybush h87a lock indicators ( #8237) Now that we have the commit hash, we need the keymap (edited for readability): ... #include QMK_KEYBOARD_H const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = LAYOUT_all ( KC_ESC , KC_F1 , KC_F2 , KC_F3 , KC_F4 , KC_F5 , KC_F6 , KC_F7 , KC_F8 , KC_F9 , KC_F10 , KC_F11 , KC_F12 , KC_PSCR , KC_SLCK , KC_PAUS , KC_GRV , KC_1 , KC_2 , KC_3 , KC_4 , KC_5 , KC_6 , KC_7 , KC_8 , KC_9 , KC_0 , KC_MINS , KC_EQL , KC_BSPC , KC_BSPC , KC_INS , KC_HOME , KC_PGUP , KC_TAB , KC_Q , KC_W , KC_E , KC_R , KC_T , KC_Y , KC_U , KC_I , KC_O , KC_P , KC_LBRC , KC_RBRC , KC_BSLS , KC_DEL , KC_END , KC_PGDN , KC_CAPS , KC_A , KC_S , KC_D , KC_F , KC_G , KC_H , KC_J , KC_K , KC_L , KC_SCLN , KC_QUOT , KC_NUHS , KC_ENT , KC_LSFT , KC_NUBS , KC_Z , KC_X , KC_C , KC_V , KC_B , KC_N , KC_M , KC_COMM , KC_DOT , KC_SLSH , KC_RSFT , KC_TRNS , KC_UP , KC_LCTL , KC_LGUI , KC_LALT , KC_SPC , KC_RALT , MO ( 1 ), KC_RGUI , KC_RCTL , KC_LEFT , KC_DOWN , KC_RGHT ), [ 1 ] = LAYOUT_all ( KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , RGB_TOG , RGB_MOD , RGB_HUD , RGB_HUI , RGB_SAD , RGB_SAI , RGB_VAD , RGB_VAI , BL_TOGG , BL_DEC , BL_INC , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_VOLU , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , RESET , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_MPLY , KC_MNXT , KC_VOLD , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS ), }; The default keymap uses the LAYOUT_all macro, so that will be the value of the layout key. Compiled to a QMK Configurator JSON keymap, our resulting file should be: { \"keyboard\" : \"hineybush/h87a\" , \"keymap\" : \"default\" , \"commit\" : \"ef8878fba5d3786e3f9c66436da63a560cd36ac9\" , \"layout\" : \"LAYOUT_all\" , \"layers\" : [ [ \"KC_ESC\" , \"KC_F1\" , \"KC_F2\" , \"KC_F3\" , \"KC_F4\" , \"KC_F5\" , \"KC_F6\" , \"KC_F7\" , \"KC_F8\" , \"KC_F9\" , \"KC_F10\" , \"KC_F11\" , \"KC_F12\" , \"KC_PSCR\" , \"KC_SLCK\" , \"KC_PAUS\" , \"KC_GRV\" , \"KC_1\" , \"KC_2\" , \"KC_3\" , \"KC_4\" , \"KC_5\" , \"KC_6\" , \"KC_7\" , \"KC_8\" , \"KC_9\" , \"KC_0\" , \"KC_MINS\" , \"KC_EQL\" , \"KC_BSPC\" , \"KC_BSPC\" , \"KC_INS\" , \"KC_HOME\" , \"KC_PGUP\" , \"KC_TAB\" , \"KC_Q\" , \"KC_W\" , \"KC_E\" , \"KC_R\" , \"KC_T\" , \"KC_Y\" , \"KC_U\" , \"KC_I\" , \"KC_O\" , \"KC_P\" , \"KC_LBRC\" , \"KC_RBRC\" , \"KC_BSLS\" , \"KC_DEL\" , \"KC_END\" , \"KC_PGDN\" , \"KC_CAPS\" , \"KC_A\" , \"KC_S\" , \"KC_D\" , \"KC_F\" , \"KC_G\" , \"KC_H\" , \"KC_J\" , \"KC_K\" , \"KC_L\" , \"KC_SCLN\" , \"KC_QUOT\" , \"KC_NUHS\" , \"KC_ENT\" , \"KC_LSFT\" , \"KC_NUBS\" , \"KC_Z\" , \"KC_X\" , \"KC_C\" , \"KC_V\" , \"KC_B\" , \"KC_N\" , \"KC_M\" , \"KC_COMM\" , \"KC_DOT\" , \"KC_SLSH\" , \"KC_RSFT\" , \"KC_TRNS\" , \"KC_UP\" , \"KC_LCTL\" , \"KC_LGUI\" , \"KC_LALT\" , \"KC_SPC\" , \"KC_RALT\" , \"MO(1)\" , \"KC_RGUI\" , \"KC_RCTL\" , \"KC_LEFT\" , \"KC_DOWN\" , \"KC_RGHT\" ], [ \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"RGB_TOG\" , \"RGB_MOD\" , \"RGB_HUD\" , \"RGB_HUI\" , \"RGB_SAD\" , \"RGB_SAI\" , \"RGB_VAD\" , \"RGB_VAI\" , \"BL_TOGG\" , \"BL_DEC\" , \"BL_INC\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_VOLU\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"RESET\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_MPLY\" , \"KC_MNXT\" , \"KC_VOLD\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" ] ] } The white space in the layers arrays have no effect on the functionality of the keymap, but are used to make these files easier for humans to read. Caveats \u00b6 Layers can only be referenced by number \u00b6 A common QMK convention is to name layers using a series of #define s, or an enum statement: enum layer_names { _BASE , _MEDIA , _FN }; This works in C, but for Configurator, you must use the layer's numeric index \u2013 MO(_FN) would need to be MO(2) in the above example. No support for custom code of any kind \u00b6 Features that require adding functions to the keymap.c file, such as Tap Dance or Unicode, can not be compiled in Configurator at all . Even setting TAP_DANCE_ENABLE = yes in the qmk_firmware repository at the keyboard level will prevent Configurator from compiling any firmware for that keyboard. This is limited both by the API and the current spec of our JSON keymap format. Limited Support for Custom keycodes \u00b6 There is a way to support custom keycodes: if the logic for a custom keycode is implemented at the keyboard level instead of the keymap level in qmk_firmware, that keycode can be used in Configurator and it will compile and work. Instead of using the following in your keymap.c : enum custom_keycodes { MACRO_1 = SAFE_RANGE , MACRO_2 , MACRO_3 }; ... bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case MACRO_1 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #1.\" ); } return false ; case MACRO_2 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #2.\" ); } return false ; case MACRO_3 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #3.\" ); } return false ; } return true ; }; ... add the keycode enum block to your keyboard's header file ( <keyboard>.h ) as follows (note that the enum is named keyboard_keycodes here): enum keyboard_keycodes { MACRO_1 = SAFE_RANGE , MACRO_2 , MACRO_3 , NEW_SAFE_RANGE // Important! }; ... then the logic to your <keyboard>.c through process_record_kb() : bool process_record_kb ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case MACRO_1 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #1.\" ); } return false ; case MACRO_2 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #2.\" ); } return false ; case MACRO_3 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #3.\" ); } return false ; } return process_record_user ( keycode , record ); }; Note the call to process_record_user() at the end. Additionally, users of the keyboard will need to use NEW_SAFE_RANGE instead of SAFE_RANGE if they wish to add their own custom keycodes at keymap level, beyond what is provided by the keyboard. Additional Reading \u00b6 For QMK Configurator to support your keyboard, your keyboard must be present in the master branch of the qmk_firmware repository. For instructions on this, please see Supporting Your Keyboard in QMK Configurator .","title":"Adding Default Keymaps to QMK Configurator {: id=adding-default-keymaps }"},{"location":"configurator_default_keymaps/#adding-default-keymaps","text":"This page covers how to add a default keymap for a keyboard to QMK Configurator.","title":"Adding Default Keymaps to QMK Configurator"},{"location":"configurator_default_keymaps/#technical-information","text":"QMK Configurator uses JSON as its native file format for keymaps. As much as possible, these should be kept such that they behave the same as running make <keyboard>:default from qmk_firmware . Keymaps in this directory require four key-value pairs: keyboard (string) This is the name of the keyboard, the same as would be used when running a compile job through make (e.g. make 1upkeyboards/1up60rgb:default ). keymap (string) Should be set to default . layout (string) This is the layout macro used by the default keymap. layers (array) The keymap itself. This key should contain one array per layer, which themselves should contain the keycodes that make up that layer. Additionally, most keymaps contain a commit key. This key is not consumed by the API that back-stops QMK Configurator, but is used by Configurator's maintainers to tell which version of a keymap was used to create the JSON keymap in this repository. The value is the SHA of the last commit to modify a board's default keymap.c in the qmk_firmware repository. The SHA is found by checking out the master branch of the qmk/qmk_firmware repository and running git log -1 --pretty=oneline -- keyboards/<keyboard>/keymaps/default/keymap.c (use keymap.json if the keyboard in question has this file instead), which should return something similar to: f14629ed1cd7c7ec9089604d64f29a99981558e8 Remove/migrate action_get_macro () s from default keymaps ( #5625) In this example, f14629ed1cd7c7ec9089604d64f29a99981558e8 is the value that should be used for commit .","title":"Technical Information"},{"location":"configurator_default_keymaps/#example","text":"If one wished to add a default keymap for the H87a by Hineybush, one would run the git log command above against the H87a's default keymap in qmk_firmware : user ~/qmk_firmware ( master ) $ git log -1 --pretty = oneline master -- keyboards/hineybush/h87a/keymaps/default/keymap.c ef8878fba5d3786e3f9c66436da63a560cd36ac9 Hineybush h87a lock indicators ( #8237) Now that we have the commit hash, we need the keymap (edited for readability): ... #include QMK_KEYBOARD_H const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = LAYOUT_all ( KC_ESC , KC_F1 , KC_F2 , KC_F3 , KC_F4 , KC_F5 , KC_F6 , KC_F7 , KC_F8 , KC_F9 , KC_F10 , KC_F11 , KC_F12 , KC_PSCR , KC_SLCK , KC_PAUS , KC_GRV , KC_1 , KC_2 , KC_3 , KC_4 , KC_5 , KC_6 , KC_7 , KC_8 , KC_9 , KC_0 , KC_MINS , KC_EQL , KC_BSPC , KC_BSPC , KC_INS , KC_HOME , KC_PGUP , KC_TAB , KC_Q , KC_W , KC_E , KC_R , KC_T , KC_Y , KC_U , KC_I , KC_O , KC_P , KC_LBRC , KC_RBRC , KC_BSLS , KC_DEL , KC_END , KC_PGDN , KC_CAPS , KC_A , KC_S , KC_D , KC_F , KC_G , KC_H , KC_J , KC_K , KC_L , KC_SCLN , KC_QUOT , KC_NUHS , KC_ENT , KC_LSFT , KC_NUBS , KC_Z , KC_X , KC_C , KC_V , KC_B , KC_N , KC_M , KC_COMM , KC_DOT , KC_SLSH , KC_RSFT , KC_TRNS , KC_UP , KC_LCTL , KC_LGUI , KC_LALT , KC_SPC , KC_RALT , MO ( 1 ), KC_RGUI , KC_RCTL , KC_LEFT , KC_DOWN , KC_RGHT ), [ 1 ] = LAYOUT_all ( KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , RGB_TOG , RGB_MOD , RGB_HUD , RGB_HUI , RGB_SAD , RGB_SAI , RGB_VAD , RGB_VAI , BL_TOGG , BL_DEC , BL_INC , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_VOLU , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , RESET , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_MPLY , KC_MNXT , KC_VOLD , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS , KC_TRNS ), }; The default keymap uses the LAYOUT_all macro, so that will be the value of the layout key. Compiled to a QMK Configurator JSON keymap, our resulting file should be: { \"keyboard\" : \"hineybush/h87a\" , \"keymap\" : \"default\" , \"commit\" : \"ef8878fba5d3786e3f9c66436da63a560cd36ac9\" , \"layout\" : \"LAYOUT_all\" , \"layers\" : [ [ \"KC_ESC\" , \"KC_F1\" , \"KC_F2\" , \"KC_F3\" , \"KC_F4\" , \"KC_F5\" , \"KC_F6\" , \"KC_F7\" , \"KC_F8\" , \"KC_F9\" , \"KC_F10\" , \"KC_F11\" , \"KC_F12\" , \"KC_PSCR\" , \"KC_SLCK\" , \"KC_PAUS\" , \"KC_GRV\" , \"KC_1\" , \"KC_2\" , \"KC_3\" , \"KC_4\" , \"KC_5\" , \"KC_6\" , \"KC_7\" , \"KC_8\" , \"KC_9\" , \"KC_0\" , \"KC_MINS\" , \"KC_EQL\" , \"KC_BSPC\" , \"KC_BSPC\" , \"KC_INS\" , \"KC_HOME\" , \"KC_PGUP\" , \"KC_TAB\" , \"KC_Q\" , \"KC_W\" , \"KC_E\" , \"KC_R\" , \"KC_T\" , \"KC_Y\" , \"KC_U\" , \"KC_I\" , \"KC_O\" , \"KC_P\" , \"KC_LBRC\" , \"KC_RBRC\" , \"KC_BSLS\" , \"KC_DEL\" , \"KC_END\" , \"KC_PGDN\" , \"KC_CAPS\" , \"KC_A\" , \"KC_S\" , \"KC_D\" , \"KC_F\" , \"KC_G\" , \"KC_H\" , \"KC_J\" , \"KC_K\" , \"KC_L\" , \"KC_SCLN\" , \"KC_QUOT\" , \"KC_NUHS\" , \"KC_ENT\" , \"KC_LSFT\" , \"KC_NUBS\" , \"KC_Z\" , \"KC_X\" , \"KC_C\" , \"KC_V\" , \"KC_B\" , \"KC_N\" , \"KC_M\" , \"KC_COMM\" , \"KC_DOT\" , \"KC_SLSH\" , \"KC_RSFT\" , \"KC_TRNS\" , \"KC_UP\" , \"KC_LCTL\" , \"KC_LGUI\" , \"KC_LALT\" , \"KC_SPC\" , \"KC_RALT\" , \"MO(1)\" , \"KC_RGUI\" , \"KC_RCTL\" , \"KC_LEFT\" , \"KC_DOWN\" , \"KC_RGHT\" ], [ \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"RGB_TOG\" , \"RGB_MOD\" , \"RGB_HUD\" , \"RGB_HUI\" , \"RGB_SAD\" , \"RGB_SAI\" , \"RGB_VAD\" , \"RGB_VAI\" , \"BL_TOGG\" , \"BL_DEC\" , \"BL_INC\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_VOLU\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"RESET\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_MPLY\" , \"KC_MNXT\" , \"KC_VOLD\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" , \"KC_TRNS\" ] ] } The white space in the layers arrays have no effect on the functionality of the keymap, but are used to make these files easier for humans to read.","title":"Example"},{"location":"configurator_default_keymaps/#caveats","text":"","title":"Caveats"},{"location":"configurator_default_keymaps/#layer-references","text":"A common QMK convention is to name layers using a series of #define s, or an enum statement: enum layer_names { _BASE , _MEDIA , _FN }; This works in C, but for Configurator, you must use the layer's numeric index \u2013 MO(_FN) would need to be MO(2) in the above example.","title":"Layers can only be referenced by number"},{"location":"configurator_default_keymaps/#custom-code","text":"Features that require adding functions to the keymap.c file, such as Tap Dance or Unicode, can not be compiled in Configurator at all . Even setting TAP_DANCE_ENABLE = yes in the qmk_firmware repository at the keyboard level will prevent Configurator from compiling any firmware for that keyboard. This is limited both by the API and the current spec of our JSON keymap format.","title":"No support for custom code of any kind"},{"location":"configurator_default_keymaps/#custom-keycodes","text":"There is a way to support custom keycodes: if the logic for a custom keycode is implemented at the keyboard level instead of the keymap level in qmk_firmware, that keycode can be used in Configurator and it will compile and work. Instead of using the following in your keymap.c : enum custom_keycodes { MACRO_1 = SAFE_RANGE , MACRO_2 , MACRO_3 }; ... bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case MACRO_1 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #1.\" ); } return false ; case MACRO_2 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #2.\" ); } return false ; case MACRO_3 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #3.\" ); } return false ; } return true ; }; ... add the keycode enum block to your keyboard's header file ( <keyboard>.h ) as follows (note that the enum is named keyboard_keycodes here): enum keyboard_keycodes { MACRO_1 = SAFE_RANGE , MACRO_2 , MACRO_3 , NEW_SAFE_RANGE // Important! }; ... then the logic to your <keyboard>.c through process_record_kb() : bool process_record_kb ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case MACRO_1 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #1.\" ); } return false ; case MACRO_2 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #2.\" ); } return false ; case MACRO_3 : if ( record -> event . pressed ) { SEND_STRING ( \"This is macro #3.\" ); } return false ; } return process_record_user ( keycode , record ); }; Note the call to process_record_user() at the end. Additionally, users of the keyboard will need to use NEW_SAFE_RANGE instead of SAFE_RANGE if they wish to add their own custom keycodes at keymap level, beyond what is provided by the keyboard.","title":"Limited Support for Custom keycodes"},{"location":"configurator_default_keymaps/#additional-reading","text":"For QMK Configurator to support your keyboard, your keyboard must be present in the master branch of the qmk_firmware repository. For instructions on this, please see Supporting Your Keyboard in QMK Configurator .","title":"Additional Reading"},{"location":"configurator_step_by_step/","text":"QMK Configurator: Step by Step \u00b6 This page describes the steps for building your firmware in QMK Configurator. Step 1: Select Your Keyboard \u00b6 Click the drop down box and select the keyboard you want to create a keymap for. Warning If your keyboard has several versions, make sure you select the correct one. I'll say that again because it's important: Danger MAKE SURE YOU SELECT THE RIGHT VERSION! Tip If your keyboard has been advertised to be powered by QMK but is not in the list, chances are a developer hasn't gotten to it yet or we haven't had a chance to merge it in yet. Try the following steps, in order, to get support added for your keyboard: Check for an active Pull Request Ask the manufacturer if they have submitted a Pull Request to QMK File an issue at qmk_firmware requesting to support that particular keyboard Step 2: Select Your Keyboard Layout \u00b6 Choose the layout that best represents the keymap you want to create. Some keyboards do not have enough layouts or correct layouts defined yet. They will be supported in the future. Info Sometimes there isn't a layout that supports your exact build. In that case select LAYOUT_all . Step 3: Name Your Keymap \u00b6 Call this keymap what you want. Tip If you are running into issues when compiling, it may be worth changing this name, as it may already exist in the QMK Firmware repo. Step 4: Define Your Keymap \u00b6 Keycode Entry is accomplished in one of 3 ways: Drag and drop Clicking on an empty spot on the layout, then clicking the keycode you desire Clicking on an empty spot on the layout, then pressing the physical key on your keyboard Tip Hover your mouse over a key and a short blurb will tell you what that keycode does. For a more verbose description please see: Basic Keycode Reference Advanced Keycode Reference Tip If your selected layout doesn't match your physical build leave the unused keys blank. If you're not sure which key is in use, for example you have a one backspace key but LAYOUT_all has 2 keys, put the same keycode in both locations. Step 5: Save Your Keymap for Future Changes \u00b6 When you're satisfied with your keymap or just want to work on it later, press the Export Keymap button. It will save your keymap to your computer. You can then load this .json file in the future by pressing the Import Keymap button. Danger This is not the same type of .json file used for kbfirmware.com or any other tool. If you try to use this for those tools, or the .json from those tools with QMK Configurator, you will encounter problems. Step 6: Compile Your Firmware File \u00b6 Press the green Compile button. When the compilation is done, you will be able to press the green Download Firmware button. Next steps: Flashing Your Keyboard \u00b6 Please refer to Flashing Firmware .","title":"QMK Configurator: Step by Step"},{"location":"configurator_step_by_step/#qmk-configurator-step-by-step","text":"This page describes the steps for building your firmware in QMK Configurator.","title":"QMK Configurator: Step by Step"},{"location":"configurator_step_by_step/#step-1-select-your-keyboard","text":"Click the drop down box and select the keyboard you want to create a keymap for. Warning If your keyboard has several versions, make sure you select the correct one. I'll say that again because it's important: Danger MAKE SURE YOU SELECT THE RIGHT VERSION! Tip If your keyboard has been advertised to be powered by QMK but is not in the list, chances are a developer hasn't gotten to it yet or we haven't had a chance to merge it in yet. Try the following steps, in order, to get support added for your keyboard: Check for an active Pull Request Ask the manufacturer if they have submitted a Pull Request to QMK File an issue at qmk_firmware requesting to support that particular keyboard","title":"Step 1: Select Your Keyboard"},{"location":"configurator_step_by_step/#step-2-select-your-keyboard-layout","text":"Choose the layout that best represents the keymap you want to create. Some keyboards do not have enough layouts or correct layouts defined yet. They will be supported in the future. Info Sometimes there isn't a layout that supports your exact build. In that case select LAYOUT_all .","title":"Step 2: Select Your Keyboard Layout"},{"location":"configurator_step_by_step/#step-3-name-your-keymap","text":"Call this keymap what you want. Tip If you are running into issues when compiling, it may be worth changing this name, as it may already exist in the QMK Firmware repo.","title":"Step 3: Name Your Keymap"},{"location":"configurator_step_by_step/#step-4-define-your-keymap","text":"Keycode Entry is accomplished in one of 3 ways: Drag and drop Clicking on an empty spot on the layout, then clicking the keycode you desire Clicking on an empty spot on the layout, then pressing the physical key on your keyboard Tip Hover your mouse over a key and a short blurb will tell you what that keycode does. For a more verbose description please see: Basic Keycode Reference Advanced Keycode Reference Tip If your selected layout doesn't match your physical build leave the unused keys blank. If you're not sure which key is in use, for example you have a one backspace key but LAYOUT_all has 2 keys, put the same keycode in both locations.","title":"Step 4: Define Your Keymap"},{"location":"configurator_step_by_step/#step-5-save-your-keymap-for-future-changes","text":"When you're satisfied with your keymap or just want to work on it later, press the Export Keymap button. It will save your keymap to your computer. You can then load this .json file in the future by pressing the Import Keymap button. Danger This is not the same type of .json file used for kbfirmware.com or any other tool. If you try to use this for those tools, or the .json from those tools with QMK Configurator, you will encounter problems.","title":"Step 5: Save Your Keymap for Future Changes"},{"location":"configurator_step_by_step/#step-6-compile-your-firmware-file","text":"Press the green Compile button. When the compilation is done, you will be able to press the green Download Firmware button.","title":"Step 6: Compile Your Firmware File"},{"location":"configurator_step_by_step/#next-steps-flashing-your-keyboard","text":"Please refer to Flashing Firmware .","title":"Next steps: Flashing Your Keyboard"},{"location":"configurator_troubleshooting/","text":"Configurator Troubleshooting \u00b6 My .json file is not working \u00b6 If the .json file was generated with QMK Configurator, congratulations you have stumbled upon a bug. File an issue at qmk_configurator . If not... how did you miss the big bold message at the top saying not to use other .json files? There are extra spaces in my layout? What do I do? \u00b6 If you're referring to having three spots for space bar, the best course of action is to just fill them all with Space. The same can be done for Backspace and Shift keys. What is the keycode for... \u00b6 Please see: Basic Keycode Reference Advanced Keycode Reference It won't compile \u00b6 Please double check the other layers of your keymap to make sure there are no random keys present. Problems and Bugs \u00b6 We are always accepting customer requests and bug reports. Please file them at qmk_configurator .","title":"Configurator Troubleshooting"},{"location":"configurator_troubleshooting/#configurator-troubleshooting","text":"","title":"Configurator Troubleshooting"},{"location":"configurator_troubleshooting/#my-json-file-is-not-working","text":"If the .json file was generated with QMK Configurator, congratulations you have stumbled upon a bug. File an issue at qmk_configurator . If not... how did you miss the big bold message at the top saying not to use other .json files?","title":"My .json file is not working"},{"location":"configurator_troubleshooting/#there-are-extra-spaces-in-my-layout-what-do-i-do","text":"If you're referring to having three spots for space bar, the best course of action is to just fill them all with Space. The same can be done for Backspace and Shift keys.","title":"There are extra spaces in my layout? What do I do?"},{"location":"configurator_troubleshooting/#what-is-the-keycode-for","text":"Please see: Basic Keycode Reference Advanced Keycode Reference","title":"What is the keycode for..."},{"location":"configurator_troubleshooting/#it-wont-compile","text":"Please double check the other layers of your keymap to make sure there are no random keys present.","title":"It won't compile"},{"location":"configurator_troubleshooting/#problems-and-bugs","text":"We are always accepting customer requests and bug reports. Please file them at qmk_configurator .","title":"Problems and Bugs"},{"location":"contributing/","text":"\u5982\u4f55\u505a\u8d21\u732e \u00b6 \ud83d\udc4d\ud83c\udf89 \u9996\u5148\u611f\u8c22\u5404\u4f4d\u767e\u5fd9\u4e4b\u4e2d\u62bd\u7a7a\u9605\u8bfb\u672c\u6587\u6863\uff0c\u5e76\u4e3a\u6211\u4eec\u65e0\u79c1\u5949\u732e\u3002\u7ed9\u60a8\u70b9\u8d5e\u5566\uff01 \ud83c\udf89\ud83d\udc4d \u7b2c\u4e09\u65b9\u7684\u5e2e\u52a9\u8ba9Q\u9171\u6210\u957f\u4e86\u8bb8\u591a\u5462\uff0cQ\u9171\u4e5f\u4ece\u4f60\u4eec\u90a3\u5b66\u5230\u4e86\u4e0d\u5c11\u65b0\u4e1c\u897f\u3002Q\u9171\u5e0c\u671b\u6bcf\u4e00\u4e2a\u60f3\u5e2e\u52a9\u6211\u7684\u4eba\u90fd\u80fd\u5f88\u65b9\u4fbf\u7684\u505a\u51fa\u6709\u7528\u7684\u8d21\u732e\u3002\u5728\u8fd9\u91cc\u6211\u7ed9\u6469\u62f3\u64e6\u638c\u7684\u4f60\u4eec\u5199\u4e86\u4e00\u70b9\u5f15\u5bfc\uff0c\u8ba9\u4f60\u4eec\u7684\u4ee3\u7801\u5728\u4e0d\u5bf9\u6211\u505a\u91cd\u5927\u6539\u52a8\u7684\u60c5\u51b5\u4e0b\u90fd\u80fd\u6210\u529f\u7684\u88ab\u91c7\u7eb3\u54e6\u3002 \u9879\u76ee\u6982\u51b5 \u4ee3\u7801\u89c4\u8303 \u4e00\u822c\u6559\u7a0b \u884c\u4e3a\u5b88\u5219\u5bf9\u4e8e\u6211\u6765\u8bf4\u6709\u4f55\u610f\u4e49? \u8fd9\u6587\u7ae0\u5de8\u957f\u65e0\u6bd4\u4e0d\u60f3\u8bfb\u554a! \u6211\u5c31\u60f3\u95ee\u4e2a\u95ee\u9898\u800c\u5df2! \u00b6 \u60a8\u8981\u662f\u60f3\u95ee\u5173\u4e8eQ\u9171\u7684\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u5728 OLKB Subreddit \u6216\u8005\u662f Discord \u968f\u610f\u95ee\u3002 \u8bf7\u8bb0\u4f4f: \u7ef4\u62a4Q\u9171\u7684\u5c0f\u53ef\u7231\u6709\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u6709\u70b9\u5fd9\uff0c\u4e0d\u80fd\u53ca\u65f6\u56de\u7b54\u60a8\u7684\u95ee\u9898\uff0c\u8010\u5fc3\u7b49\u7b49\uff0c\u4ed6\u4eec\u90fd\u662f\u5f88nice\u7684\u4eba\u5440\u3002 \u7ef4\u62a4Q\u9171\u7684\u4eba\u90fd\u662f\u5f88\u65e0\u79c1\u7684\u5584\u826f\u7684\u4eba\u3002\u65e0\u8bba\u662f\u8d21\u732e\u4ee3\u7801\u8fd8\u662f\u56de\u7b54\u95ee\u9898\uff0c\u90fd\u662f\u4e49\u52a1\u7684\u3002\u6709\u65f6\u89c1\u5230\u4ed6\u4eec\u52aa\u529b\u56de\u7b54\u5404\u79cd\u95ee\u9898\uff0c\u89e3\u51b3\u5404\u79cdBUG\uff0cQ\u9171\u4e5f\u662f\u5f88\u5fc3\u75bc\u7684\u3002 \u60a8\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u7684\u6559\u7a0b\uff0c\u53ef\u4ee5\u8ba9\u60a8\u7684\u95ee\u9898\u6d45\u663e\u6613\u61c2\uff0c\u66f4\u5bb9\u6613\u56de\u7b54\uff1a https://opensource.com/life/16/10/how-ask-technical-questions http://www.catb.org/esr/faqs/smart-questions.html \u9879\u76ee\u6982\u51b5 \u00b6 Q\u9171\u5f88\u5927\u4e00\u90e8\u5206\u662f\u7528C\u8bed\u8a00\u7ec4\u6210\u7684\uff0c\u4e0d\u8fc7\u6709\u4e00\u5c0f\u90e8\u5206\u7279\u6027\u662fC++\u7684\u3002\u600e\u4e48\u8bf4\u5462\uff0c\u90fd\u662f\u6211\u7684\u4e00\u90e8\u5206\uff0c\u4e24\u4e2a\u6211\u90fd\u7231\u3002Q\u9171\u4e00\u822c\u662f\u5728\u952e\u76d8\u4e0a\u7684\u5d4c\u5165\u5f0f\u5904\u7406\u5668\u90a3\u91cc\u5de5\u4f5c\u7684\uff0c\u5c24\u5176\u4e0eAVR( LUFA )\u548cARM ( ChibiOS )\u4e24\u5c0f\u54e5\u54e5\u642d\u914d\uff0c\u5e72\u6d3b\u4e0d\u7d2f\uff0c\u563b\u563b\u3002\u5982\u679c\u60a8\u7cbe\u901aArduino\u7684\u8bdd\u60a8\u4f1a\u53d1\u73b0\u5f88\u591a\u719f\u6089\u7684\u6982\u5ff5\uff0c\u4f46\u4e5f\u6709\u70b9\u4e0d\u723d\uff0c\u56e0\u4e3a\u60a8\u4ee5\u524d\u7684\u7ecf\u9a8c\u53ef\u80fd\u6ca1\u6cd5\u7528\u6765\u5e2e\u52a9Q\u9171\u3002 Q\u9171\uff0c\u6211\u5728\u54ea\u80fd\u5e2e\u52a9\u4f60\u561e? \u00b6 \u60a8\u8981\u662f\u6709\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5 \u63d0\u51fa\u4e00\u4e2aissue \u6216 \u5728Discord\u4e0a\u4ea4\u6d41\u4e00\u4e0b . Q\u9171\uff0c\u6211\u5982\u4f55\u5e2e\u52a9\u4f60? \u00b6 \u60a8\u4ee5\u524d\u662f\u5426\u6ca1\u4e3a\u5f00\u6e90\u8d21\u732e\u8fc7\u4ee3\u7801\uff0c\u800c\u53c8\u60f3\u77e5\u9053\u5e2e\u52a9Q\u9171\u662f\u600e\u4e48\u4e00\u56de\u4e8b? \u7a0d\u5b89\u52ff\u8e81\uff0c\u54b1\u7ed9\u60a8\u603b\u7ed3\u4e00\u4e0b\uff01 \u5148\u6ce8\u518c\u4e00\u4e2a GitHub \u8d26\u6237\u3002 \u505a\u597d\u4e00\u4e2a\u4f60\u8981\u8d21\u732e\u7684\u5e03\u5c40\uff0c\u90a3\u5c31\u8981 \u627e\u4e00\u4e2a\u4f60\u60f3\u89e3\u51b3\u7684\u95ee\u9898 \uff0c\u6216\u8005 \u627e\u4e00\u4e2a\u4f60\u60f3\u6dfb\u52a0\u7684\u7279\u6027 \u3002 \u628a\u5173\u8054\u7740\u95ee\u9898\u7684\u4ed3\u5e93\u5206\u53c9\uff08fork\uff09\u5230\u4f60\u7684\u4ed3\u5e93\u3002\u8fd9\u6837\u4f60\u5728 \u4f60\u7684GitHub\u7528\u6237\u540d/qmk_firmware \u5c31\u6709\u4e00\u4e2a\u4ed3\u5e93\u5907\u4efd\u5566\u3002 \u4f7f\u7528 git clone https://github.com/\u6b64\u5904\u6dfbGitHub\u7528\u6237\u540d/\u6b64\u5904\u6dfb\u4ed3\u5e93\u540d.git \u8fd9\u4e2a\u547d\u4ee4\u628a\u4ed3\u5e93\u540c\u6b65\u5230\u4f60\u7684\u7535\u8111\u4e2d\u3002 \u60a8\u8981\u662f\u60f3\u5f00\u53d1\u4e00\u4e2a\u65b0\u7279\u6027\u7684\u8bdd\u53ef\u4ee5\u5148\u521b\u5efa\u4e00\u4e2aissue\u548cQ\u9171\u7684\u7ef4\u62a4\u8005\u8ba8\u8bba\u4e00\u4e0b\u60a8\u8981\u505a\u4ec0\u4e48\u3002 \u4f7f\u7528 git checkout -b \u6b64\u5904\u5199\u5206\u652f\u540d\u5b57\uff08\u522b\u7528\u6c49\u5b57\uff09 \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u5206\u652f\uff08branch\uff09\u7528\u4e8e\u5f00\u53d1\u3002 \u5bf9\u8981\u89e3\u51b3\u7684\u95ee\u9898\u6216\u8981\u6dfb\u52a0\u7684\u7279\u6027\u8fdb\u884c\u9002\u5f53\u7684\u66f4\u6539\u3002 \u4f7f\u7528 git add \u628a\u6539\u53d8\u7684\u6587\u4ef6\u7684\u76ee\u5f55\u5199\u8fd9\u91cc \u53ef\u4ee5\u6dfb\u52a0\u6539\u53d8\u7684\u6587\u4ef6\u5185\u5bb9\u5230git\u7528\u4e8e\u7ba1\u7406\u5de5\u7a0b\u72b6\u6001\u7684\u7d22\u5f15\uff08\u5feb\u7167\uff09\u91cc\u3002 \u4f7f\u7528 git commit -m \"\u8fd9\u91cc\u5199\u4fee\u6539\u7684\u76f8\u5173\u4fe1\u606f\" \u6765\u63cf\u8ff0\u4f60\u505a\u51fa\u4e86\u4ec0\u4e48\u4fee\u6539\u3002 \u4f7f\u7528 git push origin \u6b64\u5904\u5199\u5206\u652f\u540d\u5b57 \u6765\u628a\u4f60\u7684\u66f4\u6539\u540c\u6b65\u5230GitHub\u5e93\u91cc\uff08\u53cd\u6b63\u4e0d\u662f\u6253\u7bee\u7403\u90a3\u4e2a\u5e93\u91cc\uff09\u3002 \u63d0\u4ea4\u4e00\u4e2a QMK \u56fa\u4ef6\u7684pull request \u3002 \u7ed9\u4f60\u7684pull request\u62df\u4e00\u4e2a\u6807\u9898\uff0c\u5305\u62ec\u7b80\u77ed\u7684\u63cf\u8ff0\u548c\u95ee\u9898\u6216\u9519\u8bef\u4ee3\u7801\u3002\u6bd4\u5982, \u4f60\u53ef\u4ee5\u8d77\u4e00\u4e2a\u8fd9\u6837\u7684\"Added more log outputting to resolve #4352\"\uff08\u6700\u597d\u7528\u82f1\u8bed\uff0c\u6bd5\u7adfQ\u9171\u7684\u4e2d\u6587\u4e5f\u4e0d\u662f\u90a3\u4e48\u7684\u6e9c\uff0c\u6709\u53ef\u80fd\u4f1a\u770b\u4e0d\u61c2\u4e2d\u6587\uff09\u3002 \u5728\u63cf\u8ff0\uff08description\uff09\u91cc\u9762\u5199\u4f60\u505a\u4e86\u54ea\u4e9b\u66f4\u6539\uff0c\u4f60\u7684\u4ee3\u7801\u91cc\u8fd8\u5b58\u5728\u4ec0\u4e48\u95ee\u9898, \u6216\u8005\u4f60\u60f3\u95ee\u7ef4\u62a4\u7684\u5c0f\u53ef\u7231\u4eec\u7684\u95ee\u9898\u3002\u4f60\u7684your pull request\u6709\u70b9\u5c0f\u95ee\u9898\u65e0\u4f24\u5927\u96c5(\u672c\u6765\u4e5f\u6ca1\u6709\u5b8c\u7f8e\u7684\u4ee3\u7801\u561b), \u7ef4\u62a4\u7684\u5c0f\u53ef\u7231\u4eec\u4f1a\u7aed\u5c3d\u5168\u529b\u5e2e\u60a8\u6539\u8fdb\u7684\uff01 \u7ef4\u62a4\u4eba\u5458\u5ba1\u67e5\u4ee3\u7801\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002 \u7ef4\u62a4\u4eba\u5458\u4f1a\u901a\u77e5\u60a8\u8981\u66f4\u6539\u4ec0\u4e48\u5730\u65b9\uff0c\u7136\u540e\u60a8\u5c31\u6309\u7167\u5efa\u8bae\u6539\u4e00\u6539\u3002 \u9884\u795d\u60a8\u5408\u5e76\u6210\u529f\uff01 \u4ee3\u7801\u89c4\u8303 \u00b6 \u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e25\u683c\u7684\u89c4\u8303\u5566\uff0c\u4f46\u662f\u4fd7\u8bdd\u8bf4\u7684\u597d\uff1a\u6ca1\u6709\u89c4\u77e9\uff0c\u4e0d\u6210\u65b9\u5706\u3002\u60a8\u53ef\u4ee5\u770b\u4e00\u4e0b\u60a8\u7684\u8981\u6539\u52a8\u7684\u4ee3\u7801\u5468\u56f4\u7684\u753b\u98ce\uff0c\u7136\u540e\u4fdd\u6301\u961f\u5f62\u3002\u5982\u679c\u4f60\u611f\u89c9\u5468\u56f4\u90fd\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u725b\u9b3c\u86c7\u795e\u7684\u8bdd\u5c31\u770b\u770b\u4e0b\u9762\u7684\u5efa\u8bae\uff1a \u6211\u4eec\u7528\u8086(4)\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb(\u8f6f\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5230Tab\u952e) \u6211\u4eec\u4f7f\u7528\u6539\u826f\u76841TBS(\u5141\u8bb8\u5355\u884c\u6837\u5f0f) \u5de6\u5927\u62ec\u53f7: \u5728\u5f00\u653e\u6027\u8bed\u53e5\u5757\u90a3\u884c\u7684\u672b\u5c3e \u53f3\u5927\u62ec\u53f7: \u548c\u5f00\u653e\u6027\u8bed\u53e5\u5757\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u9f50 Else If: \u5c06\u53f3\u5927\u62ec\u53f7\u653e\u5728\u884c\u7684\u5f00\u5934\uff0c\u4e0b\u4e00\u4e2a\u5de6\u5927\u62ec\u53f7\u653e\u5728\u540c\u4e00\u884c\u7684\u7ed3\u5c3e \u53ef\u9009\u5927\u62ec\u53f7: \u53ef\u9009\u5927\u62ec\u53f7\u662f\u5fc5\u9009\u7684 \u5e94\u8be5\u8fd9\u6837: if (condition) { return false; } \u4e0d\u5e94\u8be5\u8fd9\u6837: if (condition) return false; \u5efa\u8bae\u4f7f\u7528C\u8bed\u8a00\u98ce\u683c\u7684\u6ce8\u91ca: /* */ \u628a\u6ce8\u91ca\u60f3\u8c61\u6210\u4e00\u4e2a\u63cf\u8ff0\u7279\u5f81\u7684\u6545\u4e8b \u5145\u5206\u4f7f\u7528\u6ce8\u91ca\u6765\u63cf\u8ff0\u4f60\u4e3a\u4f55\u8fd9\u6837\u4fee\u6539 \u6709\u4e9b\u516c\u8ba4\u7684\u4e1c\u897f\u5c31\u4e0d\u8981\u5199\u5230\u6ce8\u91ca\u91cc\u9762\u4e86 \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6ce8\u91ca\u662f\u5426\u591a\u4f59,\u770b\u4e0b\u9762 \u4e00\u822c\u4e0d\u8981\u4e3b\u52a8\u6362\u884c\uff0c\u4e3b\u52a8\u6362\u884c\u7684\u8bdd\u6bcf\u884c\u4e0d\u8981\u8d85\u8fc776\u5217 \u8981\u628a #pragma once \u653e\u5230\u5934\u6587\u4ef6\u7684\u5f00\u59cb\u54e6\uff0c\u629b\u5f03\u8001\u571f\u7684( #ifndef THIS_FILE_H , #define THIS_FILE_H , ..., #endif )\u5427 \u4e0b\u9762\u4e24\u79cd\u9884\u5904\u7406\u547d\u4ee4\u90fd\u53ef\u4ee5\u7528: #ifdef DEFINED \u8fd8\u6709 #if defined(DEFINED) \u4ee5\u4e0a\u90a3\u53e5\u5bf9\u5904\u5973\u5ea7\u4e0d\u662f\u5f88\u53cb\u597d\u54c8\uff0c\u5904\u5973\u5ea7\u7684\u670b\u53cb\u4eec\u5c31\u522b\u7ea0\u7ed3\u4e86\uff0c\u76f4\u63a5 #if defined(DEFINED) \u3002 \u8fd8\u6709\u5c31\u662f\u9009\u597d\u4e00\u79cd\u98ce\u683c\u5c31\u4e00\u76f4\u7528\uff0c\u4e00\u76f4\u7528\u4e00\u76f4\u723d\uff0c\u4e0d\u8981\u671d\u4e09\u66ae\u56db, \u9664\u975e\u4f60\u8981\u53d8\u5316\u5230\u591a\u91cd\u6761\u4ef6\u7684 #if \u3002 # \u548c if \u8981\u6328\u5728\u4e00\u8d77\u54e6\uff0c\u518d\u8ba9\u672c\u7a7a\u683c\u5728\u4e2d\u95f4\u5192\u5145\u7535\u706f\u6ce1\u672c\u7a7a\u683c\u4f1a\u751f\u6c14\u7684\u3002 \u4ee5\u4e0b\u662f\u7f29\u8fdb\u89c4\u5219: \u9996\u5148\u8003\u8651\u53ef\u8bfb\u6027\uff0c\u5f3a\u8feb\u75c7\u7684\u670b\u53cb\u4eec\u603b\u60f3\u8981\u4fdd\u6301\u4ee3\u7801\u7684\u9ad8\u4e00\u81f4\u6027\uff0c\u8fd9\u6837\u53ef\u4e0d\u597d\u3002 \u4fdd\u8bc1\u6587\u4ef6\u5df2\u6709\u98ce\u683c\u4e0d\u53d8\u3002\u5982\u679c\u4ee3\u7801\u672c\u6765\u5c31\u662f\u6742\u7cc5\u98ce\u683c\uff0c\u90a3\u5c31\u89c1\u673a\u884c\u4e8b\uff0c\u8ba9\u4f60\u7684\u4fee\u6539\u66f4\u6709\u610f\u4e49\u4e9b\u3002 \u5176\u5b9e\u4f60\u4e5f\u53ef\u4ee5\u5728\u7f29\u8fdb\u7684\u65f6\u5019\u770b\u770b\u5468\u56f4\u5176\u4ed6\u4ee3\u7801\uff0c\u7136\u540e\u8303\u6c34\u6a21\u5c71\uff0c\u9884\u5904\u7406\u547d\u4ee4\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u7f29\u8fdb\u98ce\u683c\u3002 \u53ef\u4ee5\u53c2\u7167\u4e0b\u9762: /* foo \u7684 Enums*/ enum foo_state { FOO_BAR , FOO_BAZ , }; /* \u6709\u8fd4\u56de\u503c\u7684\u60c5\u51b5 */ int foo ( void ) { if ( some_condition ) { return FOO_BAR ; } else { return -1 ; } } Clang-format\u7684\u81ea\u52a8\u683c\u5f0f\u5316 \u00b6 Clang-format \u662fLLVM\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u5e2e\u4f60\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u3002\u6211\u4eec\u7ed9\u4f60\u51c6\u5907\u597d\u4e86\u4e00\u4e2a\u9002\u7528\u4e8e\u4ee5\u4e0a\u89c4\u8303\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5e2e\u4f60\u8c03\u6574\u7f29\u8fdb\u548c\u6362\u884c\uff0c\u4f60\u53ea\u9700\u8981\u5199\u597d\u62ec\u53f7\u5c31\u597d\u3002\u6709\u4e86\u5b83\uff0c\u4f60\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u8c03\u6574\u4ee3\u7801\u683c\u5f0f\u592a\u8017\u65f6\uff0c\u6ca1\u6709\u65f6\u95f4\u966a\u4f34\u81ea\u5df1\uff08\u865a\u6784\uff09\u7684\u53e6\u4e00\u534a\u4e86\u3002 \u4f7f\u7528 LLVM \u5b8c\u6574\u5b89\u88c5 \u53ef\u4ee5\u5728Windows\u4e0a\u5b89\u88c5clang-format, Ubuntu\u7528\u6237\u8981\u7528 sudo apt install clang-format \u3002 \u547d\u4ee4\u884c\u7684\u670b\u53cb\u4eec, \u52a0\u4e0a -style=file \u9009\u9879\u5c31\u4f1a\u81ea\u52a8\u5728QMK\u7684\u6839\u76ee\u5f55\u5bfb\u627e.clang-format\u914d\u7f6e\u6587\u4ef6\u4e86\u3002 VSCode\u7528\u6237, \u6807\u51c6\u7684 C/C++ \u63d2\u4ef6\u5c31\u652f\u6301clang-format, \u6216\u8005\u53ef\u4ee5\u7528 \u72ec\u7acb\u6269\u5c55 \u4e5f\u884c\u3002 \u6709\u4e9b\u4e1c\u897f(\u6bd4\u5982LAYOUT\u5b8f) \u4f1a\u88abclang-format\u6253\u4e71\uff0c\u6240\u4ee5\u90a3\u4e9b\u6587\u4ef6\u5c31\u522b\u7528clang-format\u4e86,\u8fd9\u91cc\u5c31\u6559\u60a8\u4e00\u4e2a\u5c0f\u7a8d\u95e8\uff0c\u5728 // clang-format off \u548c //clang-format on \u4e4b\u95f4\u88c5\u4e0a\u4f1a\u88ab\u641e\u4e71\u7684\u4ee3\u7801\u5c31\u597d\u4e86\u3002 \u4e00\u822c\u6559\u7a0b \u00b6 \u4f60\u53ef\u4ee5\u7ed9Q\u9171\u7684\u4e0d\u540c\u90e8\u5206\u6dfb\u7816\u52a0\u74e6\uff0c\u4f46\u4e5f\u8981\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u4e25\u8c28\u68c0\u67e5\u3002\u4e0d\u8bba\u4f60\u4fee\u6539\u54ea\u91cc\u6700\u597d\u8fd8\u662f\u770b\u770b\u4e0b\u8fb9\u3002 \u5c06PR\uff08pull request\uff09\u5206\u6210\u4e00\u4e2a\u4e2a\u7684\u903b\u8f91\u5355\u5143\u3002 \u6bd4\u5982\uff0c\u4e0d\u8981\u4e00\u6b21\u5c06\u4e24\u4e2a\u65b0\u7279\u6027PR\u51fa\u53bb\u3002\u8981\u6dfb\u52a0\u7684\u7279\u6027\u6392\u597d\u961f\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6765\u3002 \u63d0\u4ea4\u4e4b\u524d\u770b\u4e00\u773c\uff0c git diff --check \u7684\u7a7a\u683c\u4e00\u5b9a\u8981\u5199\u5bf9\u4e86 \u786e\u5b9a\u4f60\u7684\u4ee3\u7801\u80fd\u901a\u8fc7\u7f16\u8bd1 \u5e03\u5c40: \u786e\u5b9a make keyboard:your_new_keymap \u4e0d\u8fd4\u56de\u9519\u8bef \u952e\u76d8: \u786e\u5b9a make keyboard:all \u4e0d\u8fd4\u56de\u9519\u8bef \u6838\u5fc3\u4ee3\u7801: \u786e\u5b9a make all \u4e0d\u8fd4\u56de\u9519\u8bef \u63d0\u4ea4\u7684\u4fe1\u606f\u5c3d\u91cf\u660e\u786e\u3002\u7b2c\u4e00\u884c\u5199\u70b9\u7b80\u77ed\u4ecb\u7ecd(\u6bcf\u884c\u4e0d\u591a\u4e8e70\u4e2a\u82f1\u6587\u5b57\u6bcd), \u7b2c\u4e8c\u884c\u7a7a\u7740,\u7b2c\u4e09\u884c\u548c\u540e\u9762\u5c31\u8981\u5199\u4e9b\u5fc5\u8981\u7684\u7ec6\u8282\u4e86\u3002\u6700\u597d\u7528\u82f1\u6587\u5199\uff0c\u6bd4\u5982: Adjust the fronzlebop for the kerpleplork The kerpleplork was intermittently failing with error code 23. The root cause was the fronzlebop setting, which causes the kerpleplork to activate every N iterations. Limited experimentation on the devices I have available shows that 7 is high enough to avoid confusing the kerpleplork, but I'd like to get some feedback from people with ARM devices to be sure. \u6587\u6863 \u00b6 \u60f3\u5e2e\u52a9Q\u9171\u5f53\u7136\u662f\u5148\u770b\u6587\u6863\u6700\u7b80\u5355\u4e86\u3002\u627e\u5230\u8fd9\u4e2a\u6587\u6863\u54ea\u91cc\u9519\u4e86\u7136\u540e\u6539\u6b63\u5b83\u5bf9\u4e8e\u4f60\u6765\u8bf4\u8d85\u7ea7\u7b80\u5355! \u6211\u4eec\u4e5f\u5bf9\u6709\u5199\u6587\u6863\u80fd\u529b\u7684\u4eba\u6c42\u8d24\u82e5\u6e34\uff0c\u5982\u679c\u4f60\u662f\u5bf9\u7684\u4eba \u70b9\u8fd9\u4e2a ! \u6587\u6863\u5462\uff0c\u90fd\u9759\u9759\u7684\u653e\u5728 qmk_firmware/docs \u76ee\u5f55\u91cc, \u4e5f\u6216\u8005\u60a8\u60f3\u4e3a\u7f51\u9875\u505a\u8d21\u732e\u7684\u8bdd\u4e5f\u662f\u53ef\u4ee5\u7684\u54e6\u3002 \u5728\u6587\u6863\u4e2d\u9644\u4ee3\u7801\u6848\u4f8b\u65f6, \u5148\u89c2\u5bdf\u6587\u6863\u5176\u4ed6\u5730\u65b9\u7684\u547d\u540d\u89c4\u8303\u3002\u6bd4\u5982, \u628aenums\u7684\u540d\u5b57\u90fd\u6539\u6210\u50cf my_layers \u6216\u8005 my_keycodes \u6765\u9632\u6b62\u540d\u5b57\u4e0d\u4e00\u81f4\u7684enums\u88ab\u5f53\u4f5c\u7279\u52a1\u67aa\u6bd9: enum my_layers { _FIRST_LAYER , _SECOND_LAYER }; enum my_keycodes { FIRST_LAYER = SAFE_RANGE , SECOND_LAYER }; \u5e03\u5c40 \u00b6 \u5927\u591a\u6570QMK\u65b0\u624b\u90fd\u4ece\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u5e03\u5c40\u5f00\u59cb\u3002\u6211\u4eec\u5c3d\u529b\u4fdd\u8bc1\u5e03\u5c40\u89c4\u8303\u5bbd\u677e (\u6bd5\u7adf\u5e03\u5c40\u662f\u4e2a\u6027\u7684\u4f53\u73b0) \u4e0d\u8fc7\u5efa\u8bae\u9075\u5b88\u4ee5\u4e0b\u51c6\u5219\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u522b\u4eba\u66f4\u597d\u7406\u89e3\u4f60\u7684\u4ee3\u7801 \u7528 \u6a21\u677f \u5199\u4e2a readme.md \u3002 \u6240\u6709\u7684\u5e03\u5c40PR\u90fd\u4f1a\u88absquash, \u5982\u679c\u4f60\u60f3\u77e5\u9053\u4f60\u7684\u63d0\u4ea4\u662f\u600e\u4e48\u88absquash\u7684\u90a3\u4f60\u5c31\u81ea\u5df1\u6765\u5427 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u548c\u5e03\u5c40\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec \u5e03\u5c40\u6587\u4ef6\u5939\u5c31\u4e0d\u8981\u653e Makefile \u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u8fc7\u65f6\u5566 \u66f4\u65b0\u6587\u4ef6\u5934\u90e8\u7684copyrights(\u770b %YOUR_NAME% \u90a3) \u952e\u76d8 \u00b6 QMK\u7684\u6700\u7ec8\u5f52\u5bbf\u662f\u952e\u76d8\u3002\u6709\u4e9b\u952e\u76d8\u662f\u793e\u533a\u7ef4\u62a4\u7684\uff0c\u6709\u4e00\u4e9b\u662f\u5236\u4f5c\u8fd9\u4e9b\u952e\u76d8\u7684\u4eba\u7ef4\u62a4\u7684\u3002 readme.md \u4f1a\u544a\u8bc9\u4f60\u662f\u8c01\u7ef4\u62a4\u4e86\u8fd9\u4e2a\u952e\u76d8\uff0c\u5982\u679c\u4f60\u5bf9\u67d0\u4e2a\u952e\u76d8\u6709\u7591\u95ee\uff0c\u53ef\u4ee5 \u521b\u5efa\u4e00\u4e2aIssue \u6765\u95ee\u4e00\u95ee\u7ef4\u62a4\u8005\u3002 \u6211\u4eec\u5efa\u8bae\u4f60\u6309\u4e0b\u9762\u7684\u6765\u64cd\u4f5c: \u7528 \u6a21\u677f \u5199 readme.md \u3002 \u63d0\u4ea4\u6570\u91cf\u5c3d\u91cf\u5408\u7406\uff0c\u4e0d\u7136\u6211\u4eec\u53ef\u5c31\u8981\u628a\u4f60\u7684PR\u7ed9squash\u4e86\u3002 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u548c\u65b0\u952e\u76d8\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec \u7528\u7236\u6587\u4ef6\u5939\u7684\u540d\u5b57\u547d\u540d .c / .h \u6587\u4ef6, \u6bd4\u5982 /keyboards/<kb1>/<kb2>/<kb2>.[ch] \u952e\u76d8\u6587\u4ef6\u5939\u5c31\u4e0d\u8981\u653e Makefile \u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u8fc7\u65f6\u5566 \u66f4\u65b0\u6587\u4ef6\u5934\u90e8\u7684copyrights(\u770b %YOUR_NAME% \u90a3) Quantum/TMK \u6838\u5fc3 \u00b6 \u5728\u60a8\u5e9f\u5bdd\u5fd8\u98df\u5730\u5f00\u53d1Q\u9171\u65b0\u7279\u6027\u6216\u8005\u5e2eQ\u9171\u9a71\u866b\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u4f60\u7684\u5de5\u4f5c\u662f\u6709\u610f\u4e49\u7684\u3002\u770b\u770b \u4e86\u89e3QMK \u4f60\u4f1a\u5bf9Q\u9171\u6709\u66f4\u6df1\u7684\u4e86\u89e3\uff0c\u8fd9\u4e2a\u6587\u6863\u5c06\u5e26\u4f60\u9886\u7565QMK\u7684\u7a0b\u5e8f\u6d41\u7a0b\u3002\u73b0\u5728\u4f60\u5e94\u8be5\u548c\u7ef4\u62a4\u56e2\u5bf9\u8c08\u8c08\u6765\u4e86\u89e3\u5b9e\u73b0\u4f60\u60f3\u6cd5\u7684\u6700\u4f73\u65b9\u6cd5\u4e86\u3002\u4e00\u4e0b\u6e20\u9053\u90fd\u53ef\u4ee5\uff1a \u5728Discord\u4ea4\u6d41 \u5efa\u7acb\u4e00\u4e2aIssue \u65b0\u7279\u6027\u548cBUG\u7684\u4fee\u590d\u5f71\u54cd\u6240\u6709\u952e\u76d8\u3002\u5f00\u53d1\u7ec4\u4e5f\u5728\u7ffb\u4feeQMK\u3002\u6240\u4ee5\uff0c\u5728\u5b9e\u65bd\u91cd\u5927\u8fd4\u4fee\u4e4b\u524d\u4e00\u5b9a\u8981\u8ba8\u8bba\u4e00\u4e0b\u3002\u5982\u679c\u4f60\u5728\u6ca1\u6709\u4e8b\u5148\u4e0e\u7ef4\u62a4\u56e2\u961f\u6c9f\u901a\u7684\u60c5\u51b5\u4e0b\u63d0\u4ea4\u4e86\u4e00\u4e2aPR\uff0c\u800c\u4e14\u4f60\u7684\u9009\u62e9\u4e0e\u7ef4\u62a4\u56e2\u961f\u7684\u8ba1\u5212\u65b9\u5411\u4e0d\u7b26\uff0c\u90a3\u4f60\u53ef\u80fd\u8981\u9762\u4e34\u5927\u6539\u4e86\u3002 \u4fee\u590dBUG\u6216\u8005\u5f00\u53d1\u65b0\u7279\u6027\u4e4b\u524d\u770b\u770b\u8fd9\u4e2a\uff1a \u9ed8\u8ba4\u4e0d\u542f\u7528 - QMK\u8fd0\u884c\u7684\u82af\u7247\u591a\u6570\u5185\u5b58\u6709\u9650\uff0c\u6240\u4ee5\u9996\u8981\u8003\u8651\u7684\u8fd8\u5e94\u8be5\u662f\u5e03\u5c40\u4e0d\u8981\u88ab\u7834\u574f\uff0c\u4e8e\u662f\u7279\u6027\u9ed8\u8ba4\u662f\u4e0d\u542f\u7528\u7684\u3002\u4f60\u559c\u6b22\u4ec0\u4e48\u7279\u6027\u7684\u8bdd\u5c31\u6253\u5f00\u5b83\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u6709\u4e9b\u7279\u6027\u5e94\u8be5\u9ed8\u8ba4\u5f00\u542f\u6216\u8005\u4f60\u80fd\u5e2e\u52a9\u7f29\u51cf\u4ee3\u7801\uff0c\u90a3\u5c31\u8054\u7cfb\u7ef4\u62a4\u7ec4\u5427\u3002 \u63d0\u4ea4\u4e4b\u524d\u5728\u672c\u5730\u7f16\u8bd1 - \u8fd9\u4e2a\u7b80\u76f4\u5c31\u662f\u5bb6\u55bb\u6237\u6653\u4e86\uff0c\u4f46\u662f\u4e5f\u786e\u5b9e\u9700\u8981\u7f16\u8bd1\u554a\uff01 \u6211\u4eec\u7684Travis\u7cfb\u7edf\u4f1a\u53d1\u73b0\u4e00\u5207\u95ee\u9898\uff0c\u4f46\u662f\u81ea\u5df1\u7f16\u8bd1\u4e00\u4e0b\u53ef\u8981\u6bd4\u5728\u7ebf\u7b49\u5feb\u591a\u4e86\u3002 \u6ce8\u610f\u7248\u672c\u548c\u82af\u7247\u5e73\u53f0 - \u6709\u90a3\u4e48\u51e0\u4e2a\u952e\u76d8\u6709\u652f\u6301\u4e0d\u540c\u914d\u7f6e\u751a\u81f3\u662f\u4e0d\u540c\u82af\u7247\u7684\u7248\u672c\u3002\u8bd5\u7740\u5199\u4e00\u4e2a\u80fdAVR\u548cARM\u4e24\u4e2a\u5e73\u53f0\u8fd0\u884c\u7684\u7279\u6027\uff0c\u6216\u8005\u5728\u4e0d\u652f\u6301\u7684\u5e73\u53f0\u81ea\u52a8\u7981\u7528\u3002 \u89e3\u91ca\u4f60\u7684\u65b0\u7279\u6027 - \u5728 docs/ \u5199\u4e2a\u6587\u6863, \u4f60\u53ef\u4ee5\u521b\u5efa\u65b0\u6587\u6863\u6216\u8005\u5199\u5230\u73b0\u6709\u6587\u6863\u4e2d\u3002\u5982\u679c\u4f60\u4e0d\u628a\u5b83\u8bb0\u5f55\u4e0b\u6765\uff0c\u5176\u4ed6\u4eba\u5c31\u65e0\u6cd5\u4ece\u4f60\u7684\u52aa\u529b\u4e2d\u83b7\u76ca\u3002 \u4e5f\u53ef\u4ee5\u770b\u770b\u4ee5\u4e0b\u5efa\u8bae\uff1a \u63d0\u4ea4\u6570\u91cf\u5c3d\u91cf\u5408\u7406\uff0c\u4e0d\u7136\u6211\u4eec\u53ef\u5c31\u8981\u628a\u4f60\u7684PR\u7ed9squash\u4e86\u3002 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u3001\u5e03\u5c40\u548c\u952e\u76d8\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec\u3002 \u7ed9\u4f60\u7684\u7279\u6027\u5199 \u5355\u5143\u6d4b\u8bd5 \u3002 \u4f60\u7f16\u8f91\u7684\u6587\u4ef6\u98ce\u683c\u8981\u4e00\u81f4\uff0c\u5982\u679c\u98ce\u683c\u4e0d\u660e\u786e\u6216\u8005\u662f\u6df7\u642d\u98ce\u7684\uff0c\u4f60\u5c31\u8981\u5148\u770b\u770b \u4ee3\u7801\u89c4\u8303 \u786e\u8ba4\u60c5\u51b5\u3002 \u91cd\u6784 \u00b6 \u4e3a\u4e86\u4fdd\u6301QMK\u8109\u7edc\u6e05\u6670\uff0cQ\u9171\u6253\u7b97\u6df1\u5165\u89c4\u5212\u91cd\u6784\u4e00\u4e0b\u81ea\u5df1\uff0c\u7136\u540e\u8ba9\u5408\u4f5c\u8005\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u4f60\u6709\u91cd\u6784\u7684\u601d\u8def\u6216\u5efa\u8bae \u521b\u5efa\u4e00\u4e2aissue , Q\u9171\u5f88\u4e50\u610f\u8ba8\u8bba\u4e00\u4e0b\u600e\u4e48\u6539\u8fdb\u4e00\u4e0b\u3002 \u884c\u4e3a\u5b88\u5219\u5bf9\u4e8e\u6211\u6765\u8bf4\u6709\u4f55\u610f\u4e49? \u00b6 \u6211\u4eec\u7684 \u884c\u4e3a\u5b88\u5219 \u662f\u8bf4\u660e\u60a8\u6709\u8d23\u4efb\u5c0a\u91cd\u548c\u793c\u8c8c\u5730\u5bf9\u5f85\u9879\u76ee\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u65e0\u8bba\u4ed6\u4eec\u7684\u8eab\u4efd\u5982\u4f55\u3002 \u5982\u679c\u4f60\u662f\u6211\u4eec\u884c\u4e3a\u51c6\u5219\u6240\u63cf\u8ff0\u7684\u4e0d\u5f53\u884c\u4e3a\u7684\u53d7\u5bb3\u8005\uff0c\u6211\u4eec\u5c06\u7ad9\u5728\u4f60\u8fd9\u8fb9\uff0c\u5e76\u6309\u7167\u884c\u4e3a\u51c6\u5219\u5bf9\u65bd\u66b4\u8005\u8fdb\u884c\u9002\u5f53\u8c34\u8d23\u3002","title":"\u5411QMK\u8d21\u732e\u4ee3\u7801"},{"location":"contributing/#_1","text":"\ud83d\udc4d\ud83c\udf89 \u9996\u5148\u611f\u8c22\u5404\u4f4d\u767e\u5fd9\u4e4b\u4e2d\u62bd\u7a7a\u9605\u8bfb\u672c\u6587\u6863\uff0c\u5e76\u4e3a\u6211\u4eec\u65e0\u79c1\u5949\u732e\u3002\u7ed9\u60a8\u70b9\u8d5e\u5566\uff01 \ud83c\udf89\ud83d\udc4d \u7b2c\u4e09\u65b9\u7684\u5e2e\u52a9\u8ba9Q\u9171\u6210\u957f\u4e86\u8bb8\u591a\u5462\uff0cQ\u9171\u4e5f\u4ece\u4f60\u4eec\u90a3\u5b66\u5230\u4e86\u4e0d\u5c11\u65b0\u4e1c\u897f\u3002Q\u9171\u5e0c\u671b\u6bcf\u4e00\u4e2a\u60f3\u5e2e\u52a9\u6211\u7684\u4eba\u90fd\u80fd\u5f88\u65b9\u4fbf\u7684\u505a\u51fa\u6709\u7528\u7684\u8d21\u732e\u3002\u5728\u8fd9\u91cc\u6211\u7ed9\u6469\u62f3\u64e6\u638c\u7684\u4f60\u4eec\u5199\u4e86\u4e00\u70b9\u5f15\u5bfc\uff0c\u8ba9\u4f60\u4eec\u7684\u4ee3\u7801\u5728\u4e0d\u5bf9\u6211\u505a\u91cd\u5927\u6539\u52a8\u7684\u60c5\u51b5\u4e0b\u90fd\u80fd\u6210\u529f\u7684\u88ab\u91c7\u7eb3\u54e6\u3002 \u9879\u76ee\u6982\u51b5 \u4ee3\u7801\u89c4\u8303 \u4e00\u822c\u6559\u7a0b \u884c\u4e3a\u5b88\u5219\u5bf9\u4e8e\u6211\u6765\u8bf4\u6709\u4f55\u610f\u4e49?","title":"\u5982\u4f55\u505a\u8d21\u732e"},{"location":"contributing/#_2","text":"\u60a8\u8981\u662f\u60f3\u95ee\u5173\u4e8eQ\u9171\u7684\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5\u5728 OLKB Subreddit \u6216\u8005\u662f Discord \u968f\u610f\u95ee\u3002 \u8bf7\u8bb0\u4f4f: \u7ef4\u62a4Q\u9171\u7684\u5c0f\u53ef\u7231\u6709\u7684\u65f6\u5019\u53ef\u80fd\u4f1a\u6709\u70b9\u5fd9\uff0c\u4e0d\u80fd\u53ca\u65f6\u56de\u7b54\u60a8\u7684\u95ee\u9898\uff0c\u8010\u5fc3\u7b49\u7b49\uff0c\u4ed6\u4eec\u90fd\u662f\u5f88nice\u7684\u4eba\u5440\u3002 \u7ef4\u62a4Q\u9171\u7684\u4eba\u90fd\u662f\u5f88\u65e0\u79c1\u7684\u5584\u826f\u7684\u4eba\u3002\u65e0\u8bba\u662f\u8d21\u732e\u4ee3\u7801\u8fd8\u662f\u56de\u7b54\u95ee\u9898\uff0c\u90fd\u662f\u4e49\u52a1\u7684\u3002\u6709\u65f6\u89c1\u5230\u4ed6\u4eec\u52aa\u529b\u56de\u7b54\u5404\u79cd\u95ee\u9898\uff0c\u89e3\u51b3\u5404\u79cdBUG\uff0cQ\u9171\u4e5f\u662f\u5f88\u5fc3\u75bc\u7684\u3002 \u60a8\u53ef\u4ee5\u770b\u770b\u4e0b\u9762\u7684\u6559\u7a0b\uff0c\u53ef\u4ee5\u8ba9\u60a8\u7684\u95ee\u9898\u6d45\u663e\u6613\u61c2\uff0c\u66f4\u5bb9\u6613\u56de\u7b54\uff1a https://opensource.com/life/16/10/how-ask-technical-questions http://www.catb.org/esr/faqs/smart-questions.html","title":"\u8fd9\u6587\u7ae0\u5de8\u957f\u65e0\u6bd4\u4e0d\u60f3\u8bfb\u554a! \u6211\u5c31\u60f3\u95ee\u4e2a\u95ee\u9898\u800c\u5df2!"},{"location":"contributing/#_3","text":"Q\u9171\u5f88\u5927\u4e00\u90e8\u5206\u662f\u7528C\u8bed\u8a00\u7ec4\u6210\u7684\uff0c\u4e0d\u8fc7\u6709\u4e00\u5c0f\u90e8\u5206\u7279\u6027\u662fC++\u7684\u3002\u600e\u4e48\u8bf4\u5462\uff0c\u90fd\u662f\u6211\u7684\u4e00\u90e8\u5206\uff0c\u4e24\u4e2a\u6211\u90fd\u7231\u3002Q\u9171\u4e00\u822c\u662f\u5728\u952e\u76d8\u4e0a\u7684\u5d4c\u5165\u5f0f\u5904\u7406\u5668\u90a3\u91cc\u5de5\u4f5c\u7684\uff0c\u5c24\u5176\u4e0eAVR( LUFA )\u548cARM ( ChibiOS )\u4e24\u5c0f\u54e5\u54e5\u642d\u914d\uff0c\u5e72\u6d3b\u4e0d\u7d2f\uff0c\u563b\u563b\u3002\u5982\u679c\u60a8\u7cbe\u901aArduino\u7684\u8bdd\u60a8\u4f1a\u53d1\u73b0\u5f88\u591a\u719f\u6089\u7684\u6982\u5ff5\uff0c\u4f46\u4e5f\u6709\u70b9\u4e0d\u723d\uff0c\u56e0\u4e3a\u60a8\u4ee5\u524d\u7684\u7ecf\u9a8c\u53ef\u80fd\u6ca1\u6cd5\u7528\u6765\u5e2e\u52a9Q\u9171\u3002","title":"\u9879\u76ee\u6982\u51b5"},{"location":"contributing/#q","text":"\u60a8\u8981\u662f\u6709\u95ee\u9898\u7684\u8bdd\u53ef\u4ee5 \u63d0\u51fa\u4e00\u4e2aissue \u6216 \u5728Discord\u4e0a\u4ea4\u6d41\u4e00\u4e0b .","title":"Q\u9171\uff0c\u6211\u5728\u54ea\u80fd\u5e2e\u52a9\u4f60\u561e?"},{"location":"contributing/#q_1","text":"\u60a8\u4ee5\u524d\u662f\u5426\u6ca1\u4e3a\u5f00\u6e90\u8d21\u732e\u8fc7\u4ee3\u7801\uff0c\u800c\u53c8\u60f3\u77e5\u9053\u5e2e\u52a9Q\u9171\u662f\u600e\u4e48\u4e00\u56de\u4e8b? \u7a0d\u5b89\u52ff\u8e81\uff0c\u54b1\u7ed9\u60a8\u603b\u7ed3\u4e00\u4e0b\uff01 \u5148\u6ce8\u518c\u4e00\u4e2a GitHub \u8d26\u6237\u3002 \u505a\u597d\u4e00\u4e2a\u4f60\u8981\u8d21\u732e\u7684\u5e03\u5c40\uff0c\u90a3\u5c31\u8981 \u627e\u4e00\u4e2a\u4f60\u60f3\u89e3\u51b3\u7684\u95ee\u9898 \uff0c\u6216\u8005 \u627e\u4e00\u4e2a\u4f60\u60f3\u6dfb\u52a0\u7684\u7279\u6027 \u3002 \u628a\u5173\u8054\u7740\u95ee\u9898\u7684\u4ed3\u5e93\u5206\u53c9\uff08fork\uff09\u5230\u4f60\u7684\u4ed3\u5e93\u3002\u8fd9\u6837\u4f60\u5728 \u4f60\u7684GitHub\u7528\u6237\u540d/qmk_firmware \u5c31\u6709\u4e00\u4e2a\u4ed3\u5e93\u5907\u4efd\u5566\u3002 \u4f7f\u7528 git clone https://github.com/\u6b64\u5904\u6dfbGitHub\u7528\u6237\u540d/\u6b64\u5904\u6dfb\u4ed3\u5e93\u540d.git \u8fd9\u4e2a\u547d\u4ee4\u628a\u4ed3\u5e93\u540c\u6b65\u5230\u4f60\u7684\u7535\u8111\u4e2d\u3002 \u60a8\u8981\u662f\u60f3\u5f00\u53d1\u4e00\u4e2a\u65b0\u7279\u6027\u7684\u8bdd\u53ef\u4ee5\u5148\u521b\u5efa\u4e00\u4e2aissue\u548cQ\u9171\u7684\u7ef4\u62a4\u8005\u8ba8\u8bba\u4e00\u4e0b\u60a8\u8981\u505a\u4ec0\u4e48\u3002 \u4f7f\u7528 git checkout -b \u6b64\u5904\u5199\u5206\u652f\u540d\u5b57\uff08\u522b\u7528\u6c49\u5b57\uff09 \u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u5206\u652f\uff08branch\uff09\u7528\u4e8e\u5f00\u53d1\u3002 \u5bf9\u8981\u89e3\u51b3\u7684\u95ee\u9898\u6216\u8981\u6dfb\u52a0\u7684\u7279\u6027\u8fdb\u884c\u9002\u5f53\u7684\u66f4\u6539\u3002 \u4f7f\u7528 git add \u628a\u6539\u53d8\u7684\u6587\u4ef6\u7684\u76ee\u5f55\u5199\u8fd9\u91cc \u53ef\u4ee5\u6dfb\u52a0\u6539\u53d8\u7684\u6587\u4ef6\u5185\u5bb9\u5230git\u7528\u4e8e\u7ba1\u7406\u5de5\u7a0b\u72b6\u6001\u7684\u7d22\u5f15\uff08\u5feb\u7167\uff09\u91cc\u3002 \u4f7f\u7528 git commit -m \"\u8fd9\u91cc\u5199\u4fee\u6539\u7684\u76f8\u5173\u4fe1\u606f\" \u6765\u63cf\u8ff0\u4f60\u505a\u51fa\u4e86\u4ec0\u4e48\u4fee\u6539\u3002 \u4f7f\u7528 git push origin \u6b64\u5904\u5199\u5206\u652f\u540d\u5b57 \u6765\u628a\u4f60\u7684\u66f4\u6539\u540c\u6b65\u5230GitHub\u5e93\u91cc\uff08\u53cd\u6b63\u4e0d\u662f\u6253\u7bee\u7403\u90a3\u4e2a\u5e93\u91cc\uff09\u3002 \u63d0\u4ea4\u4e00\u4e2a QMK \u56fa\u4ef6\u7684pull request \u3002 \u7ed9\u4f60\u7684pull request\u62df\u4e00\u4e2a\u6807\u9898\uff0c\u5305\u62ec\u7b80\u77ed\u7684\u63cf\u8ff0\u548c\u95ee\u9898\u6216\u9519\u8bef\u4ee3\u7801\u3002\u6bd4\u5982, \u4f60\u53ef\u4ee5\u8d77\u4e00\u4e2a\u8fd9\u6837\u7684\"Added more log outputting to resolve #4352\"\uff08\u6700\u597d\u7528\u82f1\u8bed\uff0c\u6bd5\u7adfQ\u9171\u7684\u4e2d\u6587\u4e5f\u4e0d\u662f\u90a3\u4e48\u7684\u6e9c\uff0c\u6709\u53ef\u80fd\u4f1a\u770b\u4e0d\u61c2\u4e2d\u6587\uff09\u3002 \u5728\u63cf\u8ff0\uff08description\uff09\u91cc\u9762\u5199\u4f60\u505a\u4e86\u54ea\u4e9b\u66f4\u6539\uff0c\u4f60\u7684\u4ee3\u7801\u91cc\u8fd8\u5b58\u5728\u4ec0\u4e48\u95ee\u9898, \u6216\u8005\u4f60\u60f3\u95ee\u7ef4\u62a4\u7684\u5c0f\u53ef\u7231\u4eec\u7684\u95ee\u9898\u3002\u4f60\u7684your pull request\u6709\u70b9\u5c0f\u95ee\u9898\u65e0\u4f24\u5927\u96c5(\u672c\u6765\u4e5f\u6ca1\u6709\u5b8c\u7f8e\u7684\u4ee3\u7801\u561b), \u7ef4\u62a4\u7684\u5c0f\u53ef\u7231\u4eec\u4f1a\u7aed\u5c3d\u5168\u529b\u5e2e\u60a8\u6539\u8fdb\u7684\uff01 \u7ef4\u62a4\u4eba\u5458\u5ba1\u67e5\u4ee3\u7801\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u65f6\u95f4\u3002 \u7ef4\u62a4\u4eba\u5458\u4f1a\u901a\u77e5\u60a8\u8981\u66f4\u6539\u4ec0\u4e48\u5730\u65b9\uff0c\u7136\u540e\u60a8\u5c31\u6309\u7167\u5efa\u8bae\u6539\u4e00\u6539\u3002 \u9884\u795d\u60a8\u5408\u5e76\u6210\u529f\uff01","title":"Q\u9171\uff0c\u6211\u5982\u4f55\u5e2e\u52a9\u4f60?"},{"location":"contributing/#_4","text":"\u5176\u5b9e\u4e5f\u6ca1\u6709\u4ec0\u4e48\u7279\u522b\u4e25\u683c\u7684\u89c4\u8303\u5566\uff0c\u4f46\u662f\u4fd7\u8bdd\u8bf4\u7684\u597d\uff1a\u6ca1\u6709\u89c4\u77e9\uff0c\u4e0d\u6210\u65b9\u5706\u3002\u60a8\u53ef\u4ee5\u770b\u4e00\u4e0b\u60a8\u7684\u8981\u6539\u52a8\u7684\u4ee3\u7801\u5468\u56f4\u7684\u753b\u98ce\uff0c\u7136\u540e\u4fdd\u6301\u961f\u5f62\u3002\u5982\u679c\u4f60\u611f\u89c9\u5468\u56f4\u90fd\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u725b\u9b3c\u86c7\u795e\u7684\u8bdd\u5c31\u770b\u770b\u4e0b\u9762\u7684\u5efa\u8bae\uff1a \u6211\u4eec\u7528\u8086(4)\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb(\u8f6f\u4ef6\u4e2d\u4e5f\u53ef\u4ee5\u8bbe\u7f6e\u5230Tab\u952e) \u6211\u4eec\u4f7f\u7528\u6539\u826f\u76841TBS(\u5141\u8bb8\u5355\u884c\u6837\u5f0f) \u5de6\u5927\u62ec\u53f7: \u5728\u5f00\u653e\u6027\u8bed\u53e5\u5757\u90a3\u884c\u7684\u672b\u5c3e \u53f3\u5927\u62ec\u53f7: \u548c\u5f00\u653e\u6027\u8bed\u53e5\u5757\u7b2c\u4e00\u4e2a\u5b57\u6bcd\u5bf9\u9f50 Else If: \u5c06\u53f3\u5927\u62ec\u53f7\u653e\u5728\u884c\u7684\u5f00\u5934\uff0c\u4e0b\u4e00\u4e2a\u5de6\u5927\u62ec\u53f7\u653e\u5728\u540c\u4e00\u884c\u7684\u7ed3\u5c3e \u53ef\u9009\u5927\u62ec\u53f7: \u53ef\u9009\u5927\u62ec\u53f7\u662f\u5fc5\u9009\u7684 \u5e94\u8be5\u8fd9\u6837: if (condition) { return false; } \u4e0d\u5e94\u8be5\u8fd9\u6837: if (condition) return false; \u5efa\u8bae\u4f7f\u7528C\u8bed\u8a00\u98ce\u683c\u7684\u6ce8\u91ca: /* */ \u628a\u6ce8\u91ca\u60f3\u8c61\u6210\u4e00\u4e2a\u63cf\u8ff0\u7279\u5f81\u7684\u6545\u4e8b \u5145\u5206\u4f7f\u7528\u6ce8\u91ca\u6765\u63cf\u8ff0\u4f60\u4e3a\u4f55\u8fd9\u6837\u4fee\u6539 \u6709\u4e9b\u516c\u8ba4\u7684\u4e1c\u897f\u5c31\u4e0d\u8981\u5199\u5230\u6ce8\u91ca\u91cc\u9762\u4e86 \u5982\u679c\u4f60\u4e0d\u77e5\u9053\u6ce8\u91ca\u662f\u5426\u591a\u4f59,\u770b\u4e0b\u9762 \u4e00\u822c\u4e0d\u8981\u4e3b\u52a8\u6362\u884c\uff0c\u4e3b\u52a8\u6362\u884c\u7684\u8bdd\u6bcf\u884c\u4e0d\u8981\u8d85\u8fc776\u5217 \u8981\u628a #pragma once \u653e\u5230\u5934\u6587\u4ef6\u7684\u5f00\u59cb\u54e6\uff0c\u629b\u5f03\u8001\u571f\u7684( #ifndef THIS_FILE_H , #define THIS_FILE_H , ..., #endif )\u5427 \u4e0b\u9762\u4e24\u79cd\u9884\u5904\u7406\u547d\u4ee4\u90fd\u53ef\u4ee5\u7528: #ifdef DEFINED \u8fd8\u6709 #if defined(DEFINED) \u4ee5\u4e0a\u90a3\u53e5\u5bf9\u5904\u5973\u5ea7\u4e0d\u662f\u5f88\u53cb\u597d\u54c8\uff0c\u5904\u5973\u5ea7\u7684\u670b\u53cb\u4eec\u5c31\u522b\u7ea0\u7ed3\u4e86\uff0c\u76f4\u63a5 #if defined(DEFINED) \u3002 \u8fd8\u6709\u5c31\u662f\u9009\u597d\u4e00\u79cd\u98ce\u683c\u5c31\u4e00\u76f4\u7528\uff0c\u4e00\u76f4\u7528\u4e00\u76f4\u723d\uff0c\u4e0d\u8981\u671d\u4e09\u66ae\u56db, \u9664\u975e\u4f60\u8981\u53d8\u5316\u5230\u591a\u91cd\u6761\u4ef6\u7684 #if \u3002 # \u548c if \u8981\u6328\u5728\u4e00\u8d77\u54e6\uff0c\u518d\u8ba9\u672c\u7a7a\u683c\u5728\u4e2d\u95f4\u5192\u5145\u7535\u706f\u6ce1\u672c\u7a7a\u683c\u4f1a\u751f\u6c14\u7684\u3002 \u4ee5\u4e0b\u662f\u7f29\u8fdb\u89c4\u5219: \u9996\u5148\u8003\u8651\u53ef\u8bfb\u6027\uff0c\u5f3a\u8feb\u75c7\u7684\u670b\u53cb\u4eec\u603b\u60f3\u8981\u4fdd\u6301\u4ee3\u7801\u7684\u9ad8\u4e00\u81f4\u6027\uff0c\u8fd9\u6837\u53ef\u4e0d\u597d\u3002 \u4fdd\u8bc1\u6587\u4ef6\u5df2\u6709\u98ce\u683c\u4e0d\u53d8\u3002\u5982\u679c\u4ee3\u7801\u672c\u6765\u5c31\u662f\u6742\u7cc5\u98ce\u683c\uff0c\u90a3\u5c31\u89c1\u673a\u884c\u4e8b\uff0c\u8ba9\u4f60\u7684\u4fee\u6539\u66f4\u6709\u610f\u4e49\u4e9b\u3002 \u5176\u5b9e\u4f60\u4e5f\u53ef\u4ee5\u5728\u7f29\u8fdb\u7684\u65f6\u5019\u770b\u770b\u5468\u56f4\u5176\u4ed6\u4ee3\u7801\uff0c\u7136\u540e\u8303\u6c34\u6a21\u5c71\uff0c\u9884\u5904\u7406\u547d\u4ee4\u53ef\u4ee5\u6709\u81ea\u5df1\u7684\u7f29\u8fdb\u98ce\u683c\u3002 \u53ef\u4ee5\u53c2\u7167\u4e0b\u9762: /* foo \u7684 Enums*/ enum foo_state { FOO_BAR , FOO_BAZ , }; /* \u6709\u8fd4\u56de\u503c\u7684\u60c5\u51b5 */ int foo ( void ) { if ( some_condition ) { return FOO_BAR ; } else { return -1 ; } }","title":"\u4ee3\u7801\u89c4\u8303"},{"location":"contributing/#clang-format","text":"Clang-format \u662fLLVM\u7684\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u5e2e\u4f60\u81ea\u52a8\u683c\u5f0f\u5316\u4ee3\u7801\u3002\u6211\u4eec\u7ed9\u4f60\u51c6\u5907\u597d\u4e86\u4e00\u4e2a\u9002\u7528\u4e8e\u4ee5\u4e0a\u89c4\u8303\u7684\u914d\u7f6e\u6587\u4ef6\uff0c\u4f1a\u5e2e\u4f60\u8c03\u6574\u7f29\u8fdb\u548c\u6362\u884c\uff0c\u4f60\u53ea\u9700\u8981\u5199\u597d\u62ec\u53f7\u5c31\u597d\u3002\u6709\u4e86\u5b83\uff0c\u4f60\u518d\u4e5f\u4e0d\u7528\u62c5\u5fc3\u8c03\u6574\u4ee3\u7801\u683c\u5f0f\u592a\u8017\u65f6\uff0c\u6ca1\u6709\u65f6\u95f4\u966a\u4f34\u81ea\u5df1\uff08\u865a\u6784\uff09\u7684\u53e6\u4e00\u534a\u4e86\u3002 \u4f7f\u7528 LLVM \u5b8c\u6574\u5b89\u88c5 \u53ef\u4ee5\u5728Windows\u4e0a\u5b89\u88c5clang-format, Ubuntu\u7528\u6237\u8981\u7528 sudo apt install clang-format \u3002 \u547d\u4ee4\u884c\u7684\u670b\u53cb\u4eec, \u52a0\u4e0a -style=file \u9009\u9879\u5c31\u4f1a\u81ea\u52a8\u5728QMK\u7684\u6839\u76ee\u5f55\u5bfb\u627e.clang-format\u914d\u7f6e\u6587\u4ef6\u4e86\u3002 VSCode\u7528\u6237, \u6807\u51c6\u7684 C/C++ \u63d2\u4ef6\u5c31\u652f\u6301clang-format, \u6216\u8005\u53ef\u4ee5\u7528 \u72ec\u7acb\u6269\u5c55 \u4e5f\u884c\u3002 \u6709\u4e9b\u4e1c\u897f(\u6bd4\u5982LAYOUT\u5b8f) \u4f1a\u88abclang-format\u6253\u4e71\uff0c\u6240\u4ee5\u90a3\u4e9b\u6587\u4ef6\u5c31\u522b\u7528clang-format\u4e86,\u8fd9\u91cc\u5c31\u6559\u60a8\u4e00\u4e2a\u5c0f\u7a8d\u95e8\uff0c\u5728 // clang-format off \u548c //clang-format on \u4e4b\u95f4\u88c5\u4e0a\u4f1a\u88ab\u641e\u4e71\u7684\u4ee3\u7801\u5c31\u597d\u4e86\u3002","title":"Clang-format\u7684\u81ea\u52a8\u683c\u5f0f\u5316"},{"location":"contributing/#_5","text":"\u4f60\u53ef\u4ee5\u7ed9Q\u9171\u7684\u4e0d\u540c\u90e8\u5206\u6dfb\u7816\u52a0\u74e6\uff0c\u4f46\u4e5f\u8981\u7528\u4e0d\u540c\u7684\u65b9\u6cd5\u4e25\u8c28\u68c0\u67e5\u3002\u4e0d\u8bba\u4f60\u4fee\u6539\u54ea\u91cc\u6700\u597d\u8fd8\u662f\u770b\u770b\u4e0b\u8fb9\u3002 \u5c06PR\uff08pull request\uff09\u5206\u6210\u4e00\u4e2a\u4e2a\u7684\u903b\u8f91\u5355\u5143\u3002 \u6bd4\u5982\uff0c\u4e0d\u8981\u4e00\u6b21\u5c06\u4e24\u4e2a\u65b0\u7279\u6027PR\u51fa\u53bb\u3002\u8981\u6dfb\u52a0\u7684\u7279\u6027\u6392\u597d\u961f\uff0c\u4e00\u4e2a\u4e00\u4e2a\u6765\u3002 \u63d0\u4ea4\u4e4b\u524d\u770b\u4e00\u773c\uff0c git diff --check \u7684\u7a7a\u683c\u4e00\u5b9a\u8981\u5199\u5bf9\u4e86 \u786e\u5b9a\u4f60\u7684\u4ee3\u7801\u80fd\u901a\u8fc7\u7f16\u8bd1 \u5e03\u5c40: \u786e\u5b9a make keyboard:your_new_keymap \u4e0d\u8fd4\u56de\u9519\u8bef \u952e\u76d8: \u786e\u5b9a make keyboard:all \u4e0d\u8fd4\u56de\u9519\u8bef \u6838\u5fc3\u4ee3\u7801: \u786e\u5b9a make all \u4e0d\u8fd4\u56de\u9519\u8bef \u63d0\u4ea4\u7684\u4fe1\u606f\u5c3d\u91cf\u660e\u786e\u3002\u7b2c\u4e00\u884c\u5199\u70b9\u7b80\u77ed\u4ecb\u7ecd(\u6bcf\u884c\u4e0d\u591a\u4e8e70\u4e2a\u82f1\u6587\u5b57\u6bcd), \u7b2c\u4e8c\u884c\u7a7a\u7740,\u7b2c\u4e09\u884c\u548c\u540e\u9762\u5c31\u8981\u5199\u4e9b\u5fc5\u8981\u7684\u7ec6\u8282\u4e86\u3002\u6700\u597d\u7528\u82f1\u6587\u5199\uff0c\u6bd4\u5982: Adjust the fronzlebop for the kerpleplork The kerpleplork was intermittently failing with error code 23. The root cause was the fronzlebop setting, which causes the kerpleplork to activate every N iterations. Limited experimentation on the devices I have available shows that 7 is high enough to avoid confusing the kerpleplork, but I'd like to get some feedback from people with ARM devices to be sure.","title":"\u4e00\u822c\u6559\u7a0b"},{"location":"contributing/#_6","text":"\u60f3\u5e2e\u52a9Q\u9171\u5f53\u7136\u662f\u5148\u770b\u6587\u6863\u6700\u7b80\u5355\u4e86\u3002\u627e\u5230\u8fd9\u4e2a\u6587\u6863\u54ea\u91cc\u9519\u4e86\u7136\u540e\u6539\u6b63\u5b83\u5bf9\u4e8e\u4f60\u6765\u8bf4\u8d85\u7ea7\u7b80\u5355! \u6211\u4eec\u4e5f\u5bf9\u6709\u5199\u6587\u6863\u80fd\u529b\u7684\u4eba\u6c42\u8d24\u82e5\u6e34\uff0c\u5982\u679c\u4f60\u662f\u5bf9\u7684\u4eba \u70b9\u8fd9\u4e2a ! \u6587\u6863\u5462\uff0c\u90fd\u9759\u9759\u7684\u653e\u5728 qmk_firmware/docs \u76ee\u5f55\u91cc, \u4e5f\u6216\u8005\u60a8\u60f3\u4e3a\u7f51\u9875\u505a\u8d21\u732e\u7684\u8bdd\u4e5f\u662f\u53ef\u4ee5\u7684\u54e6\u3002 \u5728\u6587\u6863\u4e2d\u9644\u4ee3\u7801\u6848\u4f8b\u65f6, \u5148\u89c2\u5bdf\u6587\u6863\u5176\u4ed6\u5730\u65b9\u7684\u547d\u540d\u89c4\u8303\u3002\u6bd4\u5982, \u628aenums\u7684\u540d\u5b57\u90fd\u6539\u6210\u50cf my_layers \u6216\u8005 my_keycodes \u6765\u9632\u6b62\u540d\u5b57\u4e0d\u4e00\u81f4\u7684enums\u88ab\u5f53\u4f5c\u7279\u52a1\u67aa\u6bd9: enum my_layers { _FIRST_LAYER , _SECOND_LAYER }; enum my_keycodes { FIRST_LAYER = SAFE_RANGE , SECOND_LAYER };","title":"\u6587\u6863"},{"location":"contributing/#_7","text":"\u5927\u591a\u6570QMK\u65b0\u624b\u90fd\u4ece\u521b\u5efa\u4e00\u4e2a\u81ea\u5df1\u7684\u5e03\u5c40\u5f00\u59cb\u3002\u6211\u4eec\u5c3d\u529b\u4fdd\u8bc1\u5e03\u5c40\u89c4\u8303\u5bbd\u677e (\u6bd5\u7adf\u5e03\u5c40\u662f\u4e2a\u6027\u7684\u4f53\u73b0) \u4e0d\u8fc7\u5efa\u8bae\u9075\u5b88\u4ee5\u4e0b\u51c6\u5219\uff0c\u8fd9\u6837\u53ef\u4ee5\u8ba9\u522b\u4eba\u66f4\u597d\u7406\u89e3\u4f60\u7684\u4ee3\u7801 \u7528 \u6a21\u677f \u5199\u4e2a readme.md \u3002 \u6240\u6709\u7684\u5e03\u5c40PR\u90fd\u4f1a\u88absquash, \u5982\u679c\u4f60\u60f3\u77e5\u9053\u4f60\u7684\u63d0\u4ea4\u662f\u600e\u4e48\u88absquash\u7684\u90a3\u4f60\u5c31\u81ea\u5df1\u6765\u5427 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u548c\u5e03\u5c40\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec \u5e03\u5c40\u6587\u4ef6\u5939\u5c31\u4e0d\u8981\u653e Makefile \u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u8fc7\u65f6\u5566 \u66f4\u65b0\u6587\u4ef6\u5934\u90e8\u7684copyrights(\u770b %YOUR_NAME% \u90a3)","title":"\u5e03\u5c40"},{"location":"contributing/#_8","text":"QMK\u7684\u6700\u7ec8\u5f52\u5bbf\u662f\u952e\u76d8\u3002\u6709\u4e9b\u952e\u76d8\u662f\u793e\u533a\u7ef4\u62a4\u7684\uff0c\u6709\u4e00\u4e9b\u662f\u5236\u4f5c\u8fd9\u4e9b\u952e\u76d8\u7684\u4eba\u7ef4\u62a4\u7684\u3002 readme.md \u4f1a\u544a\u8bc9\u4f60\u662f\u8c01\u7ef4\u62a4\u4e86\u8fd9\u4e2a\u952e\u76d8\uff0c\u5982\u679c\u4f60\u5bf9\u67d0\u4e2a\u952e\u76d8\u6709\u7591\u95ee\uff0c\u53ef\u4ee5 \u521b\u5efa\u4e00\u4e2aIssue \u6765\u95ee\u4e00\u95ee\u7ef4\u62a4\u8005\u3002 \u6211\u4eec\u5efa\u8bae\u4f60\u6309\u4e0b\u9762\u7684\u6765\u64cd\u4f5c: \u7528 \u6a21\u677f \u5199 readme.md \u3002 \u63d0\u4ea4\u6570\u91cf\u5c3d\u91cf\u5408\u7406\uff0c\u4e0d\u7136\u6211\u4eec\u53ef\u5c31\u8981\u628a\u4f60\u7684PR\u7ed9squash\u4e86\u3002 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u548c\u65b0\u952e\u76d8\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec \u7528\u7236\u6587\u4ef6\u5939\u7684\u540d\u5b57\u547d\u540d .c / .h \u6587\u4ef6, \u6bd4\u5982 /keyboards/<kb1>/<kb2>/<kb2>.[ch] \u952e\u76d8\u6587\u4ef6\u5939\u5c31\u4e0d\u8981\u653e Makefile \u4e86\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u8fc7\u65f6\u5566 \u66f4\u65b0\u6587\u4ef6\u5934\u90e8\u7684copyrights(\u770b %YOUR_NAME% \u90a3)","title":"\u952e\u76d8"},{"location":"contributing/#quantumtmk","text":"\u5728\u60a8\u5e9f\u5bdd\u5fd8\u98df\u5730\u5f00\u53d1Q\u9171\u65b0\u7279\u6027\u6216\u8005\u5e2eQ\u9171\u9a71\u866b\u4e4b\u524d\uff0c\u4e00\u5b9a\u8981\u786e\u4fdd\u4f60\u7684\u5de5\u4f5c\u662f\u6709\u610f\u4e49\u7684\u3002\u770b\u770b \u4e86\u89e3QMK \u4f60\u4f1a\u5bf9Q\u9171\u6709\u66f4\u6df1\u7684\u4e86\u89e3\uff0c\u8fd9\u4e2a\u6587\u6863\u5c06\u5e26\u4f60\u9886\u7565QMK\u7684\u7a0b\u5e8f\u6d41\u7a0b\u3002\u73b0\u5728\u4f60\u5e94\u8be5\u548c\u7ef4\u62a4\u56e2\u5bf9\u8c08\u8c08\u6765\u4e86\u89e3\u5b9e\u73b0\u4f60\u60f3\u6cd5\u7684\u6700\u4f73\u65b9\u6cd5\u4e86\u3002\u4e00\u4e0b\u6e20\u9053\u90fd\u53ef\u4ee5\uff1a \u5728Discord\u4ea4\u6d41 \u5efa\u7acb\u4e00\u4e2aIssue \u65b0\u7279\u6027\u548cBUG\u7684\u4fee\u590d\u5f71\u54cd\u6240\u6709\u952e\u76d8\u3002\u5f00\u53d1\u7ec4\u4e5f\u5728\u7ffb\u4feeQMK\u3002\u6240\u4ee5\uff0c\u5728\u5b9e\u65bd\u91cd\u5927\u8fd4\u4fee\u4e4b\u524d\u4e00\u5b9a\u8981\u8ba8\u8bba\u4e00\u4e0b\u3002\u5982\u679c\u4f60\u5728\u6ca1\u6709\u4e8b\u5148\u4e0e\u7ef4\u62a4\u56e2\u961f\u6c9f\u901a\u7684\u60c5\u51b5\u4e0b\u63d0\u4ea4\u4e86\u4e00\u4e2aPR\uff0c\u800c\u4e14\u4f60\u7684\u9009\u62e9\u4e0e\u7ef4\u62a4\u56e2\u961f\u7684\u8ba1\u5212\u65b9\u5411\u4e0d\u7b26\uff0c\u90a3\u4f60\u53ef\u80fd\u8981\u9762\u4e34\u5927\u6539\u4e86\u3002 \u4fee\u590dBUG\u6216\u8005\u5f00\u53d1\u65b0\u7279\u6027\u4e4b\u524d\u770b\u770b\u8fd9\u4e2a\uff1a \u9ed8\u8ba4\u4e0d\u542f\u7528 - QMK\u8fd0\u884c\u7684\u82af\u7247\u591a\u6570\u5185\u5b58\u6709\u9650\uff0c\u6240\u4ee5\u9996\u8981\u8003\u8651\u7684\u8fd8\u5e94\u8be5\u662f\u5e03\u5c40\u4e0d\u8981\u88ab\u7834\u574f\uff0c\u4e8e\u662f\u7279\u6027\u9ed8\u8ba4\u662f\u4e0d\u542f\u7528\u7684\u3002\u4f60\u559c\u6b22\u4ec0\u4e48\u7279\u6027\u7684\u8bdd\u5c31\u6253\u5f00\u5b83\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u6709\u4e9b\u7279\u6027\u5e94\u8be5\u9ed8\u8ba4\u5f00\u542f\u6216\u8005\u4f60\u80fd\u5e2e\u52a9\u7f29\u51cf\u4ee3\u7801\uff0c\u90a3\u5c31\u8054\u7cfb\u7ef4\u62a4\u7ec4\u5427\u3002 \u63d0\u4ea4\u4e4b\u524d\u5728\u672c\u5730\u7f16\u8bd1 - \u8fd9\u4e2a\u7b80\u76f4\u5c31\u662f\u5bb6\u55bb\u6237\u6653\u4e86\uff0c\u4f46\u662f\u4e5f\u786e\u5b9e\u9700\u8981\u7f16\u8bd1\u554a\uff01 \u6211\u4eec\u7684Travis\u7cfb\u7edf\u4f1a\u53d1\u73b0\u4e00\u5207\u95ee\u9898\uff0c\u4f46\u662f\u81ea\u5df1\u7f16\u8bd1\u4e00\u4e0b\u53ef\u8981\u6bd4\u5728\u7ebf\u7b49\u5feb\u591a\u4e86\u3002 \u6ce8\u610f\u7248\u672c\u548c\u82af\u7247\u5e73\u53f0 - \u6709\u90a3\u4e48\u51e0\u4e2a\u952e\u76d8\u6709\u652f\u6301\u4e0d\u540c\u914d\u7f6e\u751a\u81f3\u662f\u4e0d\u540c\u82af\u7247\u7684\u7248\u672c\u3002\u8bd5\u7740\u5199\u4e00\u4e2a\u80fdAVR\u548cARM\u4e24\u4e2a\u5e73\u53f0\u8fd0\u884c\u7684\u7279\u6027\uff0c\u6216\u8005\u5728\u4e0d\u652f\u6301\u7684\u5e73\u53f0\u81ea\u52a8\u7981\u7528\u3002 \u89e3\u91ca\u4f60\u7684\u65b0\u7279\u6027 - \u5728 docs/ \u5199\u4e2a\u6587\u6863, \u4f60\u53ef\u4ee5\u521b\u5efa\u65b0\u6587\u6863\u6216\u8005\u5199\u5230\u73b0\u6709\u6587\u6863\u4e2d\u3002\u5982\u679c\u4f60\u4e0d\u628a\u5b83\u8bb0\u5f55\u4e0b\u6765\uff0c\u5176\u4ed6\u4eba\u5c31\u65e0\u6cd5\u4ece\u4f60\u7684\u52aa\u529b\u4e2d\u83b7\u76ca\u3002 \u4e5f\u53ef\u4ee5\u770b\u770b\u4ee5\u4e0b\u5efa\u8bae\uff1a \u63d0\u4ea4\u6570\u91cf\u5c3d\u91cf\u5408\u7406\uff0c\u4e0d\u7136\u6211\u4eec\u53ef\u5c31\u8981\u628a\u4f60\u7684PR\u7ed9squash\u4e86\u3002 \u4e0d\u8981\u628a\u65b0\u7279\u6027\u3001\u5e03\u5c40\u548c\u952e\u76d8\u4e00\u8d77PR\u3002\u53ef\u4ee5\u5206\u522bPR\u4ed6\u4eec\u3002 \u7ed9\u4f60\u7684\u7279\u6027\u5199 \u5355\u5143\u6d4b\u8bd5 \u3002 \u4f60\u7f16\u8f91\u7684\u6587\u4ef6\u98ce\u683c\u8981\u4e00\u81f4\uff0c\u5982\u679c\u98ce\u683c\u4e0d\u660e\u786e\u6216\u8005\u662f\u6df7\u642d\u98ce\u7684\uff0c\u4f60\u5c31\u8981\u5148\u770b\u770b \u4ee3\u7801\u89c4\u8303 \u786e\u8ba4\u60c5\u51b5\u3002","title":"Quantum/TMK \u6838\u5fc3"},{"location":"contributing/#_9","text":"\u4e3a\u4e86\u4fdd\u6301QMK\u8109\u7edc\u6e05\u6670\uff0cQ\u9171\u6253\u7b97\u6df1\u5165\u89c4\u5212\u91cd\u6784\u4e00\u4e0b\u81ea\u5df1\uff0c\u7136\u540e\u8ba9\u5408\u4f5c\u8005\u8fdb\u884c\u4fee\u6539\u3002\u5982\u679c\u4f60\u6709\u91cd\u6784\u7684\u601d\u8def\u6216\u5efa\u8bae \u521b\u5efa\u4e00\u4e2aissue , Q\u9171\u5f88\u4e50\u610f\u8ba8\u8bba\u4e00\u4e0b\u600e\u4e48\u6539\u8fdb\u4e00\u4e0b\u3002","title":"\u91cd\u6784"},{"location":"contributing/#_10","text":"\u6211\u4eec\u7684 \u884c\u4e3a\u5b88\u5219 \u662f\u8bf4\u660e\u60a8\u6709\u8d23\u4efb\u5c0a\u91cd\u548c\u793c\u8c8c\u5730\u5bf9\u5f85\u9879\u76ee\u4e2d\u7684\u6bcf\u4e2a\u4eba\uff0c\u65e0\u8bba\u4ed6\u4eec\u7684\u8eab\u4efd\u5982\u4f55\u3002 \u5982\u679c\u4f60\u662f\u6211\u4eec\u884c\u4e3a\u51c6\u5219\u6240\u63cf\u8ff0\u7684\u4e0d\u5f53\u884c\u4e3a\u7684\u53d7\u5bb3\u8005\uff0c\u6211\u4eec\u5c06\u7ad9\u5728\u4f60\u8fd9\u8fb9\uff0c\u5e76\u6309\u7167\u884c\u4e3a\u51c6\u5219\u5bf9\u65bd\u66b4\u8005\u8fdb\u884c\u9002\u5f53\u8c34\u8d23\u3002","title":"\u884c\u4e3a\u5b88\u5219\u5bf9\u4e8e\u6211\u6765\u8bf4\u6709\u4f55\u610f\u4e49?"},{"location":"custom_matrix/","text":"Custom Matrix \u00b6 QMK provides a mechanism to supplement or replace the default matrix scanning routine with your own code. The reasons to use this feature include: Extra hardware between the keyboard's switches and MCU pins I/O multiplexer Line decoder Irregular switch matrix Simultaneous use of COL2ROW and ROW2COL Prerequisites \u00b6 Implementing custom matrix usually involves compilation of an additional source file. It is recommended that for consistency, this file is called matrix.c . Add a new file to your keyboard directory: keyboards/<keyboard>/matrix.c And to configure compilation for the new file, add this to your rules.mk : SRC += matrix.c 'lite' \u00b6 Provides a default implementation for various scanning functions, reducing the boilerplate code when implementing custom matrix. To configure it, add this to your rules.mk : CUSTOM_MATRIX = lite And implement the following functions in a matrix.c file in your keyboard folder: void matrix_init_custom ( void ) { // TODO: initialize hardware here } bool matrix_scan_custom ( matrix_row_t current_matrix []) { bool matrix_has_changed = false ; // TODO: add matrix scanning routine here return matrix_has_changed ; } Full Replacement \u00b6 When more control over the scanning routine is required, you can choose to implement the full scanning routine. To configure it, add this to your rules.mk: CUSTOM_MATRIX = yes And implement the following functions in a matrix.c file in your keyboard folder: matrix_row_t matrix_get_row ( uint8_t row ) { // TODO: return the requested row data } void matrix_print ( void ) { // TODO: use print() to dump the current matrix state to console } void matrix_init ( void ) { // TODO: initialize hardware and global matrix state here // Unless hardware debouncing - Init the configured debounce routine debounce_init ( MATRIX_ROWS ); // This *must* be called for correct keyboard behavior matrix_init_quantum (); } uint8_t matrix_scan ( void ) { bool matrix_has_changed = false ; // TODO: add matrix scanning routine here // Unless hardware debouncing - use the configured debounce routine debounce ( raw_matrix , matrix , MATRIX_ROWS , changed ); // This *must* be called for correct keyboard behavior matrix_scan_quantum (); return matrix_has_changed ; } And also provide defaults for the following callbacks: __attribute__ (( weak )) void matrix_init_kb ( void ) { matrix_init_user (); } __attribute__ (( weak )) void matrix_scan_kb ( void ) { matrix_scan_user (); } __attribute__ (( weak )) void matrix_init_user ( void ) {} __attribute__ (( weak )) void matrix_scan_user ( void ) {}","title":"\u81ea\u5b9a\u4e49\u952e\u76d8\u77e9\u9635"},{"location":"custom_matrix/#custom-matrix","text":"QMK provides a mechanism to supplement or replace the default matrix scanning routine with your own code. The reasons to use this feature include: Extra hardware between the keyboard's switches and MCU pins I/O multiplexer Line decoder Irregular switch matrix Simultaneous use of COL2ROW and ROW2COL","title":"Custom Matrix"},{"location":"custom_matrix/#prerequisites","text":"Implementing custom matrix usually involves compilation of an additional source file. It is recommended that for consistency, this file is called matrix.c . Add a new file to your keyboard directory: keyboards/<keyboard>/matrix.c And to configure compilation for the new file, add this to your rules.mk : SRC += matrix.c","title":"Prerequisites"},{"location":"custom_matrix/#lite","text":"Provides a default implementation for various scanning functions, reducing the boilerplate code when implementing custom matrix. To configure it, add this to your rules.mk : CUSTOM_MATRIX = lite And implement the following functions in a matrix.c file in your keyboard folder: void matrix_init_custom ( void ) { // TODO: initialize hardware here } bool matrix_scan_custom ( matrix_row_t current_matrix []) { bool matrix_has_changed = false ; // TODO: add matrix scanning routine here return matrix_has_changed ; }","title":"'lite'"},{"location":"custom_matrix/#full-replacement","text":"When more control over the scanning routine is required, you can choose to implement the full scanning routine. To configure it, add this to your rules.mk: CUSTOM_MATRIX = yes And implement the following functions in a matrix.c file in your keyboard folder: matrix_row_t matrix_get_row ( uint8_t row ) { // TODO: return the requested row data } void matrix_print ( void ) { // TODO: use print() to dump the current matrix state to console } void matrix_init ( void ) { // TODO: initialize hardware and global matrix state here // Unless hardware debouncing - Init the configured debounce routine debounce_init ( MATRIX_ROWS ); // This *must* be called for correct keyboard behavior matrix_init_quantum (); } uint8_t matrix_scan ( void ) { bool matrix_has_changed = false ; // TODO: add matrix scanning routine here // Unless hardware debouncing - use the configured debounce routine debounce ( raw_matrix , matrix , MATRIX_ROWS , changed ); // This *must* be called for correct keyboard behavior matrix_scan_quantum (); return matrix_has_changed ; } And also provide defaults for the following callbacks: __attribute__ (( weak )) void matrix_init_kb ( void ) { matrix_init_user (); } __attribute__ (( weak )) void matrix_scan_kb ( void ) { matrix_scan_user (); } __attribute__ (( weak )) void matrix_init_user ( void ) {} __attribute__ (( weak )) void matrix_scan_user ( void ) {}","title":"Full Replacement"},{"location":"custom_quantum_functions/","text":"\u5982\u4f55\u5b9a\u5236\u4f60\u952e\u76d8\u7684\u529f\u80fd \u00b6 \u5bf9\u4e8e\u5f88\u591a\u4eba\u6765\u8bf4\u5ba2\u5236\u5316\u952e\u76d8\u53ef\u4e0d\u53ea\u662f\u5411\u4f60\u7684\u7535\u8111\u53d1\u9001\u4f60\u6309\u4e86\u90a3\u4e2a\u4ef6\u8fd9\u4e48\u7b80\u5355\u3002\u4f60\u80af\u5b9a\u60f3\u5b9e\u73b0\u6bd4\u7b80\u5355\u6309\u952e\u548c\u5b8f\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002QMK\u6709\u80fd\u8ba9\u4f60\u6ce8\u5165\u4ee3\u7801\u7684\u94a9\u5b50, \u8986\u76d6\u529f\u80fd, \u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u952e\u76d8\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u884c\u4e3a\u3002 \u672c\u9875\u4e0d\u5047\u5b9a\u4efb\u4f55\u7279\u6b8a\u7684QMK\u77e5\u8bc6\uff0c\u4f46\u9605\u8bfb \u7406\u89e3QMK \u5c06\u4f1a\u5728\u66f4\u57fa\u7840\u7684\u5c42\u9762\u5e2e\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002 A Word on Core vs \u952e\u76d8 vs \u5e03\u5c40 \u00b6 \u6211\u4eec\u628aqmk\u7ec4\u7ec7\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff1a Core ( _quantum ) Keyboard/Revision ( _kb ) Keymap ( _user ) \u4e0b\u9762\u63cf\u8ff0\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e0a\u52a0\u4e00\u4e2a _kb() \u6216 _user() \u540e\u7f00\u3002 \u5efa\u8bae\u5728\u952e\u76d8/\u4fee\u8ba2\u5c42\u4f7f\u7528 _kb() \u540e\u7f00\uff0c\u5728\u5e03\u5c40\u5c42\u4f7f\u7528 _user() \u540e\u7f00\u3002 \u5728\u952e\u76d8/\u4fee\u8ba2\u5c42\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c _kb() \u5728\u6267\u884c\u4efb\u4f55\u4ee3\u7801\u524d\u5148\u8c03\u7528 _user() \u662f\u5fc5\u8981\u7684\uff0c\u4e0d\u7136\u5e03\u5c40\u5c42\u51fd\u6570\u5c31\u4e0d\u8981\u88ab\u8c03\u7528\u3002 \u81ea\u5b9a\u4e49\u952e\u7801 \u00b6 \u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u66f4\u6539\u73b0\u6709\u952e\u7801\u7684\u884c\u4e3a\u6216\u521b\u5efa\u65b0\u7684\u952e\u7801\u3002\u4ece\u4ee3\u7801\u89d2\u5ea6\u6765\u770b\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\u3002 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u952e\u7801 \u00b6 \u521b\u5efa\u952e\u7801\u7b2c\u4e00\u6b65\uff0c\u5148\u679a\u4e3e\u51fa\u5b83\u5168\u90e8\uff0c\u4e5f\u5c31\u662f\u7ed9\u952e\u7801\u8d77\u4e2a\u540d\u5b57\u5e76\u5206\u914d\u552f\u4e00\u6570\u503c\u3002QMK\u6ca1\u6709\u76f4\u63a5\u9650\u5236\u6700\u5927\u952e\u7801\u503c\u5927\u5c0f\uff0c\u800c\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a SAFE_RANGE \u5b8f\u3002\u4f60\u53ef\u4ee5\u5728\u679a\u4e3e\u65f6\u7528 SAFE_RANGE \u6765\u4fdd\u8bc1\u4f60\u53d6\u5f97\u4e86\u552f\u4e00\u7684\u952e\u7801\u503c\u3002 \u8fd9\u6709\u679a\u4e3e\u4e24\u4e2a\u952e\u7801\u7684\u4f8b\u5b50\u3002\u628a\u8fd9\u5757\u52a0\u5230 keymap.c \u7684\u8bdd\u4f60\u5c31\u5728\u5e03\u5c40\u4e2d\u80fd\u7528 FOO \u548c BAR \u4e86\u3002 enum my_keycodes { FOO = SAFE_RANGE , BAR }; \u4e3a\u952e\u7801\u7684\u884c\u4e3a\u7f16\u7a0b \u00b6 \u5f53\u4f60\u8986\u76d6\u4e00\u4e2a\u5df2\u5b58\u5728\u6309\u952e\u7684\u884c\u4e3a\u65f6\uff0c\u6216\u5c06\u8fd9\u4e2a\u884c\u4e3a\u8d4b\u7ed9\u65b0\u952e\u65f6\uff0c\u4f60\u8981\u7528 process_record_kb() \u548c process_record_user() \u51fd\u6570\u3002\u8fd9\u4fe9\u51fd\u6570\u5728\u952e\u5904\u7406\u4e2d\u771f\u5b9e\u952e\u4e8b\u4ef6\u88ab\u5904\u7406\u524d\u88abQMK\u8c03\u7528\u3002\u5982\u679c\u8fd9\u4fe9\u51fd\u6570\u8fd4\u56de true \uff0cQMK\u5c06\u4f1a\u7528\u6b63\u5e38\u7684\u65b9\u5f0f\u5904\u7406\u952e\u7801\u3002\u8fd9\u6837\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u6269\u5c55\u952e\u7801\u7684\u529f\u80fd\u800c\u4e0d\u662f\u66ff\u6362\u5b83\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de false QMK\u4f1a\u8df3\u8fc7\u6b63\u5e38\u952e\u5904\u7406\uff0c\u7136\u540e\u53d1\u9001\u952e\u5b50\u62ac\u8d77\u8fd8\u662f\u6309\u4e0b\u4e8b\u4ef6\u5c31\u7531\u4f60\u51b3\u5b9a\u4e86\u3002 \u5f53\u67d0\u4e2a\u952e\u6309\u4e0b\u6216\u91ca\u653e\u65f6\u8fd9\u4fe9\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002 process_record_user()`\u51fd\u6570\u793a\u4f8b\u5b9e\u73b0 \u00b6 \u8fd9\u4e2a\u4f8b\u5b50\u505a\u4e86\u4e24\u4e2a\u4e8b\u3002\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a FOO \u7684\u952e\u7801\u7684\u884c\u4e3a\uff0c\u5e76\u8865\u5145\u4e86\u5728\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26\u3002 bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case FOO : if ( record -> event . pressed ) { // \u6309\u4e0b\u65f6\u505a\u4e9b\u4ec0\u4e48 } else { // \u91ca\u653e\u65f6\u505a\u4e9b\u4ec0\u4e48 } return false ; // \u8df3\u8fc7\u6b64\u952e\u7684\u6240\u6709\u8fdb\u4e00\u6b65\u5904\u7406 case KC_ENTER : // \u5f53\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26 if ( record -> event . pressed ) { PLAY_SONG ( tone_qwerty ); } return true ; // \u8ba9QMK\u89e6\u53d1\u56de\u8f66\u6309\u4e0b/\u91ca\u653e\u4e8b\u4ef6 default : return true ; // \u6b63\u5e38\u5904\u7406\u5176\u4ed6\u952e\u7801 } } process_record_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: bool process_record_kb(uint16_t keycode, keyrecord_t *record) \u5e03\u5c40: bool process_record_user(uint16_t keycode, keyrecord_t *record) keycode(\u952e\u7801) \u53c2\u6570\u662f\u5728\u5e03\u5c40\u4e0a\u5b9a\u4e49\u7684\uff0c\u6bd4\u5982 MO(1) , KC_L , \u7b49\u7b49\u3002 \u4f60\u8981\u7528 switch...case \u5757\u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u3002 record \u53c2\u6570\u542b\u6709\u5b9e\u9645\u6309\u952e\u7684\u4fe1\u606f\uff1a keyrecord_t record { keyevent_t event { keypos_t key { uint8_t col uint8_t row } bool pressed uint16_t time } } LED\u63a7\u5236 \u00b6 qmk\u63d0\u4f9b\u4e86\u8bfb\u53d6HID\u89c4\u8303\u5305\u542b\u76845\u4e2aLED\u7684\u65b9\u6cd5\u3002: USB_LED_NUM_LOCK USB_LED_CAPS_LOCK USB_LED_SCROLL_LOCK USB_LED_COMPOSE USB_LED_KANA \u8fd9\u4e94\u4e2a\u5e38\u91cf\u5bf9\u5e94\u4e8e\u4e3b\u673aLED\u72b6\u6001\u7684\u4f4d\u7f6e\u4f4d\u3002 \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u4e3b\u673aLED\u72b6\u6001\uff1a \u901a\u8fc7\u6267\u884c led_set_user() \u901a\u8fc7\u8c03\u7528 host_keyboard_leds() led_set_user() \u00b6 \u5f535\u4e2aLED\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7684\u72b6\u6001\u9700\u8981\u6539\u53d8\u65f6\uff0c\u6b64\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002\u6b64\u51fd\u6570\u901a\u8fc7\u53c2\u6570\u8f93\u5165LED\u53c2\u6570\u3002 \u4f7f\u7528 IS_LED_ON(usb_led, led_name) \u548c IS_LED_OFF(usb_led, led_name) \u8fd9\u4e24\u4e2a\u5b8f\u6765\u68c0\u67e5LED\u72b6\u6001\u3002 Tip host_keyboard_leds() \u53ef\u80fd\u4f1a\u5728 led_set_user() \u88ab\u8c03\u7528\u524d\u8fd4\u56de\u65b0\u503c\u3002 led_set_user() \u51fd\u6570\u793a\u4f8b\u5b9e\u73b0 \u00b6 void led_set_user ( uint8_t usb_led ) { if ( IS_LED_ON ( usb_led , USB_LED_NUM_LOCK )) { writePinLow ( B0 ); } else { writePinHigh ( B0 ); } if ( IS_LED_ON ( usb_led , USB_LED_CAPS_LOCK )) { writePinLow ( B1 ); } else { writePinHigh ( B1 ); } if ( IS_LED_ON ( usb_led , USB_LED_SCROLL_LOCK )) { writePinLow ( B2 ); } else { writePinHigh ( B2 ); } if ( IS_LED_ON ( usb_led , USB_LED_COMPOSE )) { writePinLow ( B3 ); } else { writePinHigh ( B3 ); } if ( IS_LED_ON ( usb_led , USB_LED_KANA )) { writePinLow ( B4 ); } else { writePinHigh ( B4 ); } } led_set_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void led_set_kb(uint8_t usb_led) \u5e03\u5c40: void led_set_user(uint8_t usb_led) host_keyboard_leds() \u00b6 \u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u6700\u540e\u6536\u5230\u7684LED\u72b6\u6001\u3002\u8fd9\u4e2a\u51fd\u6570\u5728 led_set_* \u4e4b\u5916\u8bfb\u53d6LED\u72b6\u6001\u65f6\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5728 matrix_scan_user() . \u4e3a\u4e86\u4fbf\u6377\uff0c\u4f60\u53ef\u4ee5\u7528 IS_HOST_LED_ON(led_name) \u548c IS_HOST_LED_OFF(led_name) \u5b8f\uff0c\u800c\u4e0d\u76f4\u63a5\u8c03\u7528\u548c\u68c0\u67e5 host_keyboard_leds() \u3002 \u8bbe\u7f6e\u7269\u7406LED\u72b6\u6001 \u00b6 \u4e00\u4e9b\u952e\u76d8\u5b9e\u73b0\u4e86\u4e3a\u8bbe\u7f6e\u7269\u7406LED\u7684\u72b6\u6001\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002 Ergodox Boards \u00b6 Ergodox\u5b9e\u73b0\u4e86\u63d0\u4f9b ergodox_right_led_1 / 2 / 3_on / off() \u6765\u8ba9\u6bcf\u4e2aLED\u5f00\u6216\u5173, \u4e5f\u53ef\u4ee5\u7528 ergodox_right_led_on / off(uint8_t led) \u6309\u7d22\u5f15\u6253\u5f00\u6216\u5173\u95ed\u4ed6\u4eec\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 ergodox_led_all_set(uint8_t n) \u6307\u5b9a\u6240\u6709LED\u7684\u4eae\u5ea6\u7ea7\u522b\uff1b\u9488\u5bf9\u6bcf\u4e2aLED\u7528 ergodox_right_led_1 / 2 / 3_set(uint8_t n) \uff1b\u4f7f\u7528\u7d22\u5f15\u7684\u8bdd\u7528 ergodox_right_led_set(uint8_t led, uint8_t n) \u3002 Ergodox boards \u540c\u65f6\u5b9a\u4e49\u4e86\u6700\u4f4e\u4eae\u5ea6\u7ea7\u522b LED_BRIGHTNESS_LO \u548c\u6700\u9ad8\u4eae\u5ea6\u7ea7\u522b LED_BRIGHTNESS_HI (\u9ed8\u8ba4\u6700\u9ad8). \u952e\u76d8\u521d\u59cb\u5316\u4ee3\u7801 \u00b6 \u952e\u76d8\u521d\u59cb\u5316\u8fc7\u7a0b\u6709\u51e0\u4e2a\u6b65\u9aa4\u3002\u4f60\u662f\u7528\u90a3\u4e2a\u51fd\u6570\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u505a\u4ec0\u4e48\u3002 \u6709\u4e09\u4e2a\u4e3b\u8981\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6309\u8c03\u7528\u987a\u5e8f\u5217\u51fa\u3002 keyboard_pre_init_* - \u4f1a\u5728\u5927\u591a\u6570\u5176\u4ed6\u4e1c\u897f\u8fd0\u884c\u524d\u8fd0\u884c\u3002\u9002\u7528\u4e8e\u54ea\u4e9b\u9700\u8981\u63d0\u524d\u8fd0\u884c\u7684\u786c\u4ef6\u521d\u59cb\u5316\u3002 matrix_init_* - \u5728\u56fa\u4ef6\u542f\u52a8\u8fc7\u7a0b\u4e2d\u95f4\u88ab\u8c03\u7528\u3002\u6b64\u65f6\u786c\u4ef6\u5df2\u521d\u59cb\u5316\uff0c\u529f\u80fd\u5c1a\u672a\u521d\u59cb\u5316\u3002 keyboard_post_init_* - \u5728\u56fa\u4ef6\u542f\u52a8\u8fc7\u7a0b\u6700\u540e\u88ab\u8c03\u7528\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u201c\u5ba2\u5236\u5316\u201d\u4ee3\u7801\u90fd\u53ef\u4ee5\u653e\u5728\u8fd9\u91cc\u3002 Tip \u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4 keyboard_post_init_user \u662f\u4f60\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u4f8b\u5982, \u6b64\u65f6\u4f60\u53ef\u4ee5\u8bbe\u7f6eRGB\u706f\u53d1\u5149\u3002 \u952e\u76d8\u9884\u521d\u59cb\u5316\u4ee3\u7801 \u00b6 \u8fd9\u4ee3\u7801\u6781\u65e9\u8fd0\u884c\uff0c\u751a\u81f3\u90fd\u5728USB\u521d\u59cb\u5316\u524d\u8fd0\u884c\u3002 \u5728\u8fd9\u4e4b\u540e\u4e0d\u4e45\u77e9\u9635\u5c31\u88ab\u521d\u59cb\u5316\u4e86\u3002 \u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u6765\u8bf4,\u8fd9\u7528\u4e0d\u5230\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u662f\u7528\u4e8e\u9762\u5411\u786c\u4ef6\u7684\u521d\u59cb\u5316\u3002 \u4f46\u5982\u679c\u4f60\u6709\u786c\u4ef6\u521d\u59cb\u5316\u7684\u8bdd\u653e\u5728\u8fd9\u91cc\u518d\u597d\u4e0d\u8fc7\u4e86(\u6bd4\u5982\u521d\u59cb\u5316LED\u5f15\u811a\u4e00\u7c7b\u7684). keyboard_pre_init_user() \u51fd\u6570\u793a\u4f8b\u5b9e\u73b0 \u00b6 \u672c\u4f8b\u4e2d\u5728\u952e\u76d8\u7ea7\u522b\uff0c\u8bbe\u5b9a B0, B1, B2, B3, \u548c B4 \u662fLED\u5f15\u811a\u3002 void keyboard_pre_init_user ( void ) { // \u8c03\u7528\u952e\u76d8\u9884\u521d\u59cb\u5316\u4ee3\u7801 // \u8bbe\u7f6eLED\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f setPinOutput ( B0 ); setPinOutput ( B1 ); setPinOutput ( B2 ); setPinOutput ( B3 ); setPinOutput ( B4 ); } keyboard_pre_init_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void keyboard_pre_init_kb(void) \u5e03\u5c40: void keyboard_pre_init_user(void) \u77e9\u9635\u521d\u59cb\u5316\u4ee3\u7801 \u00b6 \u8fd9\u5c06\u4f1a\u5728\u77e9\u9635\u521d\u59cb\u5316\u65f6\u88ab\u8c03\u7528\uff0c\u5728\u67d0\u4e9b\u786c\u4ef6\u8bbe\u7f6e\u597d\u540e\uff0c\u4f46\u5728\u4e00\u4e9b\u529f\u80fd\u88ab\u521d\u59cb\u5316\u524d\u3002 \u8fd9\u5728\u4f60\u8bbe\u7f6e\u5176\u4ed6\u5730\u65b9\u4f1a\u7528\u5230\u7684\u4e1c\u897f\u7684\u65f6\u5019\u4f1a\u5f88\u6709\u7528\uff0c\u4f46\u4e0e\u786c\u4ef6\u65e0\u5173\uff0c\u4e5f\u4e0d\u4f9d\u8d56\u4e8e\u5b83\u7684\u542f\u52a8\u4f4d\u7f6e\u3002 matrix_init_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void matrix_init_kb(void) \u5e03\u5c40: void matrix_init_user(void) \u952e\u76d8\u540e\u521d\u59cb\u5316\u4ee3\u7801 \u00b6 \u8fd9\u662f\u952e\u76d8\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\u3002\u5982\u679c\u60a8\u60f3\u66f4\u6539\u67d0\u4e9b\u7279\u6027\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u6b64\u65f6\u5e94\u8be5\u5bf9\u5b83\u4eec\u8fdb\u884c\u521d\u59cb\u5316\u3002 keyboard_post_init_user() \u793a\u4f8b\u5b9e\u73b0 \u00b6 \u672c\u793a\u4f8b\u5728\u6240\u6709\u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u914d\u7f6eRGB\u706f\u3002 void keyboard_post_init_user ( void ) { // \u8c03\u7528\u540e\u521d\u59cb\u5316\u4ee3\u7801 rgblight_enable_noeeprom (); // \u4f7f\u80fdRgb\uff0c\u4e0d\u4fdd\u5b58\u8bbe\u7f6e rgblight_sethsv_noeeprom ( 180 , 255 , 255 ); // \u5c06\u989c\u8272\u8bbe\u7f6e\u5230\u84dd\u7eff\u8272(\u9752\u8272)\u4e0d\u4fdd\u5b58 rgblight_mode_noeeprom ( RGBLIGHT_MODE_BREATHING + 3 ); // \u8bbe\u7f6e\u5feb\u901f\u547c\u5438\u6a21\u5f0f\u4e0d\u4fdd\u5b58 } keyboard_post_init_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void keyboard_post_init_kb(void) \u5e03\u5c40: void keyboard_post_init_user(void) \u77e9\u9635\u626b\u63cf\u4ee3\u7801 \u00b6 \u53ef\u80fd\u7684\u8bdd\u4f60\u8981\u7528 process_record_*() \u81ea\u5b9a\u4e49\u952e\u76d8\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fde\u63a5\u5230\u4e8b\u4ef6\u4e2d\uff0c\u4ee5\u786e\u4fdd\u4ee3\u7801\u4e0d\u4f1a\u5bf9\u952e\u76d8\u4ea7\u751f\u8d1f\u9762\u7684\u6027\u80fd\u5f71\u54cd\u3002\u7136\u800c\uff0c\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6709\u5fc5\u8981\u8fdb\u884c\u77e9\u9635\u626b\u63cf\u3002\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\u8981\u7279\u522b\u6ce8\u610f\u4ee3\u7801\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u6bcf\u79d2\u81f3\u5c11\u88ab\u8c03\u752810\u6b21\u3002 matrix_scan_* \u793a\u4f8b\u5b9e\u73b0 \u00b6 \u8fd9\u4e2a\u4f8b\u5b50\u88ab\u6545\u610f\u7701\u7565\u4e86\u3002\u5728hook\u8fd9\u6837\u4e00\u4e2a\u5bf9\u6027\u80fd\u53ca\u5176\u654f\u611f\u7684\u533a\u57df\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u8db3\u591f\u4e86\u89e3qmk\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u793a\u4f8b\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u3002\u5982\u679c\u4f60\u9700\u8981\u5e2e\u52a9\uff0c\u8bf7 \u5efa\u7acb\u4e00\u4e2aissue \u6216 \u5728Discord\u4e0a\u4e0e\u6211\u4eec\u4ea4\u6d41 . matrix_scan_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void matrix_scan_kb(void) \u5e03\u5c40: void matrix_scan_user(void) \u8be5\u51fd\u6570\u5728\u6bcf\u6b21\u77e9\u9635\u626b\u63cf\u65f6\u88ab\u8c03\u7528\uff0c\u8fd9\u57fa\u672c\u4e0eMCU\u5904\u7406\u80fd\u529b\u4e0a\u9650\u76f8\u540c\u3002\u5728\u8fd9\u91cc\u5199\u4ee3\u7801\u8981\u8c28\u614e\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8fd0\u884c\u5f88\u591a\u6b21\u3002 \u4f60\u4f1a\u5728\u81ea\u5b9a\u4e49\u77e9\u9635\u626b\u63cf\u4ee3\u7801\u65f6\u7528\u5230\u8fd9\u4e2a\u51fd\u6570\u3002\u8fd9\u4e5f\u53ef\u4ee5\u7528\u4f5c\u81ea\u5b9a\u4e49\u72b6\u6001\u8f93\u51fa(\u6bd4\u5982LED\u706f\u6216\u8005\u5c4f\u5e55)\u6216\u8005\u5176\u4ed6\u5373\u4fbf\u7528\u6237\u4e0d\u8f93\u5165\u4f60\u4e5f\u60f3\u5b9a\u671f\u8fd0\u884c\u7684\u529f\u80fd\u3002 \u952e\u76d8 \u7a7a\u95f2/\u5524\u9192 \u4ee3\u7801 \u00b6 \u5982\u679c\u952e\u76d8\u652f\u6301\u5c31\u53ef\u4ee5\u901a\u8fc7\u505c\u6b62\u4e00\u5927\u7968\u529f\u80fd\u6765\u8fbe\u5230\"\u7a7a\u95f2\"\u3002RGB\u706f\u548c\u80cc\u5149\u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u8fd9\u53ef\u4ee5\u8282\u7ea6\u80fd\u8017\uff0c\u4e5f\u53ef\u80fd\u8ba9\u4f60\u952e\u76d8\u98ce\u5473\u66f4\u4f73\u3002 \u7528\u4e24\u4e2a\u51fd\u6570\u63a7\u5236: suspend_power_down_* \u548c suspend_wakeup_init_* , \u5206\u522b\u5728\u7cfb\u7edf\u677f\u7a7a\u95f2\u548c\u5524\u9192\u65f6\u8c03\u7528\u3002 suspend_power_down_user()\u548csuspend_wakeup_init_user()\u793a\u4f8b\u5b9e\u73b0 \u00b6 void suspend_power_down_user ( void ) { rgb_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { rgb_matrix_set_suspend_state ( false ); } \u952e\u76d8 \u6302\u8d77/\u5524\u9192 \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void suspend_power_down_kb(void) \u548c void suspend_wakeup_init_user(void) \u5e03\u5c40: void suspend_power_down_kb(void) \u548c void suspend_wakeup_init_user(void) \u5c42\u6539\u53d8\u4ee3\u7801 \u00b6 \u6bcf\u5f53\u5c42\u6539\u53d8\u8fd9\u4e2a\u5c31\u8fd0\u884c\u4ee3\u7801\u3002\u8fd9\u5bf9\u4e8e\u5c42\u6307\u793a\u6216\u81ea\u5b9a\u4e49\u5c42\u5904\u7406\u5f88\u6709\u7528\u3002 layer_state_set_* \u793a\u4f8b\u5b9e\u73b0 \u00b6 \u672c\u4f8b\u4f7f\u7528\u4e86Planck\u952e\u76d8\u793a\u8303\u4e86\u5982\u4f55\u8bbe\u7f6e RGB\u80cc\u5149\u706f \u4f7f\u4e4b\u4e0e\u5c42\u5bf9\u5e94 uint32_t layer_state_set_user ( uint32_t state ) { switch ( biton32 ( state )) { case _RAISE : rgblight_setrgb ( 0x00 , 0x00 , 0xFF ); break ; case _LOWER : rgblight_setrgb ( 0xFF , 0x00 , 0x00 ); break ; case _PLOVER : rgblight_setrgb ( 0x00 , 0xFF , 0x00 ); break ; case _ADJUST : rgblight_setrgb ( 0x7A , 0x00 , 0xFF ); break ; default : // for any other layers, or the default layer rgblight_setrgb ( 0x00 , 0xFF , 0xFF ); break ; } return state ; } layer_state_set_* \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: uint32_t layer_state_set_kb(uint32_t state) \u5e03\u5c40: uint32_t layer_state_set_user(uint32_t state) \u8be5 \u72b6\u6001 \u662f\u6d3b\u52a8\u5c42\u7684bitmask, \u8be6\u89c1 \u5e03\u5c40\u6982\u8ff0 \u6389\u7535\u4fdd\u5b58\u914d\u7f6e (EEPROM) \u00b6 \u8fd9\u4f1a\u8ba9\u4f60\u7684\u914d\u7f6e\u957f\u671f\u7684\u4fdd\u5b58\u5728\u952e\u76d8\u4e2d\u3002\u8fd9\u4e9b\u914d\u7f6e\u4fdd\u5b58\u5728\u4f60\u4e3b\u63a7\u7684EEPROM\u91cc\uff0c\u6389\u7535\u4e0d\u4f1a\u6d88\u5931\u3002 \u8bbe\u7f6e\u53ef\u4ee5\u7528 eeconfig_read_kb \u548c eeconfig_read_user \u8bfb\u53d6\uff0c\u53ef\u4ee5\u7528 eeconfig_update_kb \u548c eeconfig_update_user \u5199\u5165\u3002\u8fd9\u5bf9\u4e8e\u60a8\u5e0c\u671b\u80fd\u591f\u5207\u6362\u7684\u529f\u80fd\u5f88\u6709\u7528(\u6bd4\u5982\u5207\u6362RGB\u5c42\u6307\u793a\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u7528 eeconfig_init_kb \u548c eeconfig_init_user \u6765\u8bbe\u7f6eEEPROM\u9ed8\u8ba4\u503c\u3002 \u6700\u590d\u6742\u7684\u90e8\u5206\u53ef\u80fd\u662f\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7EEPROM\u5b58\u50a8\u548c\u8bbf\u95ee\u6570\u636e\uff0c\u5e76\u4e14\u5e76\u6ca1\u6709\u7528\u54ea\u79cd\u65b9\u6cd5\u662f\u201c\u653f\u6cbb\u6b63\u786e\u201d\u7684\u3002\u4f60\u6bcf\u4e2a\u529f\u80fd\u53ea\u6709\u4e00\u4e2a\u53cc\u5b57(\u56db\u5b57\u8282)\u7a7a\u95f4\u3002 \u8bb0\u4f4fEEPROM\u662f\u6709\u5199\u5165\u5bff\u547d\u7684\u3002\u5c3d\u7ba1\u5199\u5165\u5bff\u547d\u5f88\u9ad8\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u53ea\u6709\u8bbe\u7f6e\u5199\u9053EEPROM\u4e2d\u3002\u5982\u679c\u4f60\u5199\u5165\u9891\u7e41\uff0c\u4f60\u7684MCU\u5bff\u547d\u5c06\u4f1a\u53d8\u77ed\u3002 \u5982\u679c\u60a8\u4e0d\u7406\u89e3\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u5e0c\u671b\u907f\u514d\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u56e0\u4e3a\u5b83\u76f8\u5f53\u590d\u6742\u3002 \u793a\u4f8b\u5b9e\u73b0 \u00b6 \u672c\u4f8b\u8bb2\u89e3\u4e86\u5982\u4f55\u6dfb\u52a0\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8bfb\u5199\u3002\u672c\u91cc\u4f7f\u7528\u4e86\u7528\u6237\u5e03\u5c40\u3002\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u51fd\u6570\uff0c\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4f7f\u7528\u4e86\u5f88\u591a\u4e0a\u8ff0\u51fd\u6570\u6765\u5de5\u4f5c\uff01 \u5728\u4f60\u7684keymap.c\u6587\u4ef6\u4e2d\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u6dfb\u52a0\u81f3\u9876\u90e8: typedef union { uint32_t raw ; struct { bool rgb_layer_change : 1 ; }; } user_config_t ; user_config_t user_config ; \u4ee5\u4e0a\u4ee3\u7801\u5efa\u7acb\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u53ef\u4ee5\u5b58\u50a8\u8bbe\u7f6e\u5e76\u53ef\u7528\u4e8e\u5199\u5165EEPROM\u3002\u5982\u6b64\u8fd9\u822c\u5c06\u65e0\u9700\u5b9a\u4e49\u53d8\u91cf\uff0c\u56e0\u4e3a\u5728\u7ed3\u6784\u4f53\u4e2d\u5df2\u7136\u5b9a\u4e49\u3002\u8981\u8bb0\u4f4f bool (\u5e03\u5c14)\u503c\u4f7f\u75281\u4f4d, uint8_t \u4f7f\u75288\u4f4d, uint16_t \u4f7f\u752816\u4f4d\u3002\u4f60\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u4f7f\u7528\uff0c\u4f46\u662f\u987a\u5e8f\u8bb0\u9519\u53ef\u80fd\u4f1a\u62db\u81f4\u9ebb\u70e6\uff0c\u56e0\u4e3a\u90a3\u4f1a\u6539\u53d8\u5199\u5165\u5199\u51fa\u7684\u503c\u3002 layer_state_set_* \u51fd\u6570\u4e2d\u4f7f\u7528\u4e86 rgb_layer_change \uff0c\u4f7f\u7528\u4e86 keyboard_post_init_user \u548c process_record_user \u6765\u914d\u7f6e\u4e00\u5207\u3002 \u9996\u5148\u8981\u4f7f\u7528 keyboard_post_init_user\uff0c\u4f60\u8981\u52a0\u5165 eeconfig_read_user()`\u6765\u586b\u5145\u4f60\u521a\u521a\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u3002\u7136\u540e\u60a8\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u8fd9\u4e2a\u7ed3\u6784\u6765\u63a7\u5236\u60a8\u7684\u5e03\u5c40\u4e2d\u7684\u529f\u80fd\u3002\u5c31\u50cf\u8fd9\u6837\uff1a void keyboard_post_init_user ( void ) { // \u8c03\u7528\u5e03\u5c40\u7ea7\u522b\u7684\u77e9\u9635\u521d\u59cb\u5316 // \u4eceEEPROM\u8bfb\u7528\u6237\u914d\u7f6e user_config . raw = eeconfig_read_user (); // \u5982\u4f7f\u80fd\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u5c42 if ( user_config . rgb_layer_change ) { rgblight_enable_noeeprom (); rgblight_sethsv_noeeprom_cyan (); rgblight_mode_noeeprom ( 1 ); } } \u4ee5\u4e0a\u51fd\u6570\u4f1a\u5728\u8bfbEEPROM\u914d\u7f6e\u540e\u7acb\u5373\u4f7f\u7528\u8be5\u8bbe\u7f6e\u6765\u8bbe\u7f6e\u9ed8\u8ba4\u5c42RGB\u989c\u8272\u3002\"raw\"\u7684\u503c\u662f\u4ece\u4f60\u4e0a\u9762\u57fa\u4e8e\"union\"\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u4e2d\u8f6c\u6362\u6765\u7684\u3002 uint32_t layer_state_set_user ( uint32_t state ) { switch ( biton32 ( state )) { case _RAISE : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_magenta (); rgblight_mode_noeeprom ( 1 ); } break ; case _LOWER : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_red (); rgblight_mode_noeeprom ( 1 ); } break ; case _PLOVER : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_green (); rgblight_mode_noeeprom ( 1 ); } break ; case _ADJUST : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_white (); rgblight_mode_noeeprom ( 1 ); } break ; default : // \u9488\u5bf9\u5176\u4ed6\u5c42\u6216\u9ed8\u8ba4\u5c42 if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_cyan (); rgblight_mode_noeeprom ( 1 ); } break ; } return state ; } \u8fd9\u6837\u4ec5\u5728\u503c\u4f7f\u80fd\u65f6\u4f1a\u6539\u53d8RGB\u80cc\u5149\u706f\u3002\u73b0\u5728\u914d\u7f6e\u8fd9\u4e2a\u503c, \u4e3a process_record_user \u521b\u5efa\u4e00\u4e2a\u65b0\u952e\u7801\u53eb\u505a RGB_LYR \u3002\u6211\u4eec\u8981\u786e\u4fdd\uff0c\u5982\u679c\u4f7f\u7528\u6b63\u5e38\u7684RGB\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u5176\u5173\u95ed\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a\uff1a bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case FOO : if ( record -> event . pressed ) { // \u6309\u4e0b\u65f6\u505a\u70b9\u4ec0\u4e48 } else { // \u91ca\u653e\u65f6\u505a\u70b9\u4ec0\u4e48 } return false ; // \u8df3\u8fc7\u6b64\u952e\u7684\u8fdb\u4e00\u6b65\u5904\u7406 case KC_ENTER : // \u5728\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26 if ( record -> event . pressed ) { PLAY_SONG ( tone_qwerty ); } return true ; // \u8ba9QMK\u4ea7\u751f\u56de\u8f66\u6309\u4e0b/\u91ca\u653e\u4e8b\u4ef6 case RGB_LYR : // \u672c\u53e5\u8ba9underglow\u4f5c\u4e3a\u5c42\u6307\u793a\uff0c\u6216\u6b63\u5e38\u4f7f\u7528\u3002 if ( record -> event . pressed ) { user_config . rgb_layer_change ^= 1 ; // \u5207\u6362\u72b6\u6001 eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u65b0\u72b6\u6001 if ( user_config . rgb_layer_change ) { // \u5982\u679c\u5c42\u72b6\u6001\u88ab\u4f7f\u80fd layer_state_set ( layer_state ); // \u90a3\u4e48\u7acb\u523b\u66f4\u65b0\u5c42\u989c\u8272 } } return false ; case RGB_MODE_FORWARD ... RGB_MODE_GRADIENT : // \u5bf9\u4e8e\u6240\u6709\u7684RGB\u4ee3\u7801 (see quantum_keycodes.h, L400 \u53ef\u4ee5\u53c2\u8003) if ( record -> event . pressed ) { //\u672c\u53e5\u5931\u80fd\u5c42\u6307\u793a\uff0c\u5047\u8bbe\u4f60\u6539\u53d8\u4e86\u8fd9\u4e2a\u2026\u4f60\u8981\u628a\u5b83\u7981\u7528 if ( user_config . rgb_layer_change ) { // \u4ec5\u5f53\u4f7f\u80fd\u65f6 user_config . rgb_layer_change = false ; // \u5931\u80fd\uff0c\u7136\u540e eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u8bbe\u7f6e } } return true ; break ; default : return true ; // \u6309\u5176\u4ed6\u952e\u6b63\u5e38 } } \u6700\u540e\u4f60\u8981\u52a0\u5165 eeconfig_init_user \u51fd\u6570\uff0c\u6240\u4ee5\u5f53EEPROM\u91cd\u7f6e\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u9ed8\u8ba4\u503c, \u751a\u81f3\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u60f3\u5f3a\u5236\u91cd\u7f6eEEPROM\uff0c\u8bf7\u7528 EEP_RST \u952e\u7801\u6216 Bootmagic \u51fd\u6570\u3002\u6bd4\u5982\uff0c\u5982\u679c\u8981\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8bbe\u7f6eRGB\u5c42\u6307\u793a\uff0c\u5e76\u4fdd\u5b58\u9ed8\u8ba4\u503c void eeconfig_init_user ( void ) { // EEPROM\u6b63\u88ab\u91cd\u7f6e user_config . raw = 0 ; user_config . rgb_layer_change = true ; // \u6211\u4eec\u60f3\u8981\u9ed8\u8ba4\u4f7f\u80fd eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u9ed8\u8ba4\u503c // use the non noeeprom versions, \u8fd8\u8981\u5411EEPROM\u5199\u5165\u8fd9\u4e9b\u503c rgblight_enable (); // \u9ed8\u8ba4\u4f7f\u80fdRGB rgblight_sethsv_cyan (); // \u9ed8\u8ba4\u8bbe\u7f6e\u9752\u8272 rgblight_mode ( 1 ); // \u9ed8\u8ba4\u8bbe\u7f6e\u957f\u4eae } \u7136\u540e\u5c31\u5b8c\u4e8b\u4e86\u3002RGB\u5c42\u6307\u793a\u4f1a\u5728\u4f60\u60f3\u8ba9\u5b83\u5de5\u4f5c\u65f6\u5de5\u4f5c\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u4f1a\u4e00\u76f4\u4fdd\u5b58\uff0c\u5373\u4fbf\u4f60\u62d4\u4e0b\u952e\u76d8\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6RGB\u4ee3\u7801\uff0c\u5c42\u6307\u793a\u5c06\u5931\u80fd\uff0c\u73b0\u5728\u5b83\u53ef\u4ee5\u505a\u4f60\u6240\u60f3\u4e86\u3002 'EECONFIG' \u51fd\u6570\u6587\u6863 \u00b6 \u952e\u76d8/\u4fee\u8ba2: void eeconfig_init_kb(void) , uint32_t eeconfig_read_kb(void) \u548c void eeconfig_update_kb(uint32_t val) \u5e03\u5c40: void eeconfig_init_user(void) , uint32_t eeconfig_read_user(void) \u548c void eeconfig_update_user(uint32_t val) val \u662f\u4f60\u60f3\u5199\u5165EEPROM\u7684\u503c\uff0c eeconfig_read_* \u51fd\u6570\u4f1a\u4eceEEPROM\u8fd4\u56de\u4e00\u4e2a32\u4f4d(\u53cc\u5b57)\u7684\u503c\u3002 \u81ea\u5b9a\u4e49\u51fb\u952e-\u957f\u6309\u4e34\u754c\u503c(TAPPING_TERM) \u00b6 \u9ed8\u8ba4\u60c5\u51b5\u4e0b,\u51fb\u952e-\u957f\u6309\u4e34\u754c\u503c\u662f\u5168\u7403\u7edf\u4e00\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u901a\u8fc7\u952e\u8fdb\u884c\u914d\u7f6e\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u6765\u8bf4\u8fd9\u5f88\u597d\u3002\u4f46\u662f\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e LT \u952e\u6765\u8bf4\u6309\u952e\u5ef6\u65f6\u5bf9\u53cc\u529f\u80fd\u952e\u7684\u63d0\u5347\u66f4\u5927\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6709\u4e9b\u952e\u6bd4\u5176\u4ed6\u7684\u952e\u66f4\u5bb9\u6613\u6309\u4f4f\u3002\u4e3a\u4e86\u4e0d\u7ed9\u6bcf\u4e2a\u90fd\u81ea\u5b9a\u4e49\u952e\u7801\uff0c\u672c\u529f\u80fd\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u952e\u5b9a\u4e49 TAPPING_TERM \u3002 \u60f3\u4f7f\u80fd\u8fd9\u4e2a\u529f\u80fd\u7684\u8bdd, \u8981\u5148\u5728 config.h \u52a0\u4e0a #define TAPPING_TERM_PER_KEY \u3002 get_tapping_term \u793a\u4f8b\u5b9e\u73b0 \u00b6 \u60f3\u8981\u4fee\u6539\u57fa\u4e8e\u952e\u7801\u7684 TAPPING TERM ,\u4f60\u8981\u5411 keymap.c \u6587\u4ef6\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801: uint16_t get_tapping_term ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return TAPPING_TERM + 1250 ; case LT ( 1 , KC_GRV ) : return 130 ; default : return TAPPING_TERM ; } } get_tapping_term \u51fd\u6570\u6587\u6863 \u00b6 \u4e0d\u50cf\u8fd9\u7bc7\u7684\u5176\u4ed6\u529f\u80fd,\u8fd9\u4e2a\u4e0d\u9700\u8981quantum\u6216\u8005\u952e\u76d8\u7ea7\u522b\u7684\u51fd\u6570\uff0c\u53ea\u8981\u7528\u6237\u7ea7\u51fd\u6570\u5373\u53ef\u3002","title":"\u5b9a\u5236\u529f\u80fd"},{"location":"custom_quantum_functions/#_1","text":"\u5bf9\u4e8e\u5f88\u591a\u4eba\u6765\u8bf4\u5ba2\u5236\u5316\u952e\u76d8\u53ef\u4e0d\u53ea\u662f\u5411\u4f60\u7684\u7535\u8111\u53d1\u9001\u4f60\u6309\u4e86\u90a3\u4e2a\u4ef6\u8fd9\u4e48\u7b80\u5355\u3002\u4f60\u80af\u5b9a\u60f3\u5b9e\u73b0\u6bd4\u7b80\u5355\u6309\u952e\u548c\u5b8f\u66f4\u590d\u6742\u7684\u529f\u80fd\u3002QMK\u6709\u80fd\u8ba9\u4f60\u6ce8\u5165\u4ee3\u7801\u7684\u94a9\u5b50, \u8986\u76d6\u529f\u80fd, \u53e6\u5916\uff0c\u8fd8\u53ef\u4ee5\u81ea\u5b9a\u4e49\u952e\u76d8\u5728\u4e0d\u540c\u60c5\u51b5\u4e0b\u7684\u884c\u4e3a\u3002 \u672c\u9875\u4e0d\u5047\u5b9a\u4efb\u4f55\u7279\u6b8a\u7684QMK\u77e5\u8bc6\uff0c\u4f46\u9605\u8bfb \u7406\u89e3QMK \u5c06\u4f1a\u5728\u66f4\u57fa\u7840\u7684\u5c42\u9762\u5e2e\u4f60\u7406\u89e3\u53d1\u751f\u4e86\u4ec0\u4e48\u3002","title":"\u5982\u4f55\u5b9a\u5236\u4f60\u952e\u76d8\u7684\u529f\u80fd"},{"location":"custom_quantum_functions/#a-word-on-core-vs-vs","text":"\u6211\u4eec\u628aqmk\u7ec4\u7ec7\u6210\u4e00\u4e2a\u5c42\u6b21\u7ed3\u6784\uff1a Core ( _quantum ) Keyboard/Revision ( _kb ) Keymap ( _user ) \u4e0b\u9762\u63cf\u8ff0\u7684\u6bcf\u4e00\u4e2a\u51fd\u6570\u90fd\u53ef\u4ee5\u5728\u5b9a\u4e49\u4e0a\u52a0\u4e00\u4e2a _kb() \u6216 _user() \u540e\u7f00\u3002 \u5efa\u8bae\u5728\u952e\u76d8/\u4fee\u8ba2\u5c42\u4f7f\u7528 _kb() \u540e\u7f00\uff0c\u5728\u5e03\u5c40\u5c42\u4f7f\u7528 _user() \u540e\u7f00\u3002 \u5728\u952e\u76d8/\u4fee\u8ba2\u5c42\u5b9a\u4e49\u51fd\u6570\u65f6\uff0c _kb() \u5728\u6267\u884c\u4efb\u4f55\u4ee3\u7801\u524d\u5148\u8c03\u7528 _user() \u662f\u5fc5\u8981\u7684\uff0c\u4e0d\u7136\u5e03\u5c40\u5c42\u51fd\u6570\u5c31\u4e0d\u8981\u88ab\u8c03\u7528\u3002","title":"A Word on Core vs \u952e\u76d8 vs \u5e03\u5c40"},{"location":"custom_quantum_functions/#_2","text":"\u5230\u76ee\u524d\u4e3a\u6b62\uff0c\u6700\u5e38\u89c1\u7684\u4efb\u52a1\u662f\u66f4\u6539\u73b0\u6709\u952e\u7801\u7684\u884c\u4e3a\u6216\u521b\u5efa\u65b0\u7684\u952e\u7801\u3002\u4ece\u4ee3\u7801\u89d2\u5ea6\u6765\u770b\u8fd9\u4e9b\u64cd\u4f5c\u90fd\u5f88\u76f8\u4f3c\u3002","title":"\u81ea\u5b9a\u4e49\u952e\u7801"},{"location":"custom_quantum_functions/#_3","text":"\u521b\u5efa\u952e\u7801\u7b2c\u4e00\u6b65\uff0c\u5148\u679a\u4e3e\u51fa\u5b83\u5168\u90e8\uff0c\u4e5f\u5c31\u662f\u7ed9\u952e\u7801\u8d77\u4e2a\u540d\u5b57\u5e76\u5206\u914d\u552f\u4e00\u6570\u503c\u3002QMK\u6ca1\u6709\u76f4\u63a5\u9650\u5236\u6700\u5927\u952e\u7801\u503c\u5927\u5c0f\uff0c\u800c\u662f\u63d0\u4f9b\u4e86\u4e00\u4e2a SAFE_RANGE \u5b8f\u3002\u4f60\u53ef\u4ee5\u5728\u679a\u4e3e\u65f6\u7528 SAFE_RANGE \u6765\u4fdd\u8bc1\u4f60\u53d6\u5f97\u4e86\u552f\u4e00\u7684\u952e\u7801\u503c\u3002 \u8fd9\u6709\u679a\u4e3e\u4e24\u4e2a\u952e\u7801\u7684\u4f8b\u5b50\u3002\u628a\u8fd9\u5757\u52a0\u5230 keymap.c \u7684\u8bdd\u4f60\u5c31\u5728\u5e03\u5c40\u4e2d\u80fd\u7528 FOO \u548c BAR \u4e86\u3002 enum my_keycodes { FOO = SAFE_RANGE , BAR };","title":"\u5b9a\u4e49\u4e00\u4e2a\u65b0\u952e\u7801"},{"location":"custom_quantum_functions/#_4","text":"\u5f53\u4f60\u8986\u76d6\u4e00\u4e2a\u5df2\u5b58\u5728\u6309\u952e\u7684\u884c\u4e3a\u65f6\uff0c\u6216\u5c06\u8fd9\u4e2a\u884c\u4e3a\u8d4b\u7ed9\u65b0\u952e\u65f6\uff0c\u4f60\u8981\u7528 process_record_kb() \u548c process_record_user() \u51fd\u6570\u3002\u8fd9\u4fe9\u51fd\u6570\u5728\u952e\u5904\u7406\u4e2d\u771f\u5b9e\u952e\u4e8b\u4ef6\u88ab\u5904\u7406\u524d\u88abQMK\u8c03\u7528\u3002\u5982\u679c\u8fd9\u4fe9\u51fd\u6570\u8fd4\u56de true \uff0cQMK\u5c06\u4f1a\u7528\u6b63\u5e38\u7684\u65b9\u5f0f\u5904\u7406\u952e\u7801\u3002\u8fd9\u6837\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u6269\u5c55\u952e\u7801\u7684\u529f\u80fd\u800c\u4e0d\u662f\u66ff\u6362\u5b83\u3002\u5982\u679c\u51fd\u6570\u8fd4\u56de false QMK\u4f1a\u8df3\u8fc7\u6b63\u5e38\u952e\u5904\u7406\uff0c\u7136\u540e\u53d1\u9001\u952e\u5b50\u62ac\u8d77\u8fd8\u662f\u6309\u4e0b\u4e8b\u4ef6\u5c31\u7531\u4f60\u51b3\u5b9a\u4e86\u3002 \u5f53\u67d0\u4e2a\u952e\u6309\u4e0b\u6216\u91ca\u653e\u65f6\u8fd9\u4fe9\u51fd\u6570\u4f1a\u88ab\u8c03\u7528\u3002","title":"\u4e3a\u952e\u7801\u7684\u884c\u4e3a\u7f16\u7a0b"},{"location":"custom_quantum_functions/#process_record_user","text":"\u8fd9\u4e2a\u4f8b\u5b50\u505a\u4e86\u4e24\u4e2a\u4e8b\u3002\u81ea\u5b9a\u4e49\u4e86\u4e00\u4e2a\u53eb\u505a FOO \u7684\u952e\u7801\u7684\u884c\u4e3a\uff0c\u5e76\u8865\u5145\u4e86\u5728\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26\u3002 bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case FOO : if ( record -> event . pressed ) { // \u6309\u4e0b\u65f6\u505a\u4e9b\u4ec0\u4e48 } else { // \u91ca\u653e\u65f6\u505a\u4e9b\u4ec0\u4e48 } return false ; // \u8df3\u8fc7\u6b64\u952e\u7684\u6240\u6709\u8fdb\u4e00\u6b65\u5904\u7406 case KC_ENTER : // \u5f53\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26 if ( record -> event . pressed ) { PLAY_SONG ( tone_qwerty ); } return true ; // \u8ba9QMK\u89e6\u53d1\u56de\u8f66\u6309\u4e0b/\u91ca\u653e\u4e8b\u4ef6 default : return true ; // \u6b63\u5e38\u5904\u7406\u5176\u4ed6\u952e\u7801 } }","title":"process_record_user()`\u51fd\u6570\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#process_record_","text":"\u952e\u76d8/\u4fee\u8ba2: bool process_record_kb(uint16_t keycode, keyrecord_t *record) \u5e03\u5c40: bool process_record_user(uint16_t keycode, keyrecord_t *record) keycode(\u952e\u7801) \u53c2\u6570\u662f\u5728\u5e03\u5c40\u4e0a\u5b9a\u4e49\u7684\uff0c\u6bd4\u5982 MO(1) , KC_L , \u7b49\u7b49\u3002 \u4f60\u8981\u7528 switch...case \u5757\u6765\u5904\u7406\u8fd9\u4e9b\u4e8b\u4ef6\u3002 record \u53c2\u6570\u542b\u6709\u5b9e\u9645\u6309\u952e\u7684\u4fe1\u606f\uff1a keyrecord_t record { keyevent_t event { keypos_t key { uint8_t col uint8_t row } bool pressed uint16_t time } }","title":"process_record_* \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#led","text":"qmk\u63d0\u4f9b\u4e86\u8bfb\u53d6HID\u89c4\u8303\u5305\u542b\u76845\u4e2aLED\u7684\u65b9\u6cd5\u3002: USB_LED_NUM_LOCK USB_LED_CAPS_LOCK USB_LED_SCROLL_LOCK USB_LED_COMPOSE USB_LED_KANA \u8fd9\u4e94\u4e2a\u5e38\u91cf\u5bf9\u5e94\u4e8e\u4e3b\u673aLED\u72b6\u6001\u7684\u4f4d\u7f6e\u4f4d\u3002 \u6709\u4e24\u79cd\u65b9\u6cd5\u53ef\u4ee5\u83b7\u5f97\u4e3b\u673aLED\u72b6\u6001\uff1a \u901a\u8fc7\u6267\u884c led_set_user() \u901a\u8fc7\u8c03\u7528 host_keyboard_leds()","title":"LED\u63a7\u5236"},{"location":"custom_quantum_functions/#led_set_user","text":"\u5f535\u4e2aLED\u4e2d\u4efb\u4f55\u4e00\u4e2a\u7684\u72b6\u6001\u9700\u8981\u6539\u53d8\u65f6\uff0c\u6b64\u51fd\u6570\u5c06\u88ab\u8c03\u7528\u3002\u6b64\u51fd\u6570\u901a\u8fc7\u53c2\u6570\u8f93\u5165LED\u53c2\u6570\u3002 \u4f7f\u7528 IS_LED_ON(usb_led, led_name) \u548c IS_LED_OFF(usb_led, led_name) \u8fd9\u4e24\u4e2a\u5b8f\u6765\u68c0\u67e5LED\u72b6\u6001\u3002 Tip host_keyboard_leds() \u53ef\u80fd\u4f1a\u5728 led_set_user() \u88ab\u8c03\u7528\u524d\u8fd4\u56de\u65b0\u503c\u3002","title":"led_set_user()"},{"location":"custom_quantum_functions/#led_set_user_1","text":"void led_set_user ( uint8_t usb_led ) { if ( IS_LED_ON ( usb_led , USB_LED_NUM_LOCK )) { writePinLow ( B0 ); } else { writePinHigh ( B0 ); } if ( IS_LED_ON ( usb_led , USB_LED_CAPS_LOCK )) { writePinLow ( B1 ); } else { writePinHigh ( B1 ); } if ( IS_LED_ON ( usb_led , USB_LED_SCROLL_LOCK )) { writePinLow ( B2 ); } else { writePinHigh ( B2 ); } if ( IS_LED_ON ( usb_led , USB_LED_COMPOSE )) { writePinLow ( B3 ); } else { writePinHigh ( B3 ); } if ( IS_LED_ON ( usb_led , USB_LED_KANA )) { writePinLow ( B4 ); } else { writePinHigh ( B4 ); } }","title":"led_set_user()\u51fd\u6570\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#led_set_","text":"\u952e\u76d8/\u4fee\u8ba2: void led_set_kb(uint8_t usb_led) \u5e03\u5c40: void led_set_user(uint8_t usb_led)","title":"led_set_*\u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#host_keyboard_leds","text":"\u8c03\u7528\u8fd9\u4e2a\u51fd\u6570\u4f1a\u8fd4\u56de\u6700\u540e\u6536\u5230\u7684LED\u72b6\u6001\u3002\u8fd9\u4e2a\u51fd\u6570\u5728 led_set_* \u4e4b\u5916\u8bfb\u53d6LED\u72b6\u6001\u65f6\u5f88\u6709\u7528\uff0c\u6bd4\u5982\u5728 matrix_scan_user() . \u4e3a\u4e86\u4fbf\u6377\uff0c\u4f60\u53ef\u4ee5\u7528 IS_HOST_LED_ON(led_name) \u548c IS_HOST_LED_OFF(led_name) \u5b8f\uff0c\u800c\u4e0d\u76f4\u63a5\u8c03\u7528\u548c\u68c0\u67e5 host_keyboard_leds() \u3002","title":"host_keyboard_leds()"},{"location":"custom_quantum_functions/#led_1","text":"\u4e00\u4e9b\u952e\u76d8\u5b9e\u73b0\u4e86\u4e3a\u8bbe\u7f6e\u7269\u7406LED\u7684\u72b6\u6001\u63d0\u4f9b\u4e86\u65b9\u4fbf\u7684\u65b9\u6cd5\u3002","title":"\u8bbe\u7f6e\u7269\u7406LED\u72b6\u6001"},{"location":"custom_quantum_functions/#ergodox-boards","text":"Ergodox\u5b9e\u73b0\u4e86\u63d0\u4f9b ergodox_right_led_1 / 2 / 3_on / off() \u6765\u8ba9\u6bcf\u4e2aLED\u5f00\u6216\u5173, \u4e5f\u53ef\u4ee5\u7528 ergodox_right_led_on / off(uint8_t led) \u6309\u7d22\u5f15\u6253\u5f00\u6216\u5173\u95ed\u4ed6\u4eec\u3002 \u6b64\u5916\uff0c\u8fd8\u53ef\u4ee5\u4f7f\u7528 ergodox_led_all_set(uint8_t n) \u6307\u5b9a\u6240\u6709LED\u7684\u4eae\u5ea6\u7ea7\u522b\uff1b\u9488\u5bf9\u6bcf\u4e2aLED\u7528 ergodox_right_led_1 / 2 / 3_set(uint8_t n) \uff1b\u4f7f\u7528\u7d22\u5f15\u7684\u8bdd\u7528 ergodox_right_led_set(uint8_t led, uint8_t n) \u3002 Ergodox boards \u540c\u65f6\u5b9a\u4e49\u4e86\u6700\u4f4e\u4eae\u5ea6\u7ea7\u522b LED_BRIGHTNESS_LO \u548c\u6700\u9ad8\u4eae\u5ea6\u7ea7\u522b LED_BRIGHTNESS_HI (\u9ed8\u8ba4\u6700\u9ad8).","title":"Ergodox Boards"},{"location":"custom_quantum_functions/#_5","text":"\u952e\u76d8\u521d\u59cb\u5316\u8fc7\u7a0b\u6709\u51e0\u4e2a\u6b65\u9aa4\u3002\u4f60\u662f\u7528\u90a3\u4e2a\u51fd\u6570\u53d6\u51b3\u4e8e\u4f60\u60f3\u8981\u505a\u4ec0\u4e48\u3002 \u6709\u4e09\u4e2a\u4e3b\u8981\u521d\u59cb\u5316\u51fd\u6570\uff0c\u6309\u8c03\u7528\u987a\u5e8f\u5217\u51fa\u3002 keyboard_pre_init_* - \u4f1a\u5728\u5927\u591a\u6570\u5176\u4ed6\u4e1c\u897f\u8fd0\u884c\u524d\u8fd0\u884c\u3002\u9002\u7528\u4e8e\u54ea\u4e9b\u9700\u8981\u63d0\u524d\u8fd0\u884c\u7684\u786c\u4ef6\u521d\u59cb\u5316\u3002 matrix_init_* - \u5728\u56fa\u4ef6\u542f\u52a8\u8fc7\u7a0b\u4e2d\u95f4\u88ab\u8c03\u7528\u3002\u6b64\u65f6\u786c\u4ef6\u5df2\u521d\u59cb\u5316\uff0c\u529f\u80fd\u5c1a\u672a\u521d\u59cb\u5316\u3002 keyboard_post_init_* - \u5728\u56fa\u4ef6\u542f\u52a8\u8fc7\u7a0b\u6700\u540e\u88ab\u8c03\u7528\u3002\u5927\u591a\u6570\u60c5\u51b5\u4e0b\uff0c\u4f60\u7684\u201c\u5ba2\u5236\u5316\u201d\u4ee3\u7801\u90fd\u53ef\u4ee5\u653e\u5728\u8fd9\u91cc\u3002 Tip \u5bf9\u4e8e\u5927\u591a\u6570\u4eba\u6765\u8bf4 keyboard_post_init_user \u662f\u4f60\u60f3\u8981\u8c03\u7528\u7684\u51fd\u6570\u3002\u4f8b\u5982, \u6b64\u65f6\u4f60\u53ef\u4ee5\u8bbe\u7f6eRGB\u706f\u53d1\u5149\u3002","title":"\u952e\u76d8\u521d\u59cb\u5316\u4ee3\u7801"},{"location":"custom_quantum_functions/#_6","text":"\u8fd9\u4ee3\u7801\u6781\u65e9\u8fd0\u884c\uff0c\u751a\u81f3\u90fd\u5728USB\u521d\u59cb\u5316\u524d\u8fd0\u884c\u3002 \u5728\u8fd9\u4e4b\u540e\u4e0d\u4e45\u77e9\u9635\u5c31\u88ab\u521d\u59cb\u5316\u4e86\u3002 \u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u6765\u8bf4,\u8fd9\u7528\u4e0d\u5230\uff0c\u56e0\u4e3a\u5b83\u4e3b\u8981\u662f\u7528\u4e8e\u9762\u5411\u786c\u4ef6\u7684\u521d\u59cb\u5316\u3002 \u4f46\u5982\u679c\u4f60\u6709\u786c\u4ef6\u521d\u59cb\u5316\u7684\u8bdd\u653e\u5728\u8fd9\u91cc\u518d\u597d\u4e0d\u8fc7\u4e86(\u6bd4\u5982\u521d\u59cb\u5316LED\u5f15\u811a\u4e00\u7c7b\u7684).","title":"\u952e\u76d8\u9884\u521d\u59cb\u5316\u4ee3\u7801"},{"location":"custom_quantum_functions/#keyboard_pre_init_user","text":"\u672c\u4f8b\u4e2d\u5728\u952e\u76d8\u7ea7\u522b\uff0c\u8bbe\u5b9a B0, B1, B2, B3, \u548c B4 \u662fLED\u5f15\u811a\u3002 void keyboard_pre_init_user ( void ) { // \u8c03\u7528\u952e\u76d8\u9884\u521d\u59cb\u5316\u4ee3\u7801 // \u8bbe\u7f6eLED\u5f15\u811a\u4e3a\u8f93\u51fa\u6a21\u5f0f setPinOutput ( B0 ); setPinOutput ( B1 ); setPinOutput ( B2 ); setPinOutput ( B3 ); setPinOutput ( B4 ); }","title":"keyboard_pre_init_user()\u51fd\u6570\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#keyboard_pre_init_","text":"\u952e\u76d8/\u4fee\u8ba2: void keyboard_pre_init_kb(void) \u5e03\u5c40: void keyboard_pre_init_user(void)","title":"keyboard_pre_init_* \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#_7","text":"\u8fd9\u5c06\u4f1a\u5728\u77e9\u9635\u521d\u59cb\u5316\u65f6\u88ab\u8c03\u7528\uff0c\u5728\u67d0\u4e9b\u786c\u4ef6\u8bbe\u7f6e\u597d\u540e\uff0c\u4f46\u5728\u4e00\u4e9b\u529f\u80fd\u88ab\u521d\u59cb\u5316\u524d\u3002 \u8fd9\u5728\u4f60\u8bbe\u7f6e\u5176\u4ed6\u5730\u65b9\u4f1a\u7528\u5230\u7684\u4e1c\u897f\u7684\u65f6\u5019\u4f1a\u5f88\u6709\u7528\uff0c\u4f46\u4e0e\u786c\u4ef6\u65e0\u5173\uff0c\u4e5f\u4e0d\u4f9d\u8d56\u4e8e\u5b83\u7684\u542f\u52a8\u4f4d\u7f6e\u3002","title":"\u77e9\u9635\u521d\u59cb\u5316\u4ee3\u7801"},{"location":"custom_quantum_functions/#matrix_init_","text":"\u952e\u76d8/\u4fee\u8ba2: void matrix_init_kb(void) \u5e03\u5c40: void matrix_init_user(void)","title":"matrix_init_*\u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#_8","text":"\u8fd9\u662f\u952e\u76d8\u521d\u59cb\u5316\u8fc7\u7a0b\u4e2d\u7684\u6700\u540e\u4e00\u4e2a\u4efb\u52a1\u3002\u5982\u679c\u60a8\u60f3\u66f4\u6539\u67d0\u4e9b\u7279\u6027\uff0c\u8fd9\u4f1a\u5f88\u6709\u7528\uff0c\u56e0\u4e3a\u6b64\u65f6\u5e94\u8be5\u5bf9\u5b83\u4eec\u8fdb\u884c\u521d\u59cb\u5316\u3002","title":"\u952e\u76d8\u540e\u521d\u59cb\u5316\u4ee3\u7801"},{"location":"custom_quantum_functions/#keyboard_post_init_user","text":"\u672c\u793a\u4f8b\u5728\u6240\u6709\u521d\u59cb\u5316\u5b8c\u6210\u540e\u8fd0\u884c\uff0c\u914d\u7f6eRGB\u706f\u3002 void keyboard_post_init_user ( void ) { // \u8c03\u7528\u540e\u521d\u59cb\u5316\u4ee3\u7801 rgblight_enable_noeeprom (); // \u4f7f\u80fdRgb\uff0c\u4e0d\u4fdd\u5b58\u8bbe\u7f6e rgblight_sethsv_noeeprom ( 180 , 255 , 255 ); // \u5c06\u989c\u8272\u8bbe\u7f6e\u5230\u84dd\u7eff\u8272(\u9752\u8272)\u4e0d\u4fdd\u5b58 rgblight_mode_noeeprom ( RGBLIGHT_MODE_BREATHING + 3 ); // \u8bbe\u7f6e\u5feb\u901f\u547c\u5438\u6a21\u5f0f\u4e0d\u4fdd\u5b58 }","title":"keyboard_post_init_user()\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#keyboard_post_init_","text":"\u952e\u76d8/\u4fee\u8ba2: void keyboard_post_init_kb(void) \u5e03\u5c40: void keyboard_post_init_user(void)","title":"keyboard_post_init_* \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#_9","text":"\u53ef\u80fd\u7684\u8bdd\u4f60\u8981\u7528 process_record_*() \u81ea\u5b9a\u4e49\u952e\u76d8\uff0c\u4ee5\u8fd9\u79cd\u65b9\u5f0f\u8fde\u63a5\u5230\u4e8b\u4ef6\u4e2d\uff0c\u4ee5\u786e\u4fdd\u4ee3\u7801\u4e0d\u4f1a\u5bf9\u952e\u76d8\u4ea7\u751f\u8d1f\u9762\u7684\u6027\u80fd\u5f71\u54cd\u3002\u7136\u800c\uff0c\u5728\u6781\u5c11\u6570\u60c5\u51b5\u4e0b\uff0c\u6709\u5fc5\u8981\u8fdb\u884c\u77e9\u9635\u626b\u63cf\u3002\u5728\u8fd9\u4e9b\u51fd\u6570\u4e2d\u8981\u7279\u522b\u6ce8\u610f\u4ee3\u7801\u7684\u6027\u80fd\uff0c\u56e0\u4e3a\u5b83\u6bcf\u79d2\u81f3\u5c11\u88ab\u8c03\u752810\u6b21\u3002","title":"\u77e9\u9635\u626b\u63cf\u4ee3\u7801"},{"location":"custom_quantum_functions/#matrix_scan_","text":"\u8fd9\u4e2a\u4f8b\u5b50\u88ab\u6545\u610f\u7701\u7565\u4e86\u3002\u5728hook\u8fd9\u6837\u4e00\u4e2a\u5bf9\u6027\u80fd\u53ca\u5176\u654f\u611f\u7684\u533a\u57df\u4e4b\u524d\uff0c\u60a8\u5e94\u8be5\u8db3\u591f\u4e86\u89e3qmk\u7684\u5185\u90e8\u7ed3\u6784\uff0c\u4ee5\u4fbf\u5728\u6ca1\u6709\u793a\u4f8b\u7684\u60c5\u51b5\u4e0b\u7f16\u5199\u3002\u5982\u679c\u4f60\u9700\u8981\u5e2e\u52a9\uff0c\u8bf7 \u5efa\u7acb\u4e00\u4e2aissue \u6216 \u5728Discord\u4e0a\u4e0e\u6211\u4eec\u4ea4\u6d41 .","title":"matrix_scan_*\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#matrix_scan__1","text":"\u952e\u76d8/\u4fee\u8ba2: void matrix_scan_kb(void) \u5e03\u5c40: void matrix_scan_user(void) \u8be5\u51fd\u6570\u5728\u6bcf\u6b21\u77e9\u9635\u626b\u63cf\u65f6\u88ab\u8c03\u7528\uff0c\u8fd9\u57fa\u672c\u4e0eMCU\u5904\u7406\u80fd\u529b\u4e0a\u9650\u76f8\u540c\u3002\u5728\u8fd9\u91cc\u5199\u4ee3\u7801\u8981\u8c28\u614e\uff0c\u56e0\u4e3a\u5b83\u4f1a\u8fd0\u884c\u5f88\u591a\u6b21\u3002 \u4f60\u4f1a\u5728\u81ea\u5b9a\u4e49\u77e9\u9635\u626b\u63cf\u4ee3\u7801\u65f6\u7528\u5230\u8fd9\u4e2a\u51fd\u6570\u3002\u8fd9\u4e5f\u53ef\u4ee5\u7528\u4f5c\u81ea\u5b9a\u4e49\u72b6\u6001\u8f93\u51fa(\u6bd4\u5982LED\u706f\u6216\u8005\u5c4f\u5e55)\u6216\u8005\u5176\u4ed6\u5373\u4fbf\u7528\u6237\u4e0d\u8f93\u5165\u4f60\u4e5f\u60f3\u5b9a\u671f\u8fd0\u884c\u7684\u529f\u80fd\u3002","title":"matrix_scan_* \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#_10","text":"\u5982\u679c\u952e\u76d8\u652f\u6301\u5c31\u53ef\u4ee5\u901a\u8fc7\u505c\u6b62\u4e00\u5927\u7968\u529f\u80fd\u6765\u8fbe\u5230\"\u7a7a\u95f2\"\u3002RGB\u706f\u548c\u80cc\u5149\u5c31\u662f\u5f88\u597d\u7684\u4f8b\u5b50\u3002\u8fd9\u53ef\u4ee5\u8282\u7ea6\u80fd\u8017\uff0c\u4e5f\u53ef\u80fd\u8ba9\u4f60\u952e\u76d8\u98ce\u5473\u66f4\u4f73\u3002 \u7528\u4e24\u4e2a\u51fd\u6570\u63a7\u5236: suspend_power_down_* \u548c suspend_wakeup_init_* , \u5206\u522b\u5728\u7cfb\u7edf\u677f\u7a7a\u95f2\u548c\u5524\u9192\u65f6\u8c03\u7528\u3002","title":"\u952e\u76d8 \u7a7a\u95f2/\u5524\u9192 \u4ee3\u7801"},{"location":"custom_quantum_functions/#suspend_power_down_usersuspend_wakeup_init_user","text":"void suspend_power_down_user ( void ) { rgb_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { rgb_matrix_set_suspend_state ( false ); }","title":"suspend_power_down_user()\u548csuspend_wakeup_init_user()\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#_11","text":"\u952e\u76d8/\u4fee\u8ba2: void suspend_power_down_kb(void) \u548c void suspend_wakeup_init_user(void) \u5e03\u5c40: void suspend_power_down_kb(void) \u548c void suspend_wakeup_init_user(void)","title":"\u952e\u76d8 \u6302\u8d77/\u5524\u9192 \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#_12","text":"\u6bcf\u5f53\u5c42\u6539\u53d8\u8fd9\u4e2a\u5c31\u8fd0\u884c\u4ee3\u7801\u3002\u8fd9\u5bf9\u4e8e\u5c42\u6307\u793a\u6216\u81ea\u5b9a\u4e49\u5c42\u5904\u7406\u5f88\u6709\u7528\u3002","title":"\u5c42\u6539\u53d8\u4ee3\u7801"},{"location":"custom_quantum_functions/#layer_state_set_","text":"\u672c\u4f8b\u4f7f\u7528\u4e86Planck\u952e\u76d8\u793a\u8303\u4e86\u5982\u4f55\u8bbe\u7f6e RGB\u80cc\u5149\u706f \u4f7f\u4e4b\u4e0e\u5c42\u5bf9\u5e94 uint32_t layer_state_set_user ( uint32_t state ) { switch ( biton32 ( state )) { case _RAISE : rgblight_setrgb ( 0x00 , 0x00 , 0xFF ); break ; case _LOWER : rgblight_setrgb ( 0xFF , 0x00 , 0x00 ); break ; case _PLOVER : rgblight_setrgb ( 0x00 , 0xFF , 0x00 ); break ; case _ADJUST : rgblight_setrgb ( 0x7A , 0x00 , 0xFF ); break ; default : // for any other layers, or the default layer rgblight_setrgb ( 0x00 , 0xFF , 0xFF ); break ; } return state ; }","title":"layer_state_set_* \u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#layer_state_set__1","text":"\u952e\u76d8/\u4fee\u8ba2: uint32_t layer_state_set_kb(uint32_t state) \u5e03\u5c40: uint32_t layer_state_set_user(uint32_t state) \u8be5 \u72b6\u6001 \u662f\u6d3b\u52a8\u5c42\u7684bitmask, \u8be6\u89c1 \u5e03\u5c40\u6982\u8ff0","title":"layer_state_set_* \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#eeprom","text":"\u8fd9\u4f1a\u8ba9\u4f60\u7684\u914d\u7f6e\u957f\u671f\u7684\u4fdd\u5b58\u5728\u952e\u76d8\u4e2d\u3002\u8fd9\u4e9b\u914d\u7f6e\u4fdd\u5b58\u5728\u4f60\u4e3b\u63a7\u7684EEPROM\u91cc\uff0c\u6389\u7535\u4e0d\u4f1a\u6d88\u5931\u3002 \u8bbe\u7f6e\u53ef\u4ee5\u7528 eeconfig_read_kb \u548c eeconfig_read_user \u8bfb\u53d6\uff0c\u53ef\u4ee5\u7528 eeconfig_update_kb \u548c eeconfig_update_user \u5199\u5165\u3002\u8fd9\u5bf9\u4e8e\u60a8\u5e0c\u671b\u80fd\u591f\u5207\u6362\u7684\u529f\u80fd\u5f88\u6709\u7528(\u6bd4\u5982\u5207\u6362RGB\u5c42\u6307\u793a\u3002\u6b64\u5916\uff0c\u4f60\u53ef\u4ee5\u7528 eeconfig_init_kb \u548c eeconfig_init_user \u6765\u8bbe\u7f6eEEPROM\u9ed8\u8ba4\u503c\u3002 \u6700\u590d\u6742\u7684\u90e8\u5206\u53ef\u80fd\u662f\uff0c\u6709\u5f88\u591a\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7EEPROM\u5b58\u50a8\u548c\u8bbf\u95ee\u6570\u636e\uff0c\u5e76\u4e14\u5e76\u6ca1\u6709\u7528\u54ea\u79cd\u65b9\u6cd5\u662f\u201c\u653f\u6cbb\u6b63\u786e\u201d\u7684\u3002\u4f60\u6bcf\u4e2a\u529f\u80fd\u53ea\u6709\u4e00\u4e2a\u53cc\u5b57(\u56db\u5b57\u8282)\u7a7a\u95f4\u3002 \u8bb0\u4f4fEEPROM\u662f\u6709\u5199\u5165\u5bff\u547d\u7684\u3002\u5c3d\u7ba1\u5199\u5165\u5bff\u547d\u5f88\u9ad8\uff0c\u4f46\u662f\u5e76\u4e0d\u662f\u53ea\u6709\u8bbe\u7f6e\u5199\u9053EEPROM\u4e2d\u3002\u5982\u679c\u4f60\u5199\u5165\u9891\u7e41\uff0c\u4f60\u7684MCU\u5bff\u547d\u5c06\u4f1a\u53d8\u77ed\u3002 \u5982\u679c\u60a8\u4e0d\u7406\u89e3\u8fd9\u4e2a\u4f8b\u5b50\uff0c\u90a3\u4e48\u60a8\u53ef\u80fd\u5e0c\u671b\u907f\u514d\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\uff0c\u56e0\u4e3a\u5b83\u76f8\u5f53\u590d\u6742\u3002","title":"\u6389\u7535\u4fdd\u5b58\u914d\u7f6e (EEPROM)"},{"location":"custom_quantum_functions/#_13","text":"\u672c\u4f8b\u8bb2\u89e3\u4e86\u5982\u4f55\u6dfb\u52a0\u8bbe\u7f6e\uff0c\u5e76\u4e14\u8bfb\u5199\u3002\u672c\u91cc\u4f7f\u7528\u4e86\u7528\u6237\u5e03\u5c40\u3002\u8fd9\u662f\u4e00\u4e2a\u590d\u6742\u7684\u51fd\u6570\uff0c\u6709\u5f88\u591a\u4e8b\u60c5\u8981\u505a\u3002\u5b9e\u9645\u4e0a\uff0c\u5b83\u4f7f\u7528\u4e86\u5f88\u591a\u4e0a\u8ff0\u51fd\u6570\u6765\u5de5\u4f5c\uff01 \u5728\u4f60\u7684keymap.c\u6587\u4ef6\u4e2d\uff0c\u5c06\u4ee5\u4e0b\u4ee3\u7801\u6dfb\u52a0\u81f3\u9876\u90e8: typedef union { uint32_t raw ; struct { bool rgb_layer_change : 1 ; }; } user_config_t ; user_config_t user_config ; \u4ee5\u4e0a\u4ee3\u7801\u5efa\u7acb\u4e86\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u53ef\u4ee5\u5b58\u50a8\u8bbe\u7f6e\u5e76\u53ef\u7528\u4e8e\u5199\u5165EEPROM\u3002\u5982\u6b64\u8fd9\u822c\u5c06\u65e0\u9700\u5b9a\u4e49\u53d8\u91cf\uff0c\u56e0\u4e3a\u5728\u7ed3\u6784\u4f53\u4e2d\u5df2\u7136\u5b9a\u4e49\u3002\u8981\u8bb0\u4f4f bool (\u5e03\u5c14)\u503c\u4f7f\u75281\u4f4d, uint8_t \u4f7f\u75288\u4f4d, uint16_t \u4f7f\u752816\u4f4d\u3002\u4f60\u53ef\u4ee5\u6df7\u5408\u642d\u914d\u4f7f\u7528\uff0c\u4f46\u662f\u987a\u5e8f\u8bb0\u9519\u53ef\u80fd\u4f1a\u62db\u81f4\u9ebb\u70e6\uff0c\u56e0\u4e3a\u90a3\u4f1a\u6539\u53d8\u5199\u5165\u5199\u51fa\u7684\u503c\u3002 layer_state_set_* \u51fd\u6570\u4e2d\u4f7f\u7528\u4e86 rgb_layer_change \uff0c\u4f7f\u7528\u4e86 keyboard_post_init_user \u548c process_record_user \u6765\u914d\u7f6e\u4e00\u5207\u3002 \u9996\u5148\u8981\u4f7f\u7528 keyboard_post_init_user\uff0c\u4f60\u8981\u52a0\u5165 eeconfig_read_user()`\u6765\u586b\u5145\u4f60\u521a\u521a\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u3002\u7136\u540e\u60a8\u53ef\u4ee5\u7acb\u5373\u4f7f\u7528\u8fd9\u4e2a\u7ed3\u6784\u6765\u63a7\u5236\u60a8\u7684\u5e03\u5c40\u4e2d\u7684\u529f\u80fd\u3002\u5c31\u50cf\u8fd9\u6837\uff1a void keyboard_post_init_user ( void ) { // \u8c03\u7528\u5e03\u5c40\u7ea7\u522b\u7684\u77e9\u9635\u521d\u59cb\u5316 // \u4eceEEPROM\u8bfb\u7528\u6237\u914d\u7f6e user_config . raw = eeconfig_read_user (); // \u5982\u4f7f\u80fd\uff0c\u8bbe\u7f6e\u9ed8\u8ba4\u5c42 if ( user_config . rgb_layer_change ) { rgblight_enable_noeeprom (); rgblight_sethsv_noeeprom_cyan (); rgblight_mode_noeeprom ( 1 ); } } \u4ee5\u4e0a\u51fd\u6570\u4f1a\u5728\u8bfbEEPROM\u914d\u7f6e\u540e\u7acb\u5373\u4f7f\u7528\u8be5\u8bbe\u7f6e\u6765\u8bbe\u7f6e\u9ed8\u8ba4\u5c42RGB\u989c\u8272\u3002\"raw\"\u7684\u503c\u662f\u4ece\u4f60\u4e0a\u9762\u57fa\u4e8e\"union\"\u521b\u5efa\u7684\u7ed3\u6784\u4f53\u4e2d\u8f6c\u6362\u6765\u7684\u3002 uint32_t layer_state_set_user ( uint32_t state ) { switch ( biton32 ( state )) { case _RAISE : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_magenta (); rgblight_mode_noeeprom ( 1 ); } break ; case _LOWER : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_red (); rgblight_mode_noeeprom ( 1 ); } break ; case _PLOVER : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_green (); rgblight_mode_noeeprom ( 1 ); } break ; case _ADJUST : if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_white (); rgblight_mode_noeeprom ( 1 ); } break ; default : // \u9488\u5bf9\u5176\u4ed6\u5c42\u6216\u9ed8\u8ba4\u5c42 if ( user_config . rgb_layer_change ) { rgblight_sethsv_noeeprom_cyan (); rgblight_mode_noeeprom ( 1 ); } break ; } return state ; } \u8fd9\u6837\u4ec5\u5728\u503c\u4f7f\u80fd\u65f6\u4f1a\u6539\u53d8RGB\u80cc\u5149\u706f\u3002\u73b0\u5728\u914d\u7f6e\u8fd9\u4e2a\u503c, \u4e3a process_record_user \u521b\u5efa\u4e00\u4e2a\u65b0\u952e\u7801\u53eb\u505a RGB_LYR \u3002\u6211\u4eec\u8981\u786e\u4fdd\uff0c\u5982\u679c\u4f7f\u7528\u6b63\u5e38\u7684RGB\u4ee3\u7801\uff0c\u4f7f\u7528\u4e0a\u9762\u7684\u793a\u4f8b\u5c06\u5176\u5173\u95ed\uff0c\u8bf7\u5c06\u5176\u8bbe\u7f6e\u4e3a\uff1a bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case FOO : if ( record -> event . pressed ) { // \u6309\u4e0b\u65f6\u505a\u70b9\u4ec0\u4e48 } else { // \u91ca\u653e\u65f6\u505a\u70b9\u4ec0\u4e48 } return false ; // \u8df3\u8fc7\u6b64\u952e\u7684\u8fdb\u4e00\u6b65\u5904\u7406 case KC_ENTER : // \u5728\u6309\u4e0b\u56de\u8f66\u65f6\u64ad\u653e\u97f3\u7b26 if ( record -> event . pressed ) { PLAY_SONG ( tone_qwerty ); } return true ; // \u8ba9QMK\u4ea7\u751f\u56de\u8f66\u6309\u4e0b/\u91ca\u653e\u4e8b\u4ef6 case RGB_LYR : // \u672c\u53e5\u8ba9underglow\u4f5c\u4e3a\u5c42\u6307\u793a\uff0c\u6216\u6b63\u5e38\u4f7f\u7528\u3002 if ( record -> event . pressed ) { user_config . rgb_layer_change ^= 1 ; // \u5207\u6362\u72b6\u6001 eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u65b0\u72b6\u6001 if ( user_config . rgb_layer_change ) { // \u5982\u679c\u5c42\u72b6\u6001\u88ab\u4f7f\u80fd layer_state_set ( layer_state ); // \u90a3\u4e48\u7acb\u523b\u66f4\u65b0\u5c42\u989c\u8272 } } return false ; case RGB_MODE_FORWARD ... RGB_MODE_GRADIENT : // \u5bf9\u4e8e\u6240\u6709\u7684RGB\u4ee3\u7801 (see quantum_keycodes.h, L400 \u53ef\u4ee5\u53c2\u8003) if ( record -> event . pressed ) { //\u672c\u53e5\u5931\u80fd\u5c42\u6307\u793a\uff0c\u5047\u8bbe\u4f60\u6539\u53d8\u4e86\u8fd9\u4e2a\u2026\u4f60\u8981\u628a\u5b83\u7981\u7528 if ( user_config . rgb_layer_change ) { // \u4ec5\u5f53\u4f7f\u80fd\u65f6 user_config . rgb_layer_change = false ; // \u5931\u80fd\uff0c\u7136\u540e eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u8bbe\u7f6e } } return true ; break ; default : return true ; // \u6309\u5176\u4ed6\u952e\u6b63\u5e38 } } \u6700\u540e\u4f60\u8981\u52a0\u5165 eeconfig_init_user \u51fd\u6570\uff0c\u6240\u4ee5\u5f53EEPROM\u91cd\u7f6e\u65f6\uff0c\u53ef\u4ee5\u6307\u5b9a\u9ed8\u8ba4\u503c, \u751a\u81f3\u81ea\u5b9a\u4e49\u64cd\u4f5c\u3002\u60f3\u5f3a\u5236\u91cd\u7f6eEEPROM\uff0c\u8bf7\u7528 EEP_RST \u952e\u7801\u6216 Bootmagic \u51fd\u6570\u3002\u6bd4\u5982\uff0c\u5982\u679c\u8981\u5728\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u8bbe\u7f6eRGB\u5c42\u6307\u793a\uff0c\u5e76\u4fdd\u5b58\u9ed8\u8ba4\u503c void eeconfig_init_user ( void ) { // EEPROM\u6b63\u88ab\u91cd\u7f6e user_config . raw = 0 ; user_config . rgb_layer_change = true ; // \u6211\u4eec\u60f3\u8981\u9ed8\u8ba4\u4f7f\u80fd eeconfig_update_user ( user_config . raw ); // \u5411EEPROM\u5199\u5165\u9ed8\u8ba4\u503c // use the non noeeprom versions, \u8fd8\u8981\u5411EEPROM\u5199\u5165\u8fd9\u4e9b\u503c rgblight_enable (); // \u9ed8\u8ba4\u4f7f\u80fdRGB rgblight_sethsv_cyan (); // \u9ed8\u8ba4\u8bbe\u7f6e\u9752\u8272 rgblight_mode ( 1 ); // \u9ed8\u8ba4\u8bbe\u7f6e\u957f\u4eae } \u7136\u540e\u5c31\u5b8c\u4e8b\u4e86\u3002RGB\u5c42\u6307\u793a\u4f1a\u5728\u4f60\u60f3\u8ba9\u5b83\u5de5\u4f5c\u65f6\u5de5\u4f5c\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u4f1a\u4e00\u76f4\u4fdd\u5b58\uff0c\u5373\u4fbf\u4f60\u62d4\u4e0b\u952e\u76d8\u3002\u5982\u679c\u4f60\u4f7f\u7528\u5176\u4ed6RGB\u4ee3\u7801\uff0c\u5c42\u6307\u793a\u5c06\u5931\u80fd\uff0c\u73b0\u5728\u5b83\u53ef\u4ee5\u505a\u4f60\u6240\u60f3\u4e86\u3002","title":"\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#eeconfig","text":"\u952e\u76d8/\u4fee\u8ba2: void eeconfig_init_kb(void) , uint32_t eeconfig_read_kb(void) \u548c void eeconfig_update_kb(uint32_t val) \u5e03\u5c40: void eeconfig_init_user(void) , uint32_t eeconfig_read_user(void) \u548c void eeconfig_update_user(uint32_t val) val \u662f\u4f60\u60f3\u5199\u5165EEPROM\u7684\u503c\uff0c eeconfig_read_* \u51fd\u6570\u4f1a\u4eceEEPROM\u8fd4\u56de\u4e00\u4e2a32\u4f4d(\u53cc\u5b57)\u7684\u503c\u3002","title":"'EECONFIG' \u51fd\u6570\u6587\u6863"},{"location":"custom_quantum_functions/#-tapping_term","text":"\u9ed8\u8ba4\u60c5\u51b5\u4e0b,\u51fb\u952e-\u957f\u6309\u4e34\u754c\u503c\u662f\u5168\u7403\u7edf\u4e00\u7684\uff0c\u5e76\u4e14\u4e0d\u80fd\u901a\u8fc7\u952e\u8fdb\u884c\u914d\u7f6e\u3002\u5bf9\u4e8e\u5927\u591a\u6570\u7528\u6237\u6765\u8bf4\u8fd9\u5f88\u597d\u3002\u4f46\u662f\u5728\u6709\u4e9b\u60c5\u51b5\u4e0b\uff0c\u5bf9\u4e8e LT \u952e\u6765\u8bf4\u6309\u952e\u5ef6\u65f6\u5bf9\u53cc\u529f\u80fd\u952e\u7684\u63d0\u5347\u66f4\u5927\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u6709\u4e9b\u952e\u6bd4\u5176\u4ed6\u7684\u952e\u66f4\u5bb9\u6613\u6309\u4f4f\u3002\u4e3a\u4e86\u4e0d\u7ed9\u6bcf\u4e2a\u90fd\u81ea\u5b9a\u4e49\u952e\u7801\uff0c\u672c\u529f\u80fd\u53ef\u4ee5\u4e3a\u6bcf\u4e2a\u952e\u5b9a\u4e49 TAPPING_TERM \u3002 \u60f3\u4f7f\u80fd\u8fd9\u4e2a\u529f\u80fd\u7684\u8bdd, \u8981\u5148\u5728 config.h \u52a0\u4e0a #define TAPPING_TERM_PER_KEY \u3002","title":"\u81ea\u5b9a\u4e49\u51fb\u952e-\u957f\u6309\u4e34\u754c\u503c(TAPPING_TERM)"},{"location":"custom_quantum_functions/#get_tapping_term","text":"\u60f3\u8981\u4fee\u6539\u57fa\u4e8e\u952e\u7801\u7684 TAPPING TERM ,\u4f60\u8981\u5411 keymap.c \u6587\u4ef6\u6dfb\u52a0\u5982\u4e0b\u4ee3\u7801: uint16_t get_tapping_term ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return TAPPING_TERM + 1250 ; case LT ( 1 , KC_GRV ) : return 130 ; default : return TAPPING_TERM ; } }","title":"get_tapping_term\u793a\u4f8b\u5b9e\u73b0"},{"location":"custom_quantum_functions/#get_tapping_term_1","text":"\u4e0d\u50cf\u8fd9\u7bc7\u7684\u5176\u4ed6\u529f\u80fd,\u8fd9\u4e2a\u4e0d\u9700\u8981quantum\u6216\u8005\u952e\u76d8\u7ea7\u522b\u7684\u51fd\u6570\uff0c\u53ea\u8981\u7528\u6237\u7ea7\u51fd\u6570\u5373\u53ef\u3002","title":"get_tapping_term \u51fd\u6570\u6587\u6863"},{"location":"data_driven_config/","text":"Data Driven Configuration \u00b6 This page describes how QMK's data driven JSON configuration system works. It is aimed at developers who want to work on QMK itself. History \u00b6 Historically QMK has been configured through a combination of two mechanisms- rules.mk and config.h . While this worked well when QMK was only a handful of keyboards we've grown to encompass nearly 1500 supported keyboards. That extrapolates out to 6000 configuration files under keyboards/ alone! The freeform nature of these files and the unique patterns people have used to avoid duplication have made ongoing maintenance a challenge, and a large number of our keyboards follow patterns that are outdated and sometimes harder to understand. We have also been working on bringing the power of QMK to people who aren't comformable with a CLI, and other projects such as VIA are working to make using QMK as easy as installing a program. These tools need information about how a keyboard is laid out or what pins and features are available so that users can take full advantage of QMK. We introduced info.json as a first step towards this. The QMK API is an effort to combine these 3 sources of information- config.h , rules.mk , and info.json - into a single source of truth that end-user tools can use. Now we have support for generating rules.mk and config.h values from info.json , allowing us to have a single source of truth. This will allow us to use automated tooling to maintain keyboards saving a lot of time and maintenance work. Overview \u00b6 On the C side of things nothing changes. When you need to create a new rule or define you follow the same process: Add it to docs/config_options.md Set a default in the appropriate core file Add your ifdef statements as needed You will then need to add support for your new configuration to info.json . The basic process is: Add it to the schema in data/schemas/keyboards.jsonschema Add a mapping in data/maps (optional and discoraged) Add code to extract/generate it to: * lib/python/qmk/info.py * lib/python/qmk/cli/generate/config_h.py * lib/python/qmk/cli/generate/rules_mk.py Adding an option to info.json \u00b6 This section describes adding support for a config.h / rules.mk value to info.json. Add it to the schema \u00b6 QMK maintains jsonschema files in data/schemas . The values that go into keyboard-specific info.json files are kept in keyboard.jsonschema . Any value you want to make available to end users to edit must go in here. In some cases you can simply add a new top-level key. Some examples to follow are keyboard_name , maintainer , processor , and url . This is appropriate when your option is self-contained and not directly related to other options. In other cases you should group like options together in an object . This is particularly true when adding support for a feature. Some examples to follow for this are indicators , matrix_pins , and rgblight . If you are not sure how to integrate your new option(s) open an issue or join #cli on Discord and start a conversation there. Add a mapping \u00b6 In most cases you can add a simple mapping. These are maintained as JSON files in data/mappings/info_config.json and data/mappings/info_rules.json , and control mapping for config.h and rules.mk , respectively. Each mapping is keyed by the config.h or rules.mk variable, and the value is a hash with the following keys: info_key : (required) The location within info.json for this value. See below. value_type : (optional) Default str . The format for this variable's value. See below. to_json : (optional) Default true . Set to false to exclude this mapping from info.json to_c : (optional) Default true . Set to false to exclude this mapping from config.h warn_duplicate : (optional) Default true . Set to false to turn off warning when a value exists in both places Info Key \u00b6 We use JSON dot notation to address variables within info.json. For example, to access info_json[\"rgblight\"][\"split_count\"] I would specify rgblight.split_count . This allows you to address deeply nested keys with a simple string. Under the hood we use Dotty Dict , you can refer to that documentation for how these strings are converted to object access. Value Types \u00b6 By default we treat all values as simple strings. If your value is more complex you can use one of these types to intelligently parse the data: array : A comma separated array of strings array.int : A comma separated array of integers int : An integer hex : A number formatted as hex list : A space separate array of strings mapping : A hash of key/value pairs Add code to extract it \u00b6 Most use cases can be solved by the mapping files described above. If yours can't you can instead write code to extract your config values. Whenever QMK generates a complete info.json it extracts information from config.h and rules.mk . You will need to add code for your new config value to lib/python/qmk/info.py . Typically this means adding a new _extract_<feature>() function and then calling your function in either _extract_config_h() or _extract_rules_mk() . If you are not sure how to edit this file or are not comfortable with Python open an issue or join #cli on Discord and someone can help you with this part. Add code to generate it \u00b6 The final piece of the puzzle is providing your new option to the build system. This is done by generating two files: .build/obj_<keyboard>/src/info_config.h .build/obj_<keyboard>/src/rules.mk These two files are generated by the code here: lib/python/qmk/cli/generate/config_h.py lib/python/qmk/cli/generate/rules_mk.py For config.h values you'll need to write a function for your rule(s) and call that function in generate_config_h() . If you have a new top-level info.json key for rules.mk you can simply add your keys to info_to_rules at the top of lib/python/qmk/cli/generate/rules_mk.py . Otherwise you'll need to create a new if block for your feature in generate_rules_mk() .","title":"Data Driven Configuration"},{"location":"data_driven_config/#data-driven-configuration","text":"This page describes how QMK's data driven JSON configuration system works. It is aimed at developers who want to work on QMK itself.","title":"Data Driven Configuration"},{"location":"data_driven_config/#history","text":"Historically QMK has been configured through a combination of two mechanisms- rules.mk and config.h . While this worked well when QMK was only a handful of keyboards we've grown to encompass nearly 1500 supported keyboards. That extrapolates out to 6000 configuration files under keyboards/ alone! The freeform nature of these files and the unique patterns people have used to avoid duplication have made ongoing maintenance a challenge, and a large number of our keyboards follow patterns that are outdated and sometimes harder to understand. We have also been working on bringing the power of QMK to people who aren't comformable with a CLI, and other projects such as VIA are working to make using QMK as easy as installing a program. These tools need information about how a keyboard is laid out or what pins and features are available so that users can take full advantage of QMK. We introduced info.json as a first step towards this. The QMK API is an effort to combine these 3 sources of information- config.h , rules.mk , and info.json - into a single source of truth that end-user tools can use. Now we have support for generating rules.mk and config.h values from info.json , allowing us to have a single source of truth. This will allow us to use automated tooling to maintain keyboards saving a lot of time and maintenance work.","title":"History"},{"location":"data_driven_config/#overview","text":"On the C side of things nothing changes. When you need to create a new rule or define you follow the same process: Add it to docs/config_options.md Set a default in the appropriate core file Add your ifdef statements as needed You will then need to add support for your new configuration to info.json . The basic process is: Add it to the schema in data/schemas/keyboards.jsonschema Add a mapping in data/maps (optional and discoraged) Add code to extract/generate it to: * lib/python/qmk/info.py * lib/python/qmk/cli/generate/config_h.py * lib/python/qmk/cli/generate/rules_mk.py","title":"Overview"},{"location":"data_driven_config/#adding-an-option-to-infojson","text":"This section describes adding support for a config.h / rules.mk value to info.json.","title":"Adding an option to info.json"},{"location":"data_driven_config/#add-it-to-the-schema","text":"QMK maintains jsonschema files in data/schemas . The values that go into keyboard-specific info.json files are kept in keyboard.jsonschema . Any value you want to make available to end users to edit must go in here. In some cases you can simply add a new top-level key. Some examples to follow are keyboard_name , maintainer , processor , and url . This is appropriate when your option is self-contained and not directly related to other options. In other cases you should group like options together in an object . This is particularly true when adding support for a feature. Some examples to follow for this are indicators , matrix_pins , and rgblight . If you are not sure how to integrate your new option(s) open an issue or join #cli on Discord and start a conversation there.","title":"Add it to the schema"},{"location":"data_driven_config/#add-a-mapping","text":"In most cases you can add a simple mapping. These are maintained as JSON files in data/mappings/info_config.json and data/mappings/info_rules.json , and control mapping for config.h and rules.mk , respectively. Each mapping is keyed by the config.h or rules.mk variable, and the value is a hash with the following keys: info_key : (required) The location within info.json for this value. See below. value_type : (optional) Default str . The format for this variable's value. See below. to_json : (optional) Default true . Set to false to exclude this mapping from info.json to_c : (optional) Default true . Set to false to exclude this mapping from config.h warn_duplicate : (optional) Default true . Set to false to turn off warning when a value exists in both places","title":"Add a mapping"},{"location":"data_driven_config/#add-code-to-extract-it","text":"Most use cases can be solved by the mapping files described above. If yours can't you can instead write code to extract your config values. Whenever QMK generates a complete info.json it extracts information from config.h and rules.mk . You will need to add code for your new config value to lib/python/qmk/info.py . Typically this means adding a new _extract_<feature>() function and then calling your function in either _extract_config_h() or _extract_rules_mk() . If you are not sure how to edit this file or are not comfortable with Python open an issue or join #cli on Discord and someone can help you with this part.","title":"Add code to extract it"},{"location":"data_driven_config/#add-code-to-generate-it","text":"The final piece of the puzzle is providing your new option to the build system. This is done by generating two files: .build/obj_<keyboard>/src/info_config.h .build/obj_<keyboard>/src/rules.mk These two files are generated by the code here: lib/python/qmk/cli/generate/config_h.py lib/python/qmk/cli/generate/rules_mk.py For config.h values you'll need to write a function for your rule(s) and call that function in generate_config_h() . If you have a new top-level info.json key for rules.mk you can simply add your keys to info_to_rules at the top of lib/python/qmk/cli/generate/rules_mk.py . Otherwise you'll need to create a new if block for your feature in generate_rules_mk() .","title":"Add code to generate it"},{"location":"documentation_best_practices/","text":"Documentation Best Practices \u00b6 This page exists to document best practices when writing documentation for QMK. Following these guidelines will help to keep a consistent tone and style, which will in turn help other people more easily understand QMK. Page Opening \u00b6 Your documentation page should generally start with an H1 heading, followed by a 1 paragraph description of what the user will find on this page. Keep in mind that this heading and paragraph will sit next to the Table of Contents, so keep the heading short and avoid long strings with no whitespace. Example: # My Page Title This page covers my super cool feature. You can use this feature to make coffee, squeeze fresh oj, and have an egg mcmuffin and hashbrowns delivered from your local macca's by drone. Headings \u00b6 Your page should generally have multiple \"H1\" headings. Only H1 and H2 headings will included in the Table of Contents, so plan them out appropriately. Excess width should be avoided in H1 and H2 headings to prevent the Table of Contents from getting too wide. Styled Hint Blocks \u00b6 You can use Admonitions to highlight information. There are a lot of them supported, see the upstream documentation for the full list. A couple examples: Warning \u00b6 !!! warning This is important Renders as: Warning This is important Tips \u00b6 !!! tip This is a helpful tip. Renders as: Tip This is a helpful tip. Documenting Features \u00b6 If you create a new feature for QMK, create a documentation page for it. It doesn't have to be very long, a few sentences describing your feature and a table listing any relevant keycodes is enough. Here is a basic template: # My Cool Feature This page describes my cool feature. You can use my cool feature to make coffee and order cream and sugar to be delivered via drone. ## My Cool Feature Keycodes |Long Name|Short Name|Description| |---------|----------|-----------| |KC_COFFEE||Make Coffee| |KC_CREAM||Order Cream| |KC_SUGAR||Order Sugar| Place your documentation into docs/feature_<my_cool_feature>.md , and add that file to the appropriate place in docs/_summary.md . If you have added any keycodes be sure to add them to docs/keycodes.md with a link back to your feature page.","title":"\u6587\u6863\u4e66\u5199\u89c4\u8303"},{"location":"documentation_best_practices/#documentation-best-practices","text":"This page exists to document best practices when writing documentation for QMK. Following these guidelines will help to keep a consistent tone and style, which will in turn help other people more easily understand QMK.","title":"Documentation Best Practices"},{"location":"documentation_best_practices/#page-opening","text":"Your documentation page should generally start with an H1 heading, followed by a 1 paragraph description of what the user will find on this page. Keep in mind that this heading and paragraph will sit next to the Table of Contents, so keep the heading short and avoid long strings with no whitespace. Example: # My Page Title This page covers my super cool feature. You can use this feature to make coffee, squeeze fresh oj, and have an egg mcmuffin and hashbrowns delivered from your local macca's by drone.","title":"Page Opening"},{"location":"documentation_best_practices/#headings","text":"Your page should generally have multiple \"H1\" headings. Only H1 and H2 headings will included in the Table of Contents, so plan them out appropriately. Excess width should be avoided in H1 and H2 headings to prevent the Table of Contents from getting too wide.","title":"Headings"},{"location":"documentation_best_practices/#styled-hint-blocks","text":"You can use Admonitions to highlight information. There are a lot of them supported, see the upstream documentation for the full list. A couple examples:","title":"Styled Hint Blocks"},{"location":"documentation_best_practices/#warning","text":"!!! warning This is important Renders as: Warning This is important","title":"Warning"},{"location":"documentation_best_practices/#tips","text":"!!! tip This is a helpful tip. Renders as: Tip This is a helpful tip.","title":"Tips"},{"location":"documentation_best_practices/#documenting-features","text":"If you create a new feature for QMK, create a documentation page for it. It doesn't have to be very long, a few sentences describing your feature and a table listing any relevant keycodes is enough. Here is a basic template: # My Cool Feature This page describes my cool feature. You can use my cool feature to make coffee and order cream and sugar to be delivered via drone. ## My Cool Feature Keycodes |Long Name|Short Name|Description| |---------|----------|-----------| |KC_COFFEE||Make Coffee| |KC_CREAM||Order Cream| |KC_SUGAR||Order Sugar| Place your documentation into docs/feature_<my_cool_feature>.md , and add that file to the appropriate place in docs/_summary.md . If you have added any keycodes be sure to add them to docs/keycodes.md with a link back to your feature page.","title":"Documenting Features"},{"location":"documentation_templates/","text":"Documentation Templates \u00b6 This page documents the templates you should use when submitting new Keymaps and Keyboards to QMK. Keymap readme.md Template \u00b6 Most keymaps have an image depicting the layout. You can use Keyboard Layout Editor to create an image. Upload it to Imgur or another hosting service, please do not include images in your Pull Request. Below the image you should write a short description to help people understand your keymap. ![Clueboard Layout Image](https://i.imgur.com/7Capi8W.png) # Default Clueboard Layout This is the default layout that comes flashed on every Clueboard. For the most part it's a straightforward and easy to follow layout. The only unusual key is the key in the upper left, which sends Escape normally, but Grave when any of the Ctrl, Alt, or GUI modifiers are held down. Keyboard readme.md Template \u00b6 # Planck ![Planck](https://i.imgur.com/q2M3uEU.jpg) A compact 40% (12x4) ortholinear keyboard kit made and sold by OLKB and Massdrop. [More info on qmk.fm](https://qmk.fm/planck/) * Keyboard Maintainer: [Jack Humbert](https://github.com/jackhumbert) * Hardware Supported: Planck PCB rev1, rev2, rev3, rev4, Teensy 2.0 * Hardware Availability: [OLKB.com](https://olkb.com), [Massdrop](https://www.massdrop.com/buy/planck-mechanical-keyboard?mode=guest_open) Make example for this keyboard (after setting up your build environment): make planck/rev4:default See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/tutorial).","title":"\u6587\u6863\u6a21\u677f"},{"location":"documentation_templates/#documentation-templates","text":"This page documents the templates you should use when submitting new Keymaps and Keyboards to QMK.","title":"Documentation Templates"},{"location":"documentation_templates/#keyboard-readmemd-template","text":"Most keymaps have an image depicting the layout. You can use Keyboard Layout Editor to create an image. Upload it to Imgur or another hosting service, please do not include images in your Pull Request. Below the image you should write a short description to help people understand your keymap. ![Clueboard Layout Image](https://i.imgur.com/7Capi8W.png) # Default Clueboard Layout This is the default layout that comes flashed on every Clueboard. For the most part it's a straightforward and easy to follow layout. The only unusual key is the key in the upper left, which sends Escape normally, but Grave when any of the Ctrl, Alt, or GUI modifiers are held down.","title":"Keymap readme.md Template"},{"location":"documentation_templates/#keyboard-readmemd-template_1","text":"# Planck ![Planck](https://i.imgur.com/q2M3uEU.jpg) A compact 40% (12x4) ortholinear keyboard kit made and sold by OLKB and Massdrop. [More info on qmk.fm](https://qmk.fm/planck/) * Keyboard Maintainer: [Jack Humbert](https://github.com/jackhumbert) * Hardware Supported: Planck PCB rev1, rev2, rev3, rev4, Teensy 2.0 * Hardware Availability: [OLKB.com](https://olkb.com), [Massdrop](https://www.massdrop.com/buy/planck-mechanical-keyboard?mode=guest_open) Make example for this keyboard (after setting up your build environment): make planck/rev4:default See the [build environment setup](https://docs.qmk.fm/#/getting_started_build_tools) and the [make instructions](https://docs.qmk.fm/#/getting_started_make_guide) for more information. Brand new to QMK? Start with our [Complete Newbs Guide](https://docs.qmk.fm/#/tutorial).","title":"Keyboard readme.md Template"},{"location":"driver_installation_zadig/","text":"Bootloader Driver Installation with Zadig \u00b6 QMK presents itself to the host as a regular HID keyboard device, and as such requires no special drivers. However, in order to flash your keyboard on Windows, the bootloader device that appears when you reset the board often does . There are two notable exceptions: the Caterina bootloader, usually seen on Pro Micros, and the HalfKay bootloader shipped with PJRC Teensys, appear as a serial port and a generic HID device respectively, and so do not require a driver. We recommend the use of the Zadig utility. If you have set up the development environment with MSYS2, the qmk_install.sh script will have already installed the drivers for you. Installation \u00b6 Put your keyboard into bootloader mode, either by hitting the RESET keycode (which may be on a different layer), or by pressing the reset switch that's usually located on the underside of the board. If your keyboard has neither, try holding Escape or Space+ B as you plug it in (see the Bootmagic docs for more details). Some boards use Command instead of Bootmagic; in this case, you can enter bootloader mode by hitting Left Shift+Right Shift+ B or Left Shift+Right Shift+Escape at any point while the keyboard is plugged in. Some keyboards may have specific instructions for entering the bootloader. For example, the Bootmagic Lite key (default: Escape) might be on a different key, e.g. Left Control; or the magic combination for Command (default: Left Shift+Right Shift) might require you to hold something else, e.g. Left Control+Right Control. Refer to the board's README file if you are unsure. To put a device in bootloader mode with USBaspLoader, tap the RESET button while holding down the BOOT button. Alternatively, hold BOOT while inserting the USB cable. Zadig should automatically detect the bootloader device, but you may sometimes need to check Options \u2192 List All Devices and select the device from the dropdown instead. Warning If Zadig lists one or more devices with the HidUsb driver, your keyboard is probably not in bootloader mode. The arrow will be colored orange and you will be asked to confirm modifying a system driver. Do not proceed if this is the case! If the arrow appears green, select the driver, and click Install Driver . See the list of known bootloaders for the correct driver to install. Finally, unplug and replug the keyboard to make sure the new driver has been loaded. If you are using the QMK Toolbox to flash, exit and restart it too, as it can sometimes fail to recognize the driver change. Recovering from Installation to Wrong Device \u00b6 If you find that you can no longer type with the keyboard, you may have accidentally replaced the driver for the keyboard itself instead of for the bootloader. This can happen when the keyboard is not in the bootloader mode. You can easily confirm this in Zadig - a healthy keyboard has the HidUsb driver installed on all of its interfaces: Open the Device Manager, select View \u2192 Devices by container , and look for an entry with your keyboard's name. Right-click each entry and hit Uninstall device . Make sure to tick Delete the driver software for this device first if it appears. Click Action \u2192 Scan for hardware changes . At this point, you should be able to type again. Double check in Zadig that the keyboard device(s) are using the HidUsb driver. If so, you're all done, and your board should be functional again! Otherwise, repeat this process until Zadig reports the correct driver. Tip A full reboot of your computer may sometimes be necessary at this point, to get Windows to pick up the new driver. Uninstallation \u00b6 Uninstallation of bootloader devices is a little more involved than installation. Open the Device Manager, select View \u2192 Devices by container , and look for the bootloader device. Match up the USB VID and PID in Zadig with one from the table below . Find the Inf name value in the Details tab of the device properties. This should generally be something like oemXX.inf : Then, open a new Command Prompt window as an Administrator (type in cmd into the Start menu and press Ctrl+Shift+Enter). Run pnputil /enum-drivers to verify the Inf name matches the Published Name field of one of the entries: Run pnputil /delete-driver oemXX.inf /uninstall . This will delete the driver and remove it from any devices using it. Note that this will not uninstall the device itself. As with the previous section, this process may need to be repeated multiple times, as multiple drivers can be applicable to the same device. Warning Be extremely careful when doing this! You could potentially uninstall the driver for some other critical device. If you are unsure, double check the output of /enum-drivers , and omit the /uninstall flag when running /delete-driver . List of Known Bootloaders \u00b6 This is a list of known bootloader devices and their USB vendor and product IDs, as well as the correct driver to assign for flashing with QMK. Note that the usbser and HidUsb drivers are built in to Windows, and cannot be assigned with Zadig - if your device has an incorrect driver, you must use the Device Manager to uninstall it as described in the previous section. The device name here is the name that appears in Zadig, and may not be what the Device Manager or QMK Toolbox displays. Bootloader Device Name VID/PID Driver atmel-dfu ATmega16u2 DFU 03EB:2FEF libusb0 atmel-dfu ATmega32U2 DFU 03EB:2FF0 libusb0 atmel-dfu ATm16U4 DFU V1.0.2 03EB:2FF3 libusb0 atmel-dfu ATm32U4DFU 03EB:2FF4 libusb0 atmel-dfu none (AT90USB64) 03EB:2FF9 libusb0 atmel-dfu AT90USB128 DFU 03EB:2FFB libusb0 qmk-dfu (keyboard name) Bootloader As atmel-dfu libusb0 halfkay none 16C0:0478 HidUsb caterina Pro Micro 3.3V 1B4F:9203 usbser caterina Pro Micro 5V 1B4F:9205 usbser caterina LilyPadUSB 1B4F:9207 usbser caterina Pololu A-Star 32U4 Bootloader 1FFB:0101 usbser caterina Arduino Leonardo 2341:0036 usbser caterina Arduino Micro 2341:0037 usbser caterina Adafruit Feather 32u4 239A:000C usbser caterina Adafruit ItsyBitsy 32u4 3V 239A:000D usbser caterina Adafruit ItsyBitsy 32u4 5V 239A:000E usbser caterina Arduino Leonardo 2A03:0036 usbser caterina Arduino Micro 2A03:0037 usbser bootloadHID HIDBoot 16C0:05DF HidUsb USBasp USBasp 16C0:05DC libusbK apm32-dfu APM32 DFU ISP Mode 314B:0106 WinUSB stm32-dfu STM32 BOOTLOADER 0483:DF11 WinUSB kiibohd Kiibohd DFU Bootloader 1C11:B007 WinUSB stm32duino Maple 003 1EAF:0003 WinUSB","title":"Zadig\u9a71\u52a8\u5b89\u88c5"},{"location":"driver_installation_zadig/#bootloader-driver-installation-with-zadig","text":"QMK presents itself to the host as a regular HID keyboard device, and as such requires no special drivers. However, in order to flash your keyboard on Windows, the bootloader device that appears when you reset the board often does . There are two notable exceptions: the Caterina bootloader, usually seen on Pro Micros, and the HalfKay bootloader shipped with PJRC Teensys, appear as a serial port and a generic HID device respectively, and so do not require a driver. We recommend the use of the Zadig utility. If you have set up the development environment with MSYS2, the qmk_install.sh script will have already installed the drivers for you.","title":"Bootloader Driver Installation with Zadig"},{"location":"driver_installation_zadig/#installation","text":"Put your keyboard into bootloader mode, either by hitting the RESET keycode (which may be on a different layer), or by pressing the reset switch that's usually located on the underside of the board. If your keyboard has neither, try holding Escape or Space+ B as you plug it in (see the Bootmagic docs for more details). Some boards use Command instead of Bootmagic; in this case, you can enter bootloader mode by hitting Left Shift+Right Shift+ B or Left Shift+Right Shift+Escape at any point while the keyboard is plugged in. Some keyboards may have specific instructions for entering the bootloader. For example, the Bootmagic Lite key (default: Escape) might be on a different key, e.g. Left Control; or the magic combination for Command (default: Left Shift+Right Shift) might require you to hold something else, e.g. Left Control+Right Control. Refer to the board's README file if you are unsure. To put a device in bootloader mode with USBaspLoader, tap the RESET button while holding down the BOOT button. Alternatively, hold BOOT while inserting the USB cable. Zadig should automatically detect the bootloader device, but you may sometimes need to check Options \u2192 List All Devices and select the device from the dropdown instead. Warning If Zadig lists one or more devices with the HidUsb driver, your keyboard is probably not in bootloader mode. The arrow will be colored orange and you will be asked to confirm modifying a system driver. Do not proceed if this is the case! If the arrow appears green, select the driver, and click Install Driver . See the list of known bootloaders for the correct driver to install. Finally, unplug and replug the keyboard to make sure the new driver has been loaded. If you are using the QMK Toolbox to flash, exit and restart it too, as it can sometimes fail to recognize the driver change.","title":"Installation"},{"location":"driver_installation_zadig/#recovering-from-installation-to-wrong-device","text":"If you find that you can no longer type with the keyboard, you may have accidentally replaced the driver for the keyboard itself instead of for the bootloader. This can happen when the keyboard is not in the bootloader mode. You can easily confirm this in Zadig - a healthy keyboard has the HidUsb driver installed on all of its interfaces: Open the Device Manager, select View \u2192 Devices by container , and look for an entry with your keyboard's name. Right-click each entry and hit Uninstall device . Make sure to tick Delete the driver software for this device first if it appears. Click Action \u2192 Scan for hardware changes . At this point, you should be able to type again. Double check in Zadig that the keyboard device(s) are using the HidUsb driver. If so, you're all done, and your board should be functional again! Otherwise, repeat this process until Zadig reports the correct driver. Tip A full reboot of your computer may sometimes be necessary at this point, to get Windows to pick up the new driver.","title":"Recovering from Installation to Wrong Device"},{"location":"driver_installation_zadig/#uninstallation","text":"Uninstallation of bootloader devices is a little more involved than installation. Open the Device Manager, select View \u2192 Devices by container , and look for the bootloader device. Match up the USB VID and PID in Zadig with one from the table below . Find the Inf name value in the Details tab of the device properties. This should generally be something like oemXX.inf : Then, open a new Command Prompt window as an Administrator (type in cmd into the Start menu and press Ctrl+Shift+Enter). Run pnputil /enum-drivers to verify the Inf name matches the Published Name field of one of the entries: Run pnputil /delete-driver oemXX.inf /uninstall . This will delete the driver and remove it from any devices using it. Note that this will not uninstall the device itself. As with the previous section, this process may need to be repeated multiple times, as multiple drivers can be applicable to the same device. Warning Be extremely careful when doing this! You could potentially uninstall the driver for some other critical device. If you are unsure, double check the output of /enum-drivers , and omit the /uninstall flag when running /delete-driver .","title":"Uninstallation"},{"location":"driver_installation_zadig/#list-of-known-bootloaders","text":"This is a list of known bootloader devices and their USB vendor and product IDs, as well as the correct driver to assign for flashing with QMK. Note that the usbser and HidUsb drivers are built in to Windows, and cannot be assigned with Zadig - if your device has an incorrect driver, you must use the Device Manager to uninstall it as described in the previous section. The device name here is the name that appears in Zadig, and may not be what the Device Manager or QMK Toolbox displays. Bootloader Device Name VID/PID Driver atmel-dfu ATmega16u2 DFU 03EB:2FEF libusb0 atmel-dfu ATmega32U2 DFU 03EB:2FF0 libusb0 atmel-dfu ATm16U4 DFU V1.0.2 03EB:2FF3 libusb0 atmel-dfu ATm32U4DFU 03EB:2FF4 libusb0 atmel-dfu none (AT90USB64) 03EB:2FF9 libusb0 atmel-dfu AT90USB128 DFU 03EB:2FFB libusb0 qmk-dfu (keyboard name) Bootloader As atmel-dfu libusb0 halfkay none 16C0:0478 HidUsb caterina Pro Micro 3.3V 1B4F:9203 usbser caterina Pro Micro 5V 1B4F:9205 usbser caterina LilyPadUSB 1B4F:9207 usbser caterina Pololu A-Star 32U4 Bootloader 1FFB:0101 usbser caterina Arduino Leonardo 2341:0036 usbser caterina Arduino Micro 2341:0037 usbser caterina Adafruit Feather 32u4 239A:000C usbser caterina Adafruit ItsyBitsy 32u4 3V 239A:000D usbser caterina Adafruit ItsyBitsy 32u4 5V 239A:000E usbser caterina Arduino Leonardo 2A03:0036 usbser caterina Arduino Micro 2A03:0037 usbser bootloadHID HIDBoot 16C0:05DF HidUsb USBasp USBasp 16C0:05DC libusbK apm32-dfu APM32 DFU ISP Mode 314B:0106 WinUSB stm32-dfu STM32 BOOTLOADER 0483:DF11 WinUSB kiibohd Kiibohd DFU Bootloader 1C11:B007 WinUSB stm32duino Maple 003 1EAF:0003 WinUSB","title":"List of Known Bootloaders"},{"location":"eeprom_driver/","text":"EEPROM Driver Configuration \u00b6 The EEPROM driver can be swapped out depending on the needs of the keyboard, or whether extra hardware is present. Driver Description EEPROM_DRIVER = vendor (default) Uses the on-chip driver provided by the chip manufacturer. For AVR, this is provided by avr-libc. This is supported on ARM for a subset of chips -- STM32F3xx, STM32F1xx, and STM32F072xB will be emulated by writing to flash. STM32L0xx and STM32L1xx will use the onboard dedicated true EEPROM. Other chips will generally act as \"transient\" below. EEPROM_DRIVER = i2c Supports writing to I2C-based 24xx EEPROM chips. See the driver section below. EEPROM_DRIVER = spi Supports writing to SPI-based 25xx EEPROM chips. See the driver section below. EEPROM_DRIVER = transient Fake EEPROM driver -- supports reading/writing to RAM, and will be discarded when power is lost. Vendor Driver Configuration \u00b6 STM32 L0/L1 Configuration {: id=stm }32l0l1-eeprom-driver-configuration \u00b6 Info Resetting EEPROM using an STM32L0/L1 device takes up to 1 second for every 1kB of internal EEPROM used. config.h override Description Default Value #define STM32_ONBOARD_EEPROM_SIZE The size of the EEPROM to use, in bytes. Erase times can be high, so it's configurable here, if not using the default value. Minimum required to cover base eeconfig data, or 1024 if VIA is enabled. I2C Driver Configuration {: id=i }2c-eeprom-driver-configuration \u00b6 Currently QMK supports 24xx-series chips over I2C. As such, requires a working i2c_master driver configuration. You can override the driver configuration via your config.h: config.h override Description Default Value #define EXTERNAL_EEPROM_I2C_BASE_ADDRESS Base I2C address for the EEPROM -- shifted left by 1 as per i2c_master requirements 0b10100000 #define EXTERNAL_EEPROM_I2C_ADDRESS(addr) Calculated I2C address for the EEPROM (EXTERNAL_EEPROM_I2C_BASE_ADDRESS) #define EXTERNAL_EEPROM_BYTE_COUNT Total size of the EEPROM in bytes 8192 #define EXTERNAL_EEPROM_PAGE_SIZE Page size of the EEPROM in bytes, as specified in the datasheet 32 #define EXTERNAL_EEPROM_ADDRESS_SIZE The number of bytes to transmit for the memory location within the EEPROM 2 #define EXTERNAL_EEPROM_WRITE_TIME Write cycle time of the EEPROM, as specified in the datasheet 5 Default values and extended descriptions can be found in drivers/eeprom/eeprom_i2c.h . Alternatively, there are pre-defined hardware configurations for available chips/modules: Module Equivalent #define Source CAT24C512 EEPROM #define EEPROM_I2C_CAT24C512 https://www.sparkfun.com/products/14764 RM24C512C EEPROM #define EEPROM_I2C_RM24C512C https://www.sparkfun.com/products/14764 24LC64 EEPROM #define EEPROM_I2C_24LC64 https://www.microchip.com/wwwproducts/en/24LC64 24LC128 EEPROM #define EEPROM_I2C_24LC128 https://www.microchip.com/wwwproducts/en/24LC128 24LC256 EEPROM #define EEPROM_I2C_24LC256 https://www.sparkfun.com/products/525 MB85RC256V FRAM #define EEPROM_I2C_MB85RC256V https://www.adafruit.com/product/1895 Tip If you find that the EEPROM is not cooperating, ensure you've correctly shifted up your EEPROM address by 1. For example, the datasheet might state the address as 0b01010000 -- the correct value of EXTERNAL_EEPROM_I2C_BASE_ADDRESS needs to be 0b10100000 . SPI Driver Configuration \u00b6 Currently QMK supports 25xx-series chips over SPI. As such, requires a working spi_master driver configuration. You can override the driver configuration via your config.h: config.h override Description Default Value #define EXTERNAL_EEPROM_SPI_SLAVE_SELECT_PIN SPI Slave select pin in order to inform that the EEPROM is currently being addressed none #define EXTERNAL_EEPROM_SPI_CLOCK_DIVISOR Clock divisor used to divide the peripheral clock to derive the SPI frequency 64 #define EXTERNAL_EEPROM_BYTE_COUNT Total size of the EEPROM in bytes 8192 #define EXTERNAL_EEPROM_PAGE_SIZE Page size of the EEPROM in bytes, as specified in the datasheet 32 #define EXTERNAL_EEPROM_ADDRESS_SIZE The number of bytes to transmit for the memory location within the EEPROM 2 Tip There's no way to determine if there is an SPI EEPROM actually responding. Generally, this will result in reads of nothing but zero. Transient Driver configuration \u00b6 The only configurable item for the transient EEPROM driver is its size: config.h override Description Default Value #define TRANSIENT_EEPROM_SIZE Total size of the EEPROM storage in bytes 64 Default values and extended descriptions can be found in drivers/eeprom/eeprom_transient.h .","title":"EEPROM\u8bbe\u5907"},{"location":"eeprom_driver/#eeprom-driver-configuration","text":"The EEPROM driver can be swapped out depending on the needs of the keyboard, or whether extra hardware is present. Driver Description EEPROM_DRIVER = vendor (default) Uses the on-chip driver provided by the chip manufacturer. For AVR, this is provided by avr-libc. This is supported on ARM for a subset of chips -- STM32F3xx, STM32F1xx, and STM32F072xB will be emulated by writing to flash. STM32L0xx and STM32L1xx will use the onboard dedicated true EEPROM. Other chips will generally act as \"transient\" below. EEPROM_DRIVER = i2c Supports writing to I2C-based 24xx EEPROM chips. See the driver section below. EEPROM_DRIVER = spi Supports writing to SPI-based 25xx EEPROM chips. See the driver section below. EEPROM_DRIVER = transient Fake EEPROM driver -- supports reading/writing to RAM, and will be discarded when power is lost.","title":"EEPROM Driver Configuration"},{"location":"eeprom_driver/#vendor-eeprom-driver-configuration","text":"","title":"Vendor Driver Configuration"},{"location":"eeprom_driver/#i2c-driver-configuration-idi-2c-eeprom-driver-configuration","text":"Currently QMK supports 24xx-series chips over I2C. As such, requires a working i2c_master driver configuration. You can override the driver configuration via your config.h: config.h override Description Default Value #define EXTERNAL_EEPROM_I2C_BASE_ADDRESS Base I2C address for the EEPROM -- shifted left by 1 as per i2c_master requirements 0b10100000 #define EXTERNAL_EEPROM_I2C_ADDRESS(addr) Calculated I2C address for the EEPROM (EXTERNAL_EEPROM_I2C_BASE_ADDRESS) #define EXTERNAL_EEPROM_BYTE_COUNT Total size of the EEPROM in bytes 8192 #define EXTERNAL_EEPROM_PAGE_SIZE Page size of the EEPROM in bytes, as specified in the datasheet 32 #define EXTERNAL_EEPROM_ADDRESS_SIZE The number of bytes to transmit for the memory location within the EEPROM 2 #define EXTERNAL_EEPROM_WRITE_TIME Write cycle time of the EEPROM, as specified in the datasheet 5 Default values and extended descriptions can be found in drivers/eeprom/eeprom_i2c.h . Alternatively, there are pre-defined hardware configurations for available chips/modules: Module Equivalent #define Source CAT24C512 EEPROM #define EEPROM_I2C_CAT24C512 https://www.sparkfun.com/products/14764 RM24C512C EEPROM #define EEPROM_I2C_RM24C512C https://www.sparkfun.com/products/14764 24LC64 EEPROM #define EEPROM_I2C_24LC64 https://www.microchip.com/wwwproducts/en/24LC64 24LC128 EEPROM #define EEPROM_I2C_24LC128 https://www.microchip.com/wwwproducts/en/24LC128 24LC256 EEPROM #define EEPROM_I2C_24LC256 https://www.sparkfun.com/products/525 MB85RC256V FRAM #define EEPROM_I2C_MB85RC256V https://www.adafruit.com/product/1895 Tip If you find that the EEPROM is not cooperating, ensure you've correctly shifted up your EEPROM address by 1. For example, the datasheet might state the address as 0b01010000 -- the correct value of EXTERNAL_EEPROM_I2C_BASE_ADDRESS needs to be 0b10100000 .","title":"I2C Driver Configuration {: id=i }2c-eeprom-driver-configuration"},{"location":"eeprom_driver/#spi-eeprom-driver-configuration","text":"Currently QMK supports 25xx-series chips over SPI. As such, requires a working spi_master driver configuration. You can override the driver configuration via your config.h: config.h override Description Default Value #define EXTERNAL_EEPROM_SPI_SLAVE_SELECT_PIN SPI Slave select pin in order to inform that the EEPROM is currently being addressed none #define EXTERNAL_EEPROM_SPI_CLOCK_DIVISOR Clock divisor used to divide the peripheral clock to derive the SPI frequency 64 #define EXTERNAL_EEPROM_BYTE_COUNT Total size of the EEPROM in bytes 8192 #define EXTERNAL_EEPROM_PAGE_SIZE Page size of the EEPROM in bytes, as specified in the datasheet 32 #define EXTERNAL_EEPROM_ADDRESS_SIZE The number of bytes to transmit for the memory location within the EEPROM 2 Tip There's no way to determine if there is an SPI EEPROM actually responding. Generally, this will result in reads of nothing but zero.","title":"SPI Driver Configuration"},{"location":"eeprom_driver/#transient-eeprom-driver-configuration","text":"The only configurable item for the transient EEPROM driver is its size: config.h override Description Default Value #define TRANSIENT_EEPROM_SIZE Total size of the EEPROM storage in bytes 64 Default values and extended descriptions can be found in drivers/eeprom/eeprom_transient.h .","title":"Transient Driver configuration"},{"location":"faq/","text":"\u5e38\u89c1\u95ee\u9898 \u00b6 \u4e00\u822c\u95ee\u9898 \u6784\u5efa\u548c\u7f16\u8bd1QMK QMK\u8c03\u8bd5\u548c\u6545\u969c\u6392\u9664 \u5e03\u5c40\u95ee\u9898","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq/#_1","text":"\u4e00\u822c\u95ee\u9898 \u6784\u5efa\u548c\u7f16\u8bd1QMK QMK\u8c03\u8bd5\u548c\u6545\u969c\u6392\u9664 \u5e03\u5c40\u95ee\u9898","title":"\u5e38\u89c1\u95ee\u9898"},{"location":"faq_build/","text":"\u5173\u4e8e\u6784\u5efa\u7684\u5e38\u89c1\u95ee\u9898 \u00b6 \u672c\u9875\u6240\u5199\u662fQMK\u6784\u5efa\u7684\u5e38\u89c1\u95ee\u9898.\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8fdb\u884c\u8fc7\u7f16\u8bd1,\u5c31\u770b\u4e00\u4e0b \u6784\u5efa\u73af\u5883\u642d\u5efa \u548c make\u7684\u8bf4\u660e . \u5982\u679c\u60a8\u4e0d\u80fd\u5728Linux\u4e0a\u7f16\u7a0b \u00b6 \u60a8\u9700\u8981\u9002\u5f53\u7684\u6743\u9650\u624d\u80fd\u64cd\u4f5c\u8bbe\u5907\u3002\u5bf9\u4e8eLinux\u7528\u6237, \u8bf7\u53c2\u9605\u4e0b\u65b9\u6709\u5173 udev \u89c4\u5219\u7684\u8bf4\u660e\u3002\u5982\u679c\u60a8\u5bf9 udev \u6709\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u7528 sudo \u547d\u4ee4\u3002\u5982\u679c\u60a8\u4e0d\u719f\u6089\u6b64\u547d\u4ee4\uff0c\u4f7f\u7528 man sudo \u67e5\u770b\u5176\u624b\u518c\u6216 \u770b\u8fd9\u4e2a\u7f51\u9875 . \u5728\u4f60\u7684\u4e3b\u63a7\u662fATMega32u4\u65f6\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528 sudo \u547d\u4ee4\u7684\u6837\u4f8b\uff1a $ sudo dfu-programmer atmega32u4 erase --force $ sudo dfu-programmer atmega32u4 flash your.hex $ sudo dfu-programmer atmega32u4 reset \u6216\u53ea\u7528\uff1b $ sudo make <keyboard>:<keymap>:dfu \u4f7f\u7528 sudo \u8fd0\u884c make \u4e00\u822c\u6765\u8bf4 \u4e0d \u63a8\u8350\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5c3d\u91cf\u4f7f\u7528\u524d\u4e00\u79cd\u65b9\u6cd5\u4e4b\u4e00\u3002 Linux udev \u89c4\u5219 \u00b6 \u5728Linux\u4e0a\uff0c\u60a8\u9700\u8981\u9002\u5f53\u7684\u6743\u9650\u624d\u80fd\u8bbf\u95eeMCU\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u5237\u65b0\u56fa\u4ef6\u65f6\u4f7f\u7528 sudo \uff0c\u6216\u628a\u8fd9\u4e9b\u6587\u4ef6\u653e\u5230 /etc/udev/rules.d/ \u3002 /etc/udev/rules.d/50-atmel-dfu.rules: # Atmel ATMega32U4 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ff4\", MODE:=\"0666\" # Atmel USBKEY AT90USB1287 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ffb\", MODE:=\"0666\" # Atmel ATMega32U2 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ff0\", MODE:=\"0666\" /etc/udev/rules.d/52-tmk-keyboard.rules: # tmk\u952e\u76d8\u4ea7\u54c1 https://github.com/tmk/tmk_keyboard SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"feed\", MODE:=\"0666\" /etc/udev/rules.d/54-input-club-keyboard.rules: # Input Club keyboard bootloader SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"1c11\", MODE:=\"0666\" \u4e32\u884c\u8bbe\u5907\u5728Linux\u4e0a\u68c0\u6d4b\u4e0d\u5230bootloader\u6a21\u5f0f \u00b6 \u786e\u4fdd\u60a8\u7684\u5185\u6838\u5bf9\u60a8\u7684\u8bbe\u5907\u6709\u76f8\u5e94\u7684\u652f\u6301\u3002 \u5982\u679c\u4f60\u7684\u8bbe\u5907\u662f USB ACM, \u6bd4\u5982Pro Micro (Atmega32u4)\uff0c\u5c31\u8981\u52a0\u4e0a CONFIG_USB_ACM=y . \u5176\u4ed6\u8bbe\u5907\u53ef\u80fd\u9700\u8981 USB_SERIAL \u53ca\u5176\u4efb\u4f55\u5b50\u9009\u9879\u3002 DFU Bootloader\u7684\u672a\u77e5\u8bbe\u5907 \u00b6 \u5982\u679c\u60a8\u5728\u4f7f\u7528Windows\u6765\u5237\u65b0\u952e\u76d8\u7684\u65f6\u5019\u78b0\u5230\u4e86\u95ee\u9898\uff0c\u68c0\u67e5\u8bbe\u5907\u7ba1\u7406\u5668\u3002\u5982\u679c\u5728\u952e\u76d8\u5904\u4e8e \"bootloader\u6a21\u5f0f\"\u65f6\u4f60\u770b\u5230 \"\u672a\u77e5\u8bbe\u5907\"\uff0c\u8bf4\u660e\u4f60\u53ef\u80fd\u9762\u4e34\u8bbe\u5907\u95ee\u9898\u3002 \u91cd\u65b0\u8fd0\u884cMSYS2\u4e0a\u7684\u5b89\u88c5\u811a\u672c\u6216\u8bb8\u4f1a\u51d1\u6548\uff08\u6bd4\u5982\u5728MSYS2/WSL\u8fd0\u884c ./util/qmk_install.sh ) \u6216\u8005\u91cd\u65b0\u5b89\u88c5QMK\u5de5\u5177\u7bb1\u4e5f\u53ef\u80fd\u4f1a\u89e3\u51b3\u4f60\u7684\u95ee\u9898\u3002 \u5982\u679c\u4ee5\u4e0a\u65b9\u6cd5\u8fd8\u662f\u77ed\u9488\u653b\u75bd\uff0c\u90a3\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528 Zadig Utility \u3002\u4e0b\u8f7d\u6b64\u7a0b\u5e8f, \u627e\u5230\u8bbe\u5907\u95ee\u9898, \u7136\u540e\u9009\u62e9 WinUSB \u9009\u9879, \u7136\u540e\u70b9\u51fb\"Reinstall driver\"\u3002\u5b8c\u6210\u540e\u518d\u8bd5\u8bd5\u5237\u65b0\u4f60\u7684\u952e\u76d8\u3002\u5018\u82e5\u4f9d\u7136\u5f92\u52b3\u65e0\u529f\uff0c\u90a3\u5c31\u5c1d\u8bd5\u6240\u6709\u9009\u9879\u76f4\u5230\u597d\u7528\u4e3a\u6b62\u3002 Info \u4e8b\u5b9e\u4e0a\u6ca1\u6709\u4e00\u4e2a\u9a71\u52a8\u7684\u6700\u4f73\u9009\u62e9\uff0c\u6709\u4e9b\u9009\u9879\u5c31\u662f\u548c\u67d0\u4e9b\u7cfb\u7edf\u76f8\u8f85\u76f8\u6210\u3002\u4f46libUSB\u548cWinUSB\u4f3c\u4e4e\u4e5f\u7b97\u662f\u8fd9\u91cc\u7684\u6700\u4f73\u9009\u62e9\u4e86\u3002 \u5982\u679cbootloader\u5728\u8bbe\u5907\u5217\u8868\u4e2d\u6ca1\u6709\u663e\u793a\uff0c\u4f60\u53ef\u80fd\u8981\u4f7f\u80fd \"List all devices\"\u9009\u9879\u5728\u9009\u9879\u83dc\u5355\u4e2d Options \uff0c\u7136\u540e\u627e\u5230\u6709\u95ee\u9898\u7684bootloader\u8bbe\u5907\u3002(\u8bd1\u8005\u6ce8\uff1a\u5728win10\u4e2d\u53ef\u80fd\u4e3a \u67e5\u770b-\u663e\u793a\u9690\u85cf\u7684\u8bbe\u5907) USB VID \u548c PID \u00b6 \u4f60\u53ef\u4ee5\u5728\u7f16\u8f91 config.h \u65f6\u4f7f\u7528\u4efb\u4f55\u4f60\u60f3\u7528\u7684ID\u503c\u3002\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528\u4efb\u4f55\u53ef\u80fd\u672a\u4f7f\u7528\u7684ID\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u9664\u4e86\u6709\u6781\u4f4e\u7684\u4e0e\u5176\u4ed6\u4ea7\u54c1\u53d1\u751f\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u3002 \u5927\u591a\u6570QMK\u4e3b\u677f\u4f7f\u7528 0xFEED \u4f5c\u4e3avendor ID\u3002\u60a8\u5e94\u8be5\u67e5\u770b\u5176\u4ed6\u952e\u76d8\uff0c\u4ee5\u786e\u4fdd\u9009\u62e9\u4e86\u552f\u4e00\u7684Product ID\u3002 \u4e5f\u8981\u770b\u770b\u8fd9\u4e2a\u3002 https://github.com/tmk/tmk_keyboard/issues/150 \u4e00\u4e5f\u53ef\u4ee5\u5728\u4e0b\u65b9\u94fe\u63a5\u8d2d\u4e70\u4e00\u4e2a\u552f\u4e00\u7684VID:PID\u3002\u4e0d\u8fc7\u4e2a\u4eba\u4f7f\u7528\u4f3c\u4e4e\u7528\u4e0d\u7740\u8fd9\u4e2a\u3002 - https://www.obdev.at/products/vusb/license.html - https://www.mcselec.com/index.php?page=shop.product_details&flypage=shop.flypage&product_id=92&option=com_phpshop&Itemid=1 AVR\u7684BOOTLOADER_SIZE \u00b6 \u6ce8\u610fTeensy2.0++ bootloader\u7684\u5927\u5c0f\u662f2048\u5b57\u8282\u3002\u6709\u4e9bMakefile\u6ce8\u91ca\u9519\u4e86\u3002 # Boot Section Size in *bytes* # Teensy halfKay 512 # Teensy++ halfKay 2048 # Atmel DFU loader 4096 (TMK Alt Controller) # LUFA bootloader 4096 # USBaspLoader 2048 OPT_DEFS += -DBOOTLOADER_SIZE=2048 \u5728MacOS\u4e0a avr-gcc: internal compiler error: Abort trap: 6 (program cc1) \u00b6 \u8fd9\u662fbrew\u66f4\u65b0\u7684\u95ee\u9898\uff0c\u5bfc\u81f4AVR GCC\u4f9d\u8d56\u7684\u7b26\u53f7\u94fe\u63a5\u88ab\u635f\u574f\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u79fb\u9664\u5e76\u91cd\u65b0\u5b89\u88c5\u6240\u6709\u53d7\u5f71\u54cd\u7684\u6a21\u5757\u3002 brew rm avr-gcc brew rm dfu-programmer brew rm dfu-util brew rm gcc-arm-none-eabi brew rm avrdude brew install avr-gcc brew install dfu-programmer brew install dfu-util brew install gcc-arm-none-eabi brew install avrdude avr-gcc 8.1 \u548c LUFA \u00b6 \u5982\u679c\u4f60\u628aavr-gcc\u5347\u7ea7\u52307\u4ee5\u4e0a\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5173\u4e8eLUFA\u7684\u95ee\u9898\u3002\u6bd4\u5982: lib/lufa/LUFA/Drivers/USB/Class/Device/AudioClassDevice.h:380:5: error: 'const' attribute on function returning 'void' \u90a3\u4f60\u5c31\u9700\u8981\u5728brew\u4e2d\u628aavr-gcc\u56de\u9000\u52307\u3002 brew uninstall --force avr-gcc brew install avr-gcc@8 brew link --force avr-gcc@8 \u6211\u5237\u65b0\u4e86\u6211\u7684\u952e\u76d8\u4f46\u662f\u952e\u76d8\u4e0d\u5de5\u4f5c/\u6309\u952e\u6ca1\u6709\u6ce8\u518c - \u800c\u4e14\u8fd8\u662fARM\u7684 (rev6 planck, clueboard 60, hs60v2, etc...) (Feb 2019) \u00b6 \u7531\u4e8eEEPROM\u5728\u57fa\u4e8eARM\u7684\u82af\u7247\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4fdd\u5b58\u7684\u8bbe\u7f6e\u53ef\u80fd\u4e0d\u518d\u6709\u6548\u3002\u8fd9\u4f1a\u5f71\u54cd\u9ed8\u8ba4\u5c42\uff0c\u800c\u4e14 \u6216\u8bb8 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f1a\u4f7f\u952e\u76d8\u4e0d\u597d\u7528\uff0c\u6211\u4eec\u4ecd\u5728\u8c03\u67e5\u8fd9\u4e9b\u60c5\u51b5\u3002\u91cd\u7f6eEEPROM\u5c06\u89e3\u51b3\u6b64\u95ee\u9898\u3002 Planck rev6\u952e\u76d8\u91cd\u7f6eEEPROM \u662f\u7528\u4e8e\u5f3a\u5236\u91cd\u7f6eEEPROM\u7684\u3002\u5237\u5165\u8fd9\u4e2a\u6587\u4ef6\u540e\uff0c\u518d\u6b21\u5237\u5165\u6b63\u5e38\u56fa\u4ef6\uff0c\u8fd9\u4f1a\u5c06\u952e\u76d8\u6062\u590d\u5230_\u6b63\u5e38_\u5de5\u4f5c\u72b6\u6001\u3002 Preonic rev3\u952e\u76d8\u91cd\u7f6eEEPROM \u5982\u679c\u4ee5\u4efb\u4f55\u5f62\u5f0f\u542f\u7528\u4e86bootmagic\uff0c \u90a3\u4e48\u60a8\u8fd8\u9700\u8981(\u770b Bootmagic\u6587\u6863 \u4ee5\u53ca\u952e\u76d8\u4fe1\u606f\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f).","title":"\u6784\u5efa/\u7f16\u8bd1"},{"location":"faq_build/#_1","text":"\u672c\u9875\u6240\u5199\u662fQMK\u6784\u5efa\u7684\u5e38\u89c1\u95ee\u9898.\u5982\u679c\u4f60\u8fd8\u6ca1\u6709\u8fdb\u884c\u8fc7\u7f16\u8bd1,\u5c31\u770b\u4e00\u4e0b \u6784\u5efa\u73af\u5883\u642d\u5efa \u548c make\u7684\u8bf4\u660e .","title":"\u5173\u4e8e\u6784\u5efa\u7684\u5e38\u89c1\u95ee\u9898"},{"location":"faq_build/#linux","text":"\u60a8\u9700\u8981\u9002\u5f53\u7684\u6743\u9650\u624d\u80fd\u64cd\u4f5c\u8bbe\u5907\u3002\u5bf9\u4e8eLinux\u7528\u6237, \u8bf7\u53c2\u9605\u4e0b\u65b9\u6709\u5173 udev \u89c4\u5219\u7684\u8bf4\u660e\u3002\u5982\u679c\u60a8\u5bf9 udev \u6709\u95ee\u9898\uff0c\u89e3\u51b3\u65b9\u6cd5\u662f\u7528 sudo \u547d\u4ee4\u3002\u5982\u679c\u60a8\u4e0d\u719f\u6089\u6b64\u547d\u4ee4\uff0c\u4f7f\u7528 man sudo \u67e5\u770b\u5176\u624b\u518c\u6216 \u770b\u8fd9\u4e2a\u7f51\u9875 . \u5728\u4f60\u7684\u4e3b\u63a7\u662fATMega32u4\u65f6\uff0c\u4ee5\u4e0b\u662f\u4f7f\u7528 sudo \u547d\u4ee4\u7684\u6837\u4f8b\uff1a $ sudo dfu-programmer atmega32u4 erase --force $ sudo dfu-programmer atmega32u4 flash your.hex $ sudo dfu-programmer atmega32u4 reset \u6216\u53ea\u7528\uff1b $ sudo make <keyboard>:<keymap>:dfu \u4f7f\u7528 sudo \u8fd0\u884c make \u4e00\u822c\u6765\u8bf4 \u4e0d \u63a8\u8350\uff0c\u5982\u679c\u53ef\u80fd\uff0c\u5c3d\u91cf\u4f7f\u7528\u524d\u4e00\u79cd\u65b9\u6cd5\u4e4b\u4e00\u3002","title":"\u5982\u679c\u60a8\u4e0d\u80fd\u5728Linux\u4e0a\u7f16\u7a0b"},{"location":"faq_build/#linux-udev","text":"\u5728Linux\u4e0a\uff0c\u60a8\u9700\u8981\u9002\u5f53\u7684\u6743\u9650\u624d\u80fd\u8bbf\u95eeMCU\u3002\u4f60\u4e5f\u53ef\u4ee5\u5728\u5237\u65b0\u56fa\u4ef6\u65f6\u4f7f\u7528 sudo \uff0c\u6216\u628a\u8fd9\u4e9b\u6587\u4ef6\u653e\u5230 /etc/udev/rules.d/ \u3002 /etc/udev/rules.d/50-atmel-dfu.rules: # Atmel ATMega32U4 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ff4\", MODE:=\"0666\" # Atmel USBKEY AT90USB1287 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ffb\", MODE:=\"0666\" # Atmel ATMega32U2 SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"03eb\", ATTRS{idProduct}==\"2ff0\", MODE:=\"0666\" /etc/udev/rules.d/52-tmk-keyboard.rules: # tmk\u952e\u76d8\u4ea7\u54c1 https://github.com/tmk/tmk_keyboard SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"feed\", MODE:=\"0666\" /etc/udev/rules.d/54-input-club-keyboard.rules: # Input Club keyboard bootloader SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"1c11\", MODE:=\"0666\"","title":"Linux udev \u89c4\u5219"},{"location":"faq_build/#linuxbootloader","text":"\u786e\u4fdd\u60a8\u7684\u5185\u6838\u5bf9\u60a8\u7684\u8bbe\u5907\u6709\u76f8\u5e94\u7684\u652f\u6301\u3002 \u5982\u679c\u4f60\u7684\u8bbe\u5907\u662f USB ACM, \u6bd4\u5982Pro Micro (Atmega32u4)\uff0c\u5c31\u8981\u52a0\u4e0a CONFIG_USB_ACM=y . \u5176\u4ed6\u8bbe\u5907\u53ef\u80fd\u9700\u8981 USB_SERIAL \u53ca\u5176\u4efb\u4f55\u5b50\u9009\u9879\u3002","title":"\u4e32\u884c\u8bbe\u5907\u5728Linux\u4e0a\u68c0\u6d4b\u4e0d\u5230bootloader\u6a21\u5f0f"},{"location":"faq_build/#dfu-bootloader","text":"\u5982\u679c\u60a8\u5728\u4f7f\u7528Windows\u6765\u5237\u65b0\u952e\u76d8\u7684\u65f6\u5019\u78b0\u5230\u4e86\u95ee\u9898\uff0c\u68c0\u67e5\u8bbe\u5907\u7ba1\u7406\u5668\u3002\u5982\u679c\u5728\u952e\u76d8\u5904\u4e8e \"bootloader\u6a21\u5f0f\"\u65f6\u4f60\u770b\u5230 \"\u672a\u77e5\u8bbe\u5907\"\uff0c\u8bf4\u660e\u4f60\u53ef\u80fd\u9762\u4e34\u8bbe\u5907\u95ee\u9898\u3002 \u91cd\u65b0\u8fd0\u884cMSYS2\u4e0a\u7684\u5b89\u88c5\u811a\u672c\u6216\u8bb8\u4f1a\u51d1\u6548\uff08\u6bd4\u5982\u5728MSYS2/WSL\u8fd0\u884c ./util/qmk_install.sh ) \u6216\u8005\u91cd\u65b0\u5b89\u88c5QMK\u5de5\u5177\u7bb1\u4e5f\u53ef\u80fd\u4f1a\u89e3\u51b3\u4f60\u7684\u95ee\u9898\u3002 \u5982\u679c\u4ee5\u4e0a\u65b9\u6cd5\u8fd8\u662f\u77ed\u9488\u653b\u75bd\uff0c\u90a3\u60a8\u53ef\u80fd\u9700\u8981\u4f7f\u7528 Zadig Utility \u3002\u4e0b\u8f7d\u6b64\u7a0b\u5e8f, \u627e\u5230\u8bbe\u5907\u95ee\u9898, \u7136\u540e\u9009\u62e9 WinUSB \u9009\u9879, \u7136\u540e\u70b9\u51fb\"Reinstall driver\"\u3002\u5b8c\u6210\u540e\u518d\u8bd5\u8bd5\u5237\u65b0\u4f60\u7684\u952e\u76d8\u3002\u5018\u82e5\u4f9d\u7136\u5f92\u52b3\u65e0\u529f\uff0c\u90a3\u5c31\u5c1d\u8bd5\u6240\u6709\u9009\u9879\u76f4\u5230\u597d\u7528\u4e3a\u6b62\u3002 Info \u4e8b\u5b9e\u4e0a\u6ca1\u6709\u4e00\u4e2a\u9a71\u52a8\u7684\u6700\u4f73\u9009\u62e9\uff0c\u6709\u4e9b\u9009\u9879\u5c31\u662f\u548c\u67d0\u4e9b\u7cfb\u7edf\u76f8\u8f85\u76f8\u6210\u3002\u4f46libUSB\u548cWinUSB\u4f3c\u4e4e\u4e5f\u7b97\u662f\u8fd9\u91cc\u7684\u6700\u4f73\u9009\u62e9\u4e86\u3002 \u5982\u679cbootloader\u5728\u8bbe\u5907\u5217\u8868\u4e2d\u6ca1\u6709\u663e\u793a\uff0c\u4f60\u53ef\u80fd\u8981\u4f7f\u80fd \"List all devices\"\u9009\u9879\u5728\u9009\u9879\u83dc\u5355\u4e2d Options \uff0c\u7136\u540e\u627e\u5230\u6709\u95ee\u9898\u7684bootloader\u8bbe\u5907\u3002(\u8bd1\u8005\u6ce8\uff1a\u5728win10\u4e2d\u53ef\u80fd\u4e3a \u67e5\u770b-\u663e\u793a\u9690\u85cf\u7684\u8bbe\u5907)","title":"DFU Bootloader\u7684\u672a\u77e5\u8bbe\u5907"},{"location":"faq_build/#usb-vid-pid","text":"\u4f60\u53ef\u4ee5\u5728\u7f16\u8f91 config.h \u65f6\u4f7f\u7528\u4efb\u4f55\u4f60\u60f3\u7528\u7684ID\u503c\u3002\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528\u4efb\u4f55\u53ef\u80fd\u672a\u4f7f\u7528\u7684ID\u90fd\u6ca1\u6709\u95ee\u9898\uff0c\u9664\u4e86\u6709\u6781\u4f4e\u7684\u4e0e\u5176\u4ed6\u4ea7\u54c1\u53d1\u751f\u51b2\u7a81\u7684\u53ef\u80fd\u6027\u3002 \u5927\u591a\u6570QMK\u4e3b\u677f\u4f7f\u7528 0xFEED \u4f5c\u4e3avendor ID\u3002\u60a8\u5e94\u8be5\u67e5\u770b\u5176\u4ed6\u952e\u76d8\uff0c\u4ee5\u786e\u4fdd\u9009\u62e9\u4e86\u552f\u4e00\u7684Product ID\u3002 \u4e5f\u8981\u770b\u770b\u8fd9\u4e2a\u3002 https://github.com/tmk/tmk_keyboard/issues/150 \u4e00\u4e5f\u53ef\u4ee5\u5728\u4e0b\u65b9\u94fe\u63a5\u8d2d\u4e70\u4e00\u4e2a\u552f\u4e00\u7684VID:PID\u3002\u4e0d\u8fc7\u4e2a\u4eba\u4f7f\u7528\u4f3c\u4e4e\u7528\u4e0d\u7740\u8fd9\u4e2a\u3002 - https://www.obdev.at/products/vusb/license.html - https://www.mcselec.com/index.php?page=shop.product_details&flypage=shop.flypage&product_id=92&option=com_phpshop&Itemid=1","title":"USB VID \u548c PID"},{"location":"faq_build/#avrbootloader_size","text":"\u6ce8\u610fTeensy2.0++ bootloader\u7684\u5927\u5c0f\u662f2048\u5b57\u8282\u3002\u6709\u4e9bMakefile\u6ce8\u91ca\u9519\u4e86\u3002 # Boot Section Size in *bytes* # Teensy halfKay 512 # Teensy++ halfKay 2048 # Atmel DFU loader 4096 (TMK Alt Controller) # LUFA bootloader 4096 # USBaspLoader 2048 OPT_DEFS += -DBOOTLOADER_SIZE=2048","title":"AVR\u7684BOOTLOADER_SIZE"},{"location":"faq_build/#macos-avr-gcc-internal-compiler-error-abort-trap-6-program-cc1","text":"\u8fd9\u662fbrew\u66f4\u65b0\u7684\u95ee\u9898\uff0c\u5bfc\u81f4AVR GCC\u4f9d\u8d56\u7684\u7b26\u53f7\u94fe\u63a5\u88ab\u635f\u574f\u3002 \u89e3\u51b3\u65b9\u6848\u662f\u79fb\u9664\u5e76\u91cd\u65b0\u5b89\u88c5\u6240\u6709\u53d7\u5f71\u54cd\u7684\u6a21\u5757\u3002 brew rm avr-gcc brew rm dfu-programmer brew rm dfu-util brew rm gcc-arm-none-eabi brew rm avrdude brew install avr-gcc brew install dfu-programmer brew install dfu-util brew install gcc-arm-none-eabi brew install avrdude","title":"\u5728MacOS\u4e0a avr-gcc: internal compiler error: Abort trap: 6 (program cc1)"},{"location":"faq_build/#avr-gcc-81-lufa","text":"\u5982\u679c\u4f60\u628aavr-gcc\u5347\u7ea7\u52307\u4ee5\u4e0a\u4f60\u53ef\u80fd\u4f1a\u9047\u5230\u5173\u4e8eLUFA\u7684\u95ee\u9898\u3002\u6bd4\u5982: lib/lufa/LUFA/Drivers/USB/Class/Device/AudioClassDevice.h:380:5: error: 'const' attribute on function returning 'void' \u90a3\u4f60\u5c31\u9700\u8981\u5728brew\u4e2d\u628aavr-gcc\u56de\u9000\u52307\u3002 brew uninstall --force avr-gcc brew install avr-gcc@8 brew link --force avr-gcc@8","title":"avr-gcc 8.1 \u548c LUFA"},{"location":"faq_build/#-arm-rev6-planck-clueboard-60-hs60v2-etc-feb-2019","text":"\u7531\u4e8eEEPROM\u5728\u57fa\u4e8eARM\u7684\u82af\u7247\u4e0a\u7684\u5de5\u4f5c\u539f\u7406\uff0c\u4fdd\u5b58\u7684\u8bbe\u7f6e\u53ef\u80fd\u4e0d\u518d\u6709\u6548\u3002\u8fd9\u4f1a\u5f71\u54cd\u9ed8\u8ba4\u5c42\uff0c\u800c\u4e14 \u6216\u8bb8 \u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\uff0c\u4f1a\u4f7f\u952e\u76d8\u4e0d\u597d\u7528\uff0c\u6211\u4eec\u4ecd\u5728\u8c03\u67e5\u8fd9\u4e9b\u60c5\u51b5\u3002\u91cd\u7f6eEEPROM\u5c06\u89e3\u51b3\u6b64\u95ee\u9898\u3002 Planck rev6\u952e\u76d8\u91cd\u7f6eEEPROM \u662f\u7528\u4e8e\u5f3a\u5236\u91cd\u7f6eEEPROM\u7684\u3002\u5237\u5165\u8fd9\u4e2a\u6587\u4ef6\u540e\uff0c\u518d\u6b21\u5237\u5165\u6b63\u5e38\u56fa\u4ef6\uff0c\u8fd9\u4f1a\u5c06\u952e\u76d8\u6062\u590d\u5230_\u6b63\u5e38_\u5de5\u4f5c\u72b6\u6001\u3002 Preonic rev3\u952e\u76d8\u91cd\u7f6eEEPROM \u5982\u679c\u4ee5\u4efb\u4f55\u5f62\u5f0f\u542f\u7528\u4e86bootmagic\uff0c \u90a3\u4e48\u60a8\u8fd8\u9700\u8981(\u770b Bootmagic\u6587\u6863 \u4ee5\u53ca\u952e\u76d8\u4fe1\u606f\uff0c\u4ee5\u4e86\u89e3\u5982\u4f55\u6267\u884c\u6b64\u64cd\u4f5c\u7684\u8be6\u7ec6\u4fe1\u606f).","title":"\u6211\u5237\u65b0\u4e86\u6211\u7684\u952e\u76d8\u4f46\u662f\u952e\u76d8\u4e0d\u5de5\u4f5c/\u6309\u952e\u6ca1\u6709\u6ce8\u518c - \u800c\u4e14\u8fd8\u662fARM\u7684 (rev6 planck, clueboard 60, hs60v2, etc...) (Feb 2019)"},{"location":"faq_debug/","text":"\u8c03\u8bd5\u7684\u5e38\u89c1\u95ee\u9898 \u00b6 \u672c\u7bc7\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4eba\u4eec\u5728\u952e\u76d8\u6545\u969c\u6392\u9664\u65f6\u7684\u5404\u79cd\u5e38\u89c1\u95ee\u9898\u3002 \u8c03\u8bd5\u63a7\u5236\u53f0 \u00b6 hid_listen \u65e0\u6cd5\u8bc6\u522b\u8bbe\u5907 \u00b6 \u5f53\u8bbe\u5907\u7684\u8c03\u8bd5\u63a7\u5236\u53f0\u672a\u5c31\u7eea\u65f6\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a Waiting for device:......... \u63d2\u5165\u8bbe\u5907\u540e\uff0c hid_listen \u627e\u5230\u8be5\u8bbe\u5907\uff0c\u60a8\u5c06\u6536\u5230\u4ee5\u4e0b\u6d88\u606f\uff1a Waiting for new device:......................... Listening: \u5982\u679c\u60a8\u65e0\u6cd5\u83b7\u5f97\u8fd9\u6761\u201cListening:\u201d\u6d88\u606f\uff0c\u8bf7\u5c1d\u8bd5\u5728[Makefile]\u4e2d\u4f7f\u7528 CONSOLE_ENABLE=yes \u5728Linux\u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6743\u9650\u3002 - \u4f7f\u7528 sudo hid_listen \u63a7\u5236\u53f0\u6ca1\u6709\u8fd4\u56de\u6d88\u606f \u00b6 \u68c0\u67e5: - hid_listen \u627e\u5230\u4e86\u4f60\u7684\u8bbe\u5907\u3002\u770b\u524d\u9762\u3002 - \u8f93\u5165 Magic +d\u6253\u5f00\u8c03\u8bd5\u3002\u8be6\u89c1 Magic Commands \u3002 - \u8bbe\u7f6e debug_enable=true \uff0c\u4e00\u822c\u5b58\u5728\u4e8e matrix.c \u7684 matrix_init() \u4e2d\u3002 - \u5c1d\u8bd5\u4f7f\u7528'print'\u51fd\u6570\u800c\u4e0d\u8981\u7528\u8c03\u8bd5\u8f93\u51fa\u3002\u8be6\u89c1 common/print.h \u3002 - \u65ad\u5f00\u5176\u4ed6\u6709\u63a7\u5236\u53f0\u529f\u80fd\u7684\u8bbe\u5907\u3002 \u8be6\u89c1 Issue #97 \u3002 Linux\u6216UNIX\u8fd9\u6837\u7684\u7cfb\u7edf\u5982\u4f55\u8bf7\u6c42\u8d85\u7ea7\u7528\u6237\u6743\u9650 \u00b6 \u7528'sudo'\u6765\u6267\u884c hid_listen \u5c31\u6709\u6743\u9650\u4e86\u3002 $ sudo hid_listen \u6216\u8005\u628a\u4e00\u4e2a\u6587\u4ef6\u653e\u5230\u89c4\u5219\u6587\u4ef6\u5939\u6765\u4e3aTMK\u8bbe\u5907\u6dfb\u52a0 udev\u89c4\u5219 \uff0c\u4e0d\u540c\u7cfb\u7edf\u7684\u76ee\u5f55\u53ef\u80fd\u6709\u6240\u4e0d\u540c\u3002 \u6587\u4ef6: /etc/udev/rules.d/52-tmk-keyboard.rules(\u5728Ubuntu\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b) # tmk keyboard products https://github.com/tmk/tmk_keyboard SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"feed\", MODE:=\"0666\" \u5176\u4ed6 \u00b6 \u5b89\u5168\u6ce8\u610f\u4e8b\u9879 \u00b6 \u4f60\u5e94\u8be5\u4e0d\u60f3\u8981\u628a\u4f60\u7684\u952e\u76d8\u53d8\u6210\"\u7816\u5934\"\u5427\uff0c\u5c31\u662f\u53d8\u6210\u6ca1\u6cd5\u91cd\u5199\u56fa\u4ef6\u7684\u90a3\u79cd\u3002 \u4e0b\u9762\u8bb2\u89e3\u4e00\u4e9b\u53c2\u6570\u6765\u544a\u8bc9\u4f60\u4ec0\u4e48\u98ce\u9669\u5f88\u5927\uff08\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u5927\uff09\u3002 \u5047\u5982\u4f60\u952e\u76d8\u8868\u9762\u6ca1\u6709\u8bbe\u8ba1\u91cd\u7f6e\u952e\"RESET\", \u90a3\u4f60\u8981\u8fdb\u5165bootloader\u7684\u8bdd\u5c31\u8981\u6309PCB\u4e0a\u7684RESET\u4e86\u3002 \u6309PCB\u4e0a\u7684RESET\u8981\u62e7\u5f00\u952e\u76d8\u5e95\u90e8\u3002 \u5982\u679c tmk_core / common \u91cc\u9762\u7684\u6587\u4ef6\u4e22\u5931\u952e\u76d8\u53ef\u80fd\u5931\u7075\u3002 .hex\u592a\u5927\u53ef\u80fd\u4e0d\u592a\u597d; make dfu \u4f1a\u5220\u9664\u5757\uff0c\u68c0\u9a8c\u5927\u5c0f\uff08\u54a6?\u597d\u50cf\u53cd\u4e86...\uff09\u3002 \u4e00\u4f46\u51fa\u9519\uff0c\u5237\u65b0\u952e\u76d8\u5931\u8d25\u7684\u8bdd\u5c31\u56f0\u5728DFU\u51fa\u4e0d\u53bb\u4e86\u3002 \u6240\u4ee5, \u8981\u77e5\u9053\u5927\u5c0f\u9650\u5236\u3002 Planck\u952e\u76d8\u4e0a.hex\u6587\u4ef6\u6700\u5927\u5927\u5c0f\u662f is 7000h (\u5341\u8fdb\u5236\u662f28672) Linking: .build/planck_rev4_cbbrowne.elf [OK] Creating load file for Flash: .build/planck_rev4_cbbrowne.hex [OK] Size after: text data bss dec hex filename 0 22396 0 22396 577c planck_rev4_cbbrowne.hex \u4e0a\u9762\u90a3\u4e2a\u6587\u4ef6\u5927\u5c0f\u662f 22396/577ch\uff0c\u6bd428672/7000h\u5c0f \u5f53\u4f60\u6709\u4e00\u4e2a\u5408\u9002\u7684.hex\u6587\u4ef6\u65f6\uff0c\u4f60\u5c31\u8981\u91cd\u8bd5\u52a0\u8f7d\u90a3\u4e2a\u4e86 \u60a8\u5728\u952e\u76d8Makefile\u4e2d\u7684\u67d0\u4e9b\u9009\u9879\u53ef\u80fd\u6d88\u8017\u989d\u5916\u5185\u5b58\uff1b\u6ce8\u610f\u4ee5\u4e0b\u8fd9\u51e0\u4e2a BOOTMAGIC_ENABLE, MOUSEKEY_ENABLE, EXTRAKEY_ENABLE, CONSOLE_ENABLE, API_SYSEX_ENABLE DFU \u5de5\u5177/\u4e0d/\u53ef\u4ee5\u5199\u5165bootloader (unless you throw in extra fruit salad of options), \u6240\u4ee5\u8fd8\u662f\u6709\u70b9\u5371\u9669\u7684 EEPROM\u5927\u6982\u6709100000\u6b21\u5faa\u73af\u5bff\u547d\u3002\u4e0d\u8981\u603b\u662f\u9891\u7e41\u91cd\u5199\u56fa\u4ef6\uff1bEEPROM\u4f1a\u73a9\u574f\u7684\u3002 \u5168\u952e\u65e0\u51b2\u4e0d\u597d\u7528 \u00b6 \u9996\u5148\u4f60\u8981\u5728 Makefile \u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\u56fa\u4ef6 NKRO_ENABLE \u3002 \u5168\u952e\u65e0\u51b2\u8fd8\u4e0d\u597d\u7528\u7684\u8bdd\u8bd5\u7740\u7528 Magic N \u547d\u4ee4(\u9ed8\u8ba4\u662f LShift+RShift+N )\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5728 \u5168\u952e\u65e0\u51b2 \u548c \u516d\u952e\u65e0\u51b2 \u4e4b\u95f4\u4e34\u65f6\u5207\u6362\u3002\u6709\u4e9b\u60c5\u51b5 \u5168\u952e\u65e0\u51b2 \u4e0d\u597d\u7528\u4f60\u5c31\u9700\u8981\u4f7f\u7528 \u516d\u952e\u65e0\u51b2 \u6a21\u5f0f\uff0c\u5c24\u5176\u662f\u5728BIOS\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u56fa\u4ef6\u4f7f\u7528 BOOTMAGIC_ENABLE \u7f16\u8bd1\u7684\u4f60\u8981\u7528 BootMagic N \u547d\u4ee4(\u9ed8\u8ba4 Space+N )\u6253\u5f00\u5f00\u5173\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u4fdd\u5b58\u5728EEPROM\u4e2d\u5e76\u4fdd\u5b58\u5728\u7535\u6e90\u5faa\u73af\u4e2d\u3002 https://github.com/tmk/tmk_keyboard#boot-magic-configuration---virtual-dip-switch \u6307\u70b9\u6746\u9700\u8981\u590d\u4f4d\u7535\u8def(PS/2 \u9f20\u6807\u652f\u6301) \u00b6 \u5982\u679c\u6ca1\u6709\u590d\u4f4d\u7535\u8def\uff0c\u7531\u4e8e\u786c\u4ef6\u521d\u59cb\u5316\u4e0d\u6b63\u786e\uff0c\u60a8\u5c06\u5f97\u5230\u4e0d\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u67e5\u770bTPM754\u590d\u4f4d\u7535\u8def\u3002 https://geekhack.org/index.php?topic=50176.msg1127447#msg1127447 https://www.mikrocontroller.net/attachment/52583/tpm754.pdf \u77e9\u9635\u4e0d\u53ef\u8bfb16\u4ee5\u4e0a\u7684\u5217 \u00b6 \u5f53\u5217\u8d85\u8fc716\u65f6[matrix.h]\u7684 read_cols() \u4e2d\uff0c\u7528 1UL<<16 \u800c\u4e0d\u8981\u7528 1<<16 \u3002 \u5728C\u8bed\u8a00\u4e2d 1 \u662f\u4e00\u4e2a[int] \u7c7b\u578b\u7684[16 bit]\u503c\uff0c\u5728AVR\u4e2d\u4f60\u4e0d\u80fd\u5de6\u79fb\u5927\u4e8e15\u6b21\u3002\u5982\u679c\u4f60\u4f7f\u7528 1<<16 \u7684\u8bdd\u4f1a\u5f97\u5230\u610f\u5916\u7684\u96f6\u3002\u4f60\u8981\u7528 [unsigned long]\u7c7b\u578b\uff0c\u6bd4\u5982 1UL \u3002 https://deskthority.net/workshop-f7/rebuilding-and-redesigning-a-classic-thinkpad-keyboard-t6181-60.html#p146279 \u7279\u6b8a\u989d\u5916\u952e\u4e0d\u8d77\u4f5c\u7528(\u7cfb\u7edf\uff0c\u97f3\u9891\u63a7\u5236\u952e) \u00b6 \u4f60\u8981\u5728 rules.mk \u5b9a\u4e49 EXTRAKEY_ENABLE \u5728QMK\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 EXTRAKEY_ENABLE = yes # \u97f3\u9891\u63a7\u5236\u548c\u7cfb\u7edf\u63a7\u5236 \u7761\u7720\u5524\u9192\u4e0d\u597d\u7528 \u00b6 \u5728Windows\u67e5\u770b\u8bbe\u5907\u7ba1\u7406\u5668\u4e2d\u8be5\u952e\u76d8\u8bbe\u5907\u5c5e\u6027\u4e2d\u7535\u6e90\u7ba1\u7406\u9009\u9879\u5361\u4e2d\u7684 \u5141\u8bb8\u6b64\u8bbe\u5907\u5524\u9192\u8ba1\u7b97\u673a(O) \u662f\u5426\u52fe\u9009\u3002\u540c\u65f6\u770b\u4e00\u773cBIOS\u8bbe\u7f6e\u3002 \u5728\u4e3b\u673a\u7761\u7720\u65f6\u6309\u4e0b\u4efb\u4f55\u952e\u90fd\u53ef\u4ee5\u5524\u9192\u4e86\u3002 \u4f7f\u7528Arduino? \u00b6 \u6ce8\u610fArduino\u7684\u9488\u811a\u540d\u5b57\u548c\u4e3b\u63a7\u82af\u7247\u7684\u4e0d\u4e00\u6837\u3002 \u6bd4\u5982, Arduino\u7684 D0 \u5e76\u4e0d\u662f PD0 \u3002\u81ea\u5df1\u7528\u539f\u7406\u56fe\u634b\u4e00\u4e0b\u7535\u8def\u3002 https://arduino.cc/en/uploads/Main/arduino-leonardo-schematic_3b.pdf https://arduino.cc/en/uploads/Main/arduino-micro-schematic.pdf Arduino Leonardo\u548cmicro\u4f7f\u7528 ATMega32U4 \uff0c\u8be5\u82af\u7247TMK\u53ef\u7528\uff0c\u4f46Arduino\u7684bootloader\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002 USB 3 \u517c\u5bb9\u6027 \u00b6 \u636e\u4f20\u8bf4\u6709\u4e9b\u4eba\u7528USB3\u63a5\u53e3\u4f1a\u6709\u95ee\u9898\uff0c\u7528USB2\u7684\u8bd5\u8bd5\u3002 Mac \u517c\u5bb9\u6027 \u00b6 OS X 10.11 \u548c\u96c6\u7ebf\u5668 \u00b6 https://geekhack.org/index.php?topic=14290.msg1884034#msg1884034 \u5bf9\u4e8eBIOS (UEFI)/\u6062\u590d(\u7761\u7720\u548c\u5524\u9192)/\u91cd\u65b0\u542f\u52a8 \u6709\u95ee\u9898 \u00b6 \u6709\u4eba\u8bf4\u4ed6\u4eec\u7684\u952e\u76d8\u5728BIOS\u4e2d\uff0c\u6216\u8bb8\u662f\u6062\u590d(\u7761\u7720\u548c\u5524\u9192)\u540e\u4e0d\u5de5\u4f5c. \u622a\u6b62\u81f3\u76ee\u524d\uff0c\u5176\u6839\u672c\u539f\u56e0\u672a\u77e5\uff0c\u4e0d\u6392\u9664\u4e0e\u67d0\u4e9b\u6784\u5efa\u9009\u9879\u6709\u5173\u3002\u8bd5\u7740\u5728Makefile\u4e2d\u5931\u80fd CONSOLE_ENABLE , NKRO_ENABLE , SLEEP_LED_ENABLE \u8fd9\u6837\u7684\u9009\u9879\uff0c\u4e5f\u8bd5\u8bd5\u5176\u4ed6\u7684\u3002 https://github.com/tmk/tmk_keyboard/issues/266 https://geekhack.org/index.php?topic=41989.msg1967778#msg1967778","title":"\u8c03\u8bd5/\u6545\u969c\u6392\u9664"},{"location":"faq_debug/#_1","text":"\u672c\u7bc7\u8be6\u7ec6\u4ecb\u7ecd\u4e86\u4eba\u4eec\u5728\u952e\u76d8\u6545\u969c\u6392\u9664\u65f6\u7684\u5404\u79cd\u5e38\u89c1\u95ee\u9898\u3002","title":"\u8c03\u8bd5\u7684\u5e38\u89c1\u95ee\u9898"},{"location":"faq_debug/#_2","text":"","title":"\u8c03\u8bd5\u63a7\u5236\u53f0"},{"location":"faq_debug/#hid_listen","text":"\u5f53\u8bbe\u5907\u7684\u8c03\u8bd5\u63a7\u5236\u53f0\u672a\u5c31\u7eea\u65f6\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u5185\u5bb9\uff1a Waiting for device:......... \u63d2\u5165\u8bbe\u5907\u540e\uff0c hid_listen \u627e\u5230\u8be5\u8bbe\u5907\uff0c\u60a8\u5c06\u6536\u5230\u4ee5\u4e0b\u6d88\u606f\uff1a Waiting for new device:......................... Listening: \u5982\u679c\u60a8\u65e0\u6cd5\u83b7\u5f97\u8fd9\u6761\u201cListening:\u201d\u6d88\u606f\uff0c\u8bf7\u5c1d\u8bd5\u5728[Makefile]\u4e2d\u4f7f\u7528 CONSOLE_ENABLE=yes \u5728Linux\u8fd9\u6837\u7684\u64cd\u4f5c\u7cfb\u7edf\u4e0a\uff0c\u4f60\u53ef\u80fd\u9700\u8981\u4e00\u4e9b\u6743\u9650\u3002 - \u4f7f\u7528 sudo hid_listen","title":"hid_listen \u65e0\u6cd5\u8bc6\u522b\u8bbe\u5907"},{"location":"faq_debug/#_3","text":"\u68c0\u67e5: - hid_listen \u627e\u5230\u4e86\u4f60\u7684\u8bbe\u5907\u3002\u770b\u524d\u9762\u3002 - \u8f93\u5165 Magic +d\u6253\u5f00\u8c03\u8bd5\u3002\u8be6\u89c1 Magic Commands \u3002 - \u8bbe\u7f6e debug_enable=true \uff0c\u4e00\u822c\u5b58\u5728\u4e8e matrix.c \u7684 matrix_init() \u4e2d\u3002 - \u5c1d\u8bd5\u4f7f\u7528'print'\u51fd\u6570\u800c\u4e0d\u8981\u7528\u8c03\u8bd5\u8f93\u51fa\u3002\u8be6\u89c1 common/print.h \u3002 - \u65ad\u5f00\u5176\u4ed6\u6709\u63a7\u5236\u53f0\u529f\u80fd\u7684\u8bbe\u5907\u3002 \u8be6\u89c1 Issue #97 \u3002","title":"\u63a7\u5236\u53f0\u6ca1\u6709\u8fd4\u56de\u6d88\u606f"},{"location":"faq_debug/#linuxunix","text":"\u7528'sudo'\u6765\u6267\u884c hid_listen \u5c31\u6709\u6743\u9650\u4e86\u3002 $ sudo hid_listen \u6216\u8005\u628a\u4e00\u4e2a\u6587\u4ef6\u653e\u5230\u89c4\u5219\u6587\u4ef6\u5939\u6765\u4e3aTMK\u8bbe\u5907\u6dfb\u52a0 udev\u89c4\u5219 \uff0c\u4e0d\u540c\u7cfb\u7edf\u7684\u76ee\u5f55\u53ef\u80fd\u6709\u6240\u4e0d\u540c\u3002 \u6587\u4ef6: /etc/udev/rules.d/52-tmk-keyboard.rules(\u5728Ubuntu\u7cfb\u7edf\u7684\u60c5\u51b5\u4e0b) # tmk keyboard products https://github.com/tmk/tmk_keyboard SUBSYSTEMS==\"usb\", ATTRS{idVendor}==\"feed\", MODE:=\"0666\"","title":"Linux\u6216UNIX\u8fd9\u6837\u7684\u7cfb\u7edf\u5982\u4f55\u8bf7\u6c42\u8d85\u7ea7\u7528\u6237\u6743\u9650"},{"location":"faq_debug/#_4","text":"","title":"\u5176\u4ed6"},{"location":"faq_debug/#_5","text":"\u4f60\u5e94\u8be5\u4e0d\u60f3\u8981\u628a\u4f60\u7684\u952e\u76d8\u53d8\u6210\"\u7816\u5934\"\u5427\uff0c\u5c31\u662f\u53d8\u6210\u6ca1\u6cd5\u91cd\u5199\u56fa\u4ef6\u7684\u90a3\u79cd\u3002 \u4e0b\u9762\u8bb2\u89e3\u4e00\u4e9b\u53c2\u6570\u6765\u544a\u8bc9\u4f60\u4ec0\u4e48\u98ce\u9669\u5f88\u5927\uff08\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u5927\uff09\u3002 \u5047\u5982\u4f60\u952e\u76d8\u8868\u9762\u6ca1\u6709\u8bbe\u8ba1\u91cd\u7f6e\u952e\"RESET\", \u90a3\u4f60\u8981\u8fdb\u5165bootloader\u7684\u8bdd\u5c31\u8981\u6309PCB\u4e0a\u7684RESET\u4e86\u3002 \u6309PCB\u4e0a\u7684RESET\u8981\u62e7\u5f00\u952e\u76d8\u5e95\u90e8\u3002 \u5982\u679c tmk_core / common \u91cc\u9762\u7684\u6587\u4ef6\u4e22\u5931\u952e\u76d8\u53ef\u80fd\u5931\u7075\u3002 .hex\u592a\u5927\u53ef\u80fd\u4e0d\u592a\u597d; make dfu \u4f1a\u5220\u9664\u5757\uff0c\u68c0\u9a8c\u5927\u5c0f\uff08\u54a6?\u597d\u50cf\u53cd\u4e86...\uff09\u3002 \u4e00\u4f46\u51fa\u9519\uff0c\u5237\u65b0\u952e\u76d8\u5931\u8d25\u7684\u8bdd\u5c31\u56f0\u5728DFU\u51fa\u4e0d\u53bb\u4e86\u3002 \u6240\u4ee5, \u8981\u77e5\u9053\u5927\u5c0f\u9650\u5236\u3002 Planck\u952e\u76d8\u4e0a.hex\u6587\u4ef6\u6700\u5927\u5927\u5c0f\u662f is 7000h (\u5341\u8fdb\u5236\u662f28672) Linking: .build/planck_rev4_cbbrowne.elf [OK] Creating load file for Flash: .build/planck_rev4_cbbrowne.hex [OK] Size after: text data bss dec hex filename 0 22396 0 22396 577c planck_rev4_cbbrowne.hex \u4e0a\u9762\u90a3\u4e2a\u6587\u4ef6\u5927\u5c0f\u662f 22396/577ch\uff0c\u6bd428672/7000h\u5c0f \u5f53\u4f60\u6709\u4e00\u4e2a\u5408\u9002\u7684.hex\u6587\u4ef6\u65f6\uff0c\u4f60\u5c31\u8981\u91cd\u8bd5\u52a0\u8f7d\u90a3\u4e2a\u4e86 \u60a8\u5728\u952e\u76d8Makefile\u4e2d\u7684\u67d0\u4e9b\u9009\u9879\u53ef\u80fd\u6d88\u8017\u989d\u5916\u5185\u5b58\uff1b\u6ce8\u610f\u4ee5\u4e0b\u8fd9\u51e0\u4e2a BOOTMAGIC_ENABLE, MOUSEKEY_ENABLE, EXTRAKEY_ENABLE, CONSOLE_ENABLE, API_SYSEX_ENABLE DFU \u5de5\u5177/\u4e0d/\u53ef\u4ee5\u5199\u5165bootloader (unless you throw in extra fruit salad of options), \u6240\u4ee5\u8fd8\u662f\u6709\u70b9\u5371\u9669\u7684 EEPROM\u5927\u6982\u6709100000\u6b21\u5faa\u73af\u5bff\u547d\u3002\u4e0d\u8981\u603b\u662f\u9891\u7e41\u91cd\u5199\u56fa\u4ef6\uff1bEEPROM\u4f1a\u73a9\u574f\u7684\u3002","title":"\u5b89\u5168\u6ce8\u610f\u4e8b\u9879"},{"location":"faq_debug/#_6","text":"\u9996\u5148\u4f60\u8981\u5728 Makefile \u7528\u5982\u4e0b\u547d\u4ee4\u7f16\u8bd1\u56fa\u4ef6 NKRO_ENABLE \u3002 \u5168\u952e\u65e0\u51b2\u8fd8\u4e0d\u597d\u7528\u7684\u8bdd\u8bd5\u7740\u7528 Magic N \u547d\u4ee4(\u9ed8\u8ba4\u662f LShift+RShift+N )\u3002\u8fd9\u4e2a\u547d\u4ee4\u4f1a\u5728 \u5168\u952e\u65e0\u51b2 \u548c \u516d\u952e\u65e0\u51b2 \u4e4b\u95f4\u4e34\u65f6\u5207\u6362\u3002\u6709\u4e9b\u60c5\u51b5 \u5168\u952e\u65e0\u51b2 \u4e0d\u597d\u7528\u4f60\u5c31\u9700\u8981\u4f7f\u7528 \u516d\u952e\u65e0\u51b2 \u6a21\u5f0f\uff0c\u5c24\u5176\u662f\u5728BIOS\u4e2d\u3002 \u5982\u679c\u4f60\u7684\u56fa\u4ef6\u4f7f\u7528 BOOTMAGIC_ENABLE \u7f16\u8bd1\u7684\u4f60\u8981\u7528 BootMagic N \u547d\u4ee4(\u9ed8\u8ba4 Space+N )\u6253\u5f00\u5f00\u5173\u3002\u8fd9\u4e2a\u8bbe\u7f6e\u4fdd\u5b58\u5728EEPROM\u4e2d\u5e76\u4fdd\u5b58\u5728\u7535\u6e90\u5faa\u73af\u4e2d\u3002 https://github.com/tmk/tmk_keyboard#boot-magic-configuration---virtual-dip-switch","title":"\u5168\u952e\u65e0\u51b2\u4e0d\u597d\u7528"},{"location":"faq_debug/#ps2","text":"\u5982\u679c\u6ca1\u6709\u590d\u4f4d\u7535\u8def\uff0c\u7531\u4e8e\u786c\u4ef6\u521d\u59cb\u5316\u4e0d\u6b63\u786e\uff0c\u60a8\u5c06\u5f97\u5230\u4e0d\u4e00\u81f4\u7684\u7ed3\u679c\u3002\u67e5\u770bTPM754\u590d\u4f4d\u7535\u8def\u3002 https://geekhack.org/index.php?topic=50176.msg1127447#msg1127447 https://www.mikrocontroller.net/attachment/52583/tpm754.pdf","title":"\u6307\u70b9\u6746\u9700\u8981\u590d\u4f4d\u7535\u8def(PS/2 \u9f20\u6807\u652f\u6301)"},{"location":"faq_debug/#16","text":"\u5f53\u5217\u8d85\u8fc716\u65f6[matrix.h]\u7684 read_cols() \u4e2d\uff0c\u7528 1UL<<16 \u800c\u4e0d\u8981\u7528 1<<16 \u3002 \u5728C\u8bed\u8a00\u4e2d 1 \u662f\u4e00\u4e2a[int] \u7c7b\u578b\u7684[16 bit]\u503c\uff0c\u5728AVR\u4e2d\u4f60\u4e0d\u80fd\u5de6\u79fb\u5927\u4e8e15\u6b21\u3002\u5982\u679c\u4f60\u4f7f\u7528 1<<16 \u7684\u8bdd\u4f1a\u5f97\u5230\u610f\u5916\u7684\u96f6\u3002\u4f60\u8981\u7528 [unsigned long]\u7c7b\u578b\uff0c\u6bd4\u5982 1UL \u3002 https://deskthority.net/workshop-f7/rebuilding-and-redesigning-a-classic-thinkpad-keyboard-t6181-60.html#p146279","title":"\u77e9\u9635\u4e0d\u53ef\u8bfb16\u4ee5\u4e0a\u7684\u5217"},{"location":"faq_debug/#_7","text":"\u4f60\u8981\u5728 rules.mk \u5b9a\u4e49 EXTRAKEY_ENABLE \u5728QMK\u4e2d\u4f7f\u7528\u5b83\u4eec\u3002 EXTRAKEY_ENABLE = yes # \u97f3\u9891\u63a7\u5236\u548c\u7cfb\u7edf\u63a7\u5236","title":"\u7279\u6b8a\u989d\u5916\u952e\u4e0d\u8d77\u4f5c\u7528(\u7cfb\u7edf\uff0c\u97f3\u9891\u63a7\u5236\u952e)"},{"location":"faq_debug/#_8","text":"\u5728Windows\u67e5\u770b\u8bbe\u5907\u7ba1\u7406\u5668\u4e2d\u8be5\u952e\u76d8\u8bbe\u5907\u5c5e\u6027\u4e2d\u7535\u6e90\u7ba1\u7406\u9009\u9879\u5361\u4e2d\u7684 \u5141\u8bb8\u6b64\u8bbe\u5907\u5524\u9192\u8ba1\u7b97\u673a(O) \u662f\u5426\u52fe\u9009\u3002\u540c\u65f6\u770b\u4e00\u773cBIOS\u8bbe\u7f6e\u3002 \u5728\u4e3b\u673a\u7761\u7720\u65f6\u6309\u4e0b\u4efb\u4f55\u952e\u90fd\u53ef\u4ee5\u5524\u9192\u4e86\u3002","title":"\u7761\u7720\u5524\u9192\u4e0d\u597d\u7528"},{"location":"faq_debug/#arduino","text":"\u6ce8\u610fArduino\u7684\u9488\u811a\u540d\u5b57\u548c\u4e3b\u63a7\u82af\u7247\u7684\u4e0d\u4e00\u6837\u3002 \u6bd4\u5982, Arduino\u7684 D0 \u5e76\u4e0d\u662f PD0 \u3002\u81ea\u5df1\u7528\u539f\u7406\u56fe\u634b\u4e00\u4e0b\u7535\u8def\u3002 https://arduino.cc/en/uploads/Main/arduino-leonardo-schematic_3b.pdf https://arduino.cc/en/uploads/Main/arduino-micro-schematic.pdf Arduino Leonardo\u548cmicro\u4f7f\u7528 ATMega32U4 \uff0c\u8be5\u82af\u7247TMK\u53ef\u7528\uff0c\u4f46Arduino\u7684bootloader\u4f1a\u5bfc\u81f4\u95ee\u9898\u3002","title":"\u4f7f\u7528Arduino?"},{"location":"faq_debug/#usb-3","text":"\u636e\u4f20\u8bf4\u6709\u4e9b\u4eba\u7528USB3\u63a5\u53e3\u4f1a\u6709\u95ee\u9898\uff0c\u7528USB2\u7684\u8bd5\u8bd5\u3002","title":"USB 3 \u517c\u5bb9\u6027"},{"location":"faq_debug/#mac","text":"","title":"Mac \u517c\u5bb9\u6027"},{"location":"faq_debug/#os-x-1011","text":"https://geekhack.org/index.php?topic=14290.msg1884034#msg1884034","title":"OS X 10.11 \u548c\u96c6\u7ebf\u5668"},{"location":"faq_debug/#bios-uefi","text":"\u6709\u4eba\u8bf4\u4ed6\u4eec\u7684\u952e\u76d8\u5728BIOS\u4e2d\uff0c\u6216\u8bb8\u662f\u6062\u590d(\u7761\u7720\u548c\u5524\u9192)\u540e\u4e0d\u5de5\u4f5c. \u622a\u6b62\u81f3\u76ee\u524d\uff0c\u5176\u6839\u672c\u539f\u56e0\u672a\u77e5\uff0c\u4e0d\u6392\u9664\u4e0e\u67d0\u4e9b\u6784\u5efa\u9009\u9879\u6709\u5173\u3002\u8bd5\u7740\u5728Makefile\u4e2d\u5931\u80fd CONSOLE_ENABLE , NKRO_ENABLE , SLEEP_LED_ENABLE \u8fd9\u6837\u7684\u9009\u9879\uff0c\u4e5f\u8bd5\u8bd5\u5176\u4ed6\u7684\u3002 https://github.com/tmk/tmk_keyboard/issues/266 https://geekhack.org/index.php?topic=41989.msg1967778#msg1967778","title":"\u5bf9\u4e8eBIOS (UEFI)/\u6062\u590d(\u7761\u7720\u548c\u5524\u9192)/\u91cd\u65b0\u542f\u52a8 \u6709\u95ee\u9898"},{"location":"faq_general/","text":"Frequently Asked Questions \u00b6 What is QMK? \u00b6 QMK , short for Quantum Mechanical Keyboard, is a group of people building tools for custom keyboards. We started with the QMK firmware , a heavily modified fork of TMK . I don't know where to start! \u00b6 If this is the case, then you should start with our Newbs Guide . There is a lot of great info there, and that should cover everything you need to get started. If that's an issue, hop onto the QMK Configurator , as that will handle a majority of what you need there. How can I flash the firmware I built? \u00b6 First, head to the Compiling/Flashing FAQ Page . There is a good deal of info there, and you'll find a bunch of solutions to common issues there. What if I have an issue that isn't covered here? \u00b6 Okay, that's fine. Then please check the open issues in our GitHub to see if somebody is experiencing the same thing (make sure it's not just similar, but actually the same). If you can't find anything, then please open a new issue ! What if I found a bug? \u00b6 Then please open an issue , and if you know how to fix it, open up a Pull Request on GitHub with the fix. But git and GitHub are intimidating! \u00b6 Don't worry, we have some pretty nice Guidelines on how to start using git and GitHub to make things easier to develop. Additionally, you can find additional git and GitHub related links here . I have a Keyboard that I want to add support for \u00b6 Awesome! Open up a Pull Request for it. We'll review the code, and merge it! What if I want to brand it with QMK ? \u00b6 That's amazing! We would love to assist you with that! In fact, we have a whole page dedicated to adding QMK Branding to your page and keyboard. This covers pretty much everything you need (knowledge and images) to officially support QMK. If you have any questions about this, open an issue or head to Discord . What Differences Are There Between QMK and TMK? \u00b6 TMK was originally designed and implemented by Jun Wako . QMK started as Jack Humbert 's fork of TMK for the Planck. After a while Jack's fork had diverged quite a bit from TMK, and in 2015 Jack decided to rename his fork to QMK. From a technical standpoint QMK builds upon TMK by adding several new features. Most notably QMK has expanded the number of available keycodes and uses these to implement advanced features like S() , LCTL() , and MO() . You can see a complete list of these keycodes in Keycodes . From a project and community management standpoint TMK maintains all the officially supported keyboards by himself, with a bit of community support. Separate community maintained forks exist or can be created for other keyboards. Only a few keymaps are provided by default, so users typically don't share keymaps with each other. QMK encourages sharing of both keyboards and keymaps through a centrally managed repository, accepting all pull requests that follow the quality standards. These are mostly community maintained, but the QMK team also helps when necessary. Both approaches have their merits and their drawbacks, and code flows freely between TMK and QMK when it makes sense.","title":"\u4e00\u822c\u95ee\u9898"},{"location":"faq_general/#frequently-asked-questions","text":"","title":"Frequently Asked Questions"},{"location":"faq_general/#what-is-qmk","text":"QMK , short for Quantum Mechanical Keyboard, is a group of people building tools for custom keyboards. We started with the QMK firmware , a heavily modified fork of TMK .","title":"What is QMK?"},{"location":"faq_general/#i-dont-know-where-to-start","text":"If this is the case, then you should start with our Newbs Guide . There is a lot of great info there, and that should cover everything you need to get started. If that's an issue, hop onto the QMK Configurator , as that will handle a majority of what you need there.","title":"I don't know where to start!"},{"location":"faq_general/#how-can-i-flash-the-firmware-i-built","text":"First, head to the Compiling/Flashing FAQ Page . There is a good deal of info there, and you'll find a bunch of solutions to common issues there.","title":"How can I flash the firmware I built?"},{"location":"faq_general/#what-if-i-have-an-issue-that-isnt-covered-here","text":"Okay, that's fine. Then please check the open issues in our GitHub to see if somebody is experiencing the same thing (make sure it's not just similar, but actually the same). If you can't find anything, then please open a new issue !","title":"What if I have an issue that isn't covered here?"},{"location":"faq_general/#what-if-i-found-a-bug","text":"Then please open an issue , and if you know how to fix it, open up a Pull Request on GitHub with the fix.","title":"What if I found a bug?"},{"location":"faq_general/#but-git-and-github-are-intimidating","text":"Don't worry, we have some pretty nice Guidelines on how to start using git and GitHub to make things easier to develop. Additionally, you can find additional git and GitHub related links here .","title":"But git and GitHub are intimidating!"},{"location":"faq_general/#i-have-a-keyboard-that-i-want-to-add-support-for","text":"Awesome! Open up a Pull Request for it. We'll review the code, and merge it!","title":"I have a Keyboard that I want to add support for"},{"location":"faq_general/#what-if-i-want-to-brand-it-with-qmk","text":"That's amazing! We would love to assist you with that! In fact, we have a whole page dedicated to adding QMK Branding to your page and keyboard. This covers pretty much everything you need (knowledge and images) to officially support QMK. If you have any questions about this, open an issue or head to Discord .","title":"What if I want to brand it with QMK?"},{"location":"faq_general/#what-differences-are-there-between-qmk-and-tmk","text":"TMK was originally designed and implemented by Jun Wako . QMK started as Jack Humbert 's fork of TMK for the Planck. After a while Jack's fork had diverged quite a bit from TMK, and in 2015 Jack decided to rename his fork to QMK. From a technical standpoint QMK builds upon TMK by adding several new features. Most notably QMK has expanded the number of available keycodes and uses these to implement advanced features like S() , LCTL() , and MO() . You can see a complete list of these keycodes in Keycodes . From a project and community management standpoint TMK maintains all the officially supported keyboards by himself, with a bit of community support. Separate community maintained forks exist or can be created for other keyboards. Only a few keymaps are provided by default, so users typically don't share keymaps with each other. QMK encourages sharing of both keyboards and keymaps through a centrally managed repository, accepting all pull requests that follow the quality standards. These are mostly community maintained, but the QMK team also helps when necessary. Both approaches have their merits and their drawbacks, and code flows freely between TMK and QMK when it makes sense.","title":"What Differences Are There Between QMK and TMK?"},{"location":"faq_keymap/","text":"\u5e03\u5c40\u5e38\u89c1\u95ee\u9898 \u00b6 \u672c\u9875\u672c\u9875\u5305\u542b\u4eba\u4eec\u7ecf\u5e38\u9047\u5230\u7684\u5173\u4e8e\u5e03\u5c40\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u89c9\u5f97\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u5148\u770b \u5e03\u5c40\u6982\u89c8 \u3002 \u6211\u80fd\u7528\u4ec0\u4e48\u952e\u7801? \u00b6 \u770b \u952e\u7801 \u4f60\u53ef\u4ee5\u627e\u5230\u4f60\u80fd\u7528\u7684\u952e\u7801\u7d22\u5f15\u3002\u53ef\u4ee5\u7684\u8bdd\u8fd9\u4e9b\u94fe\u63a5\u53ef\u4ee5\u8fde\u63a5\u5230\u66f4\u5e7f\u6cdb\u7684\u6587\u6863\u3002 \u952e\u7801\u5b9e\u9645\u4e0a\u5b9a\u4e49\u5728 common/keycode.h . \u9ed8\u8ba4\u7684\u952e\u7801\u4ec0\u4e48\u6837? \u00b6 \u4e16\u754c\u4e0a\u6709\u4e09\u79cd\u6807\u51c6\u952e\u76d8\u8bbe\u8ba1\uff0c\u5206\u522b\u662f\uff1aANSI, ISO, and JIS. \u4e3b\u8981\u662f\u5317\u7f8e\u7528ANSI(\u8bd1\u8005\u6ce8\uff1a\u4e2d\u56fd\u5f88\u591a\u952e\u76d8\u4f7f\u7528\u8fd9\u4e2a), \u6b27\u6d32\u548c\u975e\u6d32\u4e3b\u8981\u4f7f\u7528ISO\uff0c\u65e5\u672c\u4f7f\u7528JIS\u3002\u672a\u63d0\u53ca\u7684\u533a\u57df\u901a\u5e38\u4f7f\u7528ANSI\u6216ISO\u3002\u4e0e\u8fd9\u4e9b\u8bbe\u8ba1\u5bf9\u5e94\u7684\u952e\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a \u6211\u6709\u4e00\u4e9b\u952e\u53d8\u6210\u4e86\u5176\u4ed6\u529f\u80fd\u6216\u8005\u4e0d\u5de5\u4f5c\u4e86 \u00b6 QMK\u6709\u4e24\u4e2a\u529f\u80fd\uff0cBootmagic\u548c\u547d\u4ee4\u884c\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u8fd0\u884c\u4e2d\u66f4\u6539\u952e\u76d8\u7684\u884c\u4e3a\u3002\u8be5\u529f\u80fd\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e, \u4ea4\u6362Ctrl/Caps\uff0c\u5173\u95ed\u754c\u9762\uff0c\u4ea4\u6362Alt/Gui\uff0c\u4ea4\u6362 Backspace/Backslash\uff0c\u7981\u7528\u6240\u6709\u952e\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u884c\u4e3a\u6539\u53d8\u3002 \u5feb\u901f\u89e3\u51b3\u65b9\u6cd5\u662f\u63d2\u5165\u952e\u76d8\u65f6\u6309\u4f4f Space + Backspace \u3002\u8be5\u64cd\u4f5c\u5c06\u91cd\u7f6e\u5df2\u4fdd\u5b58\u8bbe\u7f6e\uff0c\u8ba9\u8fd9\u4e9b\u952e\u56de\u590d\u521d\u59cb\u529f\u80fd\u3002\u8fd9\u62db\u4e0d\u597d\u7528\u7684\u8bdd\u53c2\u9605\u4e0b\u65b9\uff1a Bootmagic \u547d\u4ee4 \u83dc\u5355\u952e\u4e0d\u597d\u7528 \u00b6 \u73b0\u5728\u5927\u591a\u6570\u952e\u76d8 KC_RGUI \u548c KC_RCTL \u4e2d\u95f4\u7684\u952e\u5b50\u53eb\u505a KC_APP \u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u8fd9\u4e2a\u952e\u5b50\u53d1\u660e\u4e4b\u524d\u76f8\u5173\u6807\u51c6\u91cc\u5c31\u5df2\u7ecf\u6709\u952e\u53eb\u505a MENU(\u83dc\u5355) \u4e86\uff0c\u6240\u4ee5\u5fae\u8f6f\u53eb\u4ed6 APP(\u5e94\u7528) \u952e\u3002 KC_SYSREQ \u4e0d\u5de5\u4f5c \u00b6 \u4f7f\u7528\u6293\u5c4f\u7684\u952e\u7801( KC_PSCREEN \u6216 KC_PSCR )\u800c\u4e0d\u7528 KC_SYSREQ \u3002\u7ec4\u5408\u952e'Alt + Print Screen'\u4f1a\u88ab\u5f53\u4f5c'System request'\u3002 \u89c1 issue #168 \u548c * https://en.wikipedia.org/wiki/Magic_SysRq_key * https://en.wikipedia.org/wiki/System_request \u7535\u6e90\u952e\u4e0d\u5de5\u4f5c \u00b6 \u8fd9\u6709\u70b9\u8ba9\u4eba\u56f0\u60d1,QMK\u6709\u4e24\u4e2a\"Power(\u7535\u6e90)\"\u952e\u7801: KC_POWER \u5728\u952e\u76d8/\u5c0f\u952e\u76d8\u7684HID\u4f7f\u7528\u9875\u9762\u4e2d\uff0c KC_SYSTEM_POWER (\u6216\u8005\u53eb KC_PWR )\u5728\u7528\u6237\u9875\u3002 \u524d\u8005\u53ea\u80fd\u88abmacOS\u8bc6\u522b\uff0c\u4f46\u662f\u540e\u8005\uff0c\u5373 KC_SLEP \u548c KC_WAKE \u4e09\u5927\u4e3b\u8981\u64cd\u4f5c\u7cfb\u7edf\u5168\u90fd\u652f\u6301\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u8fd9\u4e24\u4e2a\u3002Windows\u4e0b\u8fd9\u4e9b\u952e\u7acb\u5373\u751f\u6548\uff0cmacOS\u8981\u957f\u6309\u76f4\u5230\u5f39\u51fa\u5bf9\u8bdd\u6846\u3002 \u81ea\u52a8\u5927\u5c0f\u5199\u9501\u5b9a \u00b6 \u53ef\u4ee5\u89e3\u51b3'the'\u95ee\u9898(\u6b63\u5e38\u5e94\u4e3aThe)\u3002\u6211\u7ecf\u5e38\u5728\u8f93\u5165'The'\u65f6\u4e0d\u614e\u8f93\u5165\u4e86'the'\u6216\u8005'THe'\u3002\u81ea\u52a8\u5927\u5c0f\u5199\u9501\u5b9a\u53ef\u4ee5\u4fee\u6b63\u6b64\u7c7b\u95ee\u9898\u3002\u8be6\u89c1\u4e0b\u65b9\u94fe\u63a5\u3002 https://github.com/tmk/tmk_keyboard/issues/67 \u4fee\u6539 \u952e/\u5c42 \u5361\u4f4f \u00b6 \u9664\u975e\u6b63\u786e\u914d\u7f6e\u5c42\u5207\u6362\uff0c\u5426\u5219\u4fee\u6539\u952e\u6216\u5c42\u53ef\u80fd\u4f1a\u5361\u4f4f\u3002 \u5bf9\u4e8e\u4fee\u6539\u952e\u548c\u56fe\u5c42\u64cd\u4f5c\uff0c\u5fc5\u987b\u628a KC_TRANS \u653e\u5230\u76ee\u6807\u5c42\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u7528\u4e8e\u6ce8\u9500\u4fee\u6539\u952e\u6216\u5728\u91ca\u653e\u4e8b\u4ef6\u65f6\u8fd4\u56de\u5230\u4e0a\u4e00\u5c42\u3002 * https://github.com/tmk/tmk_core/blob/master/doc/keymap.md#31-momentary-switching * https://geekhack.org/index.php?topic=57008.msg1492604#msg1492604 * https://github.com/tmk/tmk_keyboard/issues/248 \u673a\u68b0\u81ea\u9501\u5f00\u5173\u652f\u6301Mechanical Lock Switch Support \u00b6 \u672c\u529f\u80fd\u7528\u4e8e \u673a\u68b0\u81ea\u9501\u5f00\u5173 \u6bd4\u5982 this Alps one \u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411 config.h \u6dfb\u52a0\u4ee5\u4e0b\u5b8f\u6765\u4f7f\u80fd\u8be5\u529f\u80fd\uff1a #define LOCKING_SUPPORT_ENABLE #define LOCKING_RESYNC_ENABLE \u5728\u4f7f\u80fd\u8be5\u529f\u80fd\u540e\uff0c\u8981\u5728\u952e\u76d8\u4e2d\u4f7f\u7528 KC_LCAP , KC_LNUM \u548c KC_LSCR \u8fd9\u4e09\u4e2a\u952e\u7801\u3002 \u8fdc\u53e4\u673a\u68b0\u952e\u76d8\u5076\u5c14\u4f1a\u6709\u81ea\u9501\u673a\u68b0\u5f00\u5173\uff0c\u73b0\u5728\u51e0\u4e4e\u6ca1\u6709\u4e86\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u4e0d\u9700\u8981\u4f7f\u7528\u8be5\u529f\u80fd\uff0c\u4e14\u8981\u4f7f\u7528 KC_CAPS , KC_NLCK \u548c KC_SLCK \u8fd9\u4e09\u4e2a\u952e\u7801\u3002 \u8f93\u5165ASCII\u4e4b\u5916\u7684\u7279\u6b8a\u5b57\u7b26\u6bd4\u5982C\u00e9dille '\u00c7' \u00b6 \u8bf7\u89c1 Unicode \u529f\u80fd\u3002 macOS\u4e0a\u7684 Fn \u00b6 \u4e0d\u50cf\u5927\u591a\u6570FN\u952e\uff0c\u82f9\u679c\u4e0a\u90a3\u4e2a\u6709\u81ea\u5df1\u7684\u952e\u7801...\u5443\uff0c\u57fa\u672c\u4e0a\u7b97\u5427\u3002 \u4ed6\u53d6\u7f14\u4e86\u57fa\u672c6\u952e\u65e0\u51b2HID\u62a5\u544a\u7684\u7b2c\u516d\u4e2a\u952e\u7801 -- \u6240\u4ee5\u82f9\u679c\u952e\u76d8\u5176\u5b9e\u662f5\u952e\u65e0\u51b2\u7684\u3002 \u6280\u672f\u4e0a\u8bf4QMK\u53ef\u4ee5\u53d1\u9001\u8fd9\u4e2a\u952e\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u9700\u8981\u4fee\u6539\u62a5\u544a\u683c\u5f0f\u4ee5\u6dfb\u52a0FN\u952e\u7684\u72b6\u6001\u3002\u8fd9\u8fd8\u4e0d\u662f\u6700\u7cdf\u7cd5\u7684\uff0c\u4f60\u7684\u952e\u76d8\u7684VID\u548cPID\u548c\u771f\u7684\u82f9\u679c\u952e\u76d8\u4e0d\u4e00\u6837\u7684\u8bdd\u8fd8\u4e0d\u4f1a\u88ab\u8bc6\u522b\u3002 QMK\u5b98\u65b9\u652f\u6301\u8fd9\u4e2a\u4f1a\u88ab\u5f8b\u5e08\u51fd\u7684\uff0c\u6240\u4ee5\u5c31\u5f53\u6211\u6ca1\u8bf4\u8fc7\u3002 \u8be6\u89c1 issue#2179 \u3002 Mac OSX\u7684\u5a92\u4f53\u63a7\u5236\u952e \u00b6 KC_MNXT \u548c KC_MPRV \u5728Mac\u4e0a\u4e0d\u597d\u7528 \u00b6 \u4f7f\u7528 KC_MFFD ( KC_MEDIA_FAST_FORWARD ) \u548c KC_MRWD ( KC_MEDIA_REWIND )\uff0c\u4e0d\u8981\u7528 KC_MNXT \u548c KC_MPRV . \u8be6\u89c1 https://github.com/tmk/tmk_keyboard/issues/195 Mac OSX\u4e2d\u652f\u6301\u90a3\u4e9b\u952e? \u00b6 \u4f60\u53ef\u4ee5\u4ece\u6b64\u6e90\u7801\u4e2d\u83b7\u77e5\u5728OSX\u4e2d\u652f\u6301\u54ea\u4e9b\u952e\u7801 usb_2_adb_keymap \u9635\u5217\u6620\u5c04 \u952e\u76d8/\u5c0f\u952e\u76d8 \u9875\u7528\u4e8eADB\u626b\u63cf\u7801(OSX\u5185\u90e8\u952e\u7801). https://opensource.apple.com/source/IOHIDFamily/IOHIDFamily-606.1.7/IOHIDFamily/Cosmo_USB2ADB.c IOHIDConsumer::dispatchConsumerEvent \u4f1a\u5904\u7406\u7528\u6237\u9875\u9762\u7528\u6cd5\u3002 https://opensource.apple.com/source/IOHIDFamily/IOHIDFamily-606.1.7/IOHIDFamily/IOHIDConsumer.cpp Mac OSX\u4e2d\u7684JIS\u952e \u00b6 \u5c9b\u56fd\u7279\u522b\u952e\u6bd4\u5982 \u7121\u5909\u63db(Muhenkan) , \u5909\u63db(Henkan) , \u3072\u3089\u304c\u306a(hiragana) OSX\u662f\u4e0d\u662f\u522b\u7684\u3002You can use Seil to enable those keys, try following options. \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdNFER\u952e \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdXFER\u952e \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdKATAKAN\u952e https://pqrs.org/osx/karabiner/seil.html RN-42\u84dd\u7259\u6a21\u5757\u4e0eKarabiner\u4e0d\u80fd\u6709\u6548\u534f\u540c\u5de5\u4f5c \u00b6 Karabiner - Mac OSX\u7684\u6539\u952e\u8f6f\u4ef6 - \u9ed8\u8ba4RN-42\u6a21\u5757\u662f\u4e0d\u4f1a\u88ab\u54cd\u5e94\u7684\u3002\u60f3\u8981Karabiner\u548c\u4f60\u7684\u952e\u76d8\u534f\u540c\u5de5\u4f5c\u4f60\u8981\u4f7f\u80fd\u6b64\u9009\u9879\uff1a https://github.com/tekezo/Karabiner/issues/403#issuecomment-102559237 \u6b64\u95ee\u9898\u8be6\u89c1\u4e0b\u65b9\u94fe\u63a5\u3002 https://github.com/tmk/tmk_keyboard/issues/213 https://github.com/tekezo/Karabiner/issues/403 Esc \u548c ` \u53cc\u529f\u80fd\u952e \u00b6 \u8bf7\u89c1 Grave Escape \u529f\u80fd\u3002 Mac OSX\u7684\u5f39\u51fa\u952e \u00b6 KC_EJCT \u952e\u7801\u5728OSX\u53ef\u4ee5\u4f7f\u7528 https://github.com/tmk/tmk_keyboard/issues/250 \u4f3c\u4e4eWindows10\u4f1a\u5ffd\u7565\u8be5\u952e\u7801\uff0cLinux/Xorg\u53ef\u4ee5\u8bc6\u522b\u8be5\u952e\u7801\u4f46\u9ed8\u8ba4\u4e0d\u6620\u5c04\u3002 \u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5982\u4f55\u5728\u771f\u6b63\u7684\u82f9\u679c\u952e\u76d8\u6309\u51fa\u5f39\u51fa\u952e\u3002HHKB\u4f7f\u7528 F20 \u7528\u4e8e\u5f39\u51fa\u952e( Fn+f )\uff0c\u8be5\u529f\u80fd\u5728MAC\u6a21\u5f0f\u6709\u6548\u4f46\u4e0d\u4fdd\u8bc1\u4e0e\u82f9\u679c\u5f39\u51fa\u952e\u7801\u76f8\u7b26\u3002 action_util.c \u4e2d\u7684 weak_mods \u548c real_mods \u662f\u4ec0\u4e48 \u00b6 \u5f85\u6539\u5584 real_mods \u7528\u4e8e\u4fdd\u5b58\u5b9e\u9645(\u7269\u7406)\u4fee\u6539\u952e\u7684\u5b9e\u9645\u72b6\u6001\u3002 weak_mods \u7528\u4e8e\u4fdd\u5b58\u865a\u62df\u6216\u4e34\u65f6\u4fee\u6539\u952e\uff0c\u5b83\u5c06\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u4fee\u6539\u952e\u3002 \u4ee5\u6309\u4e0b\u5de6\u4fa7Shift\u952e\u7136\u540e\u8f93\u5165ACTION_MODS_KEY(LSHIFT, KC_A)\u4e3a\u4f8b\uff0c \u5728weak_mods\u65f6\uff0c * (1) \u6309\u4e0b\u4e0d\u62ac\u8d77\u5de6Shift: real_mods |= MOD_BIT(LSHIFT) * (2) \u6309 ACTION_MODS_KEY(LSHIFT, KC_A): weak_mods |= MOD_BIT(LSHIFT) * (3) \u62ac\u8d77 ACTION_MODS_KEY(LSHIFT, KC_A): weak_mods &= ~MOD_BIT(LSHIFT) real_mods \u8fd8\u662f\u4fdd\u6301\u5728\u4fee\u6539\u72b6\u6001\u3002 \u5728\u6ca1\u6709weak_mods\u65f6\uff0c * (1) \u6309\u4e0b\u4e0d\u62ac\u8d77\u5de6Shift: real_mods |= MOD_BIT(LSHIFT) * (2) \u6309 ACTION_MODS_KEY(LSHIFT, KC_A): real_mods |= MOD_BIT(LSHIFT) * (3) \u62ac\u8d77 ACTION_MODS_KEY(LSHIFT, KC_A): real_mods &= ~MOD_BIT(LSHIFT) \u6b64\u65f6real_mods\u5931\u53bb\u2018\u5b9e\u9645\u5de6Shift\u2019\u7684\u72b6\u6001\u3002 weak_mods\u548creal_mods\u73b0\u5df2\u5168\u90e8\u52a0\u5165\u952e\u76d8\u6570\u636e\u5305\u53d1\u9001\u8c6a\u534e\u5957\u9910\u3002 https://github.com/tmk/tmk_core/blob/master/common/action_util.c#L57","title":"\u5e03\u5c40"},{"location":"faq_keymap/#_1","text":"\u672c\u9875\u672c\u9875\u5305\u542b\u4eba\u4eec\u7ecf\u5e38\u9047\u5230\u7684\u5173\u4e8e\u5e03\u5c40\u7684\u95ee\u9898\u3002\u5982\u679c\u4f60\u89c9\u5f97\u6ca1\u4ec0\u4e48\u95ee\u9898\uff0c\u8bf7\u5148\u770b \u5e03\u5c40\u6982\u89c8 \u3002","title":"\u5e03\u5c40\u5e38\u89c1\u95ee\u9898"},{"location":"faq_keymap/#_2","text":"\u770b \u952e\u7801 \u4f60\u53ef\u4ee5\u627e\u5230\u4f60\u80fd\u7528\u7684\u952e\u7801\u7d22\u5f15\u3002\u53ef\u4ee5\u7684\u8bdd\u8fd9\u4e9b\u94fe\u63a5\u53ef\u4ee5\u8fde\u63a5\u5230\u66f4\u5e7f\u6cdb\u7684\u6587\u6863\u3002 \u952e\u7801\u5b9e\u9645\u4e0a\u5b9a\u4e49\u5728 common/keycode.h .","title":"\u6211\u80fd\u7528\u4ec0\u4e48\u952e\u7801?"},{"location":"faq_keymap/#_3","text":"\u4e16\u754c\u4e0a\u6709\u4e09\u79cd\u6807\u51c6\u952e\u76d8\u8bbe\u8ba1\uff0c\u5206\u522b\u662f\uff1aANSI, ISO, and JIS. \u4e3b\u8981\u662f\u5317\u7f8e\u7528ANSI(\u8bd1\u8005\u6ce8\uff1a\u4e2d\u56fd\u5f88\u591a\u952e\u76d8\u4f7f\u7528\u8fd9\u4e2a), \u6b27\u6d32\u548c\u975e\u6d32\u4e3b\u8981\u4f7f\u7528ISO\uff0c\u65e5\u672c\u4f7f\u7528JIS\u3002\u672a\u63d0\u53ca\u7684\u533a\u57df\u901a\u5e38\u4f7f\u7528ANSI\u6216ISO\u3002\u4e0e\u8fd9\u4e9b\u8bbe\u8ba1\u5bf9\u5e94\u7684\u952e\u4ee3\u7801\u5982\u4e0b\u6240\u793a\uff1a","title":"\u9ed8\u8ba4\u7684\u952e\u7801\u4ec0\u4e48\u6837?"},{"location":"faq_keymap/#_4","text":"QMK\u6709\u4e24\u4e2a\u529f\u80fd\uff0cBootmagic\u548c\u547d\u4ee4\u884c\uff0c\u5b83\u5141\u8bb8\u60a8\u5728\u8fd0\u884c\u4e2d\u66f4\u6539\u952e\u76d8\u7684\u884c\u4e3a\u3002\u8be5\u529f\u80fd\u5305\u62ec\u4f46\u4e0d\u4ec5\u9650\u4e8e, \u4ea4\u6362Ctrl/Caps\uff0c\u5173\u95ed\u754c\u9762\uff0c\u4ea4\u6362Alt/Gui\uff0c\u4ea4\u6362 Backspace/Backslash\uff0c\u7981\u7528\u6240\u6709\u952e\uff0c\u4ee5\u53ca\u5176\u4ed6\u7684\u884c\u4e3a\u6539\u53d8\u3002 \u5feb\u901f\u89e3\u51b3\u65b9\u6cd5\u662f\u63d2\u5165\u952e\u76d8\u65f6\u6309\u4f4f Space + Backspace \u3002\u8be5\u64cd\u4f5c\u5c06\u91cd\u7f6e\u5df2\u4fdd\u5b58\u8bbe\u7f6e\uff0c\u8ba9\u8fd9\u4e9b\u952e\u56de\u590d\u521d\u59cb\u529f\u80fd\u3002\u8fd9\u62db\u4e0d\u597d\u7528\u7684\u8bdd\u53c2\u9605\u4e0b\u65b9\uff1a Bootmagic \u547d\u4ee4","title":"\u6211\u6709\u4e00\u4e9b\u952e\u53d8\u6210\u4e86\u5176\u4ed6\u529f\u80fd\u6216\u8005\u4e0d\u5de5\u4f5c\u4e86"},{"location":"faq_keymap/#_5","text":"\u73b0\u5728\u5927\u591a\u6570\u952e\u76d8 KC_RGUI \u548c KC_RCTL \u4e2d\u95f4\u7684\u952e\u5b50\u53eb\u505a KC_APP \u3002\u8fd9\u662f\u56e0\u4e3a\u5728\u8fd9\u4e2a\u952e\u5b50\u53d1\u660e\u4e4b\u524d\u76f8\u5173\u6807\u51c6\u91cc\u5c31\u5df2\u7ecf\u6709\u952e\u53eb\u505a MENU(\u83dc\u5355) \u4e86\uff0c\u6240\u4ee5\u5fae\u8f6f\u53eb\u4ed6 APP(\u5e94\u7528) \u952e\u3002","title":"\u83dc\u5355\u952e\u4e0d\u597d\u7528"},{"location":"faq_keymap/#kc_sysreq","text":"\u4f7f\u7528\u6293\u5c4f\u7684\u952e\u7801( KC_PSCREEN \u6216 KC_PSCR )\u800c\u4e0d\u7528 KC_SYSREQ \u3002\u7ec4\u5408\u952e'Alt + Print Screen'\u4f1a\u88ab\u5f53\u4f5c'System request'\u3002 \u89c1 issue #168 \u548c * https://en.wikipedia.org/wiki/Magic_SysRq_key * https://en.wikipedia.org/wiki/System_request","title":"KC_SYSREQ \u4e0d\u5de5\u4f5c"},{"location":"faq_keymap/#_6","text":"\u8fd9\u6709\u70b9\u8ba9\u4eba\u56f0\u60d1,QMK\u6709\u4e24\u4e2a\"Power(\u7535\u6e90)\"\u952e\u7801: KC_POWER \u5728\u952e\u76d8/\u5c0f\u952e\u76d8\u7684HID\u4f7f\u7528\u9875\u9762\u4e2d\uff0c KC_SYSTEM_POWER (\u6216\u8005\u53eb KC_PWR )\u5728\u7528\u6237\u9875\u3002 \u524d\u8005\u53ea\u80fd\u88abmacOS\u8bc6\u522b\uff0c\u4f46\u662f\u540e\u8005\uff0c\u5373 KC_SLEP \u548c KC_WAKE \u4e09\u5927\u4e3b\u8981\u64cd\u4f5c\u7cfb\u7edf\u5168\u90fd\u652f\u6301\uff0c\u6240\u4ee5\u63a8\u8350\u4f7f\u7528\u8fd9\u4e24\u4e2a\u3002Windows\u4e0b\u8fd9\u4e9b\u952e\u7acb\u5373\u751f\u6548\uff0cmacOS\u8981\u957f\u6309\u76f4\u5230\u5f39\u51fa\u5bf9\u8bdd\u6846\u3002","title":"\u7535\u6e90\u952e\u4e0d\u5de5\u4f5c"},{"location":"faq_keymap/#_7","text":"\u53ef\u4ee5\u89e3\u51b3'the'\u95ee\u9898(\u6b63\u5e38\u5e94\u4e3aThe)\u3002\u6211\u7ecf\u5e38\u5728\u8f93\u5165'The'\u65f6\u4e0d\u614e\u8f93\u5165\u4e86'the'\u6216\u8005'THe'\u3002\u81ea\u52a8\u5927\u5c0f\u5199\u9501\u5b9a\u53ef\u4ee5\u4fee\u6b63\u6b64\u7c7b\u95ee\u9898\u3002\u8be6\u89c1\u4e0b\u65b9\u94fe\u63a5\u3002 https://github.com/tmk/tmk_keyboard/issues/67","title":"\u81ea\u52a8\u5927\u5c0f\u5199\u9501\u5b9a"},{"location":"faq_keymap/#_8","text":"\u9664\u975e\u6b63\u786e\u914d\u7f6e\u5c42\u5207\u6362\uff0c\u5426\u5219\u4fee\u6539\u952e\u6216\u5c42\u53ef\u80fd\u4f1a\u5361\u4f4f\u3002 \u5bf9\u4e8e\u4fee\u6539\u952e\u548c\u56fe\u5c42\u64cd\u4f5c\uff0c\u5fc5\u987b\u628a KC_TRANS \u653e\u5230\u76ee\u6807\u5c42\u7684\u76f8\u540c\u4f4d\u7f6e\uff0c\u7528\u4e8e\u6ce8\u9500\u4fee\u6539\u952e\u6216\u5728\u91ca\u653e\u4e8b\u4ef6\u65f6\u8fd4\u56de\u5230\u4e0a\u4e00\u5c42\u3002 * https://github.com/tmk/tmk_core/blob/master/doc/keymap.md#31-momentary-switching * https://geekhack.org/index.php?topic=57008.msg1492604#msg1492604 * https://github.com/tmk/tmk_keyboard/issues/248","title":"\u4fee\u6539 \u952e/\u5c42 \u5361\u4f4f"},{"location":"faq_keymap/#mechanical-lock-switch-support","text":"\u672c\u529f\u80fd\u7528\u4e8e \u673a\u68b0\u81ea\u9501\u5f00\u5173 \u6bd4\u5982 this Alps one \u3002\u4f60\u53ef\u4ee5\u901a\u8fc7\u5411 config.h \u6dfb\u52a0\u4ee5\u4e0b\u5b8f\u6765\u4f7f\u80fd\u8be5\u529f\u80fd\uff1a #define LOCKING_SUPPORT_ENABLE #define LOCKING_RESYNC_ENABLE \u5728\u4f7f\u80fd\u8be5\u529f\u80fd\u540e\uff0c\u8981\u5728\u952e\u76d8\u4e2d\u4f7f\u7528 KC_LCAP , KC_LNUM \u548c KC_LSCR \u8fd9\u4e09\u4e2a\u952e\u7801\u3002 \u8fdc\u53e4\u673a\u68b0\u952e\u76d8\u5076\u5c14\u4f1a\u6709\u81ea\u9501\u673a\u68b0\u5f00\u5173\uff0c\u73b0\u5728\u51e0\u4e4e\u6ca1\u6709\u4e86\u3002 \u5927\u591a\u6570\u60c5\u51b5\u4e0b\u4f60\u4e0d\u9700\u8981\u4f7f\u7528\u8be5\u529f\u80fd\uff0c\u4e14\u8981\u4f7f\u7528 KC_CAPS , KC_NLCK \u548c KC_SLCK \u8fd9\u4e09\u4e2a\u952e\u7801\u3002","title":"\u673a\u68b0\u81ea\u9501\u5f00\u5173\u652f\u6301Mechanical Lock Switch Support"},{"location":"faq_keymap/#asciicedille-c","text":"\u8bf7\u89c1 Unicode \u529f\u80fd\u3002","title":"\u8f93\u5165ASCII\u4e4b\u5916\u7684\u7279\u6b8a\u5b57\u7b26\u6bd4\u5982C\u00e9dille '\u00c7'"},{"location":"faq_keymap/#macosfn","text":"\u4e0d\u50cf\u5927\u591a\u6570FN\u952e\uff0c\u82f9\u679c\u4e0a\u90a3\u4e2a\u6709\u81ea\u5df1\u7684\u952e\u7801...\u5443\uff0c\u57fa\u672c\u4e0a\u7b97\u5427\u3002 \u4ed6\u53d6\u7f14\u4e86\u57fa\u672c6\u952e\u65e0\u51b2HID\u62a5\u544a\u7684\u7b2c\u516d\u4e2a\u952e\u7801 -- \u6240\u4ee5\u82f9\u679c\u952e\u76d8\u5176\u5b9e\u662f5\u952e\u65e0\u51b2\u7684\u3002 \u6280\u672f\u4e0a\u8bf4QMK\u53ef\u4ee5\u53d1\u9001\u8fd9\u4e2a\u952e\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u505a\u9700\u8981\u4fee\u6539\u62a5\u544a\u683c\u5f0f\u4ee5\u6dfb\u52a0FN\u952e\u7684\u72b6\u6001\u3002\u8fd9\u8fd8\u4e0d\u662f\u6700\u7cdf\u7cd5\u7684\uff0c\u4f60\u7684\u952e\u76d8\u7684VID\u548cPID\u548c\u771f\u7684\u82f9\u679c\u952e\u76d8\u4e0d\u4e00\u6837\u7684\u8bdd\u8fd8\u4e0d\u4f1a\u88ab\u8bc6\u522b\u3002 QMK\u5b98\u65b9\u652f\u6301\u8fd9\u4e2a\u4f1a\u88ab\u5f8b\u5e08\u51fd\u7684\uff0c\u6240\u4ee5\u5c31\u5f53\u6211\u6ca1\u8bf4\u8fc7\u3002 \u8be6\u89c1 issue#2179 \u3002","title":"macOS\u4e0a\u7684Fn"},{"location":"faq_keymap/#mac-osx","text":"","title":"Mac OSX\u7684\u5a92\u4f53\u63a7\u5236\u952e"},{"location":"faq_keymap/#mac-osx_1","text":"\u4f60\u53ef\u4ee5\u4ece\u6b64\u6e90\u7801\u4e2d\u83b7\u77e5\u5728OSX\u4e2d\u652f\u6301\u54ea\u4e9b\u952e\u7801 usb_2_adb_keymap \u9635\u5217\u6620\u5c04 \u952e\u76d8/\u5c0f\u952e\u76d8 \u9875\u7528\u4e8eADB\u626b\u63cf\u7801(OSX\u5185\u90e8\u952e\u7801). https://opensource.apple.com/source/IOHIDFamily/IOHIDFamily-606.1.7/IOHIDFamily/Cosmo_USB2ADB.c IOHIDConsumer::dispatchConsumerEvent \u4f1a\u5904\u7406\u7528\u6237\u9875\u9762\u7528\u6cd5\u3002 https://opensource.apple.com/source/IOHIDFamily/IOHIDFamily-606.1.7/IOHIDFamily/IOHIDConsumer.cpp","title":"Mac OSX\u4e2d\u652f\u6301\u90a3\u4e9b\u952e?"},{"location":"faq_keymap/#mac-osxjis","text":"\u5c9b\u56fd\u7279\u522b\u952e\u6bd4\u5982 \u7121\u5909\u63db(Muhenkan) , \u5909\u63db(Henkan) , \u3072\u3089\u304c\u306a(hiragana) OSX\u662f\u4e0d\u662f\u522b\u7684\u3002You can use Seil to enable those keys, try following options. \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdNFER\u952e \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdXFER\u952e \u5728\u7535\u8111\u952e\u76d8\u4e0a\u4f7f\u80fdKATAKAN\u952e https://pqrs.org/osx/karabiner/seil.html","title":"Mac OSX\u4e2d\u7684JIS\u952e"},{"location":"faq_keymap/#rn-42karabiner","text":"Karabiner - Mac OSX\u7684\u6539\u952e\u8f6f\u4ef6 - \u9ed8\u8ba4RN-42\u6a21\u5757\u662f\u4e0d\u4f1a\u88ab\u54cd\u5e94\u7684\u3002\u60f3\u8981Karabiner\u548c\u4f60\u7684\u952e\u76d8\u534f\u540c\u5de5\u4f5c\u4f60\u8981\u4f7f\u80fd\u6b64\u9009\u9879\uff1a https://github.com/tekezo/Karabiner/issues/403#issuecomment-102559237 \u6b64\u95ee\u9898\u8be6\u89c1\u4e0b\u65b9\u94fe\u63a5\u3002 https://github.com/tmk/tmk_keyboard/issues/213 https://github.com/tekezo/Karabiner/issues/403","title":"RN-42\u84dd\u7259\u6a21\u5757\u4e0eKarabiner\u4e0d\u80fd\u6709\u6548\u534f\u540c\u5de5\u4f5c"},{"location":"faq_keymap/#esc","text":"\u8bf7\u89c1 Grave Escape \u529f\u80fd\u3002","title":"Esc \u548c &#96; \u53cc\u529f\u80fd\u952e"},{"location":"faq_keymap/#mac-osx_2","text":"KC_EJCT \u952e\u7801\u5728OSX\u53ef\u4ee5\u4f7f\u7528 https://github.com/tmk/tmk_keyboard/issues/250 \u4f3c\u4e4eWindows10\u4f1a\u5ffd\u7565\u8be5\u952e\u7801\uff0cLinux/Xorg\u53ef\u4ee5\u8bc6\u522b\u8be5\u952e\u7801\u4f46\u9ed8\u8ba4\u4e0d\u6620\u5c04\u3002 \u76ee\u524d\u5c1a\u4e0d\u6e05\u695a\u5982\u4f55\u5728\u771f\u6b63\u7684\u82f9\u679c\u952e\u76d8\u6309\u51fa\u5f39\u51fa\u952e\u3002HHKB\u4f7f\u7528 F20 \u7528\u4e8e\u5f39\u51fa\u952e( Fn+f )\uff0c\u8be5\u529f\u80fd\u5728MAC\u6a21\u5f0f\u6709\u6548\u4f46\u4e0d\u4fdd\u8bc1\u4e0e\u82f9\u679c\u5f39\u51fa\u952e\u7801\u76f8\u7b26\u3002","title":"Mac OSX\u7684\u5f39\u51fa\u952e"},{"location":"faq_keymap/#action_utilc-weak_modsreal_mods","text":"\u5f85\u6539\u5584 real_mods \u7528\u4e8e\u4fdd\u5b58\u5b9e\u9645(\u7269\u7406)\u4fee\u6539\u952e\u7684\u5b9e\u9645\u72b6\u6001\u3002 weak_mods \u7528\u4e8e\u4fdd\u5b58\u865a\u62df\u6216\u4e34\u65f6\u4fee\u6539\u952e\uff0c\u5b83\u5c06\u4e0d\u4f1a\u5f71\u54cd\u5b9e\u9645\u4fee\u6539\u952e\u3002 \u4ee5\u6309\u4e0b\u5de6\u4fa7Shift\u952e\u7136\u540e\u8f93\u5165ACTION_MODS_KEY(LSHIFT, KC_A)\u4e3a\u4f8b\uff0c \u5728weak_mods\u65f6\uff0c * (1) \u6309\u4e0b\u4e0d\u62ac\u8d77\u5de6Shift: real_mods |= MOD_BIT(LSHIFT) * (2) \u6309 ACTION_MODS_KEY(LSHIFT, KC_A): weak_mods |= MOD_BIT(LSHIFT) * (3) \u62ac\u8d77 ACTION_MODS_KEY(LSHIFT, KC_A): weak_mods &= ~MOD_BIT(LSHIFT) real_mods \u8fd8\u662f\u4fdd\u6301\u5728\u4fee\u6539\u72b6\u6001\u3002 \u5728\u6ca1\u6709weak_mods\u65f6\uff0c * (1) \u6309\u4e0b\u4e0d\u62ac\u8d77\u5de6Shift: real_mods |= MOD_BIT(LSHIFT) * (2) \u6309 ACTION_MODS_KEY(LSHIFT, KC_A): real_mods |= MOD_BIT(LSHIFT) * (3) \u62ac\u8d77 ACTION_MODS_KEY(LSHIFT, KC_A): real_mods &= ~MOD_BIT(LSHIFT) \u6b64\u65f6real_mods\u5931\u53bb\u2018\u5b9e\u9645\u5de6Shift\u2019\u7684\u72b6\u6001\u3002 weak_mods\u548creal_mods\u73b0\u5df2\u5168\u90e8\u52a0\u5165\u952e\u76d8\u6570\u636e\u5305\u53d1\u9001\u8c6a\u534e\u5957\u9910\u3002 https://github.com/tmk/tmk_core/blob/master/common/action_util.c#L57","title":"action_util.c\u4e2d\u7684 weak_mods\u548creal_mods\u662f\u4ec0\u4e48"},{"location":"faq_misc/","text":"Miscellaneous FAQ \u00b6 How do I test my keyboard? \u00b6 Testing your keyboard is usually pretty straightforward. Press every single key and make sure it sends the keys you expect. You can use QMK Configurator 's test mode to check your keyboard, even if it doesn't run QMK. Safety Considerations \u00b6 You probably don't want to \"brick\" your keyboard, making it impossible to rewrite firmware onto it. Here are some of the parameters to show what things are (and likely aren't) too risky. If your keyboard map does not include RESET, then, to get into DFU mode, you will need to press the reset button on the PCB, which requires unscrewing the bottom. Messing with tmk_core / common files might make the keyboard inoperable Too large a .hex file is trouble; make dfu will erase the block, test the size (oops, wrong order!), which errors out, failing to flash the keyboard, leaving it in DFU mode. To this end, note that the maximum .hex file size on e.g. Planck is 7000h (28672 decimal) Linking: .build/planck_rev4_cbbrowne.elf [OK] Creating load file for Flash: .build/planck_rev4_cbbrowne.hex [OK] Size after: text data bss dec hex filename 0 22396 0 22396 577c planck_rev4_cbbrowne.hex The above file is of size 22396/577ch, which is less than 28672/7000h As long as you have a suitable alternative .hex file around, you can retry, loading that one Some of the options you might specify in your keyboard's Makefile consume extra memory; watch out for BOOTMAGIC_ENABLE, MOUSEKEY_ENABLE, EXTRAKEY_ENABLE, CONSOLE_ENABLE, API_SYSEX_ENABLE DFU tools do /not/ allow you to write into the bootloader (unless you throw in an extra fruit salad of options), so there is little risk there. EEPROM has around a 100000 (100k) write cycle. You shouldn't rewrite the firmware repeatedly and continually; that'll burn the EEPROM eventually. NKRO Doesn't work \u00b6 First you have to compile firmware with the build option NKRO_ENABLE in Makefile . Try Magic N command( LShift+RShift+N by default) when NKRO still doesn't work. You can use this command to toggle between NKRO and 6KRO mode temporarily. In some situations NKRO doesn't work and you will need to switch to 6KRO mode, in particular when you are in BIOS. If your firmware was built with BOOTMAGIC_ENABLE you need to turn its switch on by BootMagic N command( Space+N by default). This setting is stored in EEPROM and kept over power cycles. https://github.com/tmk/tmk_keyboard#boot-magic-configuration---virtual-dip-switch TrackPoint Needs Reset Circuit (PS/2 Mouse Support) \u00b6 Without reset circuit you will have inconsistent result due to improper initialization of the hardware. See circuit schematic of TPM754: https://geekhack.org/index.php?topic=50176.msg1127447#msg1127447 https://www.mikrocontroller.net/attachment/52583/tpm754.pdf Can't Read Column of Matrix Beyond 16 \u00b6 Use 1UL<<16 instead of 1<<16 in read_cols() in [matrix.h] when your columns goes beyond 16. In C 1 means one of [int] type which is [16 bit] in case of AVR, so you can't shift left more than 15. Thus, calculating 1<<16 will unexpectedly equal zero. To work around this, you have to use [unsigned long] type with 1UL . https://deskthority.net/workshop-f7/rebuilding-and-redesigning-a-classic-thinkpad-keyboard-t6181-60.html#p146279 Special Extra Key Doesn't Work (System, Audio Control Keys) \u00b6 You need to define EXTRAKEY_ENABLE in rules.mk to use them in QMK. EXTRAKEY_ENABLE = yes # Audio control and System control Wake from Sleep Doesn't Work \u00b6 In Windows check Allow this device to wake the computer setting in Power Management property tab of Device Manager . Also check your BIOS settings. Pressing any key during sleep should wake host. Using Arduino? \u00b6 Note that Arduino pin naming is different from actual chip. For example, Arduino pin D0 is not PD0 . Check circuit with its schematics yourself. https://arduino.cc/en/uploads/Main/arduino-leonardo-schematic_3b.pdf https://arduino.cc/en/uploads/Main/arduino-micro-schematic.pdf Arduino Leonardo and micro have ATMega32U4 and can be used for TMK, though Arduino bootloader may be a problem. Enabling JTAG \u00b6 By default, the JTAG debugging interface is disabled as soon as the keyboard starts up. JTAG-capable MCUs come from the factory with the JTAGEN fuse set, and it takes over certain pins of the MCU that the board may be using for the switch matrix, LEDs, etc. If you would like to keep JTAG enabled, just add the following to your config.h : #define NO_JTAG_DISABLE USB 3 Compatibility \u00b6 Some problems can be fixed by switching from a USB 3.x port to a USB 2.0 port. Mac Compatibility \u00b6 OS X 10.11 and Hub \u00b6 See here: https://geekhack.org/index.php?topic=14290.msg1884034#msg1884034 Problem in BIOS (UEFI) Setup/Resume (Sleep & Wake)/Power Cycles \u00b6 Some people reported their keyboard stops working in BIOS and/or after resume(power cycles). As of now the root cause is not clear, but some build options seem to be related. In Makefile, try to disable options like CONSOLE_ENABLE , NKRO_ENABLE , SLEEP_LED_ENABLE and/or others. More info: - https://github.com/tmk/tmk_keyboard/issues/266 - https://geekhack.org/index.php?topic=41989.msg1967778#msg1967778","title":"Miscellaneous FAQ"},{"location":"faq_misc/#miscellaneous-faq","text":"","title":"Miscellaneous FAQ"},{"location":"faq_misc/#testing","text":"Testing your keyboard is usually pretty straightforward. Press every single key and make sure it sends the keys you expect. You can use QMK Configurator 's test mode to check your keyboard, even if it doesn't run QMK.","title":"How do I test my keyboard?"},{"location":"faq_misc/#safety-considerations","text":"You probably don't want to \"brick\" your keyboard, making it impossible to rewrite firmware onto it. Here are some of the parameters to show what things are (and likely aren't) too risky. If your keyboard map does not include RESET, then, to get into DFU mode, you will need to press the reset button on the PCB, which requires unscrewing the bottom. Messing with tmk_core / common files might make the keyboard inoperable Too large a .hex file is trouble; make dfu will erase the block, test the size (oops, wrong order!), which errors out, failing to flash the keyboard, leaving it in DFU mode. To this end, note that the maximum .hex file size on e.g. Planck is 7000h (28672 decimal) Linking: .build/planck_rev4_cbbrowne.elf [OK] Creating load file for Flash: .build/planck_rev4_cbbrowne.hex [OK] Size after: text data bss dec hex filename 0 22396 0 22396 577c planck_rev4_cbbrowne.hex The above file is of size 22396/577ch, which is less than 28672/7000h As long as you have a suitable alternative .hex file around, you can retry, loading that one Some of the options you might specify in your keyboard's Makefile consume extra memory; watch out for BOOTMAGIC_ENABLE, MOUSEKEY_ENABLE, EXTRAKEY_ENABLE, CONSOLE_ENABLE, API_SYSEX_ENABLE DFU tools do /not/ allow you to write into the bootloader (unless you throw in an extra fruit salad of options), so there is little risk there. EEPROM has around a 100000 (100k) write cycle. You shouldn't rewrite the firmware repeatedly and continually; that'll burn the EEPROM eventually.","title":"Safety Considerations"},{"location":"faq_misc/#nkro-doesnt-work","text":"First you have to compile firmware with the build option NKRO_ENABLE in Makefile . Try Magic N command( LShift+RShift+N by default) when NKRO still doesn't work. You can use this command to toggle between NKRO and 6KRO mode temporarily. In some situations NKRO doesn't work and you will need to switch to 6KRO mode, in particular when you are in BIOS. If your firmware was built with BOOTMAGIC_ENABLE you need to turn its switch on by BootMagic N command( Space+N by default). This setting is stored in EEPROM and kept over power cycles. https://github.com/tmk/tmk_keyboard#boot-magic-configuration---virtual-dip-switch","title":"NKRO Doesn't work"},{"location":"faq_misc/#trackpoint-needs-reset-circuit-ps2-mouse-support","text":"Without reset circuit you will have inconsistent result due to improper initialization of the hardware. See circuit schematic of TPM754: https://geekhack.org/index.php?topic=50176.msg1127447#msg1127447 https://www.mikrocontroller.net/attachment/52583/tpm754.pdf","title":"TrackPoint Needs Reset Circuit (PS/2 Mouse Support)"},{"location":"faq_misc/#cant-read-column-of-matrix-beyond-16","text":"Use 1UL<<16 instead of 1<<16 in read_cols() in [matrix.h] when your columns goes beyond 16. In C 1 means one of [int] type which is [16 bit] in case of AVR, so you can't shift left more than 15. Thus, calculating 1<<16 will unexpectedly equal zero. To work around this, you have to use [unsigned long] type with 1UL . https://deskthority.net/workshop-f7/rebuilding-and-redesigning-a-classic-thinkpad-keyboard-t6181-60.html#p146279","title":"Can't Read Column of Matrix Beyond 16"},{"location":"faq_misc/#special-extra-key-doesnt-work-system-audio-control-keys","text":"You need to define EXTRAKEY_ENABLE in rules.mk to use them in QMK. EXTRAKEY_ENABLE = yes # Audio control and System control","title":"Special Extra Key Doesn't Work (System, Audio Control Keys)"},{"location":"faq_misc/#wake-from-sleep-doesnt-work","text":"In Windows check Allow this device to wake the computer setting in Power Management property tab of Device Manager . Also check your BIOS settings. Pressing any key during sleep should wake host.","title":"Wake from Sleep Doesn't Work"},{"location":"faq_misc/#using-arduino","text":"Note that Arduino pin naming is different from actual chip. For example, Arduino pin D0 is not PD0 . Check circuit with its schematics yourself. https://arduino.cc/en/uploads/Main/arduino-leonardo-schematic_3b.pdf https://arduino.cc/en/uploads/Main/arduino-micro-schematic.pdf Arduino Leonardo and micro have ATMega32U4 and can be used for TMK, though Arduino bootloader may be a problem.","title":"Using Arduino?"},{"location":"faq_misc/#enabling-jtag","text":"By default, the JTAG debugging interface is disabled as soon as the keyboard starts up. JTAG-capable MCUs come from the factory with the JTAGEN fuse set, and it takes over certain pins of the MCU that the board may be using for the switch matrix, LEDs, etc. If you would like to keep JTAG enabled, just add the following to your config.h : #define NO_JTAG_DISABLE","title":"Enabling JTAG"},{"location":"faq_misc/#usb-3-compatibility","text":"Some problems can be fixed by switching from a USB 3.x port to a USB 2.0 port.","title":"USB 3 Compatibility"},{"location":"faq_misc/#mac-compatibility","text":"","title":"Mac Compatibility"},{"location":"faq_misc/#os-x-1011-and-hub","text":"See here: https://geekhack.org/index.php?topic=14290.msg1884034#msg1884034","title":"OS X 10.11 and Hub"},{"location":"faq_misc/#problem-in-bios-uefi-setupresume-sleep-wakepower-cycles","text":"Some people reported their keyboard stops working in BIOS and/or after resume(power cycles). As of now the root cause is not clear, but some build options seem to be related. In Makefile, try to disable options like CONSOLE_ENABLE , NKRO_ENABLE , SLEEP_LED_ENABLE and/or others. More info: - https://github.com/tmk/tmk_keyboard/issues/266 - https://geekhack.org/index.php?topic=41989.msg1967778#msg1967778","title":"Problem in BIOS (UEFI) Setup/Resume (Sleep &amp; Wake)/Power Cycles"},{"location":"feature_advanced_keycodes/","text":"Modifier Keys \u00b6 These allow you to combine a modifier with a keycode. When pressed, the keydown event for the modifier, then kc will be sent. On release, the keyup event for kc , then the modifier will be sent. Key Aliases Description LCTL(kc) C(kc) Hold Left Control and press kc LSFT(kc) S(kc) Hold Left Shift and press kc LALT(kc) A(kc) , LOPT(kc) Hold Left Alt and press kc LGUI(kc) G(kc) , LCMD(kc) , LWIN(kc) Hold Left GUI and press kc RCTL(kc) Hold Right Control and press kc RSFT(kc) Hold Right Shift and press kc RALT(kc) ROPT(kc) , ALGR(kc) Hold Right Alt and press kc RGUI(kc) RCMD(kc) , LWIN(kc) Hold Right GUI and press kc LSG(kc) SGUI(kc) , SCMD(kc) , SWIN(kc) Hold Left Shift and GUI and press kc LAG(kc) Hold Left Alt and Left GUI and press kc RSG(kc) Hold Right Shift and Right GUI and press kc RAG(kc) Hold Right Alt and Right GUI and press kc LCA(kc) Hold Left Control and Alt and press kc LSA(kc) Hold Left Shift and Left Alt and press kc RSA(kc) SAGR(kc) Hold Right Shift and Right Alt (AltGr) and press kc RCS(kc) Hold Right Control and Right Shift and press kc LCAG(kc) Hold Left Control, Alt and GUI and press kc MEH(kc) Hold Left Control, Shift and Alt and press kc HYPR(kc) Hold Left Control, Shift, Alt and GUI and press kc You can also chain them, for example LCTL(LALT(KC_DEL)) or C(A(KC_DEL)) makes a key that sends Control+Alt+Delete with a single keypress. Checking Modifier State \u00b6 The current modifier state can mainly be accessed with two functions: get_mods() for normal modifiers and modtaps and get_oneshot_mods() for one-shot modifiers (unless they're held, in which case they act like normal modifier keys). The presence of one or more specific modifiers in the current modifier state can be detected by ANDing the modifier state with a mod mask corresponding to the set of modifiers you want to match for. The reason why bitwise operators are used is that the modifier state is stored as a single byte in the format (GASC) R (GASC) L . Thus, to give an example, 01000010 would be the internal representation of LShift+RAlt. For more information on bitwise operators in C, click here to open the Wikipedia page on the topic. In practice, this means that you can check whether a given modifier is active with get_mods() & MOD_BIT(KC_<modifier>) (see the list of modifier keycodes ) or with get_mods() & MOD_MASK_<modifier> if the difference between left and right hand modifiers is not important and you want to match both. Same thing can be done for one-shot modifiers if you replace get_mods() with get_oneshot_mods() . To check that only a specific set of mods is active at a time, AND the modifier state and your desired mod mask as explained above and compare the result to the mod mask itself: get_mods() & <mod mask> == <mod mask> . For example, let's say you want to trigger a piece of custom code if one-shot left control and one-shot left shift are on but every other one-shot mods are off. To do so, you can compose the desired mod mask by combining the mod bits for left control and shift with (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) and then plug it in: get_oneshot_mods & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) == (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) . Using MOD_MASK_CS instead for the mod bitmask would have forced you to press four modifier keys (both versions of control and shift) to fulfill the condition. The full list of mod masks is as follows: Mod Mask Name Matching Modifiers MOD_MASK_CTRL LCTRL , RCTRL MOD_MASK_SHIFT LSHIFT , RSHIFT MOD_MASK_ALT LALT , RALT MOD_MASK_GUI LGUI , RGUI MOD_MASK_CS CTRL , SHIFT MOD_MASK_CA (L/R)CTRL , (L/R)ALT MOD_MASK_CG (L/R)CTRL , (L/R)GUI MOD_MASK_SA (L/R)SHIFT , (L/R)ALT MOD_MASK_SG (L/R)SHIFT , (L/R)GUI MOD_MASK_AG (L/R)ALT , (L/R)GUI MOD_MASK_CSA (L/R)CTRL , (L/R)SHIFT , (L/R)ALT MOD_MASK_CSG (L/R)CTRL , (L/R)SHIFT , (L/R)GUI MOD_MASK_CAG (L/R)CTRL , (L/R)ALT , (L/R)GUI MOD_MASK_SAG (L/R)SHIFT , (L/R)ALT , (L/R)GUI MOD_MASK_CSAG (L/R)CTRL , (L/R)SHIFT , (L/R)ALT , (L/R)GUI Aside from accessing the currently active modifiers using get_mods() , there exists some other functions you can use to modify the modifier state, where the mods argument refers to the modifiers bitmask. add_mods(mods) : Enable mods without affecting any other modifiers register_mods(mods) : Like add_mods but send a keyboard report immediately. del_mods(mods) : Disable mods without affecting any other modifiers unregister_mods(mods) : Like del_mods but send a keyboard report immediately. set_mods(mods) : Overwrite current modifier state with mods clear_mods() : Reset the modifier state by disabling all modifiers Similarly, in addition to get_oneshot_mods() , there also exists these functions for one-shot mods: add_oneshot_mods(mods) : Enable mods without affecting any other one-shot modifiers del_oneshot_mods(mods) : Disable mods without affecting any other one-shot modifiers set_oneshot_mods(mods) : Overwrite current one-shot modifier state with mods clear_oneshot_mods() : Reset the one-shot modifier state by disabling all one-shot modifiers Examples \u00b6 The following examples use advanced macro functions which you can read more about in the documentation page on macros . Alt + Escape for Alt + Tab \u00b6 Simple example where chording Left Alt with KC_ESC makes it behave like KC_TAB for alt-tabbing between applications. This example strictly checks if only Left Alt is active, meaning you can't do Alt+Shift+Esc to switch between applications in reverse order. Also keep in mind that this removes the ability to trigger the actual Alt+Escape keyboard shortcut, though it keeps the ability to do AltGr+Escape. bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_ESC : // Detect the activation of only Left Alt if (( get_mods () & MOD_BIT ( KC_LALT )) == MOD_BIT ( KC_LALT )) { if ( record -> event . pressed ) { // No need to register KC_LALT because it's already active. // The Alt modifier will apply on this KC_TAB. register_code ( KC_TAB ); } else { unregister_code ( KC_TAB ); } // Do not let QMK process the keycode further return false ; } // Else, let QMK process the KC_ESC keycode as usual return true ; } return true ; }; Shift + Backspace for Delete \u00b6 Advanced example where the original behaviour of shift is cancelled when chorded with KC_BSPC and is instead fully replaced by KC_DEL . Two main variables are created to make this work well: mod_state and delkey_registered . The first one stores the modifier state and is used to restore it after registering KC_DEL . The second variable is a boolean variable (true or false) which keeps track of the status of KC_DEL to manage the release of the whole Backspace/Delete key correctly. As opposed to the previous example, this doesn't use strict modifier checking. Pressing KC_BSPC while one or two shifts are active is enough to trigger this custom code, regardless of the state of other modifiers. That approach offers some perks: Ctrl+Shift+Backspace lets us delete the next word (Ctrl+Delete) and Ctrl+Alt+Shift+Backspace lets us execute the Ctrl+Alt+Del keyboard shortcut. // Initialize variable holding the binary // representation of active modifiers. uint8_t mod_state ; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { // Store the current modifier state in the variable for later reference mod_state = get_mods (); switch ( keycode ) { case KC_BSPC : { // Initialize a boolean variable that keeps track // of the delete key status: registered or not? static bool delkey_registered ; if ( record -> event . pressed ) { // Detect the activation of either shift keys if ( mod_state & MOD_MASK_SHIFT ) { // First temporarily canceling both shifts so that // shift isn't applied to the KC_DEL keycode del_mods ( MOD_MASK_SHIFT ); register_code ( KC_DEL ); // Update the boolean variable to reflect the status of KC_DEL delkey_registered = true ; // Reapplying modifier state so that the held shift key(s) // still work even after having tapped the Backspace/Delete key. set_mods ( mod_state ); return false ; } } else { // on release of KC_BSPC // In case KC_DEL is still being sent even after the release of KC_BSPC if ( delkey_registered ) { unregister_code ( KC_DEL ); delkey_registered = false ; return false ; } } // Let QMK process the KC_BSPC keycode as usual outside of shift return true ; } } return true ; }; Legacy Content \u00b6 This page used to encompass a large set of features. We have moved many sections that used to be part of this page to their own pages. Everything below this point is simply a redirect so that people following old links on the web find what they're looking for. Layers \u00b6 Layers Mod-Tap \u00b6 Mod-Tap One Shot Keys \u00b6 One Shot Keys Tap-Hold Configuration Options \u00b6 Tap-Hold Configuration Options","title":"\u9ad8\u7ea7\u952e\u7801"},{"location":"feature_advanced_keycodes/#modifier-keys","text":"These allow you to combine a modifier with a keycode. When pressed, the keydown event for the modifier, then kc will be sent. On release, the keyup event for kc , then the modifier will be sent. Key Aliases Description LCTL(kc) C(kc) Hold Left Control and press kc LSFT(kc) S(kc) Hold Left Shift and press kc LALT(kc) A(kc) , LOPT(kc) Hold Left Alt and press kc LGUI(kc) G(kc) , LCMD(kc) , LWIN(kc) Hold Left GUI and press kc RCTL(kc) Hold Right Control and press kc RSFT(kc) Hold Right Shift and press kc RALT(kc) ROPT(kc) , ALGR(kc) Hold Right Alt and press kc RGUI(kc) RCMD(kc) , LWIN(kc) Hold Right GUI and press kc LSG(kc) SGUI(kc) , SCMD(kc) , SWIN(kc) Hold Left Shift and GUI and press kc LAG(kc) Hold Left Alt and Left GUI and press kc RSG(kc) Hold Right Shift and Right GUI and press kc RAG(kc) Hold Right Alt and Right GUI and press kc LCA(kc) Hold Left Control and Alt and press kc LSA(kc) Hold Left Shift and Left Alt and press kc RSA(kc) SAGR(kc) Hold Right Shift and Right Alt (AltGr) and press kc RCS(kc) Hold Right Control and Right Shift and press kc LCAG(kc) Hold Left Control, Alt and GUI and press kc MEH(kc) Hold Left Control, Shift and Alt and press kc HYPR(kc) Hold Left Control, Shift, Alt and GUI and press kc You can also chain them, for example LCTL(LALT(KC_DEL)) or C(A(KC_DEL)) makes a key that sends Control+Alt+Delete with a single keypress.","title":"Modifier Keys"},{"location":"feature_advanced_keycodes/#checking-modifier-state","text":"The current modifier state can mainly be accessed with two functions: get_mods() for normal modifiers and modtaps and get_oneshot_mods() for one-shot modifiers (unless they're held, in which case they act like normal modifier keys). The presence of one or more specific modifiers in the current modifier state can be detected by ANDing the modifier state with a mod mask corresponding to the set of modifiers you want to match for. The reason why bitwise operators are used is that the modifier state is stored as a single byte in the format (GASC) R (GASC) L . Thus, to give an example, 01000010 would be the internal representation of LShift+RAlt. For more information on bitwise operators in C, click here to open the Wikipedia page on the topic. In practice, this means that you can check whether a given modifier is active with get_mods() & MOD_BIT(KC_<modifier>) (see the list of modifier keycodes ) or with get_mods() & MOD_MASK_<modifier> if the difference between left and right hand modifiers is not important and you want to match both. Same thing can be done for one-shot modifiers if you replace get_mods() with get_oneshot_mods() . To check that only a specific set of mods is active at a time, AND the modifier state and your desired mod mask as explained above and compare the result to the mod mask itself: get_mods() & <mod mask> == <mod mask> . For example, let's say you want to trigger a piece of custom code if one-shot left control and one-shot left shift are on but every other one-shot mods are off. To do so, you can compose the desired mod mask by combining the mod bits for left control and shift with (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) and then plug it in: get_oneshot_mods & (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) == (MOD_BIT(KC_LCTL) | MOD_BIT(KC_LSFT)) . Using MOD_MASK_CS instead for the mod bitmask would have forced you to press four modifier keys (both versions of control and shift) to fulfill the condition. The full list of mod masks is as follows: Mod Mask Name Matching Modifiers MOD_MASK_CTRL LCTRL , RCTRL MOD_MASK_SHIFT LSHIFT , RSHIFT MOD_MASK_ALT LALT , RALT MOD_MASK_GUI LGUI , RGUI MOD_MASK_CS CTRL , SHIFT MOD_MASK_CA (L/R)CTRL , (L/R)ALT MOD_MASK_CG (L/R)CTRL , (L/R)GUI MOD_MASK_SA (L/R)SHIFT , (L/R)ALT MOD_MASK_SG (L/R)SHIFT , (L/R)GUI MOD_MASK_AG (L/R)ALT , (L/R)GUI MOD_MASK_CSA (L/R)CTRL , (L/R)SHIFT , (L/R)ALT MOD_MASK_CSG (L/R)CTRL , (L/R)SHIFT , (L/R)GUI MOD_MASK_CAG (L/R)CTRL , (L/R)ALT , (L/R)GUI MOD_MASK_SAG (L/R)SHIFT , (L/R)ALT , (L/R)GUI MOD_MASK_CSAG (L/R)CTRL , (L/R)SHIFT , (L/R)ALT , (L/R)GUI Aside from accessing the currently active modifiers using get_mods() , there exists some other functions you can use to modify the modifier state, where the mods argument refers to the modifiers bitmask. add_mods(mods) : Enable mods without affecting any other modifiers register_mods(mods) : Like add_mods but send a keyboard report immediately. del_mods(mods) : Disable mods without affecting any other modifiers unregister_mods(mods) : Like del_mods but send a keyboard report immediately. set_mods(mods) : Overwrite current modifier state with mods clear_mods() : Reset the modifier state by disabling all modifiers Similarly, in addition to get_oneshot_mods() , there also exists these functions for one-shot mods: add_oneshot_mods(mods) : Enable mods without affecting any other one-shot modifiers del_oneshot_mods(mods) : Disable mods without affecting any other one-shot modifiers set_oneshot_mods(mods) : Overwrite current one-shot modifier state with mods clear_oneshot_mods() : Reset the one-shot modifier state by disabling all one-shot modifiers","title":"Checking Modifier State"},{"location":"feature_advanced_keycodes/#examples","text":"The following examples use advanced macro functions which you can read more about in the documentation page on macros .","title":"Examples"},{"location":"feature_advanced_keycodes/#alt-escape-for-alt-tab","text":"Simple example where chording Left Alt with KC_ESC makes it behave like KC_TAB for alt-tabbing between applications. This example strictly checks if only Left Alt is active, meaning you can't do Alt+Shift+Esc to switch between applications in reverse order. Also keep in mind that this removes the ability to trigger the actual Alt+Escape keyboard shortcut, though it keeps the ability to do AltGr+Escape. bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_ESC : // Detect the activation of only Left Alt if (( get_mods () & MOD_BIT ( KC_LALT )) == MOD_BIT ( KC_LALT )) { if ( record -> event . pressed ) { // No need to register KC_LALT because it's already active. // The Alt modifier will apply on this KC_TAB. register_code ( KC_TAB ); } else { unregister_code ( KC_TAB ); } // Do not let QMK process the keycode further return false ; } // Else, let QMK process the KC_ESC keycode as usual return true ; } return true ; };","title":"Alt + Escape for Alt + Tab"},{"location":"feature_advanced_keycodes/#shift-backspace-for-delete","text":"Advanced example where the original behaviour of shift is cancelled when chorded with KC_BSPC and is instead fully replaced by KC_DEL . Two main variables are created to make this work well: mod_state and delkey_registered . The first one stores the modifier state and is used to restore it after registering KC_DEL . The second variable is a boolean variable (true or false) which keeps track of the status of KC_DEL to manage the release of the whole Backspace/Delete key correctly. As opposed to the previous example, this doesn't use strict modifier checking. Pressing KC_BSPC while one or two shifts are active is enough to trigger this custom code, regardless of the state of other modifiers. That approach offers some perks: Ctrl+Shift+Backspace lets us delete the next word (Ctrl+Delete) and Ctrl+Alt+Shift+Backspace lets us execute the Ctrl+Alt+Del keyboard shortcut. // Initialize variable holding the binary // representation of active modifiers. uint8_t mod_state ; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { // Store the current modifier state in the variable for later reference mod_state = get_mods (); switch ( keycode ) { case KC_BSPC : { // Initialize a boolean variable that keeps track // of the delete key status: registered or not? static bool delkey_registered ; if ( record -> event . pressed ) { // Detect the activation of either shift keys if ( mod_state & MOD_MASK_SHIFT ) { // First temporarily canceling both shifts so that // shift isn't applied to the KC_DEL keycode del_mods ( MOD_MASK_SHIFT ); register_code ( KC_DEL ); // Update the boolean variable to reflect the status of KC_DEL delkey_registered = true ; // Reapplying modifier state so that the held shift key(s) // still work even after having tapped the Backspace/Delete key. set_mods ( mod_state ); return false ; } } else { // on release of KC_BSPC // In case KC_DEL is still being sent even after the release of KC_BSPC if ( delkey_registered ) { unregister_code ( KC_DEL ); delkey_registered = false ; return false ; } } // Let QMK process the KC_BSPC keycode as usual outside of shift return true ; } } return true ; };","title":"Shift + Backspace for Delete"},{"location":"feature_advanced_keycodes/#legacy-content","text":"This page used to encompass a large set of features. We have moved many sections that used to be part of this page to their own pages. Everything below this point is simply a redirect so that people following old links on the web find what they're looking for.","title":"Legacy Content"},{"location":"feature_advanced_keycodes/#switching-and-toggling-layers","text":"Layers","title":"Layers"},{"location":"feature_advanced_keycodes/#mod-tap","text":"Mod-Tap","title":"Mod-Tap"},{"location":"feature_advanced_keycodes/#one-shot-keys","text":"One Shot Keys","title":"One Shot Keys"},{"location":"feature_advanced_keycodes/#tap-hold-configuration-options","text":"Tap-Hold Configuration Options","title":"Tap-Hold Configuration Options"},{"location":"feature_audio/","text":"Audio \u00b6 Your keyboard can make sounds! If you've got a spare pin you can hook up a simple speaker and make it beep. You can use those beeps to indicate layer transitions, modifiers, special keys, or just to play some funky 8bit tunes. To activate this feature, add AUDIO_ENABLE = yes to your rules.mk . AVR based boards \u00b6 On Atmega32U4 based boards, up to two simultaneous tones can be rendered. With one speaker connected to a PWM capable pin on PORTC driven by timer 3 and the other on one of the PWM pins on PORTB driven by timer 1. The following pins can be configured as audio outputs in config.h - for one speaker set either one out of: #define AUDIO_PIN C4 #define AUDIO_PIN C5 #define AUDIO_PIN C6 #define AUDIO_PIN B5 #define AUDIO_PIN B6 #define AUDIO_PIN B7 and optionally , for a second speaker, one of: * #define AUDIO_PIN_ALT B5 * #define AUDIO_PIN_ALT B6 * #define AUDIO_PIN_ALT B7 Wiring \u00b6 per speaker is - for example with a piezo buzzer - the black lead to Ground, and the red lead connected to the selected AUDIO_PIN for the primary; and similarly with AUDIO_PIN_ALT for the secondary. ARM based boards \u00b6 for more technical details, see the notes on Audio driver . DAC (basic) \u00b6 Most STM32 MCUs have DAC peripherals, with a notable exception of the STM32F1xx series. Generally, the DAC peripheral drives pins A4 or A5. To enable DAC-based audio output on STM32 devices, add AUDIO_DRIVER = dac_basic to rules.mk and set in config.h either: #define AUDIO_PIN A4 or #define AUDIO_PIN A5 the other DAC channel can optionally be used with a secondary speaker, just set: #define AUDIO_PIN_ALT A4 or #define AUDIO_PIN_ALT A5 Do note though that the dac_basic driver is only capable of reproducing one tone per speaker/channel at a time, for more tones simultaneously, try the dac_additive driver. Wiring: \u00b6 for two piezos, for example configured as AUDIO_PIN A4 and AUDIO_PIN_ALT A5 would be: red lead to A4 and black to Ground, and similarly with the second one: A5 = red, and Ground = black another alternative is to drive one piezo with both DAC pins - for an extra \"push\". wiring red to A4 and black to A5 (or the other way round) and add #define AUDIO_PIN_ALT_AS_NEGATIVE to config.h Proton-C Example: \u00b6 The Proton-C comes (optionally) with one 'builtin' piezo, which is wired to A4+A5. For this board config.h would include these defines: #define AUDIO_PIN A5 #define AUDIO_PIN_ALT A4 #define AUDIO_PIN_ALT_AS_NEGATIVE DAC (additive) \u00b6 Another option, besides dac_basic (which produces sound through a square-wave), is to use the DAC to do additive wave synthesis. With a number of predefined wave-forms or by providing your own implementation to generate samples on the fly. To use this feature set AUDIO_DRIVER = dac_additive in your rules.mk , and select in config.h EITHER #define AUDIO_PIN A4 or #define AUDIO_PIN A5 . The used waveform defaults to sine, but others can be selected by adding one of the following defines to config.h : #define AUDIO_DAC_SAMPLE_WAVEFORM_SINE #define AUDIO_DAC_SAMPLE_WAVEFORM_TRIANGLE #define AUDIO_DAC_SAMPLE_WAVEFORM_TRAPEZOID #define AUDIO_DAC_SAMPLE_WAVEFORM_SQUARE Should you rather choose to generate and use your own sample-table with the DAC unit, implement uint16_t dac_value_generate(void) with your keyboard - for an example implementation see keyboards/planck/keymaps/synth_sample or keyboards/planck/keymaps/synth_wavetable PWM (software) \u00b6 if the DAC pins are unavailable (or the MCU has no usable DAC at all, like STM32F1xx); PWM can be an alternative. Note that there is currently only one speaker/pin supported. set in rules.mk : AUDIO_DRIVER = pwm_software and in config.h : #define AUDIO_PIN C13 (can be any pin) to have the selected pin output a pwm signal, generated from a timer callback which toggles the pin in software. Wiring \u00b6 the usual piezo wiring: red goes to the selected AUDIO_PIN, black goes to ground. OR if you can chose to drive one piezo with two pins, for example #define AUDIO_PIN B1 , #define AUDIO_PIN_ALT B2 in config.h , with #define AUDIO_PIN_ALT_AS_NEGATIVE - then the red lead could go to B1, the black to B2. PWM (hardware) \u00b6 STM32F1xx have to fall back to using PWM, but can do so in hardware; but again on currently only one speaker/pin. AUDIO_DRIVER = pwm_hardware in rules.mk , and in config.h : #define AUDIO_PIN A8 #define AUDIO_PWM_DRIVER PWMD1 #define AUDIO_PWM_CHANNEL 1 (as well as #define AUDIO_PWM_PAL_MODE 42 if you are on STM32F2 or larger) which will use Timer 1 to directly drive pin PA8 through the PWM hardware (TIM1_CH1 = PA8). Should you want to use the pwm-hardware on another pin and timer - be ready to dig into the STM32 data-sheet to pick the right TIMx_CHy and pin-alternate function. Tone Multiplexing \u00b6 Since most drivers can only render one tone per speaker at a time (with the one exception: arm dac-additive) there also exists a \"workaround-feature\" that does time-slicing/multiplexing - which does what the name implies: cycle through a set of active tones (e.g. when playing chords in Music Mode) at a given rate, and put one tone at a time out through the one/few speakers that are available. To enable this feature, and configure a starting-rate, add the following defines to config.h : #define AUDIO_ENABLE_TONE_MULTIPLEXING #define AUDIO_TONE_MULTIPLEXING_RATE_DEFAULT 10 The audio core offers interface functions to get/set/change the tone multiplexing rate from within keymap.c . Songs \u00b6 There's a couple of different sounds that will automatically be enabled without any other configuration: STARTUP_SONG // plays when the keyboard starts up (audio.c) GOODBYE_SONG // plays when you press the RESET key (quantum.c) AG_NORM_SONG // plays when you press AG_NORM (quantum.c) AG_SWAP_SONG // plays when you press AG_SWAP (quantum.c) CG_NORM_SONG // plays when you press CG_NORM (quantum.c) CG_SWAP_SONG // plays when you press CG_SWAP (quantum.c) MUSIC_ON_SONG // plays when music mode is activated (process_music.c) MUSIC_OFF_SONG // plays when music mode is deactivated (process_music.c) CHROMATIC_SONG // plays when the chromatic music mode is selected (process_music.c) GUITAR_SONG // plays when the guitar music mode is selected (process_music.c) VIOLIN_SONG // plays when the violin music mode is selected (process_music.c) MAJOR_SONG // plays when the major music mode is selected (process_music.c) You can override the default songs by doing something like this in your config.h : #ifdef AUDIO_ENABLE # define STARTUP_SONG SONG(STARTUP_SOUND) #endif A full list of sounds can be found in quantum/audio/song_list.h - feel free to add your own to this list! All available notes can be seen in quantum/audio/musical_notes.h . Additionally, if you with to maintain your own list of songs (such as ones that may be copyrighted) and not have them added to the repo, you can create a user_song_list.h file and place it in your keymap (or userspace) folder. This file will be automatically included, it just needs to exist. To play a custom sound at a particular time, you can define a song like this (near the top of the file): float my_song [][ 2 ] = SONG ( QWERTY_SOUND ); And then play your song like this: PLAY_SONG ( my_song ); Alternatively, you can play it in a loop like this: PLAY_LOOP ( my_song ); It's advised that you wrap all audio features in #ifdef AUDIO_ENABLE / #endif to avoid causing problems when audio isn't built into the keyboard. The available keycodes for audio are: AU_ON - Turn Audio Feature on AU_OFF - Turn Audio Feature off AU_TOG - Toggle Audio Feature state Info These keycodes turn all of the audio functionality on and off. Turning it off means that audio feedback, audio clicky, music mode, etc. are disabled, completely. Tempo \u00b6 the 'speed' at which SONGs are played is dictated by the set Tempo, which is measured in beats-per-minute. Note lengths are defined relative to that. The initial/default tempo is set to 120 bpm, but can be configured by setting TEMPO_DEFAULT in config.c . There is also a set of functions to modify the tempo from within the user/keymap code: void audio_set_tempo ( uint8_t tempo ); void audio_increase_tempo ( uint8_t tempo_change ); void audio_decrease_tempo ( uint8_t tempo_change ); ARM Audio Volume \u00b6 For ARM devices, you can adjust the DAC sample values. If your board is too loud for you or your coworkers, you can set the max using AUDIO_DAC_SAMPLE_MAX in your config.h : #define AUDIO_DAC_SAMPLE_MAX 4095U the DAC usually runs in 12Bit mode, hence a volume of 100% = 4095U Note: this only adjusts the volume aka 'works' if you stick to WAVEFORM_SQUARE, since its samples are generated on the fly - any other waveform uses a hardcoded/precomputed sample-buffer. Voices \u00b6 Aka \"audio effects\", different ones can be enabled by setting in config.h these defines: #define AUDIO_VOICES to enable the feature, and #define AUDIO_VOICE_DEFAULT something to select a specific effect for details see quantum/audio/voices.h and .c Music Mode \u00b6 The music mode maps your columns to a chromatic scale, and your rows to octaves. This works best with ortholinear keyboards, but can be made to work with others. All keycodes less than 0xFF get blocked, so you won't type while playing notes - if you have special keys/mods, those will still work. A work-around for this is to jump to a different layer with KC_NOs before (or after) enabling music mode. Recording is experimental due to some memory issues - if you experience some weird behavior, unplugging/replugging your keyboard will fix things. Keycodes available: MU_ON - Turn music mode on MU_OFF - Turn music mode off MU_TOG - Toggle music mode MU_MOD - Cycle through the music modes: CHROMATIC_MODE - Chromatic scale, row changes the octave GUITAR_MODE - Chromatic scale, but the row changes the string (+5 st) VIOLIN_MODE - Chromatic scale, but the row changes the string (+7 st) MAJOR_MODE - Major scale In music mode, the following keycodes work differently, and don't pass through: LCTL - start a recording LALT - stop recording/stop playing LGUI - play recording KC_UP - speed-up playback KC_DOWN - slow-down playback The pitch standard ( PITCH_STANDARD_A ) is 440.0f by default - to change this, add something like this to your config.h : #define PITCH_STANDARD_A 432.0f You can completely disable Music Mode as well. This is useful, if you're pressed for space on your controller. To disable it, add this to your config.h : #define NO_MUSIC_MODE Music Mask \u00b6 By default, MUSIC_MASK is set to keycode < 0xFF which means keycodes less than 0xFF are turned into notes, and don't output anything. You can change this by defining this in your config.h like this: #define MUSIC_MASK keycode != KC_NO Which will capture all keycodes - be careful, this will get you stuck in music mode until you restart your keyboard! For a more advanced way to control which keycodes should still be processed, you can use music_mask_kb(keycode) in <keyboard>.c and music_mask_user(keycode) in your keymap.c : bool music_mask_user(uint16_t keycode) { switch (keycode) { case RAISE: case LOWER: return false; default: return true; } } Things that return false are not part of the mask, and are always processed. Music Map \u00b6 By default, the Music Mode uses the columns and row to determine the scale for the keys. For a board that uses a rectangular matrix that matches the keyboard layout, this is just fine. However, for boards that use a more complicated matrix (such as the Planck Rev6, or many split keyboards) this would result in a very skewed experience. However, the Music Map option allows you to remap the scaling for the music mode, so it fits the layout, and is more natural. To enable this feature, add #define MUSIC_MAP to your config.h file, and then you will want to add a uint8_t music_map to your keyboard's c file, or your keymap.c . const uint8_t music_map [ MATRIX_ROWS ][ MATRIX_COLS ] = LAYOUT_ortho_4x12 ( 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ); You will want to use whichever LAYOUT macro that your keyboard uses here. This maps it to the correct key location. Start in the bottom left of the keyboard layout, and move to the right, and then upwards. Fill in all the entries until you have a complete matrix. You can look at the Planck Keyboard as an example of how to implement this. Audio Click \u00b6 This adds a click sound each time you hit a button, to simulate click sounds from the keyboard. And the sounds are slightly different for each keypress, so it doesn't sound like a single long note, if you type rapidly. CK_TOGG - Toggles the status (will play sound if enabled) CK_ON - Turns on Audio Click (plays sound) CK_OFF - Turns off Audio Click (doesn't play sound) CK_RST - Resets the frequency to the default state (plays sound at default frequency) CK_UP - Increases the frequency of the clicks (plays sound at new frequency) CK_DOWN - Decreases the frequency of the clicks (plays sound at new frequency) The feature is disabled by default, to save space. To enable it, add this to your config.h : #define AUDIO_CLICKY You can configure the default, min and max frequencies, the stepping and built in randomness by defining these values: Option Default Value Description AUDIO_CLICKY_FREQ_DEFAULT 440.0f Sets the default/starting audio frequency for the clicky sounds. AUDIO_CLICKY_FREQ_MIN 65.0f Sets the lowest frequency (under 60f are a bit buggy). AUDIO_CLICKY_FREQ_MAX 1500.0f Sets the highest frequency. Too high may result in coworkers attacking you. AUDIO_CLICKY_FREQ_FACTOR 1.18921f Sets the stepping of UP/DOWN key codes. This is a multiplicative factor. The default steps the frequency up/down by a musical minor third. AUDIO_CLICKY_FREQ_RANDOMNESS 0.05f Sets a factor of randomness for the clicks, Setting this to 0f will make each click identical, and 1.0f will make this sound much like the 90's computer screen scrolling/typing effect. AUDIO_CLICKY_DELAY_DURATION 1 An integer note duration where 1 is 1/16th of the tempo, or a sixty-fourth note (see quantum/audio/musical_notes.h for implementation details). The main clicky effect will be delayed by this duration. Adjusting this to values around 6-12 will help compensate for loud switches. MIDI Functionality \u00b6 See MIDI Audio Keycodes \u00b6 Key Aliases Description AU_ON Audio mode on AU_OFF Audio mode off AU_TOG Toggles Audio mode CLICKY_TOGGLE CK_TOGG Toggles Audio clicky mode CLICKY_UP CK_UP Increases frequency of the clicks CLICKY_DOWN CK_DOWN Decreases frequency of the clicks CLICKY_RESET CK_RST Resets frequency to default MU_ON Turns on Music Mode MU_OFF Turns off Music Mode MU_TOG Toggles Music Mode MU_MOD Cycles through the music modes","title":"\u97f3\u9891"},{"location":"feature_audio/#audio","text":"Your keyboard can make sounds! If you've got a spare pin you can hook up a simple speaker and make it beep. You can use those beeps to indicate layer transitions, modifiers, special keys, or just to play some funky 8bit tunes. To activate this feature, add AUDIO_ENABLE = yes to your rules.mk .","title":"Audio"},{"location":"feature_audio/#avr-based-boards","text":"On Atmega32U4 based boards, up to two simultaneous tones can be rendered. With one speaker connected to a PWM capable pin on PORTC driven by timer 3 and the other on one of the PWM pins on PORTB driven by timer 1. The following pins can be configured as audio outputs in config.h - for one speaker set either one out of: #define AUDIO_PIN C4 #define AUDIO_PIN C5 #define AUDIO_PIN C6 #define AUDIO_PIN B5 #define AUDIO_PIN B6 #define AUDIO_PIN B7 and optionally , for a second speaker, one of: * #define AUDIO_PIN_ALT B5 * #define AUDIO_PIN_ALT B6 * #define AUDIO_PIN_ALT B7","title":"AVR based boards"},{"location":"feature_audio/#wiring","text":"per speaker is - for example with a piezo buzzer - the black lead to Ground, and the red lead connected to the selected AUDIO_PIN for the primary; and similarly with AUDIO_PIN_ALT for the secondary.","title":"Wiring"},{"location":"feature_audio/#arm-based-boards","text":"for more technical details, see the notes on Audio driver .","title":"ARM based boards"},{"location":"feature_audio/#dac-basic","text":"Most STM32 MCUs have DAC peripherals, with a notable exception of the STM32F1xx series. Generally, the DAC peripheral drives pins A4 or A5. To enable DAC-based audio output on STM32 devices, add AUDIO_DRIVER = dac_basic to rules.mk and set in config.h either: #define AUDIO_PIN A4 or #define AUDIO_PIN A5 the other DAC channel can optionally be used with a secondary speaker, just set: #define AUDIO_PIN_ALT A4 or #define AUDIO_PIN_ALT A5 Do note though that the dac_basic driver is only capable of reproducing one tone per speaker/channel at a time, for more tones simultaneously, try the dac_additive driver.","title":"DAC (basic)"},{"location":"feature_audio/#dac-additive","text":"Another option, besides dac_basic (which produces sound through a square-wave), is to use the DAC to do additive wave synthesis. With a number of predefined wave-forms or by providing your own implementation to generate samples on the fly. To use this feature set AUDIO_DRIVER = dac_additive in your rules.mk , and select in config.h EITHER #define AUDIO_PIN A4 or #define AUDIO_PIN A5 . The used waveform defaults to sine, but others can be selected by adding one of the following defines to config.h : #define AUDIO_DAC_SAMPLE_WAVEFORM_SINE #define AUDIO_DAC_SAMPLE_WAVEFORM_TRIANGLE #define AUDIO_DAC_SAMPLE_WAVEFORM_TRAPEZOID #define AUDIO_DAC_SAMPLE_WAVEFORM_SQUARE Should you rather choose to generate and use your own sample-table with the DAC unit, implement uint16_t dac_value_generate(void) with your keyboard - for an example implementation see keyboards/planck/keymaps/synth_sample or keyboards/planck/keymaps/synth_wavetable","title":"DAC (additive)"},{"location":"feature_audio/#pwm-software","text":"if the DAC pins are unavailable (or the MCU has no usable DAC at all, like STM32F1xx); PWM can be an alternative. Note that there is currently only one speaker/pin supported. set in rules.mk : AUDIO_DRIVER = pwm_software and in config.h : #define AUDIO_PIN C13 (can be any pin) to have the selected pin output a pwm signal, generated from a timer callback which toggles the pin in software.","title":"PWM (software)"},{"location":"feature_audio/#pwm-hardware","text":"STM32F1xx have to fall back to using PWM, but can do so in hardware; but again on currently only one speaker/pin. AUDIO_DRIVER = pwm_hardware in rules.mk , and in config.h : #define AUDIO_PIN A8 #define AUDIO_PWM_DRIVER PWMD1 #define AUDIO_PWM_CHANNEL 1 (as well as #define AUDIO_PWM_PAL_MODE 42 if you are on STM32F2 or larger) which will use Timer 1 to directly drive pin PA8 through the PWM hardware (TIM1_CH1 = PA8). Should you want to use the pwm-hardware on another pin and timer - be ready to dig into the STM32 data-sheet to pick the right TIMx_CHy and pin-alternate function.","title":"PWM (hardware)"},{"location":"feature_audio/#tone-multiplexing","text":"Since most drivers can only render one tone per speaker at a time (with the one exception: arm dac-additive) there also exists a \"workaround-feature\" that does time-slicing/multiplexing - which does what the name implies: cycle through a set of active tones (e.g. when playing chords in Music Mode) at a given rate, and put one tone at a time out through the one/few speakers that are available. To enable this feature, and configure a starting-rate, add the following defines to config.h : #define AUDIO_ENABLE_TONE_MULTIPLEXING #define AUDIO_TONE_MULTIPLEXING_RATE_DEFAULT 10 The audio core offers interface functions to get/set/change the tone multiplexing rate from within keymap.c .","title":"Tone Multiplexing"},{"location":"feature_audio/#songs","text":"There's a couple of different sounds that will automatically be enabled without any other configuration: STARTUP_SONG // plays when the keyboard starts up (audio.c) GOODBYE_SONG // plays when you press the RESET key (quantum.c) AG_NORM_SONG // plays when you press AG_NORM (quantum.c) AG_SWAP_SONG // plays when you press AG_SWAP (quantum.c) CG_NORM_SONG // plays when you press CG_NORM (quantum.c) CG_SWAP_SONG // plays when you press CG_SWAP (quantum.c) MUSIC_ON_SONG // plays when music mode is activated (process_music.c) MUSIC_OFF_SONG // plays when music mode is deactivated (process_music.c) CHROMATIC_SONG // plays when the chromatic music mode is selected (process_music.c) GUITAR_SONG // plays when the guitar music mode is selected (process_music.c) VIOLIN_SONG // plays when the violin music mode is selected (process_music.c) MAJOR_SONG // plays when the major music mode is selected (process_music.c) You can override the default songs by doing something like this in your config.h : #ifdef AUDIO_ENABLE # define STARTUP_SONG SONG(STARTUP_SOUND) #endif A full list of sounds can be found in quantum/audio/song_list.h - feel free to add your own to this list! All available notes can be seen in quantum/audio/musical_notes.h . Additionally, if you with to maintain your own list of songs (such as ones that may be copyrighted) and not have them added to the repo, you can create a user_song_list.h file and place it in your keymap (or userspace) folder. This file will be automatically included, it just needs to exist. To play a custom sound at a particular time, you can define a song like this (near the top of the file): float my_song [][ 2 ] = SONG ( QWERTY_SOUND ); And then play your song like this: PLAY_SONG ( my_song ); Alternatively, you can play it in a loop like this: PLAY_LOOP ( my_song ); It's advised that you wrap all audio features in #ifdef AUDIO_ENABLE / #endif to avoid causing problems when audio isn't built into the keyboard. The available keycodes for audio are: AU_ON - Turn Audio Feature on AU_OFF - Turn Audio Feature off AU_TOG - Toggle Audio Feature state Info These keycodes turn all of the audio functionality on and off. Turning it off means that audio feedback, audio clicky, music mode, etc. are disabled, completely.","title":"Songs"},{"location":"feature_audio/#tempo","text":"the 'speed' at which SONGs are played is dictated by the set Tempo, which is measured in beats-per-minute. Note lengths are defined relative to that. The initial/default tempo is set to 120 bpm, but can be configured by setting TEMPO_DEFAULT in config.c . There is also a set of functions to modify the tempo from within the user/keymap code: void audio_set_tempo ( uint8_t tempo ); void audio_increase_tempo ( uint8_t tempo_change ); void audio_decrease_tempo ( uint8_t tempo_change );","title":"Tempo"},{"location":"feature_audio/#arm-audio-volume","text":"For ARM devices, you can adjust the DAC sample values. If your board is too loud for you or your coworkers, you can set the max using AUDIO_DAC_SAMPLE_MAX in your config.h : #define AUDIO_DAC_SAMPLE_MAX 4095U the DAC usually runs in 12Bit mode, hence a volume of 100% = 4095U Note: this only adjusts the volume aka 'works' if you stick to WAVEFORM_SQUARE, since its samples are generated on the fly - any other waveform uses a hardcoded/precomputed sample-buffer.","title":"ARM Audio Volume"},{"location":"feature_audio/#voices","text":"Aka \"audio effects\", different ones can be enabled by setting in config.h these defines: #define AUDIO_VOICES to enable the feature, and #define AUDIO_VOICE_DEFAULT something to select a specific effect for details see quantum/audio/voices.h and .c","title":"Voices"},{"location":"feature_audio/#music-mode","text":"The music mode maps your columns to a chromatic scale, and your rows to octaves. This works best with ortholinear keyboards, but can be made to work with others. All keycodes less than 0xFF get blocked, so you won't type while playing notes - if you have special keys/mods, those will still work. A work-around for this is to jump to a different layer with KC_NOs before (or after) enabling music mode. Recording is experimental due to some memory issues - if you experience some weird behavior, unplugging/replugging your keyboard will fix things. Keycodes available: MU_ON - Turn music mode on MU_OFF - Turn music mode off MU_TOG - Toggle music mode MU_MOD - Cycle through the music modes: CHROMATIC_MODE - Chromatic scale, row changes the octave GUITAR_MODE - Chromatic scale, but the row changes the string (+5 st) VIOLIN_MODE - Chromatic scale, but the row changes the string (+7 st) MAJOR_MODE - Major scale In music mode, the following keycodes work differently, and don't pass through: LCTL - start a recording LALT - stop recording/stop playing LGUI - play recording KC_UP - speed-up playback KC_DOWN - slow-down playback The pitch standard ( PITCH_STANDARD_A ) is 440.0f by default - to change this, add something like this to your config.h : #define PITCH_STANDARD_A 432.0f You can completely disable Music Mode as well. This is useful, if you're pressed for space on your controller. To disable it, add this to your config.h : #define NO_MUSIC_MODE","title":"Music Mode"},{"location":"feature_audio/#music-mask","text":"By default, MUSIC_MASK is set to keycode < 0xFF which means keycodes less than 0xFF are turned into notes, and don't output anything. You can change this by defining this in your config.h like this: #define MUSIC_MASK keycode != KC_NO Which will capture all keycodes - be careful, this will get you stuck in music mode until you restart your keyboard! For a more advanced way to control which keycodes should still be processed, you can use music_mask_kb(keycode) in <keyboard>.c and music_mask_user(keycode) in your keymap.c : bool music_mask_user(uint16_t keycode) { switch (keycode) { case RAISE: case LOWER: return false; default: return true; } } Things that return false are not part of the mask, and are always processed.","title":"Music Mask"},{"location":"feature_audio/#music-map","text":"By default, the Music Mode uses the columns and row to determine the scale for the keys. For a board that uses a rectangular matrix that matches the keyboard layout, this is just fine. However, for boards that use a more complicated matrix (such as the Planck Rev6, or many split keyboards) this would result in a very skewed experience. However, the Music Map option allows you to remap the scaling for the music mode, so it fits the layout, and is more natural. To enable this feature, add #define MUSIC_MAP to your config.h file, and then you will want to add a uint8_t music_map to your keyboard's c file, or your keymap.c . const uint8_t music_map [ MATRIX_ROWS ][ MATRIX_COLS ] = LAYOUT_ortho_4x12 ( 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 ); You will want to use whichever LAYOUT macro that your keyboard uses here. This maps it to the correct key location. Start in the bottom left of the keyboard layout, and move to the right, and then upwards. Fill in all the entries until you have a complete matrix. You can look at the Planck Keyboard as an example of how to implement this.","title":"Music Map"},{"location":"feature_audio/#audio-click","text":"This adds a click sound each time you hit a button, to simulate click sounds from the keyboard. And the sounds are slightly different for each keypress, so it doesn't sound like a single long note, if you type rapidly. CK_TOGG - Toggles the status (will play sound if enabled) CK_ON - Turns on Audio Click (plays sound) CK_OFF - Turns off Audio Click (doesn't play sound) CK_RST - Resets the frequency to the default state (plays sound at default frequency) CK_UP - Increases the frequency of the clicks (plays sound at new frequency) CK_DOWN - Decreases the frequency of the clicks (plays sound at new frequency) The feature is disabled by default, to save space. To enable it, add this to your config.h : #define AUDIO_CLICKY You can configure the default, min and max frequencies, the stepping and built in randomness by defining these values: Option Default Value Description AUDIO_CLICKY_FREQ_DEFAULT 440.0f Sets the default/starting audio frequency for the clicky sounds. AUDIO_CLICKY_FREQ_MIN 65.0f Sets the lowest frequency (under 60f are a bit buggy). AUDIO_CLICKY_FREQ_MAX 1500.0f Sets the highest frequency. Too high may result in coworkers attacking you. AUDIO_CLICKY_FREQ_FACTOR 1.18921f Sets the stepping of UP/DOWN key codes. This is a multiplicative factor. The default steps the frequency up/down by a musical minor third. AUDIO_CLICKY_FREQ_RANDOMNESS 0.05f Sets a factor of randomness for the clicks, Setting this to 0f will make each click identical, and 1.0f will make this sound much like the 90's computer screen scrolling/typing effect. AUDIO_CLICKY_DELAY_DURATION 1 An integer note duration where 1 is 1/16th of the tempo, or a sixty-fourth note (see quantum/audio/musical_notes.h for implementation details). The main clicky effect will be delayed by this duration. Adjusting this to values around 6-12 will help compensate for loud switches.","title":"Audio Click"},{"location":"feature_audio/#midi-functionality","text":"See MIDI","title":"MIDI Functionality"},{"location":"feature_audio/#audio-keycodes","text":"Key Aliases Description AU_ON Audio mode on AU_OFF Audio mode off AU_TOG Toggles Audio mode CLICKY_TOGGLE CK_TOGG Toggles Audio clicky mode CLICKY_UP CK_UP Increases frequency of the clicks CLICKY_DOWN CK_DOWN Decreases frequency of the clicks CLICKY_RESET CK_RST Resets frequency to default MU_ON Turns on Music Mode MU_OFF Turns off Music Mode MU_TOG Toggles Music Mode MU_MOD Cycles through the music modes","title":"Audio Keycodes"},{"location":"feature_auto_shift/","text":"Auto Shift: Why Do We Need a Shift Key? \u00b6 Tap a key and you get its character. Tap a key, but hold it slightly longer and you get its shifted state. Voil\u00e0! No shift key needed! Why Auto Shift? \u00b6 Many people suffer from various forms of RSI. A common cause is stretching your fingers repetitively long distances. For us on the keyboard, the pinky does that all too often when reaching for the shift key. Auto Shift looks to alleviate that problem. How Does It Work? \u00b6 When you tap a key, it stays depressed for a short period of time before it is then released. This depressed time is a different length for everyone. Auto Shift defines a constant AUTO_SHIFT_TIMEOUT which is typically set to twice your normal pressed state time. When you press a key, a timer starts, and if you have not released the key after the AUTO_SHIFT_TIMEOUT period, then a shifted version of the key is emitted. If the time is less than the AUTO_SHIFT_TIMEOUT time, or you press another key, then the normal state is emitted. If AUTO_SHIFT_REPEAT is defined, there is keyrepeat support. Holding the key down will repeat the shifted key, though this can be disabled with AUTO_SHIFT_NO_AUTO_REPEAT . If you want to repeat the normal key, then tap it once then immediately (within TAPPING_TERM ) hold it down again (this works with the shifted value as well if auto-repeat is disabled). Are There Limitations to Auto Shift? \u00b6 Yes, unfortunately. You will have characters that are shifted when you did not intend on shifting, and other characters you wanted shifted, but were not. This simply comes down to practice. As we get in a hurry, we think we have hit the key long enough for a shifted version, but we did not. On the other hand, we may think we are tapping the keys, but really we have held it for a little longer than anticipated. Additionally, with keyrepeat the desired shift state can get mixed up. It will always 'belong' to the last key pressed. For example, keyrepeating a capital and then tapping something lowercase (whether or not it's an Auto Shift key) will result in the capital's key still being held, but shift not. How Do I Enable Auto Shift? \u00b6 Add to your rules.mk in the keymap folder: AUTO_SHIFT_ENABLE = yes If no rules.mk exists, you can create one. Then compile and install your new firmware with Auto Key enabled! That's it! Modifiers \u00b6 By default, Auto Shift is disabled for any key press that is accompanied by one or more modifiers. Thus, Ctrl+A that you hold for a really long time is not the same as Ctrl+Shift+A. You can re-enable Auto Shift for modifiers by adding a define to your config.h #define AUTO_SHIFT_MODIFIERS In which case, Ctrl+A held past the AUTO_SHIFT_TIMEOUT will be sent as Ctrl+Shift+A Configuring Auto Shift \u00b6 If desired, there is some configuration that can be done to change the behavior of Auto Shift. This is done by setting various variables the config.h file located in your keymap folder. If no config.h file exists, you can create one. A sample is #pragma once #define AUTO_SHIFT_TIMEOUT 150 #define NO_AUTO_SHIFT_SPECIAL AUTO_SHIFT_TIMEOUT (Value in ms) \u00b6 This controls how long you have to hold a key before you get the shifted state. Obviously, this is different for everyone. For the common person, a setting of 135 to 150 works great. However, one should start with a value of at least 175, which is the default value. Then work down from there. The idea is to have the shortest time required to get the shifted state without having false positives. Play with this value until things are perfect. Many find that all will work well at a given value, but one or two keys will still emit the shifted state on occasion. This is simply due to habit and holding some keys a little longer than others. Once you find this value, work on tapping your problem keys a little quicker than normal and you will be set. Tip Auto Shift has three special keys that can help you get this value right very quick. See Using Auto Shift Setup for more details! NO_AUTO_SHIFT_SPECIAL (simple define) \u00b6 Do not Auto Shift special keys, which include -_, =+, [{, ]}, ;:, '\", ,<, .>, and /? NO_AUTO_SHIFT_NUMERIC (simple define) \u00b6 Do not Auto Shift numeric keys, zero through nine. NO_AUTO_SHIFT_ALPHA (simple define) \u00b6 Do not Auto Shift alpha characters, which include A through Z. Auto Shift Per Key \u00b6 This is a function that allows you to determine which keys shold be autoshifted, much like the tap-hold keys. The default function looks like this: bool get_auto_shifted_key ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { # ifndef NO_AUTO_SHIFT_ALPHA case KC_A ... KC_Z : # endif # ifndef NO_AUTO_SHIFT_NUMERIC case KC_1 ... KC_0 : # endif # ifndef NO_AUTO_SHIFT_SPECIAL case KC_TAB : case KC_MINUS ... KC_SLASH : case KC_NONUS_BSLASH : # endif return true ; } return false ; } This functionality is enabled by default, and does not need a define. AUTO_SHIFT_REPEAT (simple define) \u00b6 Enables keyrepeat. AUTO_SHIFT_NO_AUTO_REPEAT (simple define) \u00b6 Disables automatically keyrepeating when AUTO_SHIFT_TIMEOUT is exceeded. Using Auto Shift Setup \u00b6 This will enable you to define three keys temporarily to increase, decrease and report your AUTO_SHIFT_TIMEOUT . Setup \u00b6 Map three keys temporarily in your keymap: Key Name Description KC_ASDN Lower the Auto Shift timeout variable (down) KC_ASUP Raise the Auto Shift timeout variable (up) KC_ASRP Report your current Auto Shift timeout value KC_ASON Turns on the Auto Shift Function KC_ASOFF Turns off the Auto Shift Function KC_ASTG Toggles the state of the Auto Shift feature Compile and upload your new firmware. Use \u00b6 It is important to note that during these tests, you should be typing completely normal and with no intention of shifted keys. Type multiple sentences of alphabetical letters. Observe any upper case letters. If there are none, press the key you have mapped to KC_ASDN to decrease time Auto Shift timeout value and go back to step 1. If there are some upper case letters, decide if you need to work on tapping those keys with less down time, or if you need to increase the timeout. If you decide to increase the timeout, press the key you have mapped to KC_ASUP and go back to step 1. Once you are happy with your results, press the key you have mapped to KC_ASRP . The keyboard will type by itself the value of your AUTO_SHIFT_TIMEOUT . Update AUTO_SHIFT_TIMEOUT in your config.h with the value reported. Add AUTO_SHIFT_NO_SETUP to your config.h . Remove the key bindings KC_ASDN , KC_ASUP and KC_ASRP . Compile and upload your new firmware. An Example Run \u00b6 hello world. my name is john doe. i am a computer programmer playing with keyboards right now. [PRESS KC_ASDN quite a few times] heLLo woRLd. mY nAMe is JOHn dOE. i AM A compUTeR proGRaMMER PlAYiNG witH KEYboArDS RiGHT NOw. [PRESS KC_ASUP a few times] hello world. my name is john Doe. i am a computer programmer playing with keyboarDs right now. [PRESS KC_ASRP] 115 The keyboard typed 115 which represents your current AUTO_SHIFT_TIMEOUT value. You are now set! Practice on the D key a little bit that showed up in the testing and you'll be golden.","title":"\u81ea\u52a8shift"},{"location":"feature_auto_shift/#auto-shift-why-do-we-need-a-shift-key","text":"Tap a key and you get its character. Tap a key, but hold it slightly longer and you get its shifted state. Voil\u00e0! No shift key needed!","title":"Auto Shift: Why Do We Need a Shift Key?"},{"location":"feature_auto_shift/#why-auto-shift","text":"Many people suffer from various forms of RSI. A common cause is stretching your fingers repetitively long distances. For us on the keyboard, the pinky does that all too often when reaching for the shift key. Auto Shift looks to alleviate that problem.","title":"Why Auto Shift?"},{"location":"feature_auto_shift/#how-does-it-work","text":"When you tap a key, it stays depressed for a short period of time before it is then released. This depressed time is a different length for everyone. Auto Shift defines a constant AUTO_SHIFT_TIMEOUT which is typically set to twice your normal pressed state time. When you press a key, a timer starts, and if you have not released the key after the AUTO_SHIFT_TIMEOUT period, then a shifted version of the key is emitted. If the time is less than the AUTO_SHIFT_TIMEOUT time, or you press another key, then the normal state is emitted. If AUTO_SHIFT_REPEAT is defined, there is keyrepeat support. Holding the key down will repeat the shifted key, though this can be disabled with AUTO_SHIFT_NO_AUTO_REPEAT . If you want to repeat the normal key, then tap it once then immediately (within TAPPING_TERM ) hold it down again (this works with the shifted value as well if auto-repeat is disabled).","title":"How Does It Work?"},{"location":"feature_auto_shift/#are-there-limitations-to-auto-shift","text":"Yes, unfortunately. You will have characters that are shifted when you did not intend on shifting, and other characters you wanted shifted, but were not. This simply comes down to practice. As we get in a hurry, we think we have hit the key long enough for a shifted version, but we did not. On the other hand, we may think we are tapping the keys, but really we have held it for a little longer than anticipated. Additionally, with keyrepeat the desired shift state can get mixed up. It will always 'belong' to the last key pressed. For example, keyrepeating a capital and then tapping something lowercase (whether or not it's an Auto Shift key) will result in the capital's key still being held, but shift not.","title":"Are There Limitations to Auto Shift?"},{"location":"feature_auto_shift/#how-do-i-enable-auto-shift","text":"Add to your rules.mk in the keymap folder: AUTO_SHIFT_ENABLE = yes If no rules.mk exists, you can create one. Then compile and install your new firmware with Auto Key enabled! That's it!","title":"How Do I Enable Auto Shift?"},{"location":"feature_auto_shift/#modifiers","text":"By default, Auto Shift is disabled for any key press that is accompanied by one or more modifiers. Thus, Ctrl+A that you hold for a really long time is not the same as Ctrl+Shift+A. You can re-enable Auto Shift for modifiers by adding a define to your config.h #define AUTO_SHIFT_MODIFIERS In which case, Ctrl+A held past the AUTO_SHIFT_TIMEOUT will be sent as Ctrl+Shift+A","title":"Modifiers"},{"location":"feature_auto_shift/#configuring-auto-shift","text":"If desired, there is some configuration that can be done to change the behavior of Auto Shift. This is done by setting various variables the config.h file located in your keymap folder. If no config.h file exists, you can create one. A sample is #pragma once #define AUTO_SHIFT_TIMEOUT 150 #define NO_AUTO_SHIFT_SPECIAL","title":"Configuring Auto Shift"},{"location":"feature_auto_shift/#auto_shift_timeout-value-in-ms","text":"This controls how long you have to hold a key before you get the shifted state. Obviously, this is different for everyone. For the common person, a setting of 135 to 150 works great. However, one should start with a value of at least 175, which is the default value. Then work down from there. The idea is to have the shortest time required to get the shifted state without having false positives. Play with this value until things are perfect. Many find that all will work well at a given value, but one or two keys will still emit the shifted state on occasion. This is simply due to habit and holding some keys a little longer than others. Once you find this value, work on tapping your problem keys a little quicker than normal and you will be set. Tip Auto Shift has three special keys that can help you get this value right very quick. See Using Auto Shift Setup for more details!","title":"AUTO_SHIFT_TIMEOUT (Value in ms)"},{"location":"feature_auto_shift/#no_auto_shift_special-simple-define","text":"Do not Auto Shift special keys, which include -_, =+, [{, ]}, ;:, '\", ,<, .>, and /?","title":"NO_AUTO_SHIFT_SPECIAL (simple define)"},{"location":"feature_auto_shift/#no_auto_shift_numeric-simple-define","text":"Do not Auto Shift numeric keys, zero through nine.","title":"NO_AUTO_SHIFT_NUMERIC (simple define)"},{"location":"feature_auto_shift/#no_auto_shift_alpha-simple-define","text":"Do not Auto Shift alpha characters, which include A through Z.","title":"NO_AUTO_SHIFT_ALPHA (simple define)"},{"location":"feature_auto_shift/#auto-shift-per-key","text":"This is a function that allows you to determine which keys shold be autoshifted, much like the tap-hold keys. The default function looks like this: bool get_auto_shifted_key ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { # ifndef NO_AUTO_SHIFT_ALPHA case KC_A ... KC_Z : # endif # ifndef NO_AUTO_SHIFT_NUMERIC case KC_1 ... KC_0 : # endif # ifndef NO_AUTO_SHIFT_SPECIAL case KC_TAB : case KC_MINUS ... KC_SLASH : case KC_NONUS_BSLASH : # endif return true ; } return false ; } This functionality is enabled by default, and does not need a define.","title":"Auto Shift Per Key"},{"location":"feature_auto_shift/#auto_shift_repeat-simple-define","text":"Enables keyrepeat.","title":"AUTO_SHIFT_REPEAT (simple define)"},{"location":"feature_auto_shift/#auto_shift_no_auto_repeat-simple-define","text":"Disables automatically keyrepeating when AUTO_SHIFT_TIMEOUT is exceeded.","title":"AUTO_SHIFT_NO_AUTO_REPEAT (simple define)"},{"location":"feature_auto_shift/#using-auto-shift-setup","text":"This will enable you to define three keys temporarily to increase, decrease and report your AUTO_SHIFT_TIMEOUT .","title":"Using Auto Shift Setup"},{"location":"feature_auto_shift/#setup","text":"Map three keys temporarily in your keymap: Key Name Description KC_ASDN Lower the Auto Shift timeout variable (down) KC_ASUP Raise the Auto Shift timeout variable (up) KC_ASRP Report your current Auto Shift timeout value KC_ASON Turns on the Auto Shift Function KC_ASOFF Turns off the Auto Shift Function KC_ASTG Toggles the state of the Auto Shift feature Compile and upload your new firmware.","title":"Setup"},{"location":"feature_auto_shift/#use","text":"It is important to note that during these tests, you should be typing completely normal and with no intention of shifted keys. Type multiple sentences of alphabetical letters. Observe any upper case letters. If there are none, press the key you have mapped to KC_ASDN to decrease time Auto Shift timeout value and go back to step 1. If there are some upper case letters, decide if you need to work on tapping those keys with less down time, or if you need to increase the timeout. If you decide to increase the timeout, press the key you have mapped to KC_ASUP and go back to step 1. Once you are happy with your results, press the key you have mapped to KC_ASRP . The keyboard will type by itself the value of your AUTO_SHIFT_TIMEOUT . Update AUTO_SHIFT_TIMEOUT in your config.h with the value reported. Add AUTO_SHIFT_NO_SETUP to your config.h . Remove the key bindings KC_ASDN , KC_ASUP and KC_ASRP . Compile and upload your new firmware.","title":"Use"},{"location":"feature_backlight/","text":"Backlighting \u00b6 Many keyboards support backlit keys by way of individual LEDs placed through or underneath the keyswitches. This feature is distinct from both the RGB underglow and RGB matrix features as it usually allows for only a single colour per switch, though you can obviously install multiple different single coloured LEDs on a keyboard. QMK is able to control the brightness of these LEDs by switching them on and off rapidly in a certain ratio, a technique known as Pulse Width Modulation , or PWM. By altering the duty cycle of the PWM signal, it creates the illusion of dimming. The MCU can only supply so much current to its GPIO pins. Instead of powering the backlight directly from the MCU, the backlight pin is connected to a transistor or MOSFET that switches the power to the LEDs. Most keyboards have backlighting enabled by default if they support it, but if it is not working for you, check that your rules.mk includes the following: BACKLIGHT_ENABLE = yes Keycodes \u00b6 Once enabled, the following keycodes below can be used to change the backlight level. Key Description BL_TOGG Turn the backlight on or off BL_STEP Cycle through backlight levels BL_ON Set the backlight to max brightness BL_OFF Turn the backlight off BL_INC Increase the backlight level BL_DEC Decrease the backlight level BL_BRTG Toggle backlight breathing Functions \u00b6 These functions can be used to change the backlighting in custom code: Function Description backlight_toggle() Turn the backlight on or off backlight_enable() Turn the backlight on backlight_disable() Turn the backlight off backlight_step() Cycle through backlight levels backlight_increase() Increase the backlight level backlight_decrease() Decrease the backlight level backlight_level(x) Sets the backlight level to specified level get_backlight_level() Return the current backlight level is_backlight_enabled() Return whether the backlight is currently on If backlight breathing is enabled (see below), the following functions are also available: Function Description breathing_toggle() Turn the backlight breathing on or off breathing_enable() Turns on backlight breathing breathing_disable() Turns off backlight breathing Configuration \u00b6 To select which driver to use, configure your rules.mk with the following: BACKLIGHT_DRIVER = software Valid driver values are pwm , software , custom or no . See below for help on individual drivers. To configure the backlighting, #define these in your config.h : Define Default Description BACKLIGHT_PIN Not defined The pin that controls the LED(s) BACKLIGHT_LEVELS 3 The number of brightness levels (maximum 31 excluding off) BACKLIGHT_CAPS_LOCK Not defined Enable Caps Lock indicator using backlight (for keyboards without dedicated LED) BACKLIGHT_BREATHING Not defined Enable backlight breathing, if supported BREATHING_PERIOD 6 The length of one backlight \"breath\" in seconds BACKLIGHT_ON_STATE 1 The state of the backlight pin when the backlight is \"on\" - 1 for high, 0 for low BACKLIGHT_LIMIT_VAL 255 The maximum duty cycle of the backlight -- 255 allows for full brightness, any lower will decrease the maximum. BACKLIGHT_DEFAULT_LEVEL BACKLIGHT_LEVELS The default backlight level to use upon clearing the EEPROM BACKLIGHT_DEFAULT_BREATHING Not defined Whether to enable backlight breathing upon clearing the EEPROM Unless you are designing your own keyboard, you generally should not need to change the BACKLIGHT_PIN or BACKLIGHT_ON_STATE . Backlight On State \u00b6 Most backlight circuits are driven by an N-channel MOSFET or NPN transistor. This means that to turn the transistor on and light the LEDs, you must drive the backlight pin, connected to the gate or base, high . Sometimes, however, a P-channel MOSFET, or a PNP transistor is used. In this case, when the transistor is on, the pin is driven low instead. This functionality is configured at the keyboard level with the BACKLIGHT_ON_STATE define. AVR Driver \u00b6 The pwm driver is configured by default, however the equivalent setting within rules.mk would be: BACKLIGHT_DRIVER = pwm Caveats \u00b6 On AVR boards, QMK automatically decides which driver to use according to the following table: Backlight Pin AT90USB64/128 AT90USB162 ATmega16/32U4 ATmega16/32U2 ATmega32A ATmega328/P B1 Timer 1 B2 Timer 1 B5 Timer 1 Timer 1 B6 Timer 1 Timer 1 B7 Timer 1 Timer 1 Timer 1 Timer 1 C4 Timer 3 C5 Timer 3 Timer 1 Timer 1 C6 Timer 3 Timer 1 Timer 3 Timer 1 D4 Timer 1 D5 Timer 1 All other pins will use timer-assisted software PWM: Audio Pin Audio Timer Software PWM Timer C4 Timer 3 Timer 1 C5 Timer 3 Timer 1 C6 Timer 3 Timer 1 B5 Timer 1 Timer 3 B6 Timer 1 Timer 3 B7 Timer 1 Timer 3 When both timers are in use for Audio, the backlight PWM cannot use a hardware timer, and will instead be triggered during the matrix scan. In this case, breathing is not supported, and the backlight might flicker, because the PWM computation may not be called with enough timing precision. Hardware PWM Implementation \u00b6 When using the supported pins for backlighting, QMK will use a hardware timer configured to output a PWM signal. This timer will count up to ICRx (by default 0xFFFF ) before resetting to 0. The desired brightness is calculated and stored in the OCRxx register. When the counter reaches this value, the backlight pin will go low, and is pulled high again when the counter resets. In this way OCRxx essentially controls the duty cycle of the LEDs, and thus the brightness, where 0x0000 is completely off and 0xFFFF is completely on. The breathing effect is achieved by registering an interrupt handler for TIMER1_OVF_vect that is called whenever the counter resets, roughly 244 times per second. In this handler, the value of an incrementing counter is mapped onto a precomputed brightness curve. To turn off breathing, the interrupt handler is simply disabled, and the brightness reset to the level stored in EEPROM. Timer Assisted PWM Implementation \u00b6 When BACKLIGHT_PIN is not set to a hardware backlight pin, QMK will use a hardware timer configured to trigger software interrupts. This time will count up to ICRx (by default 0xFFFF ) before resetting to 0. When resetting to 0, the CPU will fire an OVF (overflow) interrupt that will turn the LEDs on, starting the duty cycle. The desired brightness is calculated and stored in the OCRxx register. When the counter reaches this value, the CPU will fire a Compare Output match interrupt, which will turn the LEDs off. In this way OCRxx essentially controls the duty cycle of the LEDs, and thus the brightness, where 0x0000 is completely off and 0xFFFF is completely on. The breathing effect is the same as in the hardware PWM implementation. ARM Driver \u00b6 While still in its early stages, ARM backlight support aims to eventually have feature parity with AVR. The pwm driver is configured by default, however the equivalent setting within rules.mk would be: BACKLIGHT_DRIVER = pwm ChibiOS Configuration \u00b6 The following #define s apply only to ARM-based keyboards: Define Default Description BACKLIGHT_PWM_DRIVER PWMD4 The PWM driver to use BACKLIGHT_PWM_CHANNEL 3 The PWM channel to use BACKLIGHT_PAL_MODE 2 The pin alternative function to use See the ST datasheet for your particular MCU to determine these values. Unless you are designing your own keyboard, you generally should not need to change them. Caveats \u00b6 Currently only hardware PWM is supported, not timer assisted, and does not provide automatic configuration. Software PWM Driver \u00b6 In this mode, PWM is \"emulated\" while running other keyboard tasks. It offers maximum hardware compatibility without extra platform configuration. The tradeoff is the backlight might jitter when the keyboard is busy. To enable, add this to your rules.mk : BACKLIGHT_DRIVER = software Multiple Backlight Pins \u00b6 Most keyboards have only one backlight pin which controls all backlight LEDs (especially if the backlight is connected to a hardware PWM pin). In software PWM, it is possible to define multiple backlight pins, which will be turned on and off at the same time during the PWM duty cycle. This feature allows to set, for instance, the Caps Lock LED's (or any other controllable LED) brightness at the same level as the other LEDs of the backlight. This is useful if you have mapped Control in place of Caps Lock and you need the Caps Lock LED to be part of the backlight instead of being activated when Caps Lock is on, as it is usually wired to a separate pin from the backlight. To activate multiple backlight pins, add something like this to your config.h , instead of BACKLIGHT_PIN : #define BACKLIGHT_PINS { F5, B2 } Custom Driver \u00b6 If none of the above drivers apply to your board (for example, you are using a separate IC to control the backlight), you can implement a custom backlight driver using this simple API provided by QMK. To enable, add this to your rules.mk : BACKLIGHT_DRIVER = custom Then implement any of these hooks: void backlight_init_ports ( void ) { // Optional - runs on startup // Usually you want to configure pins here } void backlight_set ( uint8_t level ) { // Optional - runs on level change // Usually you want to respond to the new value } void backlight_task ( void ) { // Optional - runs periodically // Note that this is called in the main keyboard loop, // so long running actions here can cause performance issues } Example Schematic \u00b6 In this typical example, the backlight LEDs are all connected in parallel towards an N-channel MOSFET. Its gate pin is wired to one of the microcontroller's GPIO pins through a 470\u2126 resistor to avoid ringing. A pulldown resistor is also placed between the gate pin and ground to keep it at a defined state when it is not otherwise being driven by the MCU. The values of these resistors are not critical - see this Electronics StackExchange question for more information.","title":"\u80cc\u5149"},{"location":"feature_backlight/#backlighting","text":"Many keyboards support backlit keys by way of individual LEDs placed through or underneath the keyswitches. This feature is distinct from both the RGB underglow and RGB matrix features as it usually allows for only a single colour per switch, though you can obviously install multiple different single coloured LEDs on a keyboard. QMK is able to control the brightness of these LEDs by switching them on and off rapidly in a certain ratio, a technique known as Pulse Width Modulation , or PWM. By altering the duty cycle of the PWM signal, it creates the illusion of dimming. The MCU can only supply so much current to its GPIO pins. Instead of powering the backlight directly from the MCU, the backlight pin is connected to a transistor or MOSFET that switches the power to the LEDs. Most keyboards have backlighting enabled by default if they support it, but if it is not working for you, check that your rules.mk includes the following: BACKLIGHT_ENABLE = yes","title":"Backlighting"},{"location":"feature_backlight/#keycodes","text":"Once enabled, the following keycodes below can be used to change the backlight level. Key Description BL_TOGG Turn the backlight on or off BL_STEP Cycle through backlight levels BL_ON Set the backlight to max brightness BL_OFF Turn the backlight off BL_INC Increase the backlight level BL_DEC Decrease the backlight level BL_BRTG Toggle backlight breathing","title":"Keycodes"},{"location":"feature_backlight/#functions","text":"These functions can be used to change the backlighting in custom code: Function Description backlight_toggle() Turn the backlight on or off backlight_enable() Turn the backlight on backlight_disable() Turn the backlight off backlight_step() Cycle through backlight levels backlight_increase() Increase the backlight level backlight_decrease() Decrease the backlight level backlight_level(x) Sets the backlight level to specified level get_backlight_level() Return the current backlight level is_backlight_enabled() Return whether the backlight is currently on If backlight breathing is enabled (see below), the following functions are also available: Function Description breathing_toggle() Turn the backlight breathing on or off breathing_enable() Turns on backlight breathing breathing_disable() Turns off backlight breathing","title":"Functions"},{"location":"feature_backlight/#configuration","text":"To select which driver to use, configure your rules.mk with the following: BACKLIGHT_DRIVER = software Valid driver values are pwm , software , custom or no . See below for help on individual drivers. To configure the backlighting, #define these in your config.h : Define Default Description BACKLIGHT_PIN Not defined The pin that controls the LED(s) BACKLIGHT_LEVELS 3 The number of brightness levels (maximum 31 excluding off) BACKLIGHT_CAPS_LOCK Not defined Enable Caps Lock indicator using backlight (for keyboards without dedicated LED) BACKLIGHT_BREATHING Not defined Enable backlight breathing, if supported BREATHING_PERIOD 6 The length of one backlight \"breath\" in seconds BACKLIGHT_ON_STATE 1 The state of the backlight pin when the backlight is \"on\" - 1 for high, 0 for low BACKLIGHT_LIMIT_VAL 255 The maximum duty cycle of the backlight -- 255 allows for full brightness, any lower will decrease the maximum. BACKLIGHT_DEFAULT_LEVEL BACKLIGHT_LEVELS The default backlight level to use upon clearing the EEPROM BACKLIGHT_DEFAULT_BREATHING Not defined Whether to enable backlight breathing upon clearing the EEPROM Unless you are designing your own keyboard, you generally should not need to change the BACKLIGHT_PIN or BACKLIGHT_ON_STATE .","title":"Configuration"},{"location":"feature_backlight/#backlight-on-state","text":"Most backlight circuits are driven by an N-channel MOSFET or NPN transistor. This means that to turn the transistor on and light the LEDs, you must drive the backlight pin, connected to the gate or base, high . Sometimes, however, a P-channel MOSFET, or a PNP transistor is used. In this case, when the transistor is on, the pin is driven low instead. This functionality is configured at the keyboard level with the BACKLIGHT_ON_STATE define.","title":"Backlight On State"},{"location":"feature_backlight/#avr-driver","text":"The pwm driver is configured by default, however the equivalent setting within rules.mk would be: BACKLIGHT_DRIVER = pwm","title":"AVR Driver"},{"location":"feature_backlight/#arm-configuration","text":"While still in its early stages, ARM backlight support aims to eventually have feature parity with AVR. The pwm driver is configured by default, however the equivalent setting within rules.mk would be: BACKLIGHT_DRIVER = pwm","title":"ARM Driver"},{"location":"feature_backlight/#arm-configuration","text":"The following #define s apply only to ARM-based keyboards: Define Default Description BACKLIGHT_PWM_DRIVER PWMD4 The PWM driver to use BACKLIGHT_PWM_CHANNEL 3 The PWM channel to use BACKLIGHT_PAL_MODE 2 The pin alternative function to use See the ST datasheet for your particular MCU to determine these values. Unless you are designing your own keyboard, you generally should not need to change them.","title":"ARM Driver"},{"location":"feature_backlight/#software-pwm-driver","text":"In this mode, PWM is \"emulated\" while running other keyboard tasks. It offers maximum hardware compatibility without extra platform configuration. The tradeoff is the backlight might jitter when the keyboard is busy. To enable, add this to your rules.mk : BACKLIGHT_DRIVER = software","title":"Software PWM Driver"},{"location":"feature_backlight/#custom-driver","text":"If none of the above drivers apply to your board (for example, you are using a separate IC to control the backlight), you can implement a custom backlight driver using this simple API provided by QMK. To enable, add this to your rules.mk : BACKLIGHT_DRIVER = custom Then implement any of these hooks: void backlight_init_ports ( void ) { // Optional - runs on startup // Usually you want to configure pins here } void backlight_set ( uint8_t level ) { // Optional - runs on level change // Usually you want to respond to the new value } void backlight_task ( void ) { // Optional - runs periodically // Note that this is called in the main keyboard loop, // so long running actions here can cause performance issues }","title":"Custom Driver"},{"location":"feature_backlight/#example-schematic","text":"In this typical example, the backlight LEDs are all connected in parallel towards an N-channel MOSFET. Its gate pin is wired to one of the microcontroller's GPIO pins through a 470\u2126 resistor to avoid ringing. A pulldown resistor is also placed between the gate pin and ground to keep it at a defined state when it is not otherwise being driven by the MCU. The values of these resistors are not critical - see this Electronics StackExchange question for more information.","title":"Example Schematic"},{"location":"feature_bluetooth/","text":"Bluetooth \u00b6 Bluetooth Known Supported Hardware \u00b6 Currently Bluetooth support is limited to AVR based chips. For Bluetooth 2.1, QMK has support for RN-42 modules. For more recent BLE protocols, currently only the Adafruit Bluefruit SPI Friend is directly supported. BLE is needed to connect to iOS devices. Note iOS does not support mouse input. Board Bluetooth Protocol Connection Type rules.mk Bluetooth Chip Roving Networks RN-42 (Sparkfun Bluesmirf) Bluetooth Classic UART BLUETOOTH = RN42 RN-42 Bluefruit LE SPI Friend Bluetooth Low Energy SPI BLUETOOTH = AdafruitBLE nRF51822 Not Supported Yet but possible: * Bluefruit LE UART Friend . Possible tmk implementation found in * HC-05 boards flashed with RN-42 firmware. They apparently both use the CSR BC417 Chip. Flashing it with RN-42 firmware gives it HID capability. * Sparkfun Bluetooth Mate * HM-13 based boards Adafruit BLE SPI Friend \u00b6 Currently The only bluetooth chipset supported by QMK is the Adafruit Bluefruit SPI Friend. It's a Nordic nRF5182 based chip running Adafruit's custom firmware. Data is transmitted via Adafruit's SDEP over Hardware SPI. The Feather 32u4 Bluefruit LE is supported as it's an AVR mcu connected via SPI to the Nordic BLE chip with Adafruit firmware. If Building a custom board with the SPI friend it would be easiest to just use the pin selection that the 32u4 feather uses but you can change the pins in the config.h options with the following defines: * #define AdafruitBleResetPin D4 * #define AdafruitBleCSPin B4 * #define AdafruitBleIRQPin E6 A Bluefruit UART friend can be converted to an SPI friend, however this requires some reflashing and soldering directly to the MDBT40 chip. Bluetooth Rules.mk Options \u00b6 The currently supported Bluetooth chipsets do not support N-Key Rollover (NKRO) , so rules.mk must contain NKRO_ENABLE = no . Use only one of these to enable Bluetooth: * BLUETOOTH_ENABLE = yes (Legacy Option) * BLUETOOTH = RN42 * BLUETOOTH = AdafruitBLE Bluetooth Keycodes \u00b6 This is used when multiple keyboard outputs can be selected. Currently this only allows for switching between USB and Bluetooth on keyboards that support both. Name Description OUT_AUTO Automatically switch between USB and Bluetooth OUT_USB USB only OUT_BT Bluetooth only","title":"\u84dd\u7259"},{"location":"feature_bluetooth/#bluetooth","text":"","title":"Bluetooth"},{"location":"feature_bluetooth/#bluetooth-known-supported-hardware","text":"Currently Bluetooth support is limited to AVR based chips. For Bluetooth 2.1, QMK has support for RN-42 modules. For more recent BLE protocols, currently only the Adafruit Bluefruit SPI Friend is directly supported. BLE is needed to connect to iOS devices. Note iOS does not support mouse input. Board Bluetooth Protocol Connection Type rules.mk Bluetooth Chip Roving Networks RN-42 (Sparkfun Bluesmirf) Bluetooth Classic UART BLUETOOTH = RN42 RN-42 Bluefruit LE SPI Friend Bluetooth Low Energy SPI BLUETOOTH = AdafruitBLE nRF51822 Not Supported Yet but possible: * Bluefruit LE UART Friend . Possible tmk implementation found in * HC-05 boards flashed with RN-42 firmware. They apparently both use the CSR BC417 Chip. Flashing it with RN-42 firmware gives it HID capability. * Sparkfun Bluetooth Mate * HM-13 based boards","title":"Bluetooth Known Supported Hardware"},{"location":"feature_bluetooth/#adafruit-ble-spi-friend","text":"Currently The only bluetooth chipset supported by QMK is the Adafruit Bluefruit SPI Friend. It's a Nordic nRF5182 based chip running Adafruit's custom firmware. Data is transmitted via Adafruit's SDEP over Hardware SPI. The Feather 32u4 Bluefruit LE is supported as it's an AVR mcu connected via SPI to the Nordic BLE chip with Adafruit firmware. If Building a custom board with the SPI friend it would be easiest to just use the pin selection that the 32u4 feather uses but you can change the pins in the config.h options with the following defines: * #define AdafruitBleResetPin D4 * #define AdafruitBleCSPin B4 * #define AdafruitBleIRQPin E6 A Bluefruit UART friend can be converted to an SPI friend, however this requires some reflashing and soldering directly to the MDBT40 chip.","title":"Adafruit BLE SPI Friend"},{"location":"feature_bluetooth/#bluetooth-rulesmk-options","text":"The currently supported Bluetooth chipsets do not support N-Key Rollover (NKRO) , so rules.mk must contain NKRO_ENABLE = no . Use only one of these to enable Bluetooth: * BLUETOOTH_ENABLE = yes (Legacy Option) * BLUETOOTH = RN42 * BLUETOOTH = AdafruitBLE","title":"Bluetooth Rules.mk Options"},{"location":"feature_bluetooth/#bluetooth-keycodes","text":"This is used when multiple keyboard outputs can be selected. Currently this only allows for switching between USB and Bluetooth on keyboards that support both. Name Description OUT_AUTO Automatically switch between USB and Bluetooth OUT_USB USB only OUT_BT Bluetooth only","title":"Bluetooth Keycodes"},{"location":"feature_bootmagic/","text":"Bootmagic \u00b6 There are three separate but related features that allow you to change the behavior of your keyboard without reflashing. While each of them have similar functionality, it is accessed in different ways depending on how your keyboard is configured. Bootmagic is a system for configuring your keyboard while it initializes. To trigger a Bootmagic command, hold down the Bootmagic key and one or more command keys. Bootmagic Keycodes are prefixed with MAGIC_ , and allow you to access the Bootmagic functionality after your keyboard has initialized. To use the keycodes, assign them to your keymap as you would any other keycode. Command , formerly known as Magic , is another feature that allows you to control different aspects of your keyboard. While it shares some functionality with Bootmagic, it also allows you to do things that Bootmagic does not, such as printing version information to the console. For more information, see Command . On some keyboards Bootmagic is disabled by default. If this is the case, it must be explicitly enabled in your rules.mk with: BOOTMAGIC_ENABLE = full Warning You may see yes being used in place of full , and this is okay. However, yes is deprecated, and ideally full (or lite ) should be used instead. Additionally, you can use Bootmagic Lite (a scaled down, very basic version of Bootmagic) by adding the following to your rules.mk file: BOOTMAGIC_ENABLE = lite Hotkeys \u00b6 Hold down the Bootmagic key (Space by default) and the desired hotkey while plugging in your keyboard. For example, holding Space+ B should cause it to enter the bootloader. Hotkey Description Escape Ignore Bootmagic configuration in EEPROM B Enter the bootloader D Toggle debugging over serial X Toggle key matrix debugging K Toggle keyboard debugging M Toggle mouse debugging L Set \"Left Hand\" for EE_HANDS handedness R Set \"Right Hand\" for EE_HANDS handedness Backspace Clear the EEPROM Caps Lock Toggle treating Caps Lock as Left Control Left Control Toggle swapping Caps Lock and Left Control Left Alt Toggle swapping Left Alt and Left GUI Right Alt Toggle swapping Right Alt and Right GUI Left GUI Toggle the GUI keys (useful when gaming) ` Toggle swapping ` and Escape \\ Toggle swapping \\ and Backspace N Toggle N-Key Rollover (NKRO) 0 Make layer 0 the default layer 1 Make layer 1 the default layer 2 Make layer 2 the default layer 3 Make layer 3 the default layer 4 Make layer 4 the default layer 5 Make layer 5 the default layer 6 Make layer 6 the default layer 7 Make layer 7 the default layer Keycodes \u00b6 Key Aliases Description MAGIC_SWAP_CONTROL_CAPSLOCK CL_SWAP Swap Caps Lock and Left Control MAGIC_UNSWAP_CONTROL_CAPSLOCK CL_NORM Unswap Caps Lock and Left Control MAGIC_CAPSLOCK_TO_CONTROL CL_CTRL Treat Caps Lock as Control MAGIC_UNCAPSLOCK_TO_CONTROL CL_CAPS Stop treating Caps Lock as Control MAGIC_SWAP_LCTL_LGUI LCG_SWP Swap Left Control and GUI MAGIC_UNSWAP_LCTL_LGUI LCG_NRM Unswap Left Control and GUI MAGIC_SWAP_RCTL_RGUI RCG_SWP Swap Right Control and GUI MAGIC_UNSWAP_RCTL_RGUI RCG_NRM Unswap Right Control and GUI MAGIC_SWAP_CTL_GUI CG_SWAP Swap Control and GUI on both sides MAGIC_UNSWAP_CTL_GUI CG_NORM Unswap Control and GUI on both sides MAGIC_TOGGLE_CTL_GUI CG_TOGG Toggle Control and GUI swap on both sides MAGIC_SWAP_LALT_LGUI LAG_SWP Swap Left Alt and GUI MAGIC_UNSWAP_LALT_LGUI LAG_NRM Unswap Left Alt and GUI MAGIC_SWAP_RALT_RGUI RAG_SWP Swap Right Alt and GUI MAGIC_UNSWAP_RALT_RGUI RAG_NRM Unswap Right Alt and GUI MAGIC_SWAP_ALT_GUI AG_SWAP Swap Alt and GUI on both sides MAGIC_UNSWAP_ALT_GUI AG_NORM Unswap Alt and GUI on both sides MAGIC_TOGGLE_ALT_GUI AG_TOGG Toggle Alt and GUI swap on both sides MAGIC_NO_GUI GUI_OFF Disable the GUI keys MAGIC_UNNO_GUI GUI_ON Enable the GUI keys MAGIC_SWAP_GRAVE_ESC GE_SWAP Swap ` and Escape MAGIC_UNSWAP_GRAVE_ESC GE_NORM Unswap ` and Escape MAGIC_SWAP_BACKSLASH_BACKSPACE BS_SWAP Swap \\ and Backspace MAGIC_UNSWAP_BACKSLASH_BACKSPACE BS_NORM Unswap \\ and Backspace MAGIC_HOST_NKRO NK_ON Enable N-key rollover MAGIC_UNHOST_NKRO NK_OFF Disable N-key rollover MAGIC_TOGGLE_NKRO NK_TOGG Toggle N-key rollover MAGIC_EE_HANDS_LEFT EH_LEFT Set the master half of a split keyboard as the left hand (for EE_HANDS ) MAGIC_EE_HANDS_RIGHT EH_RGHT Set the master half of a split keyboard as the right hand (for EE_HANDS ) Configuration \u00b6 If you would like to change the hotkey assignments for Bootmagic, #define these in your config.h at either the keyboard or keymap level. Define Default Description BOOTMAGIC_KEY_SALT KC_SPACE The Bootmagic key BOOTMAGIC_KEY_SKIP KC_ESC Ignore Bootmagic configuration in EEPROM BOOTMAGIC_KEY_EEPROM_CLEAR KC_BSPACE Clear the EEPROM configuration BOOTMAGIC_KEY_BOOTLOADER KC_B Enter the bootloader BOOTMAGIC_KEY_DEBUG_ENABLE KC_D Toggle debugging over serial BOOTMAGIC_KEY_DEBUG_MATRIX KC_X Toggle matrix debugging BOOTMAGIC_KEY_DEBUG_KEYBOARD KC_K Toggle keyboard debugging BOOTMAGIC_KEY_DEBUG_MOUSE KC_M Toggle mouse debugging BOOTMAGIC_KEY_EE_HANDS_LEFT KC_L Set \"Left Hand\" for EE_HANDS handedness BOOTMAGIC_KEY_EE_HANDS_RIGHT KC_R Set \"Right Hand\" for EE_HANDS handedness BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK KC_LCTRL Swap Left Control and Caps Lock BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL KC_CAPSLOCK Toggle treating Caps Lock as Left Control BOOTMAGIC_KEY_SWAP_LALT_LGUI KC_LALT Toggle swapping Left Alt and Left GUI (for macOS) BOOTMAGIC_KEY_SWAP_RALT_RGUI KC_RALT Toggle swapping Right Alt and Right GUI (for macOS) BOOTMAGIC_KEY_NO_GUI KC_LGUI Toggle the GUI keys (useful when gaming) BOOTMAGIC_KEY_SWAP_GRAVE_ESC KC_GRAVE Toggle swapping ` and Escape BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE KC_BSLASH Toggle swapping \\ and Backspace BOOTMAGIC_HOST_NKRO KC_N Toggle N-Key Rollover (NKRO) BOOTMAGIC_KEY_DEFAULT_LAYER_0 KC_0 Make layer 0 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_1 KC_1 Make layer 1 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_2 KC_2 Make layer 2 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_3 KC_3 Make layer 3 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_4 KC_4 Make layer 4 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_5 KC_5 Make layer 5 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_6 KC_6 Make layer 6 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_7 KC_7 Make layer 7 the default layer Bootmagic Lite \u00b6 In addition to the full blown Bootmagic feature, is the Bootmagic Lite feature that only handles jumping into the bootloader. This is great for boards that don't have a physical reset button but you need a way to jump into the bootloader, and don't want to deal with the headache that Bootmagic can cause. To enable this version of Bootmagic, you need to enable it in your rules.mk with: BOOTMAGIC_ENABLE = lite Additionally, you may want to specify which key to use. This is especially useful for keyboards that have unusual matrices. To do so, you need to specify the row and column of the key that you want to use. Add these entries to your config.h file: #define BOOTMAGIC_LITE_ROW 0 #define BOOTMAGIC_LITE_COLUMN 1 By default, these are set to 0 and 0, which is usually the \"ESC\" key on a majority of keyboards. And to trigger the bootloader, you hold this key down when plugging the keyboard in. Just the single key. Warning Using bootmagic lite will always reset the EEPROM, so you will lose any settings that have been saved. Split Keyboards \u00b6 When handedness is predetermined via an option like SPLIT_HAND_PIN , you might need to configure a different key between halves. To do so, add these entries to your config.h file: #define BOOTMAGIC_LITE_ROW_RIGHT 4 #define BOOTMAGIC_LITE_COLUMN_RIGHT 1 By default, these values are not set. Advanced Bootmagic Lite \u00b6 The bootmagic_lite function is defined weakly, so that you can replace this in your code, if you need. A great example of this is the Zeal60 boards that have some additional handling needed. To replace the function, all you need to do is add something like this to your code: void bootmagic_lite ( void ) { matrix_scan (); wait_ms ( DEBOUNCE * 2 ); matrix_scan (); if ( matrix_get_row ( BOOTMAGIC_LITE_ROW ) & ( 1 << BOOTMAGIC_LITE_COLUMN )) { // Jump to bootloader. bootloader_jump (); } } You can additional feature here. For instance, resetting the eeprom or requiring additional keys to be pressed to trigger bootmagic. Keep in mind that bootmagic_lite is called before a majority of features are initialized in the firmware.","title":"\u70ed\u6539\u952e"},{"location":"feature_bootmagic/#bootmagic","text":"There are three separate but related features that allow you to change the behavior of your keyboard without reflashing. While each of them have similar functionality, it is accessed in different ways depending on how your keyboard is configured. Bootmagic is a system for configuring your keyboard while it initializes. To trigger a Bootmagic command, hold down the Bootmagic key and one or more command keys. Bootmagic Keycodes are prefixed with MAGIC_ , and allow you to access the Bootmagic functionality after your keyboard has initialized. To use the keycodes, assign them to your keymap as you would any other keycode. Command , formerly known as Magic , is another feature that allows you to control different aspects of your keyboard. While it shares some functionality with Bootmagic, it also allows you to do things that Bootmagic does not, such as printing version information to the console. For more information, see Command . On some keyboards Bootmagic is disabled by default. If this is the case, it must be explicitly enabled in your rules.mk with: BOOTMAGIC_ENABLE = full Warning You may see yes being used in place of full , and this is okay. However, yes is deprecated, and ideally full (or lite ) should be used instead. Additionally, you can use Bootmagic Lite (a scaled down, very basic version of Bootmagic) by adding the following to your rules.mk file: BOOTMAGIC_ENABLE = lite","title":"Bootmagic"},{"location":"feature_bootmagic/#hotkeys","text":"Hold down the Bootmagic key (Space by default) and the desired hotkey while plugging in your keyboard. For example, holding Space+ B should cause it to enter the bootloader. Hotkey Description Escape Ignore Bootmagic configuration in EEPROM B Enter the bootloader D Toggle debugging over serial X Toggle key matrix debugging K Toggle keyboard debugging M Toggle mouse debugging L Set \"Left Hand\" for EE_HANDS handedness R Set \"Right Hand\" for EE_HANDS handedness Backspace Clear the EEPROM Caps Lock Toggle treating Caps Lock as Left Control Left Control Toggle swapping Caps Lock and Left Control Left Alt Toggle swapping Left Alt and Left GUI Right Alt Toggle swapping Right Alt and Right GUI Left GUI Toggle the GUI keys (useful when gaming) ` Toggle swapping ` and Escape \\ Toggle swapping \\ and Backspace N Toggle N-Key Rollover (NKRO) 0 Make layer 0 the default layer 1 Make layer 1 the default layer 2 Make layer 2 the default layer 3 Make layer 3 the default layer 4 Make layer 4 the default layer 5 Make layer 5 the default layer 6 Make layer 6 the default layer 7 Make layer 7 the default layer","title":"Hotkeys"},{"location":"feature_bootmagic/#keycodes","text":"Key Aliases Description MAGIC_SWAP_CONTROL_CAPSLOCK CL_SWAP Swap Caps Lock and Left Control MAGIC_UNSWAP_CONTROL_CAPSLOCK CL_NORM Unswap Caps Lock and Left Control MAGIC_CAPSLOCK_TO_CONTROL CL_CTRL Treat Caps Lock as Control MAGIC_UNCAPSLOCK_TO_CONTROL CL_CAPS Stop treating Caps Lock as Control MAGIC_SWAP_LCTL_LGUI LCG_SWP Swap Left Control and GUI MAGIC_UNSWAP_LCTL_LGUI LCG_NRM Unswap Left Control and GUI MAGIC_SWAP_RCTL_RGUI RCG_SWP Swap Right Control and GUI MAGIC_UNSWAP_RCTL_RGUI RCG_NRM Unswap Right Control and GUI MAGIC_SWAP_CTL_GUI CG_SWAP Swap Control and GUI on both sides MAGIC_UNSWAP_CTL_GUI CG_NORM Unswap Control and GUI on both sides MAGIC_TOGGLE_CTL_GUI CG_TOGG Toggle Control and GUI swap on both sides MAGIC_SWAP_LALT_LGUI LAG_SWP Swap Left Alt and GUI MAGIC_UNSWAP_LALT_LGUI LAG_NRM Unswap Left Alt and GUI MAGIC_SWAP_RALT_RGUI RAG_SWP Swap Right Alt and GUI MAGIC_UNSWAP_RALT_RGUI RAG_NRM Unswap Right Alt and GUI MAGIC_SWAP_ALT_GUI AG_SWAP Swap Alt and GUI on both sides MAGIC_UNSWAP_ALT_GUI AG_NORM Unswap Alt and GUI on both sides MAGIC_TOGGLE_ALT_GUI AG_TOGG Toggle Alt and GUI swap on both sides MAGIC_NO_GUI GUI_OFF Disable the GUI keys MAGIC_UNNO_GUI GUI_ON Enable the GUI keys MAGIC_SWAP_GRAVE_ESC GE_SWAP Swap ` and Escape MAGIC_UNSWAP_GRAVE_ESC GE_NORM Unswap ` and Escape MAGIC_SWAP_BACKSLASH_BACKSPACE BS_SWAP Swap \\ and Backspace MAGIC_UNSWAP_BACKSLASH_BACKSPACE BS_NORM Unswap \\ and Backspace MAGIC_HOST_NKRO NK_ON Enable N-key rollover MAGIC_UNHOST_NKRO NK_OFF Disable N-key rollover MAGIC_TOGGLE_NKRO NK_TOGG Toggle N-key rollover MAGIC_EE_HANDS_LEFT EH_LEFT Set the master half of a split keyboard as the left hand (for EE_HANDS ) MAGIC_EE_HANDS_RIGHT EH_RGHT Set the master half of a split keyboard as the right hand (for EE_HANDS )","title":"Keycodes"},{"location":"feature_bootmagic/#configuration","text":"If you would like to change the hotkey assignments for Bootmagic, #define these in your config.h at either the keyboard or keymap level. Define Default Description BOOTMAGIC_KEY_SALT KC_SPACE The Bootmagic key BOOTMAGIC_KEY_SKIP KC_ESC Ignore Bootmagic configuration in EEPROM BOOTMAGIC_KEY_EEPROM_CLEAR KC_BSPACE Clear the EEPROM configuration BOOTMAGIC_KEY_BOOTLOADER KC_B Enter the bootloader BOOTMAGIC_KEY_DEBUG_ENABLE KC_D Toggle debugging over serial BOOTMAGIC_KEY_DEBUG_MATRIX KC_X Toggle matrix debugging BOOTMAGIC_KEY_DEBUG_KEYBOARD KC_K Toggle keyboard debugging BOOTMAGIC_KEY_DEBUG_MOUSE KC_M Toggle mouse debugging BOOTMAGIC_KEY_EE_HANDS_LEFT KC_L Set \"Left Hand\" for EE_HANDS handedness BOOTMAGIC_KEY_EE_HANDS_RIGHT KC_R Set \"Right Hand\" for EE_HANDS handedness BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK KC_LCTRL Swap Left Control and Caps Lock BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL KC_CAPSLOCK Toggle treating Caps Lock as Left Control BOOTMAGIC_KEY_SWAP_LALT_LGUI KC_LALT Toggle swapping Left Alt and Left GUI (for macOS) BOOTMAGIC_KEY_SWAP_RALT_RGUI KC_RALT Toggle swapping Right Alt and Right GUI (for macOS) BOOTMAGIC_KEY_NO_GUI KC_LGUI Toggle the GUI keys (useful when gaming) BOOTMAGIC_KEY_SWAP_GRAVE_ESC KC_GRAVE Toggle swapping ` and Escape BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE KC_BSLASH Toggle swapping \\ and Backspace BOOTMAGIC_HOST_NKRO KC_N Toggle N-Key Rollover (NKRO) BOOTMAGIC_KEY_DEFAULT_LAYER_0 KC_0 Make layer 0 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_1 KC_1 Make layer 1 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_2 KC_2 Make layer 2 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_3 KC_3 Make layer 3 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_4 KC_4 Make layer 4 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_5 KC_5 Make layer 5 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_6 KC_6 Make layer 6 the default layer BOOTMAGIC_KEY_DEFAULT_LAYER_7 KC_7 Make layer 7 the default layer","title":"Configuration"},{"location":"feature_bootmagic/#bootmagic-lite","text":"In addition to the full blown Bootmagic feature, is the Bootmagic Lite feature that only handles jumping into the bootloader. This is great for boards that don't have a physical reset button but you need a way to jump into the bootloader, and don't want to deal with the headache that Bootmagic can cause. To enable this version of Bootmagic, you need to enable it in your rules.mk with: BOOTMAGIC_ENABLE = lite Additionally, you may want to specify which key to use. This is especially useful for keyboards that have unusual matrices. To do so, you need to specify the row and column of the key that you want to use. Add these entries to your config.h file: #define BOOTMAGIC_LITE_ROW 0 #define BOOTMAGIC_LITE_COLUMN 1 By default, these are set to 0 and 0, which is usually the \"ESC\" key on a majority of keyboards. And to trigger the bootloader, you hold this key down when plugging the keyboard in. Just the single key. Warning Using bootmagic lite will always reset the EEPROM, so you will lose any settings that have been saved.","title":"Bootmagic Lite"},{"location":"feature_bootmagic/#split-keyboards","text":"When handedness is predetermined via an option like SPLIT_HAND_PIN , you might need to configure a different key between halves. To do so, add these entries to your config.h file: #define BOOTMAGIC_LITE_ROW_RIGHT 4 #define BOOTMAGIC_LITE_COLUMN_RIGHT 1 By default, these values are not set.","title":"Split Keyboards"},{"location":"feature_bootmagic/#advanced-bootmagic-lite","text":"The bootmagic_lite function is defined weakly, so that you can replace this in your code, if you need. A great example of this is the Zeal60 boards that have some additional handling needed. To replace the function, all you need to do is add something like this to your code: void bootmagic_lite ( void ) { matrix_scan (); wait_ms ( DEBOUNCE * 2 ); matrix_scan (); if ( matrix_get_row ( BOOTMAGIC_LITE_ROW ) & ( 1 << BOOTMAGIC_LITE_COLUMN )) { // Jump to bootloader. bootloader_jump (); } } You can additional feature here. For instance, resetting the eeprom or requiring additional keys to be pressed to trigger bootmagic. Keep in mind that bootmagic_lite is called before a majority of features are initialized in the firmware.","title":"Advanced Bootmagic Lite"},{"location":"feature_combo/","text":"Combos \u00b6 The Combo feature is a chording type solution for adding custom actions. It lets you hit multiple keys at once and produce a different effect. For instance, hitting A and S within the tapping term would hit ESC instead, or have it perform even more complex tasks. To enable this feature, you need to add COMBO_ENABLE = yes to your rules.mk . Additionally, in your config.h , you'll need to specify the number of combos that you'll be using, by adding #define COMBO_COUNT 1 (replacing 1 with the number that you're using). Also, by default, the tapping term for the Combos is set to the same value as TAPPING_TERM (200 by default on most boards). But you can specify a different value by defining it in your config.h . For instance: #define COMBO_TERM 300 would set the time out period for combos to 300ms. Then, your keymap.c file, you'll need to define a sequence of keys, terminated with COMBO_END , and a structure to list the combination of keys, and it's resulting action. const uint16_t PROGMEM test_combo [] = { KC_A , KC_B , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { COMBO ( test_combo , KC_ESC )}; This will send \"Escape\" if you hit the A and B keys. Info This method only supports basic keycodes . See the examples for more control. Examples \u00b6 If you want to add a list, then you'd use something like this: enum combos { AB_ESC , JK_TAB }; const uint16_t PROGMEM ab_combo [] = { KC_A , KC_B , COMBO_END }; const uint16_t PROGMEM jk_combo [] = { KC_J , KC_K , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { [ AB_ESC ] = COMBO ( ab_combo , KC_ESC ), [ JK_TAB ] = COMBO ( jk_combo , KC_TAB ) }; For a more complicated implementation, you can use the process_combo_event function to add custom handling. enum combo_events { ZC_COPY , XV_PASTE }; const uint16_t PROGMEM copy_combo [] = { KC_Z , KC_C , COMBO_END }; const uint16_t PROGMEM paste_combo [] = { KC_X , KC_V , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { [ ZC_COPY ] = COMBO_ACTION ( copy_combo ), [ XV_PASTE ] = COMBO_ACTION ( paste_combo ), }; void process_combo_event ( uint16_t combo_index , bool pressed ) { switch ( combo_index ) { case ZC_COPY : if ( pressed ) { tap_code16 ( LCTL ( KC_C )); } break ; case XV_PASTE : if ( pressed ) { tap_code16 ( LCTL ( KC_V )); } break ; } } This will send Ctrl+C if you hit Z and C, and Ctrl+V if you hit X and V. But you could change this to do stuff like change layers, play sounds, or change settings. Additional Configuration \u00b6 If you're using long combos, or even longer combos, you may run into issues with this, as the structure may not be large enough to accommodate what you're doing. In this case, you can add either #define EXTRA_LONG_COMBOS or #define EXTRA_EXTRA_LONG_COMBOS in your config.h file. You may also be able to enable action keys by defining COMBO_ALLOW_ACTION_KEYS . Keycodes \u00b6 You can enable, disable and toggle the Combo feature on the fly. This is useful if you need to disable them temporarily, such as for a game. Keycode Description CMB_ON Turns on Combo feature CMB_OFF Turns off Combo feature CMB_TOG Toggles Combo feature on and off User callbacks \u00b6 In addition to the keycodes, there are a few functions that you can use to set the status, or check it: Function Description combo_enable() Enables the combo feature combo_disable() Disables the combo feature, and clears the combo buffer combo_toggle() Toggles the state of the combo feature is_combo_enabled() Returns the status of the combo feature state (true or false)","title":"Combos"},{"location":"feature_combo/#combos","text":"The Combo feature is a chording type solution for adding custom actions. It lets you hit multiple keys at once and produce a different effect. For instance, hitting A and S within the tapping term would hit ESC instead, or have it perform even more complex tasks. To enable this feature, you need to add COMBO_ENABLE = yes to your rules.mk . Additionally, in your config.h , you'll need to specify the number of combos that you'll be using, by adding #define COMBO_COUNT 1 (replacing 1 with the number that you're using). Also, by default, the tapping term for the Combos is set to the same value as TAPPING_TERM (200 by default on most boards). But you can specify a different value by defining it in your config.h . For instance: #define COMBO_TERM 300 would set the time out period for combos to 300ms. Then, your keymap.c file, you'll need to define a sequence of keys, terminated with COMBO_END , and a structure to list the combination of keys, and it's resulting action. const uint16_t PROGMEM test_combo [] = { KC_A , KC_B , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { COMBO ( test_combo , KC_ESC )}; This will send \"Escape\" if you hit the A and B keys. Info This method only supports basic keycodes . See the examples for more control.","title":"Combos"},{"location":"feature_combo/#examples","text":"If you want to add a list, then you'd use something like this: enum combos { AB_ESC , JK_TAB }; const uint16_t PROGMEM ab_combo [] = { KC_A , KC_B , COMBO_END }; const uint16_t PROGMEM jk_combo [] = { KC_J , KC_K , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { [ AB_ESC ] = COMBO ( ab_combo , KC_ESC ), [ JK_TAB ] = COMBO ( jk_combo , KC_TAB ) }; For a more complicated implementation, you can use the process_combo_event function to add custom handling. enum combo_events { ZC_COPY , XV_PASTE }; const uint16_t PROGMEM copy_combo [] = { KC_Z , KC_C , COMBO_END }; const uint16_t PROGMEM paste_combo [] = { KC_X , KC_V , COMBO_END }; combo_t key_combos [ COMBO_COUNT ] = { [ ZC_COPY ] = COMBO_ACTION ( copy_combo ), [ XV_PASTE ] = COMBO_ACTION ( paste_combo ), }; void process_combo_event ( uint16_t combo_index , bool pressed ) { switch ( combo_index ) { case ZC_COPY : if ( pressed ) { tap_code16 ( LCTL ( KC_C )); } break ; case XV_PASTE : if ( pressed ) { tap_code16 ( LCTL ( KC_V )); } break ; } } This will send Ctrl+C if you hit Z and C, and Ctrl+V if you hit X and V. But you could change this to do stuff like change layers, play sounds, or change settings.","title":"Examples"},{"location":"feature_combo/#additional-configuration","text":"If you're using long combos, or even longer combos, you may run into issues with this, as the structure may not be large enough to accommodate what you're doing. In this case, you can add either #define EXTRA_LONG_COMBOS or #define EXTRA_EXTRA_LONG_COMBOS in your config.h file. You may also be able to enable action keys by defining COMBO_ALLOW_ACTION_KEYS .","title":"Additional Configuration"},{"location":"feature_combo/#keycodes","text":"You can enable, disable and toggle the Combo feature on the fly. This is useful if you need to disable them temporarily, such as for a game. Keycode Description CMB_ON Turns on Combo feature CMB_OFF Turns off Combo feature CMB_TOG Toggles Combo feature on and off","title":"Keycodes"},{"location":"feature_combo/#user-callbacks","text":"In addition to the keycodes, there are a few functions that you can use to set the status, or check it: Function Description combo_enable() Enables the combo feature combo_disable() Disables the combo feature, and clears the combo buffer combo_toggle() Toggles the state of the combo feature is_combo_enabled() Returns the status of the combo feature state (true or false)","title":"User callbacks"},{"location":"feature_command/","text":"Command \u00b6 Command, formerly known as Magic, is a way to change your keyboard's behavior without having to flash or unplug it to use Bootmagic . There is a lot of overlap between this functionality and the Bootmagic Keycodes . Wherever possible we encourage you to use that feature instead of Command. On some keyboards Command is disabled by default. If this is the case, it must be explicitly enabled in your rules.mk : COMMAND_ENABLE = yes Usage \u00b6 To use Command, hold down the key combination defined by the IS_COMMAND() macro. By default this is Left Shift+Right Shift. Then, press the key corresponding to the command you want. For example, to output the current QMK version to the QMK Toolbox console, press Left Shift+Right Shift+ V . Configuration \u00b6 If you would like to change the key assignments for Command, #define these in your config.h at either the keyboard or keymap level. All keycode assignments here must omit the KC_ prefix. Define Default Description IS_COMMAND() (get_mods() == MOD_MASK_SHIFT) The key combination to activate Command MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS true Set default layer with the Function row MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS true Set default layer with the number keys MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM false Set default layer with MAGIC_KEY_LAYER0..9 MAGIC_KEY_DEBUG D Toggle debugging over serial MAGIC_KEY_DEBUG_MATRIX X Toggle key matrix debugging MAGIC_KEY_DEBUG_KBD K Toggle keyboard debugging MAGIC_KEY_DEBUG_MOUSE M Toggle mouse debugging MAGIC_KEY_CONSOLE C Enable the Command console MAGIC_KEY_VERSION V Print the running QMK version to the console MAGIC_KEY_STATUS S Print the current keyboard status to the console MAGIC_KEY_HELP H Print Command help to the console MAGIC_KEY_HELP_ALT SLASH Print Command help to the console (alternate) MAGIC_KEY_LAYER0 0 Make layer 0 the default layer MAGIC_KEY_LAYER0_ALT GRAVE Make layer 0 the default layer (alternate) MAGIC_KEY_LAYER1 1 Make layer 1 the default layer MAGIC_KEY_LAYER2 2 Make layer 2 the default layer MAGIC_KEY_LAYER3 3 Make layer 3 the default layer MAGIC_KEY_LAYER4 4 Make layer 4 the default layer MAGIC_KEY_LAYER5 5 Make layer 5 the default layer MAGIC_KEY_LAYER6 6 Make layer 6 the default layer MAGIC_KEY_LAYER7 7 Make layer 7 the default layer MAGIC_KEY_LAYER8 8 Make layer 8 the default layer MAGIC_KEY_LAYER9 9 Make layer 9 the default layer MAGIC_KEY_BOOTLOADER B Jump to bootloader MAGIC_KEY_BOOTLOADER_ALT ESC Jump to bootloader (alternate) MAGIC_KEY_LOCK CAPS Lock the keyboard so nothing can be typed MAGIC_KEY_EEPROM E Print stored EEPROM config to the console MAGIC_KEY_EEPROM_CLEAR BSPACE Clear the EEPROM MAGIC_KEY_NKRO N Toggle N-Key Rollover (NKRO) MAGIC_KEY_SLEEP_LED Z Toggle LED when computer is sleeping","title":"\u547d\u4ee4"},{"location":"feature_command/#command","text":"Command, formerly known as Magic, is a way to change your keyboard's behavior without having to flash or unplug it to use Bootmagic . There is a lot of overlap between this functionality and the Bootmagic Keycodes . Wherever possible we encourage you to use that feature instead of Command. On some keyboards Command is disabled by default. If this is the case, it must be explicitly enabled in your rules.mk : COMMAND_ENABLE = yes","title":"Command"},{"location":"feature_command/#usage","text":"To use Command, hold down the key combination defined by the IS_COMMAND() macro. By default this is Left Shift+Right Shift. Then, press the key corresponding to the command you want. For example, to output the current QMK version to the QMK Toolbox console, press Left Shift+Right Shift+ V .","title":"Usage"},{"location":"feature_command/#configuration","text":"If you would like to change the key assignments for Command, #define these in your config.h at either the keyboard or keymap level. All keycode assignments here must omit the KC_ prefix. Define Default Description IS_COMMAND() (get_mods() == MOD_MASK_SHIFT) The key combination to activate Command MAGIC_KEY_SWITCH_LAYER_WITH_FKEYS true Set default layer with the Function row MAGIC_KEY_SWITCH_LAYER_WITH_NKEYS true Set default layer with the number keys MAGIC_KEY_SWITCH_LAYER_WITH_CUSTOM false Set default layer with MAGIC_KEY_LAYER0..9 MAGIC_KEY_DEBUG D Toggle debugging over serial MAGIC_KEY_DEBUG_MATRIX X Toggle key matrix debugging MAGIC_KEY_DEBUG_KBD K Toggle keyboard debugging MAGIC_KEY_DEBUG_MOUSE M Toggle mouse debugging MAGIC_KEY_CONSOLE C Enable the Command console MAGIC_KEY_VERSION V Print the running QMK version to the console MAGIC_KEY_STATUS S Print the current keyboard status to the console MAGIC_KEY_HELP H Print Command help to the console MAGIC_KEY_HELP_ALT SLASH Print Command help to the console (alternate) MAGIC_KEY_LAYER0 0 Make layer 0 the default layer MAGIC_KEY_LAYER0_ALT GRAVE Make layer 0 the default layer (alternate) MAGIC_KEY_LAYER1 1 Make layer 1 the default layer MAGIC_KEY_LAYER2 2 Make layer 2 the default layer MAGIC_KEY_LAYER3 3 Make layer 3 the default layer MAGIC_KEY_LAYER4 4 Make layer 4 the default layer MAGIC_KEY_LAYER5 5 Make layer 5 the default layer MAGIC_KEY_LAYER6 6 Make layer 6 the default layer MAGIC_KEY_LAYER7 7 Make layer 7 the default layer MAGIC_KEY_LAYER8 8 Make layer 8 the default layer MAGIC_KEY_LAYER9 9 Make layer 9 the default layer MAGIC_KEY_BOOTLOADER B Jump to bootloader MAGIC_KEY_BOOTLOADER_ALT ESC Jump to bootloader (alternate) MAGIC_KEY_LOCK CAPS Lock the keyboard so nothing can be typed MAGIC_KEY_EEPROM E Print stored EEPROM config to the console MAGIC_KEY_EEPROM_CLEAR BSPACE Clear the EEPROM MAGIC_KEY_NKRO N Toggle N-Key Rollover (NKRO) MAGIC_KEY_SLEEP_LED Z Toggle LED when computer is sleeping","title":"Configuration"},{"location":"feature_debounce_type/","text":"Contact bounce / contact chatter \u00b6 Mechanical switches often don't have a clean single transition between pressed and unpressed states. In an ideal world, when you press a switch, you would expect the digital pin to see something like this: (X axis showing time voltage +---------------------- ^ | | | | ------------------+ ----> time However in the real world you will actually see contact bounce, which will look like multiple 1->0 and 0->1 transitions, until the value finally settles. +-+ +--+ +------------- | | | | | | | | | | +-----------------+ +-+ +-+ The time it takes for the switch to settle might vary with switch type, age, and even pressing technique. If the device chooses not to mitigate contact bounce, then often actions that happen when the switch is pressed are repeated multiple times. There are many ways to handle contact bounce (\"Debouncing\"). Some include employing additional hardware, for example an RC filter, while there are various ways to do debouncing in software too, often called debounce algorithms. This page discusses software debouncing methods available in QMK. While technically not considered contact bounce/contact chatter, some switch technologies are susceptible to noise, meaning, while the key is not changing state, sometimes short random 0->1 or 1->0 transitions might be read by the digital circuit, for example: +-+ | | | | +-----------------+ +-------------------- Many debounce methods (but not all) will also make the device resistant to noise. If you are working with a technology that is susceptible to noise, you must choose a debounce method that will also mitigate noise for you. Types of debounce algorithms \u00b6 1) Unit of time: Timestamp (milliseconds) vs Cycles (scans) * Debounce algorithms often have a 'debounce time' parameter, that specifies the maximum settling time of the switch contacts. This time might be measured in various units: * Cycles-based debouncing waits n cycles (scans), decreasing count by one each matrix_scan * Timestamp-based debouncing stores the millisecond timestamp a change occurred, and does substraction to figure out time elapsed. * Timestamp-based debouncing is usually superior, especially in the case of noise-resistant devices because settling times of physical switches is specified in units of time, and should not depend on the matrix scan-rate of the keyboard. * Cycles-based debouncing is sometimes considered inferior, because the settling time that it is able to compensate for depends on the performance of the matrix scanning code. If you use cycles-based debouncing, and you significantly improve the performance of your scanning code, you might end up with less effective debouncing. A situation in which cycles-based debouncing might be preferable is when noise is present, and the scanning algorithm is slow, or variable speed. Even if your debounce algorithm is fundamentally noise-resistant, if the scanning is slow, and you are using a timestamp-based algorithm, you might end up making a debouncing decision based on only two sampled values, which will limit the noise-resistance of the algorithm. * Currently all built-in debounce algorithms support timestamp-based debouncing only. In the future we might implement cycles-based debouncing, and it will be selectable via a config.h macro. 2) Symmetric vs Asymmetric * Symmetric - apply the same debouncing algorithm, to both key-up and key-down events. * Recommended naming convention: sym_* * Asymmetric - apply different debouncing algorithms to key-down and key-up events. E.g. Eager key-down, Defer key-up. * Recommended naming convention: asym_* followed by details of the type of algorithm in use, in order, for key-down and then key-up 3) Eager vs Defer * Eager - any key change is reported immediately. All further inputs for DEBOUNCE ms are ignored. * Eager algorithms are not noise-resistant. * Recommended naming conventions: * sym_eager_* * asym_eager_*_* : key-down is using eager algorithm * asym_*_eager_* : key-up is using eager algorithm * Defer - wait for no changes for DEBOUNCE ms before reporting change. * Defer algorithms are noise-resistant * Recommended naming conventions: * sym_defer_* * asym_defer_*_* : key-down is using defer algorithm * asym_*_defer_* : key-up is using defer algorithm 4) Global vs Per-Key vs Per-Row * Global - one timer for all keys. Any key change state affects global timer * Recommended naming convention: *_g * Per-key - one timer per key * Recommended naming convention: *_pk * Per-row - one timer per row * Recommended naming convention: *_pr * Per-key and per-row algorithms consume more resources (in terms of performance, and ram usage), but fast typists might prefer them over global. Debounce algorithms supported by QMK \u00b6 QMK supports multiple debounce algorithms through its debounce API. The logic for which debounce method called is below. It checks various defines that you have set in rules.mk DEBOUNCE_DIR:= $(QUANTUM_DIR)/debounce DEBOUNCE_TYPE?= sym_defer_g ifneq ($(strip $(DEBOUNCE_TYPE)), custom) QUANTUM_SRC += $(DEBOUNCE_DIR)/$(strip $(DEBOUNCE_TYPE)).c endif Debounce selection \u00b6 DEBOUNCE_TYPE Description What else is needed Not defined Use the default algorithm, currently sym_defer_g Nothing custom Use your own debounce code SRC += debounce.c add your own debounce.c and implement necessary functions Anything Else Use another algorithm from quantum/debounce/* Nothing Regarding split keyboards : The debounce code is compatible with split keyboards. Selecting an included debouncing method \u00b6 Keyboards may select one of the already implemented debounce methods, by adding to rules.mk the following line: DEBOUNCE_TYPE = <name of algorithm> Where name of algorithm is one of: * sym_defer_g - debouncing per keyboard. On any state change, a global timer is set. When DEBOUNCE milliseconds of no changes has occurred, all input changes are pushed. * This is the current default algorithm. This is the highest performance algorithm with lowest memory usage, and it's also noise-resistant. * sym_eager_pr - debouncing per row. On any state change, response is immediate, followed by locking the row DEBOUNCE milliseconds of no further input for that row. For use in keyboards where refreshing NUM_KEYS 8-bit counters is computationally expensive / low scan rate, and fingers usually only hit one row at a time. This could be appropriate for the ErgoDox models; the matrix is rotated 90\u00b0, and hence its \"rows\" are really columns, and each finger only hits a single \"row\" at a time in normal use. * sym_eager_pk - debouncing per key. On any state change, response is immediate, followed by DEBOUNCE milliseconds of no further input for that key * sym_defer_pk - debouncing per key. On any state change, a per-key timer is set. When DEBOUNCE milliseconds of no changes have occurred on that key, the key status change is pushed. A couple algorithms that could be implemented in the future: \u00b6 sym_defer_pr sym_eager_g asym_eager_defer_pk Use your own debouncing code \u00b6 You have the option to implement you own debouncing algorithm. To do this: * Set DEBOUNCE_TYPE = custom in rules.mk . * Add SRC += debounce.c in rules.mk * Add your own debounce.c . Look at current implementations in quantum/debounce for examples. * Debouncing occurs after every raw matrix scan. * Use num_rows rather than MATRIX_ROWS, so that split keyboards are supported correctly. * If the algorithm might be applicable to other keyboards, please consider adding it to quantum/debounce Old names \u00b6 The following old names for existing algorithms will continue to be supported, however it is recommended to use the new names instead. sym_g - old name for sym_defer_g eager_pk - old name for sym_eager_pk sym_pk - old name for sym_defer_pk eager_pr - old name for sym_eager_pr","title":"\u6d88\u6296 API"},{"location":"feature_debounce_type/#contact-bounce-contact-chatter","text":"Mechanical switches often don't have a clean single transition between pressed and unpressed states. In an ideal world, when you press a switch, you would expect the digital pin to see something like this: (X axis showing time voltage +---------------------- ^ | | | | ------------------+ ----> time However in the real world you will actually see contact bounce, which will look like multiple 1->0 and 0->1 transitions, until the value finally settles. +-+ +--+ +------------- | | | | | | | | | | +-----------------+ +-+ +-+ The time it takes for the switch to settle might vary with switch type, age, and even pressing technique. If the device chooses not to mitigate contact bounce, then often actions that happen when the switch is pressed are repeated multiple times. There are many ways to handle contact bounce (\"Debouncing\"). Some include employing additional hardware, for example an RC filter, while there are various ways to do debouncing in software too, often called debounce algorithms. This page discusses software debouncing methods available in QMK. While technically not considered contact bounce/contact chatter, some switch technologies are susceptible to noise, meaning, while the key is not changing state, sometimes short random 0->1 or 1->0 transitions might be read by the digital circuit, for example: +-+ | | | | +-----------------+ +-------------------- Many debounce methods (but not all) will also make the device resistant to noise. If you are working with a technology that is susceptible to noise, you must choose a debounce method that will also mitigate noise for you.","title":"Contact bounce / contact chatter"},{"location":"feature_debounce_type/#types-of-debounce-algorithms","text":"1) Unit of time: Timestamp (milliseconds) vs Cycles (scans) * Debounce algorithms often have a 'debounce time' parameter, that specifies the maximum settling time of the switch contacts. This time might be measured in various units: * Cycles-based debouncing waits n cycles (scans), decreasing count by one each matrix_scan * Timestamp-based debouncing stores the millisecond timestamp a change occurred, and does substraction to figure out time elapsed. * Timestamp-based debouncing is usually superior, especially in the case of noise-resistant devices because settling times of physical switches is specified in units of time, and should not depend on the matrix scan-rate of the keyboard. * Cycles-based debouncing is sometimes considered inferior, because the settling time that it is able to compensate for depends on the performance of the matrix scanning code. If you use cycles-based debouncing, and you significantly improve the performance of your scanning code, you might end up with less effective debouncing. A situation in which cycles-based debouncing might be preferable is when noise is present, and the scanning algorithm is slow, or variable speed. Even if your debounce algorithm is fundamentally noise-resistant, if the scanning is slow, and you are using a timestamp-based algorithm, you might end up making a debouncing decision based on only two sampled values, which will limit the noise-resistance of the algorithm. * Currently all built-in debounce algorithms support timestamp-based debouncing only. In the future we might implement cycles-based debouncing, and it will be selectable via a config.h macro. 2) Symmetric vs Asymmetric * Symmetric - apply the same debouncing algorithm, to both key-up and key-down events. * Recommended naming convention: sym_* * Asymmetric - apply different debouncing algorithms to key-down and key-up events. E.g. Eager key-down, Defer key-up. * Recommended naming convention: asym_* followed by details of the type of algorithm in use, in order, for key-down and then key-up 3) Eager vs Defer * Eager - any key change is reported immediately. All further inputs for DEBOUNCE ms are ignored. * Eager algorithms are not noise-resistant. * Recommended naming conventions: * sym_eager_* * asym_eager_*_* : key-down is using eager algorithm * asym_*_eager_* : key-up is using eager algorithm * Defer - wait for no changes for DEBOUNCE ms before reporting change. * Defer algorithms are noise-resistant * Recommended naming conventions: * sym_defer_* * asym_defer_*_* : key-down is using defer algorithm * asym_*_defer_* : key-up is using defer algorithm 4) Global vs Per-Key vs Per-Row * Global - one timer for all keys. Any key change state affects global timer * Recommended naming convention: *_g * Per-key - one timer per key * Recommended naming convention: *_pk * Per-row - one timer per row * Recommended naming convention: *_pr * Per-key and per-row algorithms consume more resources (in terms of performance, and ram usage), but fast typists might prefer them over global.","title":"Types of debounce algorithms"},{"location":"feature_debounce_type/#debounce-algorithms-supported-by-qmk","text":"QMK supports multiple debounce algorithms through its debounce API. The logic for which debounce method called is below. It checks various defines that you have set in rules.mk DEBOUNCE_DIR:= $(QUANTUM_DIR)/debounce DEBOUNCE_TYPE?= sym_defer_g ifneq ($(strip $(DEBOUNCE_TYPE)), custom) QUANTUM_SRC += $(DEBOUNCE_DIR)/$(strip $(DEBOUNCE_TYPE)).c endif","title":"Debounce algorithms supported by QMK"},{"location":"feature_debounce_type/#debounce-selection","text":"DEBOUNCE_TYPE Description What else is needed Not defined Use the default algorithm, currently sym_defer_g Nothing custom Use your own debounce code SRC += debounce.c add your own debounce.c and implement necessary functions Anything Else Use another algorithm from quantum/debounce/* Nothing Regarding split keyboards : The debounce code is compatible with split keyboards.","title":"Debounce selection"},{"location":"feature_debounce_type/#selecting-an-included-debouncing-method","text":"Keyboards may select one of the already implemented debounce methods, by adding to rules.mk the following line: DEBOUNCE_TYPE = <name of algorithm> Where name of algorithm is one of: * sym_defer_g - debouncing per keyboard. On any state change, a global timer is set. When DEBOUNCE milliseconds of no changes has occurred, all input changes are pushed. * This is the current default algorithm. This is the highest performance algorithm with lowest memory usage, and it's also noise-resistant. * sym_eager_pr - debouncing per row. On any state change, response is immediate, followed by locking the row DEBOUNCE milliseconds of no further input for that row. For use in keyboards where refreshing NUM_KEYS 8-bit counters is computationally expensive / low scan rate, and fingers usually only hit one row at a time. This could be appropriate for the ErgoDox models; the matrix is rotated 90\u00b0, and hence its \"rows\" are really columns, and each finger only hits a single \"row\" at a time in normal use. * sym_eager_pk - debouncing per key. On any state change, response is immediate, followed by DEBOUNCE milliseconds of no further input for that key * sym_defer_pk - debouncing per key. On any state change, a per-key timer is set. When DEBOUNCE milliseconds of no changes have occurred on that key, the key status change is pushed.","title":"Selecting an included debouncing method"},{"location":"feature_debounce_type/#a-couple-algorithms-that-could-be-implemented-in-the-future","text":"sym_defer_pr sym_eager_g asym_eager_defer_pk","title":"A couple algorithms that could be implemented in the future:"},{"location":"feature_debounce_type/#use-your-own-debouncing-code","text":"You have the option to implement you own debouncing algorithm. To do this: * Set DEBOUNCE_TYPE = custom in rules.mk . * Add SRC += debounce.c in rules.mk * Add your own debounce.c . Look at current implementations in quantum/debounce for examples. * Debouncing occurs after every raw matrix scan. * Use num_rows rather than MATRIX_ROWS, so that split keyboards are supported correctly. * If the algorithm might be applicable to other keyboards, please consider adding it to quantum/debounce","title":"Use your own debouncing code"},{"location":"feature_debounce_type/#old-names","text":"The following old names for existing algorithms will continue to be supported, however it is recommended to use the new names instead. sym_g - old name for sym_defer_g eager_pk - old name for sym_eager_pk sym_pk - old name for sym_defer_pk eager_pr - old name for sym_eager_pr","title":"Old names"},{"location":"feature_dip_switch/","text":"DIP Switches \u00b6 DIP switches are supported by adding this to your rules.mk : DIP_SWITCH_ENABLE = yes and this to your config.h : // Connects each switch in the dip switch to the GPIO pin of the MCU #define DIP_SWITCH_PINS { B14, A15, A10, B9 } or // Connect each switch in the DIP switch to an unused intersections in the key matrix. #define DIP_SWITCH_MATRIX_GRID { {0,6}, {1,6}, {2,6} } // List of row and col pairs Callbacks \u00b6 The callback functions can be inserted into your <keyboard>.c : void dip_switch_update_kb ( uint8_t index , bool active ) { dip_switch_update_user ( index , active ); } or keymap.c : void dip_switch_update_user ( uint8_t index , bool active ) { switch ( index ) { case 0 : if ( active ) { audio_on (); } else { audio_off (); } break ; case 1 : if ( active ) { clicky_on (); } else { clicky_off (); } break ; case 2 : if ( active ) { music_on (); } else { music_off (); } break ; case 3 : if ( active ) { #ifdef AUDIO_ENABLE PLAY_SONG ( plover_song ); #endif layer_on ( _PLOVER ); } else { #ifdef AUDIO_ENABLE PLAY_SONG ( plover_gb_song ); #endif layer_off ( _PLOVER ); } break ; } } Additionally, we support bit mask functions which allow for more complex handling. void dip_switch_update_mask_kb ( uint32_t state ) { dip_switch_update_mask_user ( state ); } or keymap.c : void dip_switch_update_mask_user ( uint32_t state ) { if ( state & ( 1UL << 0 ) && state & ( 1UL << 1 )) { layer_on ( _ADJUST ); // C on esc } else { layer_off ( _ADJUST ); } if ( state & ( 1UL << 0 )) { layer_on ( _TEST_A ); // A on ESC } else { layer_off ( _TEST_A ); } if ( state & ( 1UL << 1 )) { layer_on ( _TEST_B ); // B on esc } else { layer_off ( _TEST_B ); } } Hardware \u00b6 Connects each switch in the dip switch to the GPIO pin of the MCU \u00b6 One side of the DIP switch should be wired directly to the pin on the MCU, and the other side to ground. It should not matter which side is connected to which, as it should be functionally the same. Connect each switch in the DIP switch to an unused intersections in the key matrix. \u00b6 As with the keyswitch, a diode and DIP switch connect the ROW line to the COL line.","title":"\u62e8\u52a8\u5f00\u5173"},{"location":"feature_dip_switch/#dip-switches","text":"DIP switches are supported by adding this to your rules.mk : DIP_SWITCH_ENABLE = yes and this to your config.h : // Connects each switch in the dip switch to the GPIO pin of the MCU #define DIP_SWITCH_PINS { B14, A15, A10, B9 } or // Connect each switch in the DIP switch to an unused intersections in the key matrix. #define DIP_SWITCH_MATRIX_GRID { {0,6}, {1,6}, {2,6} } // List of row and col pairs","title":"DIP Switches"},{"location":"feature_dip_switch/#callbacks","text":"The callback functions can be inserted into your <keyboard>.c : void dip_switch_update_kb ( uint8_t index , bool active ) { dip_switch_update_user ( index , active ); } or keymap.c : void dip_switch_update_user ( uint8_t index , bool active ) { switch ( index ) { case 0 : if ( active ) { audio_on (); } else { audio_off (); } break ; case 1 : if ( active ) { clicky_on (); } else { clicky_off (); } break ; case 2 : if ( active ) { music_on (); } else { music_off (); } break ; case 3 : if ( active ) { #ifdef AUDIO_ENABLE PLAY_SONG ( plover_song ); #endif layer_on ( _PLOVER ); } else { #ifdef AUDIO_ENABLE PLAY_SONG ( plover_gb_song ); #endif layer_off ( _PLOVER ); } break ; } } Additionally, we support bit mask functions which allow for more complex handling. void dip_switch_update_mask_kb ( uint32_t state ) { dip_switch_update_mask_user ( state ); } or keymap.c : void dip_switch_update_mask_user ( uint32_t state ) { if ( state & ( 1UL << 0 ) && state & ( 1UL << 1 )) { layer_on ( _ADJUST ); // C on esc } else { layer_off ( _ADJUST ); } if ( state & ( 1UL << 0 )) { layer_on ( _TEST_A ); // A on ESC } else { layer_off ( _TEST_A ); } if ( state & ( 1UL << 1 )) { layer_on ( _TEST_B ); // B on esc } else { layer_off ( _TEST_B ); } }","title":"Callbacks"},{"location":"feature_dip_switch/#hardware","text":"","title":"Hardware"},{"location":"feature_dip_switch/#connects-each-switch-in-the-dip-switch-to-the-gpio-pin-of-the-mcu","text":"One side of the DIP switch should be wired directly to the pin on the MCU, and the other side to ground. It should not matter which side is connected to which, as it should be functionally the same.","title":"Connects each switch in the dip switch to the GPIO pin of the MCU"},{"location":"feature_dip_switch/#connect-each-switch-in-the-dip-switch-to-an-unused-intersections-in-the-key-matrix","text":"As with the keyswitch, a diode and DIP switch connect the ROW line to the COL line.","title":"Connect each switch in the DIP switch to an unused intersections in the key matrix."},{"location":"feature_dynamic_macros/","text":"Dynamic Macros: Record and Replay Macros in Runtime \u00b6 QMK supports temporary macros created on the fly. We call these Dynamic Macros. They are defined by the user from the keyboard and are lost when the keyboard is unplugged or otherwise rebooted. You can store one or two macros and they may have a combined total of 128 keypresses. You can increase this size at the cost of RAM. To enable them, first include DYNAMIC_MACRO_ENABLE = yes in your rules.mk . Then, add the following keys to your keymap: Key Alias Description DYN_REC_START1 DM_REC1 Start recording Macro 1 DYN_REC_START2 DM_REC2 Start recording Macro 2 DYN_MACRO_PLAY1 DM_PLY1 Replay Macro 1 DYN_MACRO_PLAY2 DM_PLY2 Replay Macro 2 DYN_REC_STOP DM_RSTP Finish the macro that is currently being recorded. That should be everything necessary. To start recording the macro, press either DYN_REC_START1 or DYN_REC_START2 . To finish the recording, press the DYN_REC_STOP layer button. You can also press DYN_REC_START1 or DYN_REC_START2 again to stop the recording. To replay the macro, press either DYN_MACRO_PLAY1 or DYN_MACRO_PLAY2 . It is possible to replay a macro as part of a macro. It's ok to replay macro 2 while recording macro 1 and vice versa but never create recursive macros i.e. macro 1 that replays macro 1. If you do so and the keyboard will get unresponsive, unplug the keyboard and plug it again. You can disable this completely by defining DYNAMIC_MACRO_NO_NESTING in your config.h file. Info For the details about the internals of the dynamic macros, please read the comments in the process_dynamic_macro.h and process_dynamic_macro.c files. Customization \u00b6 There are a number of options added that should allow some additional degree of customization Define Default Description DYNAMIC_MACRO_SIZE 128 Sets the amount of memory that Dynamic Macros can use. This is a limited resource, dependent on the controller. DYNAMIC_MACRO_USER_CALL Not defined Defining this falls back to using the user keymap.c file to trigger the macro behavior. DYNAMIC_MACRO_NO_NESTING Not Defined Defining this disables the ability to call a macro from another macro (nested macros). If the LEDs start blinking during the recording with each keypress, it means there is no more space for the macro in the macro buffer. To fit the macro in, either make the other macro shorter (they share the same buffer) or increase the buffer size by adding the DYNAMIC_MACRO_SIZE define in your config.h (default value: 128; please read the comments for it in the header). DYNAMIC_MACRO_USER_CALL \u00b6 For users of the earlier versions of dynamic macros: It is still possible to finish the macro recording using just the layer modifier used to access the dynamic macro keys, without a dedicated DYN_REC_STOP key. If you want this behavior back, add #define DYNAMIC_MACRO_USER_CALL to your config.h and insert the following snippet at the beginning of your process_record_user() function: uint16_t macro_kc = ( keycode == MO ( _DYN ) ? DYN_REC_STOP : keycode ); if ( ! process_record_dynamic_macro ( macro_kc , record )) { return false ; } User Hooks \u00b6 There are a number of hooks that you can use to add custom functionality and feedback options to Dynamic Macro feature. This allows for some additional degree of customization. Note, that direction indicates which macro it is, with 1 being Macro 1, -1 being Macro 2, and 0 being no macro. dynamic_macro_record_start_user(void) - Triggered when you start recording a macro. dynamic_macro_play_user(int8_t direction) - Triggered when you play back a macro. dynamic_macro_record_key_user(int8_t direction, keyrecord_t *record) - Triggered on each keypress while recording a macro. dynamic_macro_record_end_user(int8_t direction) - Triggered when the macro recording is stopped. Additionally, you can call dynamic_macro_led_blink() to flash the backlights if that feature is enabled.","title":"\u52a8\u6001\u5b8f\u6307\u4ee4"},{"location":"feature_dynamic_macros/#dynamic-macros-record-and-replay-macros-in-runtime","text":"QMK supports temporary macros created on the fly. We call these Dynamic Macros. They are defined by the user from the keyboard and are lost when the keyboard is unplugged or otherwise rebooted. You can store one or two macros and they may have a combined total of 128 keypresses. You can increase this size at the cost of RAM. To enable them, first include DYNAMIC_MACRO_ENABLE = yes in your rules.mk . Then, add the following keys to your keymap: Key Alias Description DYN_REC_START1 DM_REC1 Start recording Macro 1 DYN_REC_START2 DM_REC2 Start recording Macro 2 DYN_MACRO_PLAY1 DM_PLY1 Replay Macro 1 DYN_MACRO_PLAY2 DM_PLY2 Replay Macro 2 DYN_REC_STOP DM_RSTP Finish the macro that is currently being recorded. That should be everything necessary. To start recording the macro, press either DYN_REC_START1 or DYN_REC_START2 . To finish the recording, press the DYN_REC_STOP layer button. You can also press DYN_REC_START1 or DYN_REC_START2 again to stop the recording. To replay the macro, press either DYN_MACRO_PLAY1 or DYN_MACRO_PLAY2 . It is possible to replay a macro as part of a macro. It's ok to replay macro 2 while recording macro 1 and vice versa but never create recursive macros i.e. macro 1 that replays macro 1. If you do so and the keyboard will get unresponsive, unplug the keyboard and plug it again. You can disable this completely by defining DYNAMIC_MACRO_NO_NESTING in your config.h file. Info For the details about the internals of the dynamic macros, please read the comments in the process_dynamic_macro.h and process_dynamic_macro.c files.","title":"Dynamic Macros: Record and Replay Macros in Runtime"},{"location":"feature_dynamic_macros/#customization","text":"There are a number of options added that should allow some additional degree of customization Define Default Description DYNAMIC_MACRO_SIZE 128 Sets the amount of memory that Dynamic Macros can use. This is a limited resource, dependent on the controller. DYNAMIC_MACRO_USER_CALL Not defined Defining this falls back to using the user keymap.c file to trigger the macro behavior. DYNAMIC_MACRO_NO_NESTING Not Defined Defining this disables the ability to call a macro from another macro (nested macros). If the LEDs start blinking during the recording with each keypress, it means there is no more space for the macro in the macro buffer. To fit the macro in, either make the other macro shorter (they share the same buffer) or increase the buffer size by adding the DYNAMIC_MACRO_SIZE define in your config.h (default value: 128; please read the comments for it in the header).","title":"Customization"},{"location":"feature_dynamic_macros/#dynamic_macro_user_call","text":"For users of the earlier versions of dynamic macros: It is still possible to finish the macro recording using just the layer modifier used to access the dynamic macro keys, without a dedicated DYN_REC_STOP key. If you want this behavior back, add #define DYNAMIC_MACRO_USER_CALL to your config.h and insert the following snippet at the beginning of your process_record_user() function: uint16_t macro_kc = ( keycode == MO ( _DYN ) ? DYN_REC_STOP : keycode ); if ( ! process_record_dynamic_macro ( macro_kc , record )) { return false ; }","title":"DYNAMIC_MACRO_USER_CALL"},{"location":"feature_dynamic_macros/#user-hooks","text":"There are a number of hooks that you can use to add custom functionality and feedback options to Dynamic Macro feature. This allows for some additional degree of customization. Note, that direction indicates which macro it is, with 1 being Macro 1, -1 being Macro 2, and 0 being no macro. dynamic_macro_record_start_user(void) - Triggered when you start recording a macro. dynamic_macro_play_user(int8_t direction) - Triggered when you play back a macro. dynamic_macro_record_key_user(int8_t direction, keyrecord_t *record) - Triggered on each keypress while recording a macro. dynamic_macro_record_end_user(int8_t direction) - Triggered when the macro recording is stopped. Additionally, you can call dynamic_macro_led_blink() to flash the backlights if that feature is enabled.","title":"User Hooks"},{"location":"feature_encoders/","text":"Encoders \u00b6 Basic encoders are supported by adding this to your rules.mk : ENCODER_ENABLE = yes and this to your config.h : #define ENCODERS_PAD_A { B12 } #define ENCODERS_PAD_B { B13 } Each PAD_A/B variable defines an array so multiple encoders can be defined, e.g.: #define ENCODERS_PAD_A { encoder1a, encoder2a } #define ENCODERS_PAD_B { encoder1b, encoder2b } If your encoder's clockwise directions are incorrect, you can swap the A & B pad definitions. They can also be flipped with a define: #define ENCODER_DIRECTION_FLIP Additionally, the resolution, which defines how many pulses the encoder registers between each detent, can be defined with: #define ENCODER_RESOLUTION 4 It can also be defined per-encoder, by instead defining: #define ENCODER_RESOLUTIONS { 4, 2 } Split Keyboards \u00b6 If you are using different pinouts for the encoders on each half of a split keyboard, you can define the pinout (and optionally, resolutions) for the right half like this: #define ENCODERS_PAD_A_RIGHT { encoder1a, encoder2a } #define ENCODERS_PAD_B_RIGHT { encoder1b, encoder2b } #define ENCODER_RESOLUTIONS_RIGHT { 2, 4 } Callbacks \u00b6 The callback functions can be inserted into your <keyboard>.c : bool encoder_update_kb ( uint8_t index , bool clockwise ) { return encoder_update_user ( index , clockwise ); } or keymap.c : bool encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } return true ; } Check If you return true , this will allow the keyboard level code to run, as well. Returning false will override the keyboard level code. Depending on how the keyboard level function is set up. Hardware \u00b6 The A an B lines of the encoders should be wired directly to the MCU, and the C/common lines should be wired to ground. Multiple Encoders \u00b6 Multiple encoders may share pins so long as each encoder has a distinct pair of pins. For example you can support two encoders using only 3 pins like this #define ENCODERS_PAD_A { B1, B1 } #define ENCODERS_PAD_B { B2, B3 } You could even support three encoders using only three pins (one per encoder) however in this configuration, rotating two encoders which share pins simultaneously will often generate incorrect output. For example: #define ENCODERS_PAD_A { B1, B1, B2 } #define ENCODERS_PAD_B { B2, B3, B3 } Here rotating Encoder 0 B1 B2 and Encoder 1 B1 B3 could be interpreted as rotating Encoder 2 B2 B3 or B3 B2 depending on the timing. This may still be a useful configuration depending on your use case","title":"\u7f16\u7801\u5668"},{"location":"feature_encoders/#encoders","text":"Basic encoders are supported by adding this to your rules.mk : ENCODER_ENABLE = yes and this to your config.h : #define ENCODERS_PAD_A { B12 } #define ENCODERS_PAD_B { B13 } Each PAD_A/B variable defines an array so multiple encoders can be defined, e.g.: #define ENCODERS_PAD_A { encoder1a, encoder2a } #define ENCODERS_PAD_B { encoder1b, encoder2b } If your encoder's clockwise directions are incorrect, you can swap the A & B pad definitions. They can also be flipped with a define: #define ENCODER_DIRECTION_FLIP Additionally, the resolution, which defines how many pulses the encoder registers between each detent, can be defined with: #define ENCODER_RESOLUTION 4 It can also be defined per-encoder, by instead defining: #define ENCODER_RESOLUTIONS { 4, 2 }","title":"Encoders"},{"location":"feature_encoders/#split-keyboards","text":"If you are using different pinouts for the encoders on each half of a split keyboard, you can define the pinout (and optionally, resolutions) for the right half like this: #define ENCODERS_PAD_A_RIGHT { encoder1a, encoder2a } #define ENCODERS_PAD_B_RIGHT { encoder1b, encoder2b } #define ENCODER_RESOLUTIONS_RIGHT { 2, 4 }","title":"Split Keyboards"},{"location":"feature_encoders/#callbacks","text":"The callback functions can be inserted into your <keyboard>.c : bool encoder_update_kb ( uint8_t index , bool clockwise ) { return encoder_update_user ( index , clockwise ); } or keymap.c : bool encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } return true ; } Check If you return true , this will allow the keyboard level code to run, as well. Returning false will override the keyboard level code. Depending on how the keyboard level function is set up.","title":"Callbacks"},{"location":"feature_encoders/#hardware","text":"The A an B lines of the encoders should be wired directly to the MCU, and the C/common lines should be wired to ground.","title":"Hardware"},{"location":"feature_encoders/#multiple-encoders","text":"Multiple encoders may share pins so long as each encoder has a distinct pair of pins. For example you can support two encoders using only 3 pins like this #define ENCODERS_PAD_A { B1, B1 } #define ENCODERS_PAD_B { B2, B3 } You could even support three encoders using only three pins (one per encoder) however in this configuration, rotating two encoders which share pins simultaneously will often generate incorrect output. For example: #define ENCODERS_PAD_A { B1, B1, B2 } #define ENCODERS_PAD_B { B2, B3, B3 } Here rotating Encoder 0 B1 B2 and Encoder 1 B1 B3 could be interpreted as rotating Encoder 2 B2 B3 or B3 B2 depending on the timing. This may still be a useful configuration depending on your use case","title":"Multiple Encoders"},{"location":"feature_grave_esc/","text":"Grave Escape \u00b6 If you're using a 60% keyboard, or any other layout with no F-row, you will have noticed that there is no dedicated Escape key. Grave Escape is a feature that allows you to share the grave key ( ` and ~ ) with Escape. Usage \u00b6 Replace the KC_GRAVE key in your keymap (usually to the left of the 1 key) with KC_GESC . Most of the time this key will output KC_ESC when pressed. However, when Shift or GUI are held down it will output KC_GRV instead. What Your OS Sees \u00b6 If Mary presses GESC on her keyboard, the OS will see an KC_ESC character. Now if Mary holds Shift down and presses GESC it will output ~ , or a shifted backtick. Now if she holds GUI/CMD/WIN, it will output a simple ` character. Keycodes \u00b6 Key Aliases Description KC_GESC GRAVE_ESC Escape when pressed, ` when Shift or GUI are held Caveats \u00b6 On macOS, Command+ ` is by default mapped to \"Move focus to next window\" so it will not output a backtick. Additionally, Terminal always recognises this shortcut to cycle between windows, even if the shortcut is changed in the Keyboard preferences. Configuration \u00b6 There are several possible key combinations this will break, among them Control+Shift+Escape on Windows and Command+Option+Escape on macOS. To work around this, you can #define these options in your config.h : Define Description GRAVE_ESC_ALT_OVERRIDE Always send Escape if Alt is pressed GRAVE_ESC_CTRL_OVERRIDE Always send Escape if Control is pressed GRAVE_ESC_GUI_OVERRIDE Always send Escape if GUI is pressed GRAVE_ESC_SHIFT_OVERRIDE Always send Escape if Shift is pressed","title":"\u91cd\u97f3\u53f7Esc\u590d\u5408\u952e"},{"location":"feature_grave_esc/#grave-escape","text":"If you're using a 60% keyboard, or any other layout with no F-row, you will have noticed that there is no dedicated Escape key. Grave Escape is a feature that allows you to share the grave key ( ` and ~ ) with Escape.","title":"Grave Escape"},{"location":"feature_grave_esc/#usage","text":"Replace the KC_GRAVE key in your keymap (usually to the left of the 1 key) with KC_GESC . Most of the time this key will output KC_ESC when pressed. However, when Shift or GUI are held down it will output KC_GRV instead.","title":"Usage"},{"location":"feature_grave_esc/#what-your-os-sees","text":"If Mary presses GESC on her keyboard, the OS will see an KC_ESC character. Now if Mary holds Shift down and presses GESC it will output ~ , or a shifted backtick. Now if she holds GUI/CMD/WIN, it will output a simple ` character.","title":"What Your OS Sees"},{"location":"feature_grave_esc/#keycodes","text":"Key Aliases Description KC_GESC GRAVE_ESC Escape when pressed, ` when Shift or GUI are held","title":"Keycodes"},{"location":"feature_grave_esc/#caveats","text":"On macOS, Command+ ` is by default mapped to \"Move focus to next window\" so it will not output a backtick. Additionally, Terminal always recognises this shortcut to cycle between windows, even if the shortcut is changed in the Keyboard preferences.","title":"Caveats"},{"location":"feature_grave_esc/#configuration","text":"There are several possible key combinations this will break, among them Control+Shift+Escape on Windows and Command+Option+Escape on macOS. To work around this, you can #define these options in your config.h : Define Description GRAVE_ESC_ALT_OVERRIDE Always send Escape if Alt is pressed GRAVE_ESC_CTRL_OVERRIDE Always send Escape if Control is pressed GRAVE_ESC_GUI_OVERRIDE Always send Escape if GUI is pressed GRAVE_ESC_SHIFT_OVERRIDE Always send Escape if Shift is pressed","title":"Configuration"},{"location":"feature_haptic_feedback/","text":"Haptic Feedback \u00b6 Haptic feedback rules.mk options \u00b6 The following options are currently available for haptic feedback in rules.mk : HAPTIC_ENABLE += DRV2605L HAPTIC_ENABLE += SOLENOID Known Supported Hardware \u00b6 Name Description LV061228B-L65-A z-axis 2v LRA Mini Motor Disc small 2-5v ERM Haptic Keycodes \u00b6 Not all keycodes below will work depending on which haptic mechanism you have chosen. Name Description HPT_ON Turn haptic feedback on HPT_OFF Turn haptic feedback off HPT_TOG Toggle haptic feedback on/off HPT_RST Reset haptic feedback config to default HPT_FBK Toggle feedback to occur on keypress, release or both HPT_BUZ Toggle solenoid buzz on/off HPT_MODI Go to next DRV2605L waveform HPT_MODD Go to previous DRV2605L waveform HPT_CONT Toggle continuous haptic mode on/off HPT_CONI Increase DRV2605L continous haptic strength HPT_COND Decrease DRV2605L continous haptic strength HPT_DWLI Increase Solenoid dwell time HPT_DWLD Decrease Solenoid dwell time Solenoids \u00b6 First you will need a build a circuit to drive the solenoid through a mosfet as most MCU will not be able to provide the current needed to drive the coil in the solenoid. Wiring diagram provided by Adafruit Settings Default Description SOLENOID_PIN Not defined Configures the pin that the Solenoid is connected to. SOLENOID_DEFAULT_DWELL 12 ms Configures the default dwell time for the solenoid. SOLENOID_MIN_DWELL 4 ms Sets the lower limit for the dwell. SOLENOID_MAX_DWELL 100 ms Sets the upper limit for the dwell. SOLENOID_DWELL_STEP_SIZE 1 ms The step size to use when HPT_DWL* keycodes are sent SOLENOID_DEFAULT_BUZZ 0 (disabled) On HPT_RST buzz is set \"on\" if this is \"1\" SOLENOID_BUZZ_ACTUATED SOLENOID_MIN_DWELL Actuated-time when the solenoid is in buzz mode SOLENOID_BUZZ_NONACTUATED SOLENOID_MIN_DWELL Non-Actuated-time when the solenoid is in buzz mode If solenoid buzz is off, then dwell time is how long the \"plunger\" stays activated. The dwell time changes how the solenoid sounds. If solenoid buzz is on, then dwell time sets the length of the buzz, while SOLENOID_BUZZ_ACTUATED and SOLENOID_BUZZ_NONACTUATED set the (non-)actuation times withing the buzz period. With the current implementation, for any of the above time settings, the precision of these settings may be affected by how fast the keyboard is able to scan the matrix. Therefore, if the keyboards scanning routine is slow, it may be preferable to set SOLENOID_DWELL_STEP_SIZE to a value slightly smaller than the time it takes to scan the keyboard. Beware that some pins may be powered during bootloader (ie. A13 on the STM32F303 chip) and will result in the solenoid kept in the on state through the whole flashing process. This may overheat and damage the solenoid. If you find that the pin the solenoid is connected to is triggering the solenoid during bootloader/DFU, select another pin. DRV2605L \u00b6 DRV2605L is controlled over i2c protocol, and has to be connected to the SDA and SCL pins, these varies depending on the MCU in use. Feedback motor setup \u00b6 This driver supports 2 different feedback motors. Set the following in your config.h based on which motor you have selected. ERM \u00b6 Eccentric Rotating Mass vibration motors (ERM) is motor with a off-set weight attached so when drive signal is attached, the off-set weight spins and causes a sinusoidal wave that translate into vibrations. #define FB_ERM_LRA 0 #define FB_BRAKEFACTOR 3 /* For 1x:0, 2x:1, 3x:2, 4x:3, 6x:4, 8x:5, 16x:6, Disable Braking:7 */ #define FB_LOOPGAIN 1 /* For Low:0, Medium:1, High:2, Very High:3 */ /* Please refer to your datasheet for the optimal setting for your specific motor. */ #define RATED_VOLTAGE 3 #define V_PEAK 5 LRA \u00b6 Linear resonant actuators (LRA, also know as a linear vibrator) works different from a ERM. A LRA has a weight and magnet suspended by springs and a voice coil. When the drive signal is applied, the weight would be vibrate on a single axis (side to side or up and down). Since the weight is attached to a spring, there is a resonance effect at a specific frequency. This frequency is where the LRA will operate the most efficiently. Refer to the motor's datasheet for the recommanded range for this frequency. #define FB_ERM_LRA 1 #define FB_BRAKEFACTOR 3 /* For 1x:0, 2x:1, 3x:2, 4x:3, 6x:4, 8x:5, 16x:6, Disable Braking:7 */ #define FB_LOOPGAIN 1 /* For Low:0, Medium:1, High:2, Very High:3 */ /* Please refer to your datasheet for the optimal setting for your specific motor. */ #define RATED_VOLTAGE 2 #define V_PEAK 2.8 #define V_RMS 2.0 #define V_PEAK 2.1 #define F_LRA 205 /* resonance freq */ DRV2605L waveform library \u00b6 DRV2605L comes with preloaded library of various waveform sequences that can be called and played. If writing a macro, these waveforms can be played using DRV_pulse(*sequence name or number*) List of waveform sequences from the datasheet: seq# Sequence name seq# Sequence name seq# Sequence name 1 strong_click 43 lg_dblclick_med_60 85 transition_rampup_med_smooth2 2 strong_click_60 44 lg_dblsharp_tick 86 transition_rampup_short_smooth1 3 strong_click_30 45 lg_dblsharp_tick_80 87 transition_rampup_short_smooth2 4 sharp_click 46 lg_dblsharp_tick_60 88 transition_rampup_long_sharp1 5 sharp_click_60 47 buzz 89 transition_rampup_long_sharp2 6 sharp_click_30 48 buzz_80 90 transition_rampup_med_sharp1 7 soft_bump 49 buzz_60 91 transition_rampup_med_sharp2 8 soft_bump_60 50 buzz_40 92 transition_rampup_short_sharp1 9 soft_bump_30 51 buzz_20 93 transition_rampup_short_sharp2 10 dbl_click 52 pulsing_strong 94 transition_rampdown_long_smooth1_50 11 dbl_click_60 53 pulsing_strong_80 95 transition_rampdown_long_smooth2_50 12 trp_click 54 pulsing_medium 96 transition_rampdown_med_smooth1_50 13 soft_fuzz 55 pulsing_medium_80 97 transition_rampdown_med_smooth2_50 14 strong_buzz 56 pulsing_sharp 98 transition_rampdown_short_smooth1_50 15 alert_750ms 57 pulsing_sharp_80 99 transition_rampdown_short_smooth2_50 16 alert_1000ms 58 transition_click 100 transition_rampdown_long_sharp1_50 17 strong_click1 59 transition_click_80 101 transition_rampdown_long_sharp2_50 18 strong_click2_80 60 transition_click_60 102 transition_rampdown_med_sharp1_50 19 strong_click3_60 61 transition_click_40 103 transition_rampdown_med_sharp2_50 20 strong_click4_30 62 transition_click_20 104 transition_rampdown_short_sharp1_50 21 medium_click1 63 transition_click_10 105 transition_rampdown_short_sharp2_50 22 medium_click2_80 64 transition_hum 106 transition_rampup_long_smooth1_50 23 medium_click3_60 65 transition_hum_80 107 transition_rampup_long_smooth2_50 24 sharp_tick1 66 transition_hum_60 108 transition_rampup_med_smooth1_50 25 sharp_tick2_80 67 transition_hum_40 109 transition_rampup_med_smooth2_50 26 sharp_tick3_60 68 transition_hum_20 110 transition_rampup_short_smooth1_50 27 sh_dblclick_str 69 transition_hum_10 111 transition_rampup_short_smooth2_50 28 sh_dblclick_str_80 70 transition_rampdown_long_smooth1 112 transition_rampup_long_sharp1_50 29 sh_dblclick_str_60 71 transition_rampdown_long_smooth2 113 transition_rampup_long_sharp2_50 30 sh_dblclick_str_30 72 transition_rampdown_med_smooth1 114 transition_rampup_med_sharp1_50 31 sh_dblclick_med 73 transition_rampdown_med_smooth2 115 transition_rampup_med_sharp2_50 32 sh_dblclick_med_80 74 transition_rampdown_short_smooth1 116 transition_rampup_short_sharp1_50 33 sh_dblclick_med_60 75 transition_rampdown_short_smooth2 117 transition_rampup_short_sharp2_50 34 sh_dblsharp_tick 76 transition_rampdown_long_sharp1 118 long_buzz_for_programmatic_stopping 35 sh_dblsharp_tick_80 77 transition_rampdown_long_sharp2 119 smooth_hum1_50 36 sh_dblsharp_tick_60 78 transition_rampdown_med_sharp1 120 smooth_hum2_40 37 lg_dblclick_str 79 transition_rampdown_med_sharp2 121 smooth_hum3_30 38 lg_dblclick_str_80 80 transition_rampdown_short_sharp1 122 smooth_hum4_20 39 lg_dblclick_str_60 81 transition_rampdown_short_sharp2 123 smooth_hum5_10 40 lg_dblclick_str_30 82 transition_rampup_long_smooth1 41 lg_dblclick_med 83 transition_rampup_long_smooth2 42 lg_dblclick_med_80 84 transition_rampup_med_smooth1 ### Optional DRV2605L defines #define DRV_GREETING *sequence name or number* If haptic feedback is enabled, the keyboard will vibrate to a specific sqeuence during startup. That can be selected using the following define: #define DRV_MODE_DEFAULT *sequence name or number* This will set what sequence HPT_RST will set as the active mode. If not defined, mode will be set to 1 when HPT_RST is pressed. DRV2605L Continuous Haptic Mode \u00b6 This mode sets continuous haptic feedback with the option to increase or decrease strength.","title":"\u89e6\u6478\u53cd\u9988"},{"location":"feature_haptic_feedback/#haptic-feedback","text":"","title":"Haptic Feedback"},{"location":"feature_haptic_feedback/#haptic-feedback-rulesmk-options","text":"The following options are currently available for haptic feedback in rules.mk : HAPTIC_ENABLE += DRV2605L HAPTIC_ENABLE += SOLENOID","title":"Haptic feedback rules.mk options"},{"location":"feature_haptic_feedback/#known-supported-hardware","text":"Name Description LV061228B-L65-A z-axis 2v LRA Mini Motor Disc small 2-5v ERM","title":"Known Supported Hardware"},{"location":"feature_haptic_feedback/#haptic-keycodes","text":"Not all keycodes below will work depending on which haptic mechanism you have chosen. Name Description HPT_ON Turn haptic feedback on HPT_OFF Turn haptic feedback off HPT_TOG Toggle haptic feedback on/off HPT_RST Reset haptic feedback config to default HPT_FBK Toggle feedback to occur on keypress, release or both HPT_BUZ Toggle solenoid buzz on/off HPT_MODI Go to next DRV2605L waveform HPT_MODD Go to previous DRV2605L waveform HPT_CONT Toggle continuous haptic mode on/off HPT_CONI Increase DRV2605L continous haptic strength HPT_COND Decrease DRV2605L continous haptic strength HPT_DWLI Increase Solenoid dwell time HPT_DWLD Decrease Solenoid dwell time","title":"Haptic Keycodes"},{"location":"feature_haptic_feedback/#solenoids","text":"First you will need a build a circuit to drive the solenoid through a mosfet as most MCU will not be able to provide the current needed to drive the coil in the solenoid. Wiring diagram provided by Adafruit Settings Default Description SOLENOID_PIN Not defined Configures the pin that the Solenoid is connected to. SOLENOID_DEFAULT_DWELL 12 ms Configures the default dwell time for the solenoid. SOLENOID_MIN_DWELL 4 ms Sets the lower limit for the dwell. SOLENOID_MAX_DWELL 100 ms Sets the upper limit for the dwell. SOLENOID_DWELL_STEP_SIZE 1 ms The step size to use when HPT_DWL* keycodes are sent SOLENOID_DEFAULT_BUZZ 0 (disabled) On HPT_RST buzz is set \"on\" if this is \"1\" SOLENOID_BUZZ_ACTUATED SOLENOID_MIN_DWELL Actuated-time when the solenoid is in buzz mode SOLENOID_BUZZ_NONACTUATED SOLENOID_MIN_DWELL Non-Actuated-time when the solenoid is in buzz mode If solenoid buzz is off, then dwell time is how long the \"plunger\" stays activated. The dwell time changes how the solenoid sounds. If solenoid buzz is on, then dwell time sets the length of the buzz, while SOLENOID_BUZZ_ACTUATED and SOLENOID_BUZZ_NONACTUATED set the (non-)actuation times withing the buzz period. With the current implementation, for any of the above time settings, the precision of these settings may be affected by how fast the keyboard is able to scan the matrix. Therefore, if the keyboards scanning routine is slow, it may be preferable to set SOLENOID_DWELL_STEP_SIZE to a value slightly smaller than the time it takes to scan the keyboard. Beware that some pins may be powered during bootloader (ie. A13 on the STM32F303 chip) and will result in the solenoid kept in the on state through the whole flashing process. This may overheat and damage the solenoid. If you find that the pin the solenoid is connected to is triggering the solenoid during bootloader/DFU, select another pin.","title":"Solenoids"},{"location":"feature_haptic_feedback/#drv2605l","text":"DRV2605L is controlled over i2c protocol, and has to be connected to the SDA and SCL pins, these varies depending on the MCU in use.","title":"DRV2605L"},{"location":"feature_haptic_feedback/#drv2605l-continuous-haptic-mode","text":"This mode sets continuous haptic feedback with the option to increase or decrease strength.","title":"DRV2605L Continuous Haptic Mode"},{"location":"feature_hd44780/","text":"HD44780 LCD Displays \u00b6 This is an integration of Peter Fleury's LCD library. This page will explain the basics. For in depth documentation visit his page. You can enable support for HD44780 Displays by setting the HD44780_ENABLE flag in your keyboards rules.mk to yes. Configuration \u00b6 You will need to configure the pins used by your display, and its number of lines and columns in your keyboard's config.h . Uncomment the section labled HD44780 and change the parameters as needed. /* * HD44780 LCD Display Configuration */ #define LCD_LINES 2 //< number of visible lines of the display #define LCD_DISP_LENGTH 16 //< visibles characters per line of the display #define LCD_IO_MODE 1 //< 0: memory mapped mode, 1: IO port mode #if LCD_IO_MODE #define LCD_PORT PORTB //< port for the LCD lines #define LCD_DATA0_PORT LCD_PORT //< port for 4bit data bit 0 #define LCD_DATA1_PORT LCD_PORT //< port for 4bit data bit 1 #define LCD_DATA2_PORT LCD_PORT //< port for 4bit data bit 2 #define LCD_DATA3_PORT LCD_PORT //< port for 4bit data bit 3 #define LCD_DATA0_PIN 4 //< pin for 4bit data bit 0 #define LCD_DATA1_PIN 5 //< pin for 4bit data bit 1 #define LCD_DATA2_PIN 6 //< pin for 4bit data bit 2 #define LCD_DATA3_PIN 7 //< pin for 4bit data bit 3 #define LCD_RS_PORT LCD_PORT //< port for RS line #define LCD_RS_PIN 3 //< pin for RS line #define LCD_RW_PORT LCD_PORT //< port for RW line #define LCD_RW_PIN 2 //< pin for RW line #define LCD_E_PORT LCD_PORT //< port for Enable line #define LCD_E_PIN 1 //< pin for Enable line #endif Should you need to configure other properties you can copy them from quantum/hd44780.h and set them in your config.h Usage \u00b6 To initialize your display, call lcd_init() with one of these parameters: LCD_DISP_OFF : display off LCD_DISP_ON : display on, cursor off LCD_DISP_ON_CURSOR : display on, cursor on LCD_DISP_ON_CURSOR_BLINK : display on, cursor on flashing This is best done in your keyboards matrix_init_kb or your keymaps matrix_init_user . It is advised to clear the display before use. To do so call lcd_clrscr() . To now print something to your Display you first call lcd_gotoxy(column, line) . To go to the start of the first line you would call lcd_gotoxy(0, 0) and then print a string with lcd_puts(\"example string\") . There are more methods available to control the display. For in depth documentation please visit the linked page.","title":"HD44780 LCD\u63a7\u5236\u5668"},{"location":"feature_hd44780/#hd44780-lcd-displays","text":"This is an integration of Peter Fleury's LCD library. This page will explain the basics. For in depth documentation visit his page. You can enable support for HD44780 Displays by setting the HD44780_ENABLE flag in your keyboards rules.mk to yes.","title":"HD44780 LCD Displays"},{"location":"feature_hd44780/#configuration","text":"You will need to configure the pins used by your display, and its number of lines and columns in your keyboard's config.h . Uncomment the section labled HD44780 and change the parameters as needed. /* * HD44780 LCD Display Configuration */ #define LCD_LINES 2 //< number of visible lines of the display #define LCD_DISP_LENGTH 16 //< visibles characters per line of the display #define LCD_IO_MODE 1 //< 0: memory mapped mode, 1: IO port mode #if LCD_IO_MODE #define LCD_PORT PORTB //< port for the LCD lines #define LCD_DATA0_PORT LCD_PORT //< port for 4bit data bit 0 #define LCD_DATA1_PORT LCD_PORT //< port for 4bit data bit 1 #define LCD_DATA2_PORT LCD_PORT //< port for 4bit data bit 2 #define LCD_DATA3_PORT LCD_PORT //< port for 4bit data bit 3 #define LCD_DATA0_PIN 4 //< pin for 4bit data bit 0 #define LCD_DATA1_PIN 5 //< pin for 4bit data bit 1 #define LCD_DATA2_PIN 6 //< pin for 4bit data bit 2 #define LCD_DATA3_PIN 7 //< pin for 4bit data bit 3 #define LCD_RS_PORT LCD_PORT //< port for RS line #define LCD_RS_PIN 3 //< pin for RS line #define LCD_RW_PORT LCD_PORT //< port for RW line #define LCD_RW_PIN 2 //< pin for RW line #define LCD_E_PORT LCD_PORT //< port for Enable line #define LCD_E_PIN 1 //< pin for Enable line #endif Should you need to configure other properties you can copy them from quantum/hd44780.h and set them in your config.h","title":"Configuration"},{"location":"feature_hd44780/#usage","text":"To initialize your display, call lcd_init() with one of these parameters: LCD_DISP_OFF : display off LCD_DISP_ON : display on, cursor off LCD_DISP_ON_CURSOR : display on, cursor on LCD_DISP_ON_CURSOR_BLINK : display on, cursor on flashing This is best done in your keyboards matrix_init_kb or your keymaps matrix_init_user . It is advised to clear the display before use. To do so call lcd_clrscr() . To now print something to your Display you first call lcd_gotoxy(column, line) . To go to the start of the first line you would call lcd_gotoxy(0, 0) and then print a string with lcd_puts(\"example string\") . There are more methods available to control the display. For in depth documentation please visit the linked page.","title":"Usage"},{"location":"feature_joystick/","text":"Joystick \u00b6 The keyboard can be made to be recognized as a joystick HID device by the operating system. This is enabled by adding JOYSTICK_ENABLE to rules.mk . You can set this value to analog , digital , or no . Warning Joystick support is not currently available on V-USB devices. The joystick feature provides two services: * reading analog input devices (eg. potentiometers) * sending gamepad HID reports Both services can be used without the other, depending on whether you just want to read a device but not send gamepad reports (for volume control for instance) or send gamepad reports based on values computed by the keyboard. Analog Input \u00b6 To use analog input you must first enable it in rules.mk : JOYSTICK_ENABLE = analog An analog device such as a potentiometer found on a gamepad's analog axes is based on a voltage divider . It is composed of three connectors linked to the ground, the power input and power output (usually the middle one). The power output holds the voltage that varies based on the position of the cursor, which value will be read using your MCU's ADC . Depending on which pins are already used by your keyboard's matrix, the rest of the circuit can get a little bit more complicated, feeding the power input and ground connection through pins and using diodes to avoid bad interactions with the matrix scanning procedures. Configuring the Joystick \u00b6 By default, two axes and eight buttons are defined. This can be changed in your config.h : // Max 32 #define JOYSTICK_BUTTON_COUNT 16 // Max 6: X, Y, Z, Rx, Ry, Rz #define JOYSTICK_AXES_COUNT 3 When defining axes for your joystick, you have to provide a definition array. You can do this from your keymap.c file. A joystick will either be read from an input pin that allows the use of the ADC, or can be virtual, so that its value is provided by your code. You have to define an array of type ''joystick_config_t'' and of proper size. There are three ways for your circuit to work with the ADC, that relies on the use of 1, 2 or 3 pins of the MCU: * 1 pin: your analog device is directly connected to your device GND and VCC. The only pin used is the ADC pin of your choice. * 2 pins: your analog device is powered through a pin that allows toggling it on or off. The other pin is used to read the input value through the ADC. * 3 pins: both the power input and ground are connected to pins that must be set to a proper state before reading and restored afterwards. The configuration of each axis is performed using one of four macros: * JOYSTICK_AXIS_VIRTUAL : no ADC reading must be performed, that value will be provided by keyboard/keymap-level code * JOYSTICK_AXIS_IN(INPUT_PIN, LOW, REST, HIGH) : a voltage will be read on the provided pin, which must be an ADC-capable pin. * JOYSTICK_AXIS_IN_OUT(INPUT_PIN, OUTPUT_PIN, LOW, REST, HIGH) : the provided OUTPUT_PIN will be set high before INPUT_PIN is read. * JOYSTICK_AXIS_IN_OUT_GROUND(INPUT_PIN, OUTPUT_PIN, GROUND_PIN, LOW, REST, HIGH) : the OUTPUT_PIN will be set high and GROUND_PIN will be set low before reading from INPUT_PIN . In any case where an ADC reading takes place (when INPUT_PIN is provided), additional LOW , REST and HIGH parameters are used. These implement the calibration of the analog device by defining the range of read values that will be mapped to the lowest, resting position and highest possible value for the axis (-127 to 127). In practice, you have to provide the lowest/highest raw ADC reading, and the raw reading at resting position, when no deflection is applied. You can provide inverted LOW and HIGH to invert the axis. For instance, an axes configuration can be defined in the following way: //joystick config joystick_config_t joystick_axes [ JOYSTICK_AXES_COUNT ] = { [ 0 ] = JOYSTICK_AXIS_IN_OUT_GROUND ( A4 , B0 , A7 , 900 , 575 , 285 ), [ 1 ] = JOYSTICK_AXIS_VIRTUAL }; When the ADC reads 900 or higher, the returned axis value will be -127, whereas it will be 127 when the ADC reads 285 or lower. Zero is returned when 575 is read. In this example, the first axis will be read from the A4 pin while B0 is set high and A7 is set low, using analogReadPin() , whereas the second axis will not be read. In order to give a value to the second axis, you can do so in any customizable entry point: as an action, in process_record_user() or in matrix_scan_user() , or even in joystick_task() which is called even when no key has been pressed. You assign a value by writing to joystick_status.axes[axis_index] a signed 8-bit value (ranging from -127 to 127). Then it is necessary to assign the flag JS_UPDATED to joystick_status.status in order for an updated HID report to be sent. The following example writes two axes based on keypad presses, with KC_P5 as a precision modifier: #ifdef ANALOG_JOYSTICK_ENABLE static uint8_t precision_val = 70 ; static uint8_t axesFlags = 0 ; enum axes { Precision = 1 , Axis1High = 2 , Axis1Low = 4 , Axis2High = 8 , Axis2Low = 16 }; #endif bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { #ifdef ANALOG_JOYSTICK_ENABLE // virtual joystick # if JOYSTICK_AXES_COUNT > 1 case KC_P8 : if ( record -> event . pressed ) { axesFlags |= Axis2Low ; } else { axesFlags &= ~ Axis2Low ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P2 : if ( record -> event . pressed ) { axesFlags |= Axis2High ; } else { axesFlags &= ~ Axis2High ; } joystick_status . status |= JS_UPDATED ; break ; # endif case KC_P4 : if ( record -> event . pressed ) { axesFlags |= Axis1Low ; } else { axesFlags &= ~ Axis1Low ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P6 : if ( record -> event . pressed ) { axesFlags |= Axis1High ; } else { axesFlags &= ~ Axis1High ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P5 : if ( record -> event . pressed ) { axesFlags |= Precision ; } else { axesFlags &= ~ Precision ; } joystick_status . status |= JS_UPDATED ; break ; #endif } return true ; } Axis Resolution \u00b6 By default, the resolution of each axis is 8 bit, giving a range of -127 to +127. If you need higher precision, you can increase it by defining eg. JOYSTICK_AXES_RESOLUTION 12 in your config.h . The resolution must be between 8 and 16. Note that the supported AVR MCUs have a 10-bit ADC, and 12-bit for most STM32 MCUs. Triggering Joystick Buttons \u00b6 Joystick buttons are normal Quantum keycodes, defined as JS_BUTTON0 to JS_BUTTON31 , depending on the number of buttons you have configured. To trigger a joystick button, just add the corresponding keycode to your keymap.","title":"Feature joystick"},{"location":"feature_joystick/#joystick","text":"The keyboard can be made to be recognized as a joystick HID device by the operating system. This is enabled by adding JOYSTICK_ENABLE to rules.mk . You can set this value to analog , digital , or no . Warning Joystick support is not currently available on V-USB devices. The joystick feature provides two services: * reading analog input devices (eg. potentiometers) * sending gamepad HID reports Both services can be used without the other, depending on whether you just want to read a device but not send gamepad reports (for volume control for instance) or send gamepad reports based on values computed by the keyboard.","title":"Joystick"},{"location":"feature_joystick/#analog-input","text":"To use analog input you must first enable it in rules.mk : JOYSTICK_ENABLE = analog An analog device such as a potentiometer found on a gamepad's analog axes is based on a voltage divider . It is composed of three connectors linked to the ground, the power input and power output (usually the middle one). The power output holds the voltage that varies based on the position of the cursor, which value will be read using your MCU's ADC . Depending on which pins are already used by your keyboard's matrix, the rest of the circuit can get a little bit more complicated, feeding the power input and ground connection through pins and using diodes to avoid bad interactions with the matrix scanning procedures.","title":"Analog Input"},{"location":"feature_joystick/#configuring-the-joystick","text":"By default, two axes and eight buttons are defined. This can be changed in your config.h : // Max 32 #define JOYSTICK_BUTTON_COUNT 16 // Max 6: X, Y, Z, Rx, Ry, Rz #define JOYSTICK_AXES_COUNT 3 When defining axes for your joystick, you have to provide a definition array. You can do this from your keymap.c file. A joystick will either be read from an input pin that allows the use of the ADC, or can be virtual, so that its value is provided by your code. You have to define an array of type ''joystick_config_t'' and of proper size. There are three ways for your circuit to work with the ADC, that relies on the use of 1, 2 or 3 pins of the MCU: * 1 pin: your analog device is directly connected to your device GND and VCC. The only pin used is the ADC pin of your choice. * 2 pins: your analog device is powered through a pin that allows toggling it on or off. The other pin is used to read the input value through the ADC. * 3 pins: both the power input and ground are connected to pins that must be set to a proper state before reading and restored afterwards. The configuration of each axis is performed using one of four macros: * JOYSTICK_AXIS_VIRTUAL : no ADC reading must be performed, that value will be provided by keyboard/keymap-level code * JOYSTICK_AXIS_IN(INPUT_PIN, LOW, REST, HIGH) : a voltage will be read on the provided pin, which must be an ADC-capable pin. * JOYSTICK_AXIS_IN_OUT(INPUT_PIN, OUTPUT_PIN, LOW, REST, HIGH) : the provided OUTPUT_PIN will be set high before INPUT_PIN is read. * JOYSTICK_AXIS_IN_OUT_GROUND(INPUT_PIN, OUTPUT_PIN, GROUND_PIN, LOW, REST, HIGH) : the OUTPUT_PIN will be set high and GROUND_PIN will be set low before reading from INPUT_PIN . In any case where an ADC reading takes place (when INPUT_PIN is provided), additional LOW , REST and HIGH parameters are used. These implement the calibration of the analog device by defining the range of read values that will be mapped to the lowest, resting position and highest possible value for the axis (-127 to 127). In practice, you have to provide the lowest/highest raw ADC reading, and the raw reading at resting position, when no deflection is applied. You can provide inverted LOW and HIGH to invert the axis. For instance, an axes configuration can be defined in the following way: //joystick config joystick_config_t joystick_axes [ JOYSTICK_AXES_COUNT ] = { [ 0 ] = JOYSTICK_AXIS_IN_OUT_GROUND ( A4 , B0 , A7 , 900 , 575 , 285 ), [ 1 ] = JOYSTICK_AXIS_VIRTUAL }; When the ADC reads 900 or higher, the returned axis value will be -127, whereas it will be 127 when the ADC reads 285 or lower. Zero is returned when 575 is read. In this example, the first axis will be read from the A4 pin while B0 is set high and A7 is set low, using analogReadPin() , whereas the second axis will not be read. In order to give a value to the second axis, you can do so in any customizable entry point: as an action, in process_record_user() or in matrix_scan_user() , or even in joystick_task() which is called even when no key has been pressed. You assign a value by writing to joystick_status.axes[axis_index] a signed 8-bit value (ranging from -127 to 127). Then it is necessary to assign the flag JS_UPDATED to joystick_status.status in order for an updated HID report to be sent. The following example writes two axes based on keypad presses, with KC_P5 as a precision modifier: #ifdef ANALOG_JOYSTICK_ENABLE static uint8_t precision_val = 70 ; static uint8_t axesFlags = 0 ; enum axes { Precision = 1 , Axis1High = 2 , Axis1Low = 4 , Axis2High = 8 , Axis2Low = 16 }; #endif bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { #ifdef ANALOG_JOYSTICK_ENABLE // virtual joystick # if JOYSTICK_AXES_COUNT > 1 case KC_P8 : if ( record -> event . pressed ) { axesFlags |= Axis2Low ; } else { axesFlags &= ~ Axis2Low ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P2 : if ( record -> event . pressed ) { axesFlags |= Axis2High ; } else { axesFlags &= ~ Axis2High ; } joystick_status . status |= JS_UPDATED ; break ; # endif case KC_P4 : if ( record -> event . pressed ) { axesFlags |= Axis1Low ; } else { axesFlags &= ~ Axis1Low ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P6 : if ( record -> event . pressed ) { axesFlags |= Axis1High ; } else { axesFlags &= ~ Axis1High ; } joystick_status . status |= JS_UPDATED ; break ; case KC_P5 : if ( record -> event . pressed ) { axesFlags |= Precision ; } else { axesFlags &= ~ Precision ; } joystick_status . status |= JS_UPDATED ; break ; #endif } return true ; }","title":"Configuring the Joystick"},{"location":"feature_joystick/#axis-resolution","text":"By default, the resolution of each axis is 8 bit, giving a range of -127 to +127. If you need higher precision, you can increase it by defining eg. JOYSTICK_AXES_RESOLUTION 12 in your config.h . The resolution must be between 8 and 16. Note that the supported AVR MCUs have a 10-bit ADC, and 12-bit for most STM32 MCUs.","title":"Axis Resolution"},{"location":"feature_joystick/#triggering-joystick-buttons","text":"Joystick buttons are normal Quantum keycodes, defined as JS_BUTTON0 to JS_BUTTON31 , depending on the number of buttons you have configured. To trigger a joystick button, just add the corresponding keycode to your keymap.","title":"Triggering Joystick Buttons"},{"location":"feature_key_lock/","text":"Key Lock \u00b6 Sometimes you may find yourself needing to hold down a specific key for a long period of time. Key Lock holds down the next key you press for you. Press it again, and it will be released. Let's say you need to type in ALL CAPS for a few sentences. Hit KC_LOCK , and then Shift. Now, Shift will be considered held until you tap it again. You can think of Key Lock as Caps Lock, but supercharged. Usage \u00b6 First, enable Key Lock by setting KEY_LOCK_ENABLE = yes in your rules.mk . Then pick a key in your keymap and assign it the keycode KC_LOCK . Keycodes \u00b6 Keycode Description KC_LOCK Hold down the next key pressed, until the key is pressed again Caveats \u00b6 Key Lock is only able to hold standard action keys and One Shot modifier keys (for example, if you have your Shift defined as OSM(KC_LSFT) ). This does not include any of the QMK special functions (except One Shot modifiers), or shifted versions of keys such as KC_LPRN . If it's in the Basic Keycodes list, it can be held. Switching layers will not cancel the Key Lock.","title":"\u81ea\u9501\u952e"},{"location":"feature_key_lock/#key-lock","text":"Sometimes you may find yourself needing to hold down a specific key for a long period of time. Key Lock holds down the next key you press for you. Press it again, and it will be released. Let's say you need to type in ALL CAPS for a few sentences. Hit KC_LOCK , and then Shift. Now, Shift will be considered held until you tap it again. You can think of Key Lock as Caps Lock, but supercharged.","title":"Key Lock"},{"location":"feature_key_lock/#usage","text":"First, enable Key Lock by setting KEY_LOCK_ENABLE = yes in your rules.mk . Then pick a key in your keymap and assign it the keycode KC_LOCK .","title":"Usage"},{"location":"feature_key_lock/#keycodes","text":"Keycode Description KC_LOCK Hold down the next key pressed, until the key is pressed again","title":"Keycodes"},{"location":"feature_key_lock/#caveats","text":"Key Lock is only able to hold standard action keys and One Shot modifier keys (for example, if you have your Shift defined as OSM(KC_LSFT) ). This does not include any of the QMK special functions (except One Shot modifiers), or shifted versions of keys such as KC_LPRN . If it's in the Basic Keycodes list, it can be held. Switching layers will not cancel the Key Lock.","title":"Caveats"},{"location":"feature_layers/","text":"Layers \u00b6 One of the most powerful and well used features of QMK Firmware is the ability to use layers. For most people, this amounts to a function key that allows for different keys, much like what you would see on a laptop or tablet keyboard. For a detailed explanation of how the layer stack works, checkout Keymap Overview . Switching and Toggling Layers \u00b6 These functions allow you to activate layers in various ways. Note that layers are not generally independent layouts -- multiple layers can be activated at once, and it's typical for layers to use KC_TRNS to allow keypresses to pass through to lower layers. When using momentary layer switching with MO(), LM(), TT(), or LT(), make sure to leave the key on the above layers transparent or it may not work as intended. DF(layer) - switches the default layer. The default layer is the always-active base layer that other layers stack on top of. See below for more about the default layer. This might be used to switch from QWERTY to Dvorak layout. (Note that this is a temporary switch that only persists until the keyboard loses power. To modify the default layer in a persistent way requires deeper customization, such as calling the set_single_persistent_default_layer function inside of process_record_user .) MO(layer) - momentarily activates layer . As soon as you let go of the key, the layer is deactivated. LM(layer, mod) - Momentarily activates layer (like MO ), but with modifier(s) mod active. Only supports layers 0-15 and the left modifiers: MOD_LCTL , MOD_LSFT , MOD_LALT , MOD_LGUI (note the use of MOD_ constants instead of KC_ ). These modifiers can be combined using bitwise OR, e.g. LM(_RAISE, MOD_LCTL | MOD_LALT) . LT(layer, kc) - momentarily activates layer when held, and sends kc when tapped. Only supports layers 0-15. OSL(layer) - momentarily activates layer until the next key is pressed. See One Shot Keys for details and additional functionality. TG(layer) - toggles layer , activating it if it's inactive and vice versa TO(layer) - activates layer and de-activates all other layers (except your default layer). This function is special, because instead of just adding/removing one layer to your active layer stack, it will completely replace your current active layers, uniquely allowing you to replace higher layers with a lower one. This is activated on keydown (as soon as the key is pressed). TT(layer) - Layer Tap-Toggle. If you hold the key down, layer is activated, and then is de-activated when you let go (like MO ). If you repeatedly tap it, the layer will be toggled on or off (like TG ). It needs 5 taps by default, but you can change this by defining TAPPING_TOGGLE -- for example, #define TAPPING_TOGGLE 2 to toggle on just two taps. Caveats \u00b6 Currently, the layer argument of LT() is limited to layers 0-15, and the kc argument to the Basic Keycode set , meaning you can't use keycodes like LCTL() , KC_TILD , or anything greater than 0xFF . This is because QMK uses 16-bit keycodes, of which 4 bits are used for the function identifier and 4 bits for the layer, leaving only 8 bits for the keycode. Expanding this would be complicated, at best. Moving to a 32-bit keycode would solve a lot of this, but would double the amount of space that the keymap matrix uses. And it could potentially cause issues, too. If you need to apply modifiers to your tapped keycode, Tap Dance can be used to accomplish this. Working with Layers \u00b6 Care must be taken when switching layers, it's possible to lock yourself into a layer with no way to deactivate that layer (without unplugging your keyboard.) We've created some guidelines to help users avoid the most common problems. Beginners \u00b6 If you are just getting started with QMK you will want to keep everything simple. Follow these guidelines when setting up your layers: Setup layer 0 as your default, \"base\" layer. This is your normal typing layer, and could be whatever layout you want (qwerty, dvorak, colemak, etc.). It's important to set this as the lowest layer since it will typically have most or all of the keyboard's keys defined, so would block other layers from having any effect if it were above them (i.e., had a higher layer number). Arrange your layers in a \"tree\" layout, with layer 0 as the root. Do not try to enter the same layer from more than one other layer. In a layer's keymap, only reference higher-numbered layers. Because layers are processed from the highest-numbered (topmost) active layer down, modifying the state of lower layers can be tricky and error-prone. Intermediate Users \u00b6 Sometimes you need more than one base layer. For example, if you want to switch between QWERTY and Dvorak, switch between layouts for different countries, or switch your layout for different videogames. Your base layers should always be the lowest numbered layers. When you have multiple base layers you should always treat them as mutually exclusive. When one base layer is on the others are off. Advanced Users \u00b6 Once you have a good feel for how layers work and what you can do, you can get more creative. The rules listed in the beginner section will help you be successful by avoiding some of the tricker details but they can be constraining, especially for ultra-compact keyboard users. Understanding how layers work will allow you to use them in more advanced ways. Layers stack on top of each other in numerical order. When determining what a keypress does, QMK scans the layers from the top down, stopping when it reaches the first active layer that is not set to KC_TRNS . As a result if you activate a layer that is numerically lower than your current layer, and your current layer (or another layer that is active and higher than your target layer) has something other than KC_TRNS , that is the key that will be sent, not the key on the layer you just activated. This is the cause of most people's \"why doesn't my layer get switched\" problem. Sometimes, you might want to switch between layers in a macro or as part of a tap dance routine. layer_on activates a layer, and layer_off deactivates it. More layer-related functions can be found in action_layer.h . Functions \u00b6 There are a number of functions (and variables) related to how you can use or manipulate the layers. Function Description layer_state_set(layer_mask) Directly sets the layer state (recommended, do not use unless you know what you are doing). layer_clear() Clears all layers (turns them all off). layer_move(layer) Turns specified layer on, and all other layers off. layer_on(layer) Turns specified layer on, leaves all other layers in existing state. layer_off(layer) Turns specified layer off, leaves all other layers in existing state. layer_invert(layer) Interverts/toggles the state of the specified layer layer_or(layer_mask) Turns on layers based on matching bits between specifed layer and existing layer state. layer_and(layer_mask) Turns on layers based on matching enabled bits between specifed layer and existing layer state. layer_xor(layer_mask) Turns on layers based on non-matching bits between specifed layer and existing layer state. layer_debug(layer_mask) Prints out the current bit mask and highest active layer to debugger console. default_layer_set(layer_mask) Directly sets the default layer state (recommended, do not use unless you know what you are doing). default_layer_or(layer_mask) Turns on layers based on matching bits between specifed layer and existing default layer state. default_layer_and(layer_mask) Turns on layers based on matching enabled bits between specifed layer and existing default layer state. default_layer_xor(layer_mask) Turns on layers based on non-matching bits between specifed layer and existing default layer state. default_layer_debug(layer_mask) Prints out the current bit mask and highest active default layer to debugger console. set_single_persistent_default_layer(layer) Sets the default layer and writes it to persistent memory (EEPROM). update_tri_layer(x, y, z) Checks if layers x and y are both on, and sets z based on that (on if both on, otherwise off). update_tri_layer_state(state, x, y, z) Does the same as update_tri_layer(x, y, z) , but from layer_state_set_* functions. In addition to the functions that you can call, there are a number of callback functions that get called every time the layer changes. This passes the layer state to the function, where it can be read or modified. Callback Description layer_state_set_kb(layer_state_t state) Callback for layer functions, for keyboard. layer_state_set_user(layer_state_t state) Callback for layer functions, for users. default_layer_state_set_kb(layer_state_t state) Callback for default layer functions, for keyboard. Called on keyboard initialization. default_layer_state_set_user(layer_state_t state) Callback for default layer functions, for users. Called on keyboard initialization. Tip For additional details on how you can use these callbacks, check out the Layer Change Code document. It is also possible to check the state of a particular layer using the following functions and macros. Function Description Aliases layer_state_is(layer) Checks if the specified layer is enabled globally. IS_LAYER_ON(layer) , IS_LAYER_OFF(layer) layer_state_cmp(state, layer) Checks state to see if the specified layer is enabled. Intended for use in layer callbacks. IS_LAYER_ON_STATE(state, layer) , IS_LAYER_OFF_STATE(state, layer)","title":"Layers {: id=layers }"},{"location":"feature_layers/#layers","text":"One of the most powerful and well used features of QMK Firmware is the ability to use layers. For most people, this amounts to a function key that allows for different keys, much like what you would see on a laptop or tablet keyboard. For a detailed explanation of how the layer stack works, checkout Keymap Overview .","title":"Layers"},{"location":"feature_layers/#switching-and-toggling-layers","text":"These functions allow you to activate layers in various ways. Note that layers are not generally independent layouts -- multiple layers can be activated at once, and it's typical for layers to use KC_TRNS to allow keypresses to pass through to lower layers. When using momentary layer switching with MO(), LM(), TT(), or LT(), make sure to leave the key on the above layers transparent or it may not work as intended. DF(layer) - switches the default layer. The default layer is the always-active base layer that other layers stack on top of. See below for more about the default layer. This might be used to switch from QWERTY to Dvorak layout. (Note that this is a temporary switch that only persists until the keyboard loses power. To modify the default layer in a persistent way requires deeper customization, such as calling the set_single_persistent_default_layer function inside of process_record_user .) MO(layer) - momentarily activates layer . As soon as you let go of the key, the layer is deactivated. LM(layer, mod) - Momentarily activates layer (like MO ), but with modifier(s) mod active. Only supports layers 0-15 and the left modifiers: MOD_LCTL , MOD_LSFT , MOD_LALT , MOD_LGUI (note the use of MOD_ constants instead of KC_ ). These modifiers can be combined using bitwise OR, e.g. LM(_RAISE, MOD_LCTL | MOD_LALT) . LT(layer, kc) - momentarily activates layer when held, and sends kc when tapped. Only supports layers 0-15. OSL(layer) - momentarily activates layer until the next key is pressed. See One Shot Keys for details and additional functionality. TG(layer) - toggles layer , activating it if it's inactive and vice versa TO(layer) - activates layer and de-activates all other layers (except your default layer). This function is special, because instead of just adding/removing one layer to your active layer stack, it will completely replace your current active layers, uniquely allowing you to replace higher layers with a lower one. This is activated on keydown (as soon as the key is pressed). TT(layer) - Layer Tap-Toggle. If you hold the key down, layer is activated, and then is de-activated when you let go (like MO ). If you repeatedly tap it, the layer will be toggled on or off (like TG ). It needs 5 taps by default, but you can change this by defining TAPPING_TOGGLE -- for example, #define TAPPING_TOGGLE 2 to toggle on just two taps.","title":"Switching and Toggling Layers"},{"location":"feature_layers/#caveats","text":"Currently, the layer argument of LT() is limited to layers 0-15, and the kc argument to the Basic Keycode set , meaning you can't use keycodes like LCTL() , KC_TILD , or anything greater than 0xFF . This is because QMK uses 16-bit keycodes, of which 4 bits are used for the function identifier and 4 bits for the layer, leaving only 8 bits for the keycode. Expanding this would be complicated, at best. Moving to a 32-bit keycode would solve a lot of this, but would double the amount of space that the keymap matrix uses. And it could potentially cause issues, too. If you need to apply modifiers to your tapped keycode, Tap Dance can be used to accomplish this.","title":"Caveats"},{"location":"feature_layers/#working-with-layers","text":"Care must be taken when switching layers, it's possible to lock yourself into a layer with no way to deactivate that layer (without unplugging your keyboard.) We've created some guidelines to help users avoid the most common problems.","title":"Working with Layers"},{"location":"feature_layers/#beginners","text":"If you are just getting started with QMK you will want to keep everything simple. Follow these guidelines when setting up your layers: Setup layer 0 as your default, \"base\" layer. This is your normal typing layer, and could be whatever layout you want (qwerty, dvorak, colemak, etc.). It's important to set this as the lowest layer since it will typically have most or all of the keyboard's keys defined, so would block other layers from having any effect if it were above them (i.e., had a higher layer number). Arrange your layers in a \"tree\" layout, with layer 0 as the root. Do not try to enter the same layer from more than one other layer. In a layer's keymap, only reference higher-numbered layers. Because layers are processed from the highest-numbered (topmost) active layer down, modifying the state of lower layers can be tricky and error-prone.","title":"Beginners"},{"location":"feature_layers/#intermediate-users","text":"Sometimes you need more than one base layer. For example, if you want to switch between QWERTY and Dvorak, switch between layouts for different countries, or switch your layout for different videogames. Your base layers should always be the lowest numbered layers. When you have multiple base layers you should always treat them as mutually exclusive. When one base layer is on the others are off.","title":"Intermediate Users"},{"location":"feature_layers/#advanced-users","text":"Once you have a good feel for how layers work and what you can do, you can get more creative. The rules listed in the beginner section will help you be successful by avoiding some of the tricker details but they can be constraining, especially for ultra-compact keyboard users. Understanding how layers work will allow you to use them in more advanced ways. Layers stack on top of each other in numerical order. When determining what a keypress does, QMK scans the layers from the top down, stopping when it reaches the first active layer that is not set to KC_TRNS . As a result if you activate a layer that is numerically lower than your current layer, and your current layer (or another layer that is active and higher than your target layer) has something other than KC_TRNS , that is the key that will be sent, not the key on the layer you just activated. This is the cause of most people's \"why doesn't my layer get switched\" problem. Sometimes, you might want to switch between layers in a macro or as part of a tap dance routine. layer_on activates a layer, and layer_off deactivates it. More layer-related functions can be found in action_layer.h .","title":"Advanced Users"},{"location":"feature_layers/#functions","text":"There are a number of functions (and variables) related to how you can use or manipulate the layers. Function Description layer_state_set(layer_mask) Directly sets the layer state (recommended, do not use unless you know what you are doing). layer_clear() Clears all layers (turns them all off). layer_move(layer) Turns specified layer on, and all other layers off. layer_on(layer) Turns specified layer on, leaves all other layers in existing state. layer_off(layer) Turns specified layer off, leaves all other layers in existing state. layer_invert(layer) Interverts/toggles the state of the specified layer layer_or(layer_mask) Turns on layers based on matching bits between specifed layer and existing layer state. layer_and(layer_mask) Turns on layers based on matching enabled bits between specifed layer and existing layer state. layer_xor(layer_mask) Turns on layers based on non-matching bits between specifed layer and existing layer state. layer_debug(layer_mask) Prints out the current bit mask and highest active layer to debugger console. default_layer_set(layer_mask) Directly sets the default layer state (recommended, do not use unless you know what you are doing). default_layer_or(layer_mask) Turns on layers based on matching bits between specifed layer and existing default layer state. default_layer_and(layer_mask) Turns on layers based on matching enabled bits between specifed layer and existing default layer state. default_layer_xor(layer_mask) Turns on layers based on non-matching bits between specifed layer and existing default layer state. default_layer_debug(layer_mask) Prints out the current bit mask and highest active default layer to debugger console. set_single_persistent_default_layer(layer) Sets the default layer and writes it to persistent memory (EEPROM). update_tri_layer(x, y, z) Checks if layers x and y are both on, and sets z based on that (on if both on, otherwise off). update_tri_layer_state(state, x, y, z) Does the same as update_tri_layer(x, y, z) , but from layer_state_set_* functions. In addition to the functions that you can call, there are a number of callback functions that get called every time the layer changes. This passes the layer state to the function, where it can be read or modified. Callback Description layer_state_set_kb(layer_state_t state) Callback for layer functions, for keyboard. layer_state_set_user(layer_state_t state) Callback for layer functions, for users. default_layer_state_set_kb(layer_state_t state) Callback for default layer functions, for keyboard. Called on keyboard initialization. default_layer_state_set_user(layer_state_t state) Callback for default layer functions, for users. Called on keyboard initialization. Tip For additional details on how you can use these callbacks, check out the Layer Change Code document. It is also possible to check the state of a particular layer using the following functions and macros. Function Description Aliases layer_state_is(layer) Checks if the specified layer is enabled globally. IS_LAYER_ON(layer) , IS_LAYER_OFF(layer) layer_state_cmp(state, layer) Checks state to see if the specified layer is enabled. Intended for use in layer callbacks. IS_LAYER_ON_STATE(state, layer) , IS_LAYER_OFF_STATE(state, layer)","title":"Functions"},{"location":"feature_layouts/","text":"Layouts: Using a Keymap with Multiple Keyboards \u00b6 The layouts/ folder contains different physical key layouts that can apply to different keyboards. layouts/ + default/ | + 60_ansi/ | | + readme.md | | + layout.json | | + a_good_keymap/ | | | + keymap.c | | | + readme.md | | | + config.h | | | + rules.mk | | + <keymap folder>/ | | + ... | + <layout folder>/ + community/ | + <layout folder>/ | + ... The layouts/default/ and layouts/community/ are two examples of layout \"repositories\" - currently default will contain all of the information concerning the layout, and one default keymap named default_<layout> , for users to use as a reference. community contains all of the community keymaps, with the eventual goal of being split-off into a separate repo for users to clone into layouts/ . QMK searches through all folders in layouts/ , so it's possible to have multiple repositories here. Each layout folder is named ( [a-z0-9_] ) after the physical aspects of the layout, in the most generic way possible, and contains a readme.md with the layout to be defined by the keyboard: # 60_ansi LAYOUT_60_ansi New names should try to stick to the standards set by existing layouts, and can be discussed in the PR/Issue. Supporting a Layout \u00b6 For a keyboard to support a layout, the variable must be defined in it's <keyboard>.h , and match the number of arguments/keys (and preferably the physical layout): #define LAYOUT_60_ansi KEYMAP_ANSI The name of the layout must match this regex: [a-z0-9_]+ The folder name must be added to the keyboard's rules.mk : LAYOUTS = 60_ansi LAYOUTS can be set in any keyboard folder level's rules.mk : LAYOUTS = 60_iso but the LAYOUT_<layout> variable must be defined in <folder>.h as well. Building a Keymap \u00b6 You should be able to build the keyboard keymap with a command in this format: make <keyboard>:<layout> Conflicting layouts \u00b6 When a keyboard supports multiple layout options, LAYOUTS = ortho_4x4 ortho_4x12 And a layout exists for both options, layouts/ + community/ | + ortho_4x4/ | | + <layout>/ | | | + ... | + ortho_4x12/ | | + <layout>/ | | | + ... | + ... The FORCE_LAYOUT argument can be used to specify which layout to build make <keyboard>:<layout> FORCE_LAYOUT=ortho_4x4 make <keyboard>:<layout> FORCE_LAYOUT=ortho_4x12 Tips for Making Layouts Keyboard-Agnostic \u00b6 Includes \u00b6 Instead of using #include \"planck.h\" , you can use this line to include whatever <keyboard>.h ( <folder>.h should not be included here) file that is being compiled: #include QMK_KEYBOARD_H If you want to keep some keyboard-specific code, you can use these variables to escape it with an #ifdef statement: KEYBOARD_<folder1>_<folder2> For example: #ifdef KEYBOARD_planck #ifdef KEYBOARD_planck_rev4 planck_rev4_function (); #endif #endif Note that the names are lowercase and match the folder/file names for the keyboard/revision exactly. Keymaps \u00b6 In order to support both split and non-split keyboards with the same layout, you need to use the keyboard agnostic LAYOUT_<layout name> macro in your keymap. For instance, in order for a Let's Split and Planck to share the same layout file, you need to use LAYOUT_ortho_4x12 instead of LAYOUT_planck_grid or just {} for a C array.","title":"\u5e03\u5c40"},{"location":"feature_layouts/#layouts-using-a-keymap-with-multiple-keyboards","text":"The layouts/ folder contains different physical key layouts that can apply to different keyboards. layouts/ + default/ | + 60_ansi/ | | + readme.md | | + layout.json | | + a_good_keymap/ | | | + keymap.c | | | + readme.md | | | + config.h | | | + rules.mk | | + <keymap folder>/ | | + ... | + <layout folder>/ + community/ | + <layout folder>/ | + ... The layouts/default/ and layouts/community/ are two examples of layout \"repositories\" - currently default will contain all of the information concerning the layout, and one default keymap named default_<layout> , for users to use as a reference. community contains all of the community keymaps, with the eventual goal of being split-off into a separate repo for users to clone into layouts/ . QMK searches through all folders in layouts/ , so it's possible to have multiple repositories here. Each layout folder is named ( [a-z0-9_] ) after the physical aspects of the layout, in the most generic way possible, and contains a readme.md with the layout to be defined by the keyboard: # 60_ansi LAYOUT_60_ansi New names should try to stick to the standards set by existing layouts, and can be discussed in the PR/Issue.","title":"Layouts: Using a Keymap with Multiple Keyboards"},{"location":"feature_layouts/#supporting-a-layout","text":"For a keyboard to support a layout, the variable must be defined in it's <keyboard>.h , and match the number of arguments/keys (and preferably the physical layout): #define LAYOUT_60_ansi KEYMAP_ANSI The name of the layout must match this regex: [a-z0-9_]+ The folder name must be added to the keyboard's rules.mk : LAYOUTS = 60_ansi LAYOUTS can be set in any keyboard folder level's rules.mk : LAYOUTS = 60_iso but the LAYOUT_<layout> variable must be defined in <folder>.h as well.","title":"Supporting a Layout"},{"location":"feature_layouts/#building-a-keymap","text":"You should be able to build the keyboard keymap with a command in this format: make <keyboard>:<layout>","title":"Building a Keymap"},{"location":"feature_layouts/#conflicting-layouts","text":"When a keyboard supports multiple layout options, LAYOUTS = ortho_4x4 ortho_4x12 And a layout exists for both options, layouts/ + community/ | + ortho_4x4/ | | + <layout>/ | | | + ... | + ortho_4x12/ | | + <layout>/ | | | + ... | + ... The FORCE_LAYOUT argument can be used to specify which layout to build make <keyboard>:<layout> FORCE_LAYOUT=ortho_4x4 make <keyboard>:<layout> FORCE_LAYOUT=ortho_4x12","title":"Conflicting layouts"},{"location":"feature_layouts/#tips-for-making-layouts-keyboard-agnostic","text":"","title":"Tips for Making Layouts Keyboard-Agnostic"},{"location":"feature_layouts/#includes","text":"Instead of using #include \"planck.h\" , you can use this line to include whatever <keyboard>.h ( <folder>.h should not be included here) file that is being compiled: #include QMK_KEYBOARD_H If you want to keep some keyboard-specific code, you can use these variables to escape it with an #ifdef statement: KEYBOARD_<folder1>_<folder2> For example: #ifdef KEYBOARD_planck #ifdef KEYBOARD_planck_rev4 planck_rev4_function (); #endif #endif Note that the names are lowercase and match the folder/file names for the keyboard/revision exactly.","title":"Includes"},{"location":"feature_layouts/#keymaps","text":"In order to support both split and non-split keyboards with the same layout, you need to use the keyboard agnostic LAYOUT_<layout name> macro in your keymap. For instance, in order for a Let's Split and Planck to share the same layout file, you need to use LAYOUT_ortho_4x12 instead of LAYOUT_planck_grid or just {} for a C array.","title":"Keymaps"},{"location":"feature_leader_key/","text":"The Leader Key: A New Kind of Modifier \u00b6 If you've ever used Vim, you know what a Leader key is. If not, you're about to discover a wonderful concept. :) Instead of hitting Alt+Shift+W for example (holding down three keys at the same time), what if you could hit a sequence of keys instead? So you'd hit our special modifier (the Leader key), followed by W and then C (just a rapid succession of keys), and something would happen. That's what KC_LEAD does. Here's an example: Pick a key on your keyboard you want to use as the Leader key. Assign it the keycode KC_LEAD . This key would be dedicated just for this -- it's a single action key, can't be used for anything else. Include the line #define LEADER_TIMEOUT 300 in your config.h . This sets the timeout for the KC_LEAD key. Specifically, when you press the KC_LEAD key, you only have a certain amount of time to complete the Leader Key sequence. The 300 here sets that to 300ms, and you can increase this value to give you more time to hit the sequence. But any keys pressed during this timeout are intercepted and not sent, so you may want to keep this value low. * By default, this timeout is how long after pressing KC_LEAD to complete your entire sequence. This may be very low for some people. So you may want to increase this timeout. Optionally, you may want to enable the LEADER_PER_KEY_TIMING option, which resets the timeout after each key is tapped. This allows you to maintain a low value here, but still be able to use the longer sequences. To enable this option, add #define LEADER_PER_KEY_TIMING to your config.h . Within your matrix_scan_user function, add something like this: LEADER_EXTERNS (); void matrix_scan_user ( void ) { LEADER_DICTIONARY () { leading = false ; leader_end (); SEQ_ONE_KEY ( KC_F ) { // Anything you can do in a macro. SEND_STRING ( \"QMK is awesome.\" ); } SEQ_TWO_KEYS ( KC_D , KC_D ) { SEND_STRING ( SS_LCTL ( \"a\" ) SS_LCTL ( \"c\" )); } SEQ_THREE_KEYS ( KC_D , KC_D , KC_S ) { SEND_STRING ( \"https://start.duckduckgo.com \\n \" ); } SEQ_TWO_KEYS ( KC_A , KC_S ) { register_code ( KC_LGUI ); register_code ( KC_S ); unregister_code ( KC_S ); unregister_code ( KC_LGUI ); } } } As you can see, you have a few function. You can use SEQ_ONE_KEY for single-key sequences (Leader followed by just one key), and SEQ_TWO_KEYS , SEQ_THREE_KEYS up to SEQ_FIVE_KEYS for longer sequences. Each of these accepts one or more keycodes as arguments. This is an important point: You can use keycodes from any layer on your keyboard . That layer would need to be active for the leader macro to fire, obviously. Adding Leader Key Support in the rules.mk \u00b6 To add support for Leader Key you simply need to add a single line to your keymap's rules.mk : LEADER_ENABLE = yes Per Key Timing on Leader keys \u00b6 Rather than relying on an incredibly high timeout for long leader key strings or those of us without 200wpm typing skills, we can enable per key timing to ensure that each key pressed provides us with more time to finish our stroke. This is incredibly helpful with leader key emulation of tap dance (read: multiple taps of the same key like C, C, C). In order to enable this, place this in your config.h : #define LEADER_PER_KEY_TIMING After this, it's recommended that you lower your LEADER_TIMEOUT to something less that 300ms. #define LEADER_TIMEOUT 250 Now, something like this won't seem impossible to do without a 1000MS leader key timeout: SEQ_THREE_KEYS ( KC_C , KC_C , KC_C ) { SEND_STRING ( \"Per key timing is great!!!\" ); } Infinite Leader key timeout \u00b6 Sometimes your leader key is not on a comfortable places as the rest of keys on your sequence. Imagine that your leader key is one of your outer top right keys, you may need to reposition your hand just to reach your leader key. This can make typing the entire sequence on time hard even if you are able to type most of the sequence fast. For example, if your sequence is Leader + asd typing asd fast is very easy once you have your hands in your home row. However starting the sequence in time after moving your hand out of the home row to reach the leader key and back is not. To remove the stress this situation produces to your hands you can enable an infinite timeout just for the leader key. This mean that, after you hit the leader key you will have an infinite amount of time to start the rest of the sequence, allowing you to proper position your hands on the best position to type the rest of the sequence comfortably. This infinite timeout only affects the leader key, so in our previous example of Leader + asd you will have an infinite amount of time between Leader and a , but once you start the sequence the timeout you have configured (global or per key) will work normally. This way you can configure a very short LEADER_TIMEOUT but still have plenty of time to position your hands. In order to enable this, place this in your config.h : #define LEADER_NO_TIMEOUT Strict Key Processing \u00b6 By default, the Leader Key feature will filter the keycode out of Mod-Tap and Layer Tap functions when checking for the Leader sequences. That means if you're using LT(3, KC_A) , it will pick this up as KC_A for the sequence, rather than LT(3, KC_A) , giving a more expected behavior for newer users. While, this may be fine for most, if you want to specify the whole keycode (eg, LT(3, KC_A) from the example above) in the sequence, you can enable this by added #define LEADER_KEY_STRICT_KEY_PROCESSING to your config.h file. This will then disable the filtering, and you'll need to specify the whole keycode. Customization \u00b6 The Leader Key feature has some additional customization to how the Leader Key feature works. It has two functions that can be called at certain parts of the process. Namely leader_start() and leader_end() . The leader_start() function is called when you tap the KC_LEAD key, and the leader_end() function is called when either the leader sequence is completed, or the leader timeout is hit. You can add these functions to your code ( keymap.c usually) to add feedback to the Leader sequences (such as beeping or playing music). void leader_start ( void ) { // sequence started } void leader_end ( void ) { // sequence ended (no success/failure detection) } Example \u00b6 This example will play the Mario \"One Up\" sound when you hit KC_LEAD to start the Leader Sequence, and will play \"All Star\" if it completes successfully or \"Rick Roll\" you if it fails. bool did_leader_succeed ; #ifdef AUDIO_ENABLE float leader_start [][ 2 ] = SONG ( ONE_UP_SOUND ); float leader_succeed [][ 2 ] = SONG ( ALL_STAR ); float leader_fail [][ 2 ] = SONG ( RICK_ROLL ); #endif LEADER_EXTERNS (); void matrix_scan_user ( void ) { LEADER_DICTIONARY () { did_leader_succeed = leading = false ; SEQ_ONE_KEY ( KC_E ) { // Anything you can do in a macro. SEND_STRING ( SS_LCTL ( SS_LSFT ( \"t\" ))); did_leader_succeed = true ; } else SEQ_TWO_KEYS ( KC_E , KC_D ) { SEND_STRING ( SS_LGUI ( \"r\" ) \"cmd \\n \" SS_LCTL ( \"c\" )); did_leader_succeed = true ; } leader_end (); } } void leader_start ( void ) { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_start ); #endif } void leader_end ( void ) { if ( did_leader_succeed ) { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_succeed ); #endif } else { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_fail ); #endif } }","title":"\u524d\u5bfc\u952e"},{"location":"feature_leader_key/#the-leader-key-a-new-kind-of-modifier","text":"If you've ever used Vim, you know what a Leader key is. If not, you're about to discover a wonderful concept. :) Instead of hitting Alt+Shift+W for example (holding down three keys at the same time), what if you could hit a sequence of keys instead? So you'd hit our special modifier (the Leader key), followed by W and then C (just a rapid succession of keys), and something would happen. That's what KC_LEAD does. Here's an example: Pick a key on your keyboard you want to use as the Leader key. Assign it the keycode KC_LEAD . This key would be dedicated just for this -- it's a single action key, can't be used for anything else. Include the line #define LEADER_TIMEOUT 300 in your config.h . This sets the timeout for the KC_LEAD key. Specifically, when you press the KC_LEAD key, you only have a certain amount of time to complete the Leader Key sequence. The 300 here sets that to 300ms, and you can increase this value to give you more time to hit the sequence. But any keys pressed during this timeout are intercepted and not sent, so you may want to keep this value low. * By default, this timeout is how long after pressing KC_LEAD to complete your entire sequence. This may be very low for some people. So you may want to increase this timeout. Optionally, you may want to enable the LEADER_PER_KEY_TIMING option, which resets the timeout after each key is tapped. This allows you to maintain a low value here, but still be able to use the longer sequences. To enable this option, add #define LEADER_PER_KEY_TIMING to your config.h . Within your matrix_scan_user function, add something like this: LEADER_EXTERNS (); void matrix_scan_user ( void ) { LEADER_DICTIONARY () { leading = false ; leader_end (); SEQ_ONE_KEY ( KC_F ) { // Anything you can do in a macro. SEND_STRING ( \"QMK is awesome.\" ); } SEQ_TWO_KEYS ( KC_D , KC_D ) { SEND_STRING ( SS_LCTL ( \"a\" ) SS_LCTL ( \"c\" )); } SEQ_THREE_KEYS ( KC_D , KC_D , KC_S ) { SEND_STRING ( \"https://start.duckduckgo.com \\n \" ); } SEQ_TWO_KEYS ( KC_A , KC_S ) { register_code ( KC_LGUI ); register_code ( KC_S ); unregister_code ( KC_S ); unregister_code ( KC_LGUI ); } } } As you can see, you have a few function. You can use SEQ_ONE_KEY for single-key sequences (Leader followed by just one key), and SEQ_TWO_KEYS , SEQ_THREE_KEYS up to SEQ_FIVE_KEYS for longer sequences. Each of these accepts one or more keycodes as arguments. This is an important point: You can use keycodes from any layer on your keyboard . That layer would need to be active for the leader macro to fire, obviously.","title":"The Leader Key: A New Kind of Modifier"},{"location":"feature_leader_key/#adding-leader-key-support-in-the-rulesmk","text":"To add support for Leader Key you simply need to add a single line to your keymap's rules.mk : LEADER_ENABLE = yes","title":"Adding Leader Key Support in the rules.mk"},{"location":"feature_leader_key/#per-key-timing-on-leader-keys","text":"Rather than relying on an incredibly high timeout for long leader key strings or those of us without 200wpm typing skills, we can enable per key timing to ensure that each key pressed provides us with more time to finish our stroke. This is incredibly helpful with leader key emulation of tap dance (read: multiple taps of the same key like C, C, C). In order to enable this, place this in your config.h : #define LEADER_PER_KEY_TIMING After this, it's recommended that you lower your LEADER_TIMEOUT to something less that 300ms. #define LEADER_TIMEOUT 250 Now, something like this won't seem impossible to do without a 1000MS leader key timeout: SEQ_THREE_KEYS ( KC_C , KC_C , KC_C ) { SEND_STRING ( \"Per key timing is great!!!\" ); }","title":"Per Key Timing on Leader keys"},{"location":"feature_leader_key/#infinite-leader-key-timeout","text":"Sometimes your leader key is not on a comfortable places as the rest of keys on your sequence. Imagine that your leader key is one of your outer top right keys, you may need to reposition your hand just to reach your leader key. This can make typing the entire sequence on time hard even if you are able to type most of the sequence fast. For example, if your sequence is Leader + asd typing asd fast is very easy once you have your hands in your home row. However starting the sequence in time after moving your hand out of the home row to reach the leader key and back is not. To remove the stress this situation produces to your hands you can enable an infinite timeout just for the leader key. This mean that, after you hit the leader key you will have an infinite amount of time to start the rest of the sequence, allowing you to proper position your hands on the best position to type the rest of the sequence comfortably. This infinite timeout only affects the leader key, so in our previous example of Leader + asd you will have an infinite amount of time between Leader and a , but once you start the sequence the timeout you have configured (global or per key) will work normally. This way you can configure a very short LEADER_TIMEOUT but still have plenty of time to position your hands. In order to enable this, place this in your config.h : #define LEADER_NO_TIMEOUT","title":"Infinite Leader key timeout"},{"location":"feature_leader_key/#strict-key-processing","text":"By default, the Leader Key feature will filter the keycode out of Mod-Tap and Layer Tap functions when checking for the Leader sequences. That means if you're using LT(3, KC_A) , it will pick this up as KC_A for the sequence, rather than LT(3, KC_A) , giving a more expected behavior for newer users. While, this may be fine for most, if you want to specify the whole keycode (eg, LT(3, KC_A) from the example above) in the sequence, you can enable this by added #define LEADER_KEY_STRICT_KEY_PROCESSING to your config.h file. This will then disable the filtering, and you'll need to specify the whole keycode.","title":"Strict Key Processing"},{"location":"feature_leader_key/#customization","text":"The Leader Key feature has some additional customization to how the Leader Key feature works. It has two functions that can be called at certain parts of the process. Namely leader_start() and leader_end() . The leader_start() function is called when you tap the KC_LEAD key, and the leader_end() function is called when either the leader sequence is completed, or the leader timeout is hit. You can add these functions to your code ( keymap.c usually) to add feedback to the Leader sequences (such as beeping or playing music). void leader_start ( void ) { // sequence started } void leader_end ( void ) { // sequence ended (no success/failure detection) }","title":"Customization"},{"location":"feature_leader_key/#example","text":"This example will play the Mario \"One Up\" sound when you hit KC_LEAD to start the Leader Sequence, and will play \"All Star\" if it completes successfully or \"Rick Roll\" you if it fails. bool did_leader_succeed ; #ifdef AUDIO_ENABLE float leader_start [][ 2 ] = SONG ( ONE_UP_SOUND ); float leader_succeed [][ 2 ] = SONG ( ALL_STAR ); float leader_fail [][ 2 ] = SONG ( RICK_ROLL ); #endif LEADER_EXTERNS (); void matrix_scan_user ( void ) { LEADER_DICTIONARY () { did_leader_succeed = leading = false ; SEQ_ONE_KEY ( KC_E ) { // Anything you can do in a macro. SEND_STRING ( SS_LCTL ( SS_LSFT ( \"t\" ))); did_leader_succeed = true ; } else SEQ_TWO_KEYS ( KC_E , KC_D ) { SEND_STRING ( SS_LGUI ( \"r\" ) \"cmd \\n \" SS_LCTL ( \"c\" )); did_leader_succeed = true ; } leader_end (); } } void leader_start ( void ) { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_start ); #endif } void leader_end ( void ) { if ( did_leader_succeed ) { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_succeed ); #endif } else { #ifdef AUDIO_ENABLE PLAY_SONG ( leader_fail ); #endif } }","title":"Example"},{"location":"feature_led_indicators/","text":"LED Indicators \u00b6 Info Currently, this feature is not supported for split keyboards QMK provides methods to read 5 of the LEDs defined in the HID spec: Num Lock Caps Lock Scroll Lock Compose Kana There are three ways to get the lock LED state: * by specifying configuration options within config.h * by implementing bool led_update_kb(led_t led_state) or _user(led_t led_state) ; or * by calling led_t host_keyboard_led_state() Hint host_keyboard_led_state() may already reflect a new value before led_update_user() is called. Two more deprecated functions exist that provide the LED state as a uint8_t : uint8_t led_set_kb(uint8_t usb_led) and _user(uint8_t usb_led) uint8_t host_keyboard_leds() Configuration Options \u00b6 To configure the indicators, #define these in your config.h : Define Default Description LED_NUM_LOCK_PIN Not defined The pin that controls the Num Lock LED LED_CAPS_LOCK_PIN Not defined The pin that controls the Caps Lock LED LED_SCROLL_LOCK_PIN Not defined The pin that controls the Scroll Lock LED LED_COMPOSE_PIN Not defined The pin that controls the Compose LED LED_KANA_PIN Not defined The pin that controls the Kana LED LED_PIN_ON_STATE 1 The state of the indicator pins when the LED is \"on\" - 1 for high, 0 for low Unless you are designing your own keyboard, you generally should not need to change the above config options. led_update_*() \u00b6 When the configuration options do not provide enough flexibility, the API hooks provided allow custom control of the LED behavior. These functions will be called when the state of one of those 5 LEDs changes. It receives the LED state as a struct parameter. By convention, return true from led_update_user() to get the led_update_kb() hook to run its code, and return false when you would prefer not to run the code in led_update_kb() . Some examples include: overriding the LEDs to use them for something else like layer indication return false because you do not want the _kb() function to run, as it would override your layer behavior. play a sound when an LED turns on or off. return true because you want the _kb function to run, and this is in addition to the default LED behavior. Info Because the led_set_* functions return void instead of bool , they do not allow for overriding the keyboard LED control. It's recommended to use led_update_* instead. Example led_update_kb() Implementation \u00b6 bool led_update_kb ( led_t led_state ) { bool res = led_update_user ( led_state ); if ( res ) { // writePin sets the pin high for 1 and low for 0. // In this example the pins are inverted, setting // it low/0 turns it on, and high/1 turns the LED off. // This behavior depends on whether the LED is between the pin // and VCC or the pin and GND. writePin ( B0 , ! led_state . num_lock ); writePin ( B1 , ! led_state . caps_lock ); writePin ( B2 , ! led_state . scroll_lock ); writePin ( B3 , ! led_state . compose ); writePin ( B4 , ! led_state . kana ); } return res ; } Example led_update_user() Implementation \u00b6 This incomplete example would play a sound if Caps Lock is turned on or off. It returns true , because you also want the LEDs to maintain their state. #ifdef AUDIO_ENABLE float caps_on [][ 2 ] = SONG ( CAPS_LOCK_ON_SOUND ); float caps_off [][ 2 ] = SONG ( CAPS_LOCK_OFF_SOUND ); #endif bool led_update_user ( led_t led_state ) { #ifdef AUDIO_ENABLE static uint8_t caps_state = 0 ; if ( caps_state != led_state . caps_lock ) { led_state . caps_lock ? PLAY_SONG ( caps_on ) : PLAY_SONG ( caps_off ); caps_state = led_state . caps_lock ; } #endif return true ; } led_update_* Function Documentation \u00b6 Keyboard/Revision: bool led_update_kb(led_t led_state) Keymap: bool led_update_user(led_t led_state) host_keyboard_led_state() \u00b6 Call this function to get the last received LED state as a led_t . This is useful for reading the LED state outside led_update_* , e.g. in matrix_scan_user() . Setting Physical LED State \u00b6 Some keyboard implementations provide convenience methods for setting the state of the physical LEDs. Ergodox Boards \u00b6 The Ergodox implementations provide ergodox_right_led_1 / 2 / 3_on / off() to turn individual LEDs on or off, as well as ergodox_right_led_on / off(uint8_t led) to turn them on or off by their index. In addition, it is possible to specify the brightness level of all LEDs with ergodox_led_all_set(uint8_t n) ; of individual LEDs with ergodox_right_led_1 / 2 / 3_set(uint8_t n) ; or by index with ergodox_right_led_set(uint8_t led, uint8_t n) . Ergodox boards also define LED_BRIGHTNESS_LO for the lowest brightness and LED_BRIGHTNESS_HI for the highest brightness (which is the default).","title":"LED Indicators"},{"location":"feature_led_indicators/#led-indicators","text":"Info Currently, this feature is not supported for split keyboards QMK provides methods to read 5 of the LEDs defined in the HID spec: Num Lock Caps Lock Scroll Lock Compose Kana There are three ways to get the lock LED state: * by specifying configuration options within config.h * by implementing bool led_update_kb(led_t led_state) or _user(led_t led_state) ; or * by calling led_t host_keyboard_led_state() Hint host_keyboard_led_state() may already reflect a new value before led_update_user() is called. Two more deprecated functions exist that provide the LED state as a uint8_t : uint8_t led_set_kb(uint8_t usb_led) and _user(uint8_t usb_led) uint8_t host_keyboard_leds()","title":"LED Indicators"},{"location":"feature_led_indicators/#configuration-options","text":"To configure the indicators, #define these in your config.h : Define Default Description LED_NUM_LOCK_PIN Not defined The pin that controls the Num Lock LED LED_CAPS_LOCK_PIN Not defined The pin that controls the Caps Lock LED LED_SCROLL_LOCK_PIN Not defined The pin that controls the Scroll Lock LED LED_COMPOSE_PIN Not defined The pin that controls the Compose LED LED_KANA_PIN Not defined The pin that controls the Kana LED LED_PIN_ON_STATE 1 The state of the indicator pins when the LED is \"on\" - 1 for high, 0 for low Unless you are designing your own keyboard, you generally should not need to change the above config options.","title":"Configuration Options"},{"location":"feature_led_indicators/#led_update_","text":"When the configuration options do not provide enough flexibility, the API hooks provided allow custom control of the LED behavior. These functions will be called when the state of one of those 5 LEDs changes. It receives the LED state as a struct parameter. By convention, return true from led_update_user() to get the led_update_kb() hook to run its code, and return false when you would prefer not to run the code in led_update_kb() . Some examples include: overriding the LEDs to use them for something else like layer indication return false because you do not want the _kb() function to run, as it would override your layer behavior. play a sound when an LED turns on or off. return true because you want the _kb function to run, and this is in addition to the default LED behavior. Info Because the led_set_* functions return void instead of bool , they do not allow for overriding the keyboard LED control. It's recommended to use led_update_* instead.","title":"led_update_*()"},{"location":"feature_led_indicators/#example-led_update_kb-implementation","text":"bool led_update_kb ( led_t led_state ) { bool res = led_update_user ( led_state ); if ( res ) { // writePin sets the pin high for 1 and low for 0. // In this example the pins are inverted, setting // it low/0 turns it on, and high/1 turns the LED off. // This behavior depends on whether the LED is between the pin // and VCC or the pin and GND. writePin ( B0 , ! led_state . num_lock ); writePin ( B1 , ! led_state . caps_lock ); writePin ( B2 , ! led_state . scroll_lock ); writePin ( B3 , ! led_state . compose ); writePin ( B4 , ! led_state . kana ); } return res ; }","title":"Example led_update_kb() Implementation"},{"location":"feature_led_indicators/#example-led_update_user-implementation","text":"This incomplete example would play a sound if Caps Lock is turned on or off. It returns true , because you also want the LEDs to maintain their state. #ifdef AUDIO_ENABLE float caps_on [][ 2 ] = SONG ( CAPS_LOCK_ON_SOUND ); float caps_off [][ 2 ] = SONG ( CAPS_LOCK_OFF_SOUND ); #endif bool led_update_user ( led_t led_state ) { #ifdef AUDIO_ENABLE static uint8_t caps_state = 0 ; if ( caps_state != led_state . caps_lock ) { led_state . caps_lock ? PLAY_SONG ( caps_on ) : PLAY_SONG ( caps_off ); caps_state = led_state . caps_lock ; } #endif return true ; }","title":"Example led_update_user() Implementation"},{"location":"feature_led_indicators/#led_update_-function-documentation","text":"Keyboard/Revision: bool led_update_kb(led_t led_state) Keymap: bool led_update_user(led_t led_state)","title":"led_update_* Function Documentation"},{"location":"feature_led_indicators/#host_keyboard_led_state","text":"Call this function to get the last received LED state as a led_t . This is useful for reading the LED state outside led_update_* , e.g. in matrix_scan_user() .","title":"host_keyboard_led_state()"},{"location":"feature_led_indicators/#setting-physical-led-state","text":"Some keyboard implementations provide convenience methods for setting the state of the physical LEDs.","title":"Setting Physical LED State"},{"location":"feature_led_indicators/#ergodox-boards","text":"The Ergodox implementations provide ergodox_right_led_1 / 2 / 3_on / off() to turn individual LEDs on or off, as well as ergodox_right_led_on / off(uint8_t led) to turn them on or off by their index. In addition, it is possible to specify the brightness level of all LEDs with ergodox_led_all_set(uint8_t n) ; of individual LEDs with ergodox_right_led_1 / 2 / 3_set(uint8_t n) ; or by index with ergodox_right_led_set(uint8_t led, uint8_t n) . Ergodox boards also define LED_BRIGHTNESS_LO for the lowest brightness and LED_BRIGHTNESS_HI for the highest brightness (which is the default).","title":"Ergodox Boards"},{"location":"feature_led_matrix/","text":"LED Matrix Lighting \u00b6 This feature allows you to use LED matrices driven by external drivers. It hooks into the backlight system so you can use the same keycodes as backlighting to control it. If you want to use RGB LED's you should use the RGB Matrix Subsystem instead. Driver configuration \u00b6 IS31FL3731 {: id=is }31fl3731 \u00b6 There is basic support for addressable LED matrix lighting with the I2C IS31FL3731 LED controller. To enable it, add this to your rules.mk : LED_MATRIX_ENABLE = yes LED_MATRIX_DRIVER = IS31FL3731 You can use between 1 and 4 IS31FL3731 IC's. Do not specify LED_DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 LED_DRIVER_COUNT (Required) How many LED driver IC's are present DRIVER_LED_TOTAL (Required) How many LED lights are present across all drivers LED_DRIVER_ADDR_1 (Required) Address for the first LED driver LED_DRIVER_ADDR_2 (Optional) Address for the second LED driver LED_DRIVER_ADDR_3 (Optional) Address for the third LED driver LED_DRIVER_ADDR_4 (Optional) Address for the fourth LED driver Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0b1110100 AD <-> GND // 0b1110111 AD <-> VCC // 0b1110101 AD <-> SCL // 0b1110110 AD <-> SDA #define LED_DRIVER_ADDR_1 0b1110100 #define LED_DRIVER_ADDR_2 0b1110110 #define LED_DRIVER_COUNT 2 #define LED_DRIVER_1_LED_TOTAL 25 #define LED_DRIVER_2_LED_TOTAL 24 #define DRIVER_LED_TOTAL (LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL) Info Note the parentheses, this is so when LED_DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL) will give very different results than rand() % LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL . Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | LED address * | | */ { 0 , C1_1 }, { 0 , C1_15 }, // ... } Where Cx_y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3731-simple.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 ). Common Configuration \u00b6 From this point forward the configuration is the same for all the drivers. The led_config_t struct provides a key electrical matrix to led index lookup table, what the physical position of each LED is on the board, and what type of key or usage the LED if the LED represents. Here is a brief example: led_config_t g_led_config = { { // Key Matrix to LED Index { 5 , NO_LED , NO_LED , 0 }, { NO_LED , NO_LED , NO_LED , NO_LED }, { 4 , NO_LED , NO_LED , 1 }, { 3 , NO_LED , NO_LED , 2 } }, { // LED Index to Physical Position { 188 , 16 }, { 187 , 48 }, { 149 , 64 }, { 112 , 64 }, { 37 , 48 }, { 38 , 16 } }, { // LED Index to Flag 1 , 4 , 4 , 4 , 4 , 1 } }; The first part, // Key Matrix to LED Index , tells the system what key this LED represents by using the key's electrical matrix row & col. The second part, // LED Index to Physical Position represents the LED's physical { x, y } position on the keyboard. The default expected range of values for { x, y } is the inclusive range { 0..224, 0..64 } . This default expected range is due to effects that calculate the center of the keyboard for their animations. The easiest way to calculate these positions is imagine your keyboard is a grid, and the top left of the keyboard represents { x, y } coordinate { 0, 0 } and the bottom right of your keyboard represents { 224, 64 } . Using this as a basis, you can use the following formula to calculate the physical position: x = 224 / ( NUMBER_OF_COLS - 1 ) * COL_POSITION y = 64 / ( NUMBER_OF_ROWS - 1 ) * ROW_POSITION Where NUMBER_OF_COLS, NUMBER_OF_ROWS, COL_POSITION, & ROW_POSITION are all based on the physical layout of your keyboard, not the electrical layout. As mentioned earlier, the center of the keyboard by default is expected to be { 112, 32 } , but this can be changed if you want to more accurately calculate the LED's physical { x, y } positions. Keyboard designers can implement #define LED_MATRIX_CENTER { 112, 32 } in their config.h file with the new center point of the keyboard, or where they want it to be allowing more possibilities for the { x, y } values. Do note that the maximum value for x or y is 255, and the recommended maximum is 224 as this gives animations runoff room before they reset. // LED Index to Flag is a bitmask, whether or not a certain LEDs is of a certain type. It is recommended that LEDs are set to only 1 type. Flags \u00b6 Define Value Description HAS_FLAGS(bits, flags) n/a Evaluates to true if bits has all flags set HAS_ANY_FLAGS(bits, flags) n/a Evaluates to true if bits has any flags set LED_FLAG_NONE 0x00 If this LED has no flags LED_FLAG_ALL 0xFF If this LED has all flags LED_FLAG_MODIFIER 0x01 If the LED is on a modifier key LED_FLAG_KEYLIGHT 0x04 If the LED is for key backlight LED_FLAG_INDICATOR 0x08 If the LED is for keyboard state indication Keycodes \u00b6 All LED matrix keycodes are currently shared with the Backlight feature . Key Description BL_TOGG Toggle LED Matrix on or off BL_STEP Cycle through modes BL_ON Turn on LED Matrix BL_OFF Turn off LED Matrix BL_INC Increase the brightness level BL_DEC Decrease the brightness level LED Matrix Effects \u00b6 These are the effects that are currently available: enum led_matrix_effects { LED_MATRIX_NONE = 0 , LED_MATRIX_SOLID = 1 , // Static single val, no speed support LED_MATRIX_ALPHAS_MODS , // Static dual val, speed is val for LEDs marked as modifiers LED_MATRIX_BREATHING , // Cycling brightness animation LED_MATRIX_BAND , // Band fading brightness scrolling left to right LED_MATRIX_BAND_PINWHEEL , // 3 blade spinning pinwheel fades brightness LED_MATRIX_BAND_SPIRAL , // Spinning spiral fades brightness LED_MATRIX_CYCLE_LEFT_RIGHT , // Full gradient scrolling left to right LED_MATRIX_CYCLE_UP_DOWN , // Full gradient scrolling top to bottom LED_MATRIX_CYCLE_OUT_IN , // Full gradient scrolling out to in LED_MATRIX_DUAL_BEACON , // Full gradient spinning around center of keyboard #if defined(LED_MATRIX_KEYPRESSES) || defined(LED_MATRIX_KEYRELEASES) LED_MATRIX_SOLID_REACTIVE_SIMPLE , // Pulses keys hit then fades out LED_MATRIX_SOLID_REACTIVE_WIDE // Value pulses near a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTIWIDE // Value pulses near multiple key hits then fades out LED_MATRIX_SOLID_REACTIVE_CROSS // Value pulses the same column and row of a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTICROSS // Value pulses the same column and row of multiple key hits then fades out LED_MATRIX_SOLID_REACTIVE_NEXUS // Value pulses away on the same column and row of a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTINEXUS // Value pulses away on the same column and row of multiple key hits then fades out LED_MATRIX_SOLID_SPLASH , // Value pulses away from a single key hit then fades out LED_MATRIX_SOLID_MULTISPLASH , // Value pulses away from multiple key hits then fades out #endif LED_MATRIX_WAVE_LEFT_RIGHT // Sine wave scrolling from left to right LED_MATRIX_WAVE_UP_DOWN // Sine wave scrolling from up to down LED_MATRIX_EFFECT_MAX }; You can disable a single effect by defining DISABLE_[EFFECT_NAME] in your config.h : Define Description #define DISABLE_LED_MATRIX_ALPHAS_MODS Disables LED_MATRIX_ALPHAS_MODS #define DISABLE_LED_MATRIX_BREATHING Disables LED_MATRIX_BREATHING #define DISABLE_LED_MATRIX_BAND Disables LED_MATRIX_BAND #define DISABLE_LED_MATRIX_BAND_PINWHEEL Disables LED_MATRIX_BAND_PINWHEEL #define DISABLE_LED_MATRIX_BAND_SPIRAL Disables LED_MATRIX_BAND_SPIRAL #define DISABLE_LED_MATRIX_CYCLE_LEFT_RIGHT Disables LED_MATRIX_CYCLE_LEFT_RIGHT #define DISABLE_LED_MATRIX_CYCLE_UP_DOWN Disables LED_MATRIX_CYCLE_UP_DOWN #define DISABLE_LED_MATRIX_CYCLE_OUT_IN Disables LED_MATRIX_CYCLE_OUT_IN #define DISABLE_LED_MATRIX_DUAL_BEACON Disables LED_MATRIX_DUAL_BEACON #define DISABLE_LED_MATRIX_SOLID_REACTIVE_SIMPLE Disables LED_MATRIX_SOLID_REACTIVE_SIMPLE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_WIDE Disables LED_MATRIX_SOLID_REACTIVE_WIDE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTIWIDE Disables LED_MATRIX_SOLID_REACTIVE_MULTIWIDE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_CROSS Disables LED_MATRIX_SOLID_REACTIVE_CROSS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTICROSS Disables LED_MATRIX_SOLID_REACTIVE_MULTICROSS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_NEXUS Disables LED_MATRIX_SOLID_REACTIVE_NEXUS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTINEXUS Disables LED_MATRIX_SOLID_REACTIVE_MULTINEXUS #define DISABLE_LED_MATRIX_SOLID_SPLASH Disables LED_MATRIX_SOLID_SPLASH #define DISABLE_LED_MATRIX_SOLID_MULTISPLASH Disables LED_MATRIX_SOLID_MULTISPLASH #define DISABLE_LED_MATRIX_WAVE_LEFT_RIGHT Disables LED_MATRIX_WAVE_LEFT_RIGHT #define DISABLE_LED_MATRIX_WAVE_UP_DOWN Disables LED_MATRIX_WAVE_UP_DOWN Custom LED Matrix Effects \u00b6 By setting LED_MATRIX_CUSTOM_USER (and/or LED_MATRIX_CUSTOM_KB ) in rules.mk , new effects can be defined directly from userspace, without having to edit any QMK core files. To declare new effects, create a new led_matrix_user/kb.inc that looks something like this: led_matrix_user.inc should go in the root of the keymap directory. led_matrix_kb.inc should go in the root of the keyboard directory. To use custom effects in your code, simply prepend LED_MATRIX_CUSTOM_ to the effect name specified in LED_MATRIX_EFFECT() . For example, an effect declared as LED_MATRIX_EFFECT(my_cool_effect) would be referenced with: led_matrix_mode ( led_MATRIX_CUSTOM_my_cool_effect ); // !!! DO NOT ADD #pragma once !!! // // Step 1. // Declare custom effects using the LED_MATRIX_EFFECT macro // (note the lack of semicolon after the macro!) LED_MATRIX_EFFECT ( my_cool_effect ) LED_MATRIX_EFFECT ( my_cool_effect2 ) // Step 2. // Define effects inside the `LED_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block #ifdef LED_MATRIX_CUSTOM_EFFECT_IMPLS // e.g: A simple effect, self-contained within a single method static bool my_cool_effect ( effect_params_t * params ) { LED_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { led_matrix_set_value ( i , 0xFF ); } return led_max < DRIVER_LED_TOTAL ; } // e.g: A more complex effect, relying on external methods and state, with // dedicated init and run methods static uint8_t some_global_state ; static void my_cool_effect2_complex_init ( effect_params_t * params ) { some_global_state = 1 ; } static bool my_cool_effect2_complex_run ( effect_params_t * params ) { LED_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { led_matrix_set_value ( i , some_global_state ++ ); } return led_max < DRIVER_LED_TOTAL ; } static bool my_cool_effect2 ( effect_params_t * params ) { if ( params -> init ) my_cool_effect2_complex_init ( params ); return my_cool_effect2_complex_run ( params ); } #endif // LED_MATRIX_CUSTOM_EFFECT_IMPLS For inspiration and examples, check out the built-in effects under quantum/led_matrix_animations/ Additional config.h Options \u00b6 #define LED_MATRIX_KEYPRESSES // reacts to keypresses #define LED_MATRIX_KEYRELEASES // reacts to keyreleases (instead of keypresses) #define LED_MATRIX_FRAMEBUFFER_EFFECTS // enable framebuffer effects #define LED_DISABLE_TIMEOUT 0 // number of milliseconds to wait until led automatically turns off #define LED_DISABLE_AFTER_TIMEOUT 0 // OBSOLETE: number of ticks to wait until disabling effects #define LED_DISABLE_WHEN_USB_SUSPENDED false // turn off effects when suspended #define LED_MATRIX_LED_PROCESS_LIMIT (DRIVER_LED_TOTAL + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness) #define LED_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness) #define LED_MATRIX_MAXIMUM_BRIGHTNESS 255 // limits maximum brightness of LEDs #define LED_MATRIX_STARTUP_MODE LED_MATRIX_SOLID // Sets the default mode, if none has been set #define LED_MATRIX_STARTUP_VAL LED_MATRIX_MAXIMUM_BRIGHTNESS // Sets the default brightness value, if none has been set #define LED_MATRIX_STARTUP_SPD 127 // Sets the default animation speed, if none has been set #define LED_MATRIX_SPLIT { X, Y } // (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right. // If LED_MATRIX_KEYPRESSES or LED_MATRIX_KEYRELEASES is enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR EEPROM storage \u00b6 The EEPROM for it is currently shared with the RGB Matrix system (it's generally assumed only one feature would be used at a time), but could be configured to use its own 32bit address with: #define EECONFIG_LED_MATRIX (uint32_t *)28 Where 28 is an unused index from eeconfig.h . Direct Operation \u00b6 Function Description led_matrix_set_value_all(v) Set all of the LEDs to the given value, where v is between 0 and 255 (not written to EEPROM) led_matrix_set_value(index, v) Set a single LED to the given value, where v is between 0 and 255, and index is between 0 and DRIVER_LED_TOTAL (not written to EEPROM) Disable/Enable Effects \u00b6 Function Description led_matrix_toggle() Toggle effect range LEDs between on and off led_matrix_toggle_noeeprom() Toggle effect range LEDs between on and off (not written to EEPROM) led_matrix_enable() Turn effect range LEDs on, based on their previous state led_matrix_enable_noeeprom() Turn effect range LEDs on, based on their previous state (not written to EEPROM) led_matrix_disable() Turn effect range LEDs off, based on their previous state led_matrix_disable_noeeprom() Turn effect range LEDs off, based on their previous state (not written to EEPROM) Change Effect Mode \u00b6 Function Description led_matrix_mode(mode) Set the mode, if LED animations are enabled led_matrix_mode_noeeprom(mode) Set the mode, if LED animations are enabled (not written to EEPROM) led_matrix_step() Change the mode to the next LED animation in the list of enabled LED animations led_matrix_step_noeeprom() Change the mode to the next LED animation in the list of enabled LED animations (not written to EEPROM) led_matrix_step_reverse() Change the mode to the previous LED animation in the list of enabled LED animations led_matrix_step_reverse_noeeprom() Change the mode to the previous LED animation in the list of enabled LED animations (not written to EEPROM) led_matrix_increase_speed() Increase the speed of the animations led_matrix_increase_speed_noeeprom() Increase the speed of the animations (not written to EEPROM) led_matrix_decrease_speed() Decrease the speed of the animations led_matrix_decrease_speed_noeeprom() Decrease the speed of the animations (not written to EEPROM) led_matrix_set_speed(speed) Set the speed of the animations to the given value where speed is between 0 and 255 led_matrix_set_speed_noeeprom(speed) Set the speed of the animations to the given value where speed is between 0 and 255 (not written to EEPROM) Change Value \u00b6 Function Description led_matrix_increase_val() Increase the value for effect range LEDs. This wraps around at maximum value led_matrix_increase_val_noeeprom() Increase the value for effect range LEDs. This wraps around at maximum value (not written to EEPROM) led_matrix_decrease_val() Decrease the value for effect range LEDs. This wraps around at minimum value led_matrix_decrease_val_noeeprom() Decrease the value for effect range LEDs. This wraps around at minimum value (not written to EEPROM) Query Current Status \u00b6 Function Description led_matrix_is_enabled() Gets current on/off status led_matrix_get_mode() Gets current mode led_matrix_get_val() Gets current val led_matrix_get_speed() Gets current speed led_matrix_get_suspend_state() Gets current suspend state Callbacks \u00b6 Indicators \u00b6 If you want to set custom indicators, such as an LED for Caps Lock, or layer indication, you can use the led_matrix_indicators_kb or led_matrix_indicators_user function for that: void led_matrix_indicators_kb ( void ) { led_matrix_set_color ( index , value ); } In addition, there are the advanced indicator functions. These are aimed at those with heavily customized displays, where rendering every LED per cycle is expensive. This includes a special macro to help make this easier to use: LED_MATRIX_INDICATOR_SET_VALUE(i, v) . void led_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { LED_MATRIX_INDICATOR_SET_VALUE ( index , value ); } Suspended State \u00b6 To use the suspend feature, make sure that #define LED_DISABLE_WHEN_USB_SUSPENDED true is added to the config.h file. Additionally add this to your <keyboard>.c : void suspend_power_down_kb ( void ) { led_matrix_set_suspend_state ( true ); suspend_power_down_user (); } void suspend_wakeup_init_kb ( void ) { led_matrix_set_suspend_state ( false ); suspend_wakeup_init_user (); } or add this to your keymap.c : void suspend_power_down_user ( void ) { led_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { led_matrix_set_suspend_state ( false ); }","title":"LED\u9635\u5217"},{"location":"feature_led_matrix/#led-matrix-lighting","text":"This feature allows you to use LED matrices driven by external drivers. It hooks into the backlight system so you can use the same keycodes as backlighting to control it. If you want to use RGB LED's you should use the RGB Matrix Subsystem instead.","title":"LED Matrix Lighting"},{"location":"feature_led_matrix/#driver-configuration","text":"","title":"Driver configuration"},{"location":"feature_led_matrix/#is31fl3731-idis-31fl3731","text":"There is basic support for addressable LED matrix lighting with the I2C IS31FL3731 LED controller. To enable it, add this to your rules.mk : LED_MATRIX_ENABLE = yes LED_MATRIX_DRIVER = IS31FL3731 You can use between 1 and 4 IS31FL3731 IC's. Do not specify LED_DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 LED_DRIVER_COUNT (Required) How many LED driver IC's are present DRIVER_LED_TOTAL (Required) How many LED lights are present across all drivers LED_DRIVER_ADDR_1 (Required) Address for the first LED driver LED_DRIVER_ADDR_2 (Optional) Address for the second LED driver LED_DRIVER_ADDR_3 (Optional) Address for the third LED driver LED_DRIVER_ADDR_4 (Optional) Address for the fourth LED driver Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0b1110100 AD <-> GND // 0b1110111 AD <-> VCC // 0b1110101 AD <-> SCL // 0b1110110 AD <-> SDA #define LED_DRIVER_ADDR_1 0b1110100 #define LED_DRIVER_ADDR_2 0b1110110 #define LED_DRIVER_COUNT 2 #define LED_DRIVER_1_LED_TOTAL 25 #define LED_DRIVER_2_LED_TOTAL 24 #define DRIVER_LED_TOTAL (LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL) Info Note the parentheses, this is so when LED_DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL) will give very different results than rand() % LED_DRIVER_1_LED_TOTAL + LED_DRIVER_2_LED_TOTAL . Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | LED address * | | */ { 0 , C1_1 }, { 0 , C1_15 }, // ... } Where Cx_y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3731-simple.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 ).","title":"IS31FL3731 {: id=is }31fl3731"},{"location":"feature_led_matrix/#common-configuration","text":"From this point forward the configuration is the same for all the drivers. The led_config_t struct provides a key electrical matrix to led index lookup table, what the physical position of each LED is on the board, and what type of key or usage the LED if the LED represents. Here is a brief example: led_config_t g_led_config = { { // Key Matrix to LED Index { 5 , NO_LED , NO_LED , 0 }, { NO_LED , NO_LED , NO_LED , NO_LED }, { 4 , NO_LED , NO_LED , 1 }, { 3 , NO_LED , NO_LED , 2 } }, { // LED Index to Physical Position { 188 , 16 }, { 187 , 48 }, { 149 , 64 }, { 112 , 64 }, { 37 , 48 }, { 38 , 16 } }, { // LED Index to Flag 1 , 4 , 4 , 4 , 4 , 1 } }; The first part, // Key Matrix to LED Index , tells the system what key this LED represents by using the key's electrical matrix row & col. The second part, // LED Index to Physical Position represents the LED's physical { x, y } position on the keyboard. The default expected range of values for { x, y } is the inclusive range { 0..224, 0..64 } . This default expected range is due to effects that calculate the center of the keyboard for their animations. The easiest way to calculate these positions is imagine your keyboard is a grid, and the top left of the keyboard represents { x, y } coordinate { 0, 0 } and the bottom right of your keyboard represents { 224, 64 } . Using this as a basis, you can use the following formula to calculate the physical position: x = 224 / ( NUMBER_OF_COLS - 1 ) * COL_POSITION y = 64 / ( NUMBER_OF_ROWS - 1 ) * ROW_POSITION Where NUMBER_OF_COLS, NUMBER_OF_ROWS, COL_POSITION, & ROW_POSITION are all based on the physical layout of your keyboard, not the electrical layout. As mentioned earlier, the center of the keyboard by default is expected to be { 112, 32 } , but this can be changed if you want to more accurately calculate the LED's physical { x, y } positions. Keyboard designers can implement #define LED_MATRIX_CENTER { 112, 32 } in their config.h file with the new center point of the keyboard, or where they want it to be allowing more possibilities for the { x, y } values. Do note that the maximum value for x or y is 255, and the recommended maximum is 224 as this gives animations runoff room before they reset. // LED Index to Flag is a bitmask, whether or not a certain LEDs is of a certain type. It is recommended that LEDs are set to only 1 type.","title":"Common Configuration"},{"location":"feature_led_matrix/#flags","text":"Define Value Description HAS_FLAGS(bits, flags) n/a Evaluates to true if bits has all flags set HAS_ANY_FLAGS(bits, flags) n/a Evaluates to true if bits has any flags set LED_FLAG_NONE 0x00 If this LED has no flags LED_FLAG_ALL 0xFF If this LED has all flags LED_FLAG_MODIFIER 0x01 If the LED is on a modifier key LED_FLAG_KEYLIGHT 0x04 If the LED is for key backlight LED_FLAG_INDICATOR 0x08 If the LED is for keyboard state indication","title":"Flags"},{"location":"feature_led_matrix/#keycodes","text":"All LED matrix keycodes are currently shared with the Backlight feature . Key Description BL_TOGG Toggle LED Matrix on or off BL_STEP Cycle through modes BL_ON Turn on LED Matrix BL_OFF Turn off LED Matrix BL_INC Increase the brightness level BL_DEC Decrease the brightness level","title":"Keycodes"},{"location":"feature_led_matrix/#led-matrix-effects","text":"These are the effects that are currently available: enum led_matrix_effects { LED_MATRIX_NONE = 0 , LED_MATRIX_SOLID = 1 , // Static single val, no speed support LED_MATRIX_ALPHAS_MODS , // Static dual val, speed is val for LEDs marked as modifiers LED_MATRIX_BREATHING , // Cycling brightness animation LED_MATRIX_BAND , // Band fading brightness scrolling left to right LED_MATRIX_BAND_PINWHEEL , // 3 blade spinning pinwheel fades brightness LED_MATRIX_BAND_SPIRAL , // Spinning spiral fades brightness LED_MATRIX_CYCLE_LEFT_RIGHT , // Full gradient scrolling left to right LED_MATRIX_CYCLE_UP_DOWN , // Full gradient scrolling top to bottom LED_MATRIX_CYCLE_OUT_IN , // Full gradient scrolling out to in LED_MATRIX_DUAL_BEACON , // Full gradient spinning around center of keyboard #if defined(LED_MATRIX_KEYPRESSES) || defined(LED_MATRIX_KEYRELEASES) LED_MATRIX_SOLID_REACTIVE_SIMPLE , // Pulses keys hit then fades out LED_MATRIX_SOLID_REACTIVE_WIDE // Value pulses near a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTIWIDE // Value pulses near multiple key hits then fades out LED_MATRIX_SOLID_REACTIVE_CROSS // Value pulses the same column and row of a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTICROSS // Value pulses the same column and row of multiple key hits then fades out LED_MATRIX_SOLID_REACTIVE_NEXUS // Value pulses away on the same column and row of a single key hit then fades out LED_MATRIX_SOLID_REACTIVE_MULTINEXUS // Value pulses away on the same column and row of multiple key hits then fades out LED_MATRIX_SOLID_SPLASH , // Value pulses away from a single key hit then fades out LED_MATRIX_SOLID_MULTISPLASH , // Value pulses away from multiple key hits then fades out #endif LED_MATRIX_WAVE_LEFT_RIGHT // Sine wave scrolling from left to right LED_MATRIX_WAVE_UP_DOWN // Sine wave scrolling from up to down LED_MATRIX_EFFECT_MAX }; You can disable a single effect by defining DISABLE_[EFFECT_NAME] in your config.h : Define Description #define DISABLE_LED_MATRIX_ALPHAS_MODS Disables LED_MATRIX_ALPHAS_MODS #define DISABLE_LED_MATRIX_BREATHING Disables LED_MATRIX_BREATHING #define DISABLE_LED_MATRIX_BAND Disables LED_MATRIX_BAND #define DISABLE_LED_MATRIX_BAND_PINWHEEL Disables LED_MATRIX_BAND_PINWHEEL #define DISABLE_LED_MATRIX_BAND_SPIRAL Disables LED_MATRIX_BAND_SPIRAL #define DISABLE_LED_MATRIX_CYCLE_LEFT_RIGHT Disables LED_MATRIX_CYCLE_LEFT_RIGHT #define DISABLE_LED_MATRIX_CYCLE_UP_DOWN Disables LED_MATRIX_CYCLE_UP_DOWN #define DISABLE_LED_MATRIX_CYCLE_OUT_IN Disables LED_MATRIX_CYCLE_OUT_IN #define DISABLE_LED_MATRIX_DUAL_BEACON Disables LED_MATRIX_DUAL_BEACON #define DISABLE_LED_MATRIX_SOLID_REACTIVE_SIMPLE Disables LED_MATRIX_SOLID_REACTIVE_SIMPLE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_WIDE Disables LED_MATRIX_SOLID_REACTIVE_WIDE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTIWIDE Disables LED_MATRIX_SOLID_REACTIVE_MULTIWIDE #define DISABLE_LED_MATRIX_SOLID_REACTIVE_CROSS Disables LED_MATRIX_SOLID_REACTIVE_CROSS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTICROSS Disables LED_MATRIX_SOLID_REACTIVE_MULTICROSS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_NEXUS Disables LED_MATRIX_SOLID_REACTIVE_NEXUS #define DISABLE_LED_MATRIX_SOLID_REACTIVE_MULTINEXUS Disables LED_MATRIX_SOLID_REACTIVE_MULTINEXUS #define DISABLE_LED_MATRIX_SOLID_SPLASH Disables LED_MATRIX_SOLID_SPLASH #define DISABLE_LED_MATRIX_SOLID_MULTISPLASH Disables LED_MATRIX_SOLID_MULTISPLASH #define DISABLE_LED_MATRIX_WAVE_LEFT_RIGHT Disables LED_MATRIX_WAVE_LEFT_RIGHT #define DISABLE_LED_MATRIX_WAVE_UP_DOWN Disables LED_MATRIX_WAVE_UP_DOWN","title":"LED Matrix Effects"},{"location":"feature_led_matrix/#custom-led-matrix-effects","text":"By setting LED_MATRIX_CUSTOM_USER (and/or LED_MATRIX_CUSTOM_KB ) in rules.mk , new effects can be defined directly from userspace, without having to edit any QMK core files. To declare new effects, create a new led_matrix_user/kb.inc that looks something like this: led_matrix_user.inc should go in the root of the keymap directory. led_matrix_kb.inc should go in the root of the keyboard directory. To use custom effects in your code, simply prepend LED_MATRIX_CUSTOM_ to the effect name specified in LED_MATRIX_EFFECT() . For example, an effect declared as LED_MATRIX_EFFECT(my_cool_effect) would be referenced with: led_matrix_mode ( led_MATRIX_CUSTOM_my_cool_effect ); // !!! DO NOT ADD #pragma once !!! // // Step 1. // Declare custom effects using the LED_MATRIX_EFFECT macro // (note the lack of semicolon after the macro!) LED_MATRIX_EFFECT ( my_cool_effect ) LED_MATRIX_EFFECT ( my_cool_effect2 ) // Step 2. // Define effects inside the `LED_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block #ifdef LED_MATRIX_CUSTOM_EFFECT_IMPLS // e.g: A simple effect, self-contained within a single method static bool my_cool_effect ( effect_params_t * params ) { LED_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { led_matrix_set_value ( i , 0xFF ); } return led_max < DRIVER_LED_TOTAL ; } // e.g: A more complex effect, relying on external methods and state, with // dedicated init and run methods static uint8_t some_global_state ; static void my_cool_effect2_complex_init ( effect_params_t * params ) { some_global_state = 1 ; } static bool my_cool_effect2_complex_run ( effect_params_t * params ) { LED_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { led_matrix_set_value ( i , some_global_state ++ ); } return led_max < DRIVER_LED_TOTAL ; } static bool my_cool_effect2 ( effect_params_t * params ) { if ( params -> init ) my_cool_effect2_complex_init ( params ); return my_cool_effect2_complex_run ( params ); } #endif // LED_MATRIX_CUSTOM_EFFECT_IMPLS For inspiration and examples, check out the built-in effects under quantum/led_matrix_animations/","title":"Custom LED Matrix Effects"},{"location":"feature_led_matrix/#additional-configh-options","text":"#define LED_MATRIX_KEYPRESSES // reacts to keypresses #define LED_MATRIX_KEYRELEASES // reacts to keyreleases (instead of keypresses) #define LED_MATRIX_FRAMEBUFFER_EFFECTS // enable framebuffer effects #define LED_DISABLE_TIMEOUT 0 // number of milliseconds to wait until led automatically turns off #define LED_DISABLE_AFTER_TIMEOUT 0 // OBSOLETE: number of ticks to wait until disabling effects #define LED_DISABLE_WHEN_USB_SUSPENDED false // turn off effects when suspended #define LED_MATRIX_LED_PROCESS_LIMIT (DRIVER_LED_TOTAL + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness) #define LED_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness) #define LED_MATRIX_MAXIMUM_BRIGHTNESS 255 // limits maximum brightness of LEDs #define LED_MATRIX_STARTUP_MODE LED_MATRIX_SOLID // Sets the default mode, if none has been set #define LED_MATRIX_STARTUP_VAL LED_MATRIX_MAXIMUM_BRIGHTNESS // Sets the default brightness value, if none has been set #define LED_MATRIX_STARTUP_SPD 127 // Sets the default animation speed, if none has been set #define LED_MATRIX_SPLIT { X, Y } // (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right. // If LED_MATRIX_KEYPRESSES or LED_MATRIX_KEYRELEASES is enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR","title":"Additional config.h Options"},{"location":"feature_led_matrix/#eeprom-storage","text":"The EEPROM for it is currently shared with the RGB Matrix system (it's generally assumed only one feature would be used at a time), but could be configured to use its own 32bit address with: #define EECONFIG_LED_MATRIX (uint32_t *)28 Where 28 is an unused index from eeconfig.h .","title":"EEPROM storage"},{"location":"feature_led_matrix/#direct-operation","text":"Function Description led_matrix_set_value_all(v) Set all of the LEDs to the given value, where v is between 0 and 255 (not written to EEPROM) led_matrix_set_value(index, v) Set a single LED to the given value, where v is between 0 and 255, and index is between 0 and DRIVER_LED_TOTAL (not written to EEPROM)","title":"Direct Operation"},{"location":"feature_led_matrix/#disable-enable-effects","text":"Function Description led_matrix_toggle() Toggle effect range LEDs between on and off led_matrix_toggle_noeeprom() Toggle effect range LEDs between on and off (not written to EEPROM) led_matrix_enable() Turn effect range LEDs on, based on their previous state led_matrix_enable_noeeprom() Turn effect range LEDs on, based on their previous state (not written to EEPROM) led_matrix_disable() Turn effect range LEDs off, based on their previous state led_matrix_disable_noeeprom() Turn effect range LEDs off, based on their previous state (not written to EEPROM)","title":"Disable/Enable Effects"},{"location":"feature_led_matrix/#change-effect-mode","text":"Function Description led_matrix_mode(mode) Set the mode, if LED animations are enabled led_matrix_mode_noeeprom(mode) Set the mode, if LED animations are enabled (not written to EEPROM) led_matrix_step() Change the mode to the next LED animation in the list of enabled LED animations led_matrix_step_noeeprom() Change the mode to the next LED animation in the list of enabled LED animations (not written to EEPROM) led_matrix_step_reverse() Change the mode to the previous LED animation in the list of enabled LED animations led_matrix_step_reverse_noeeprom() Change the mode to the previous LED animation in the list of enabled LED animations (not written to EEPROM) led_matrix_increase_speed() Increase the speed of the animations led_matrix_increase_speed_noeeprom() Increase the speed of the animations (not written to EEPROM) led_matrix_decrease_speed() Decrease the speed of the animations led_matrix_decrease_speed_noeeprom() Decrease the speed of the animations (not written to EEPROM) led_matrix_set_speed(speed) Set the speed of the animations to the given value where speed is between 0 and 255 led_matrix_set_speed_noeeprom(speed) Set the speed of the animations to the given value where speed is between 0 and 255 (not written to EEPROM)","title":"Change Effect Mode"},{"location":"feature_led_matrix/#change-value","text":"Function Description led_matrix_increase_val() Increase the value for effect range LEDs. This wraps around at maximum value led_matrix_increase_val_noeeprom() Increase the value for effect range LEDs. This wraps around at maximum value (not written to EEPROM) led_matrix_decrease_val() Decrease the value for effect range LEDs. This wraps around at minimum value led_matrix_decrease_val_noeeprom() Decrease the value for effect range LEDs. This wraps around at minimum value (not written to EEPROM)","title":"Change Value"},{"location":"feature_led_matrix/#query-current-status","text":"Function Description led_matrix_is_enabled() Gets current on/off status led_matrix_get_mode() Gets current mode led_matrix_get_val() Gets current val led_matrix_get_speed() Gets current speed led_matrix_get_suspend_state() Gets current suspend state","title":"Query Current Status"},{"location":"feature_led_matrix/#callbacks","text":"","title":"Callbacks"},{"location":"feature_led_matrix/#indicators","text":"If you want to set custom indicators, such as an LED for Caps Lock, or layer indication, you can use the led_matrix_indicators_kb or led_matrix_indicators_user function for that: void led_matrix_indicators_kb ( void ) { led_matrix_set_color ( index , value ); } In addition, there are the advanced indicator functions. These are aimed at those with heavily customized displays, where rendering every LED per cycle is expensive. This includes a special macro to help make this easier to use: LED_MATRIX_INDICATOR_SET_VALUE(i, v) . void led_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { LED_MATRIX_INDICATOR_SET_VALUE ( index , value ); }","title":"Indicators"},{"location":"feature_led_matrix/#suspended-state","text":"To use the suspend feature, make sure that #define LED_DISABLE_WHEN_USB_SUSPENDED true is added to the config.h file. Additionally add this to your <keyboard>.c : void suspend_power_down_kb ( void ) { led_matrix_set_suspend_state ( true ); suspend_power_down_user (); } void suspend_wakeup_init_kb ( void ) { led_matrix_set_suspend_state ( false ); suspend_wakeup_init_user (); } or add this to your keymap.c : void suspend_power_down_user ( void ) { led_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { led_matrix_set_suspend_state ( false ); }","title":"Suspended State"},{"location":"feature_macros/","text":"Macros \u00b6 Macros allow you to send multiple keystrokes when pressing just one key. QMK has a number of ways to define and use macros. These can do anything you want: type common phrases for you, copypasta, repetitive game movements, or even help you code. Security Note While it is possible to use macros to send passwords, credit card numbers, and other sensitive information it is a supremely bad idea to do so. Anyone who gets a hold of your keyboard will be able to access that information by opening a text editor. SEND_STRING() & process_record_user \u00b6 Sometimes you want a key to type out words or phrases. For the most common situations, we've provided SEND_STRING() , which will type out a string (i.e. a sequence of characters) for you. All ASCII characters that are easily translatable to a keycode are supported (e.g. qmk 123\\n\\t ). Here is an example keymap.c for a two-key keyboard: enum custom_keycodes { QMKBEST = SAFE_RANGE , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case QMKBEST : if ( record -> event . pressed ) { // when keycode QMKBEST is pressed SEND_STRING ( \"QMK is the best thing ever!\" ); } else { // when keycode QMKBEST is released } break ; } return true ; }; const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = { { QMKBEST , KC_ESC }, // ... }, }; What happens here is this: We first define a new custom keycode in the range not occupied by any other keycodes. Then we use the process_record_user function, which is called whenever a key is pressed or released, to check if our custom keycode has been activated. If yes, we send the string \"QMK is the best thing ever!\" to the computer via the SEND_STRING macro (this is a C preprocessor macro, not to be confused with QMK macros). We return true to indicate to the caller that the key press we just processed should continue to be processed as normal (as we didn't replace or alter the functionality). Finally, we define the keymap so that the first button activates our macro and the second button is just an escape button. You might want to add more than one macro. You can do that by adding another keycode and adding another case to the switch statement, like so: enum custom_keycodes { QMKBEST = SAFE_RANGE , QMKURL , MY_OTHER_MACRO , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case QMKBEST : if ( record -> event . pressed ) { // when keycode QMKBEST is pressed SEND_STRING ( \"QMK is the best thing ever!\" ); } else { // when keycode QMKBEST is released } break ; case QMKURL : if ( record -> event . pressed ) { // when keycode QMKURL is pressed SEND_STRING ( \"https://qmk.fm/ \\n \" ); } else { // when keycode QMKURL is released } break ; case MY_OTHER_MACRO : if ( record -> event . pressed ) { SEND_STRING ( SS_LCTL ( \"ac\" )); // selects all and copies } break ; } return true ; }; const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = { { MY_CUSTOM_MACRO , MY_OTHER_MACRO }, // ... }, }; Advanced Macros \u00b6 In addition to the process_record_user() function, is the post_process_record_user() function. This runs after process_record and can be used to do things after a keystroke has been sent. This is useful if you want to have a key pressed before and released after a normal key, for instance. In this example, we modify most normal keypresses so that F22 is pressed before the keystroke is normally sent, and release it only after it's been released. static uint8_t f22_tracker ; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_A ... KC_F21 : //notice how it skips over F22 case KC_F23 ... KC_EXSEL : //exsel is the last one before the modifier keys if ( record -> event . pressed ) { register_code ( KC_F22 ); //this means to send F22 down f22_tracker ++ ; register_code ( keycode ); return false ; } break ; } return true ; } void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_A ... KC_F21 : //notice how it skips over F22 case KC_F23 ... KC_EXSEL : //exsel is the last one before the modifier keys if ( ! record -> event . pressed ) { f22_tracker -- ; if ( ! f22_tracker ) { unregister_code ( KC_F22 ); //this means to send F22 up } } break ; } } TAP, DOWN and UP \u00b6 You may want to use keys in your macros that you can't write down, such as Ctrl or Home . You can send arbitrary keycodes by wrapping them in: SS_TAP() presses and releases a key. SS_DOWN() presses (but does not release) a key. SS_UP() releases a key. For example: SEND_STRING(SS_TAP(X_HOME)); Would tap KC_HOME - note how the prefix is now X_ , and not KC_ . You can also combine this with other strings, like this: SEND_STRING(\"VE\"SS_TAP(X_HOME)\"LO\"); Which would send \"VE\" followed by a KC_HOME tap, and \"LO\" (spelling \"LOVE\" if on a newline). Delays can be also added to the string: SS_DELAY(msecs) will delay for the specified number of milliseconds. For example: SEND_STRING(\"VE\" SS_DELAY(1000) SS_TAP(X_HOME) \"LO\"); Which would send \"VE\" followed by a 1-second delay, then a KC_HOME tap, and \"LO\" (spelling \"LOVE\" if on a newline, but delayed in the middle). There's also a couple of mod shortcuts you can use: SS_LCTL(string) SS_LSFT(string) SS_LALT(string) or SS_LOPT(string) SS_LGUI(string) , SS_LCMD(string) or SS_LWIN(string) SS_RCTL(string) SS_RSFT(string) SS_RALT(string) , SS_ROPT(string) or SS_ALGR(string) SS_RGUI(string) , SS_RCMD(string) or SS_RWIN(string) These press the respective modifier, send the supplied string and then release the modifier. They can be used like this: SEND_STRING(SS_LCTL(\"a\")); Which would send Left Control+ a (Left Control down, a , Left Control up) - notice that they take strings (eg \"k\" ), and not the X_K keycodes. Alternative Keymaps \u00b6 By default, it assumes a US keymap with a QWERTY layout; if you want to change that (e.g. if your OS uses software Colemak), include this somewhere in your keymap: #include \"sendstring_colemak.h\" Strings in Memory \u00b6 If for some reason you're manipulating strings and need to print out something you just generated (instead of being a literal, constant string), you can use send_string() , like this: char my_str [ 4 ] = \"ok.\" ; send_string ( my_str ); The shortcuts defined above won't work with send_string() , but you can separate things out to different lines if needed: char my_str [ 4 ] = \"ok.\" ; SEND_STRING ( \"I said: \" ); send_string ( my_str ); SEND_STRING ( \"..\" SS_TAP ( X_END )); Advanced Macro Functions \u00b6 There are some functions you may find useful in macro-writing. Keep in mind that while you can write some fairly advanced code within a macro, if your functionality gets too complex you may want to define a custom keycode instead. Macros are meant to be simple. Tip You can also use the functions described in Useful function and Checking modifier state for additional functionality. For example, reset_keyboard() allows you to reset the keyboard as part of a macro and get_mods() & MOD_MASK_SHIFT lets you check for the existence of active shift modifiers. record->event.pressed \u00b6 This is a boolean value that can be tested to see if the switch is being pressed or released. An example of this is if ( record -> event . pressed ) { // on keydown } else { // on keyup } register_code(<kc>); \u00b6 This sends the <kc> keydown event to the computer. Some examples would be KC_ESC , KC_C , KC_4 , and even modifiers such as KC_LSFT and KC_LGUI . unregister_code(<kc>); \u00b6 Parallel to register_code function, this sends the <kc> keyup event to the computer. If you don't use this, the key will be held down until it's sent. tap_code(<kc>); \u00b6 Sends register_code(<kc>) and then unregister_code(<kc>) . This is useful if you want to send both the press and release events (\"tap\" the key, rather than hold it). If TAP_CODE_DELAY is defined (default 0), this function waits that many milliseconds before calling unregister_code(<kc>) . This can be useful when you are having issues with taps (un)registering. If the keycode is KC_CAPS , it waits TAP_HOLD_CAPS_DELAY milliseconds instead (default 80), as macOS prevents accidental Caps Lock activation by waiting for the key to be held for a certain amount of time. tap_code_delay(<kc>, <delay>); \u00b6 Like tap_code(<kc>) , but with a delay parameter for specifying arbitrary intervals before sending the unregister event. register_code16(<kc>); , unregister_code16(<kc>); and tap_code16(<kc>); \u00b6 These functions work similar to their regular counterparts, but allow you to use modded keycodes (with Shift, Alt, Control, and/or GUI applied to them). Eg, you could use register_code16(S(KC_5)); instead of registering the mod, then registering the keycode. clear_keyboard(); \u00b6 This will clear all mods and keys currently pressed. clear_mods(); \u00b6 This will clear all mods currently pressed. clear_keyboard_but_mods(); \u00b6 This will clear all keys besides the mods currently pressed. Advanced Example: \u00b6 Super ALT\u21afTAB \u00b6 This macro will register KC_LALT and tap KC_TAB , then wait for 1000ms. If the key is tapped again, it will send another KC_TAB ; if there is no tap, KC_LALT will be unregistered, thus allowing you to cycle through windows. bool is_alt_tab_active = false ; // ADD this near the begining of keymap.c uint16_t alt_tab_timer = 0 ; // we will be using them soon. enum custom_keycodes { // Make sure have the awesome keycode ready ALT_TAB = SAFE_RANGE , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { // This will do most of the grunt work with the keycodes. case ALT_TAB : if ( record -> event . pressed ) { if ( ! is_alt_tab_active ) { is_alt_tab_active = true ; register_code ( KC_LALT ); } alt_tab_timer = timer_read (); register_code ( KC_TAB ); } else { unregister_code ( KC_TAB ); } break ; } return true ; } void matrix_scan_user ( void ) { // The very important timer. if ( is_alt_tab_active ) { if ( timer_elapsed ( alt_tab_timer ) > 1000 ) { unregister_code ( KC_LALT ); is_alt_tab_active = false ; } } }","title":"\u5b8f\u6307\u4ee4"},{"location":"feature_macros/#macros","text":"Macros allow you to send multiple keystrokes when pressing just one key. QMK has a number of ways to define and use macros. These can do anything you want: type common phrases for you, copypasta, repetitive game movements, or even help you code. Security Note While it is possible to use macros to send passwords, credit card numbers, and other sensitive information it is a supremely bad idea to do so. Anyone who gets a hold of your keyboard will be able to access that information by opening a text editor.","title":"Macros"},{"location":"feature_macros/#send_string-process_record_user","text":"Sometimes you want a key to type out words or phrases. For the most common situations, we've provided SEND_STRING() , which will type out a string (i.e. a sequence of characters) for you. All ASCII characters that are easily translatable to a keycode are supported (e.g. qmk 123\\n\\t ). Here is an example keymap.c for a two-key keyboard: enum custom_keycodes { QMKBEST = SAFE_RANGE , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case QMKBEST : if ( record -> event . pressed ) { // when keycode QMKBEST is pressed SEND_STRING ( \"QMK is the best thing ever!\" ); } else { // when keycode QMKBEST is released } break ; } return true ; }; const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = { { QMKBEST , KC_ESC }, // ... }, }; What happens here is this: We first define a new custom keycode in the range not occupied by any other keycodes. Then we use the process_record_user function, which is called whenever a key is pressed or released, to check if our custom keycode has been activated. If yes, we send the string \"QMK is the best thing ever!\" to the computer via the SEND_STRING macro (this is a C preprocessor macro, not to be confused with QMK macros). We return true to indicate to the caller that the key press we just processed should continue to be processed as normal (as we didn't replace or alter the functionality). Finally, we define the keymap so that the first button activates our macro and the second button is just an escape button. You might want to add more than one macro. You can do that by adding another keycode and adding another case to the switch statement, like so: enum custom_keycodes { QMKBEST = SAFE_RANGE , QMKURL , MY_OTHER_MACRO , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case QMKBEST : if ( record -> event . pressed ) { // when keycode QMKBEST is pressed SEND_STRING ( \"QMK is the best thing ever!\" ); } else { // when keycode QMKBEST is released } break ; case QMKURL : if ( record -> event . pressed ) { // when keycode QMKURL is pressed SEND_STRING ( \"https://qmk.fm/ \\n \" ); } else { // when keycode QMKURL is released } break ; case MY_OTHER_MACRO : if ( record -> event . pressed ) { SEND_STRING ( SS_LCTL ( \"ac\" )); // selects all and copies } break ; } return true ; }; const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { [ 0 ] = { { MY_CUSTOM_MACRO , MY_OTHER_MACRO }, // ... }, };","title":"SEND_STRING() &amp; process_record_user"},{"location":"feature_macros/#advanced-macros","text":"In addition to the process_record_user() function, is the post_process_record_user() function. This runs after process_record and can be used to do things after a keystroke has been sent. This is useful if you want to have a key pressed before and released after a normal key, for instance. In this example, we modify most normal keypresses so that F22 is pressed before the keystroke is normally sent, and release it only after it's been released. static uint8_t f22_tracker ; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_A ... KC_F21 : //notice how it skips over F22 case KC_F23 ... KC_EXSEL : //exsel is the last one before the modifier keys if ( record -> event . pressed ) { register_code ( KC_F22 ); //this means to send F22 down f22_tracker ++ ; register_code ( keycode ); return false ; } break ; } return true ; } void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_A ... KC_F21 : //notice how it skips over F22 case KC_F23 ... KC_EXSEL : //exsel is the last one before the modifier keys if ( ! record -> event . pressed ) { f22_tracker -- ; if ( ! f22_tracker ) { unregister_code ( KC_F22 ); //this means to send F22 up } } break ; } }","title":"Advanced Macros"},{"location":"feature_macros/#tap-down-and-up","text":"You may want to use keys in your macros that you can't write down, such as Ctrl or Home . You can send arbitrary keycodes by wrapping them in: SS_TAP() presses and releases a key. SS_DOWN() presses (but does not release) a key. SS_UP() releases a key. For example: SEND_STRING(SS_TAP(X_HOME)); Would tap KC_HOME - note how the prefix is now X_ , and not KC_ . You can also combine this with other strings, like this: SEND_STRING(\"VE\"SS_TAP(X_HOME)\"LO\"); Which would send \"VE\" followed by a KC_HOME tap, and \"LO\" (spelling \"LOVE\" if on a newline). Delays can be also added to the string: SS_DELAY(msecs) will delay for the specified number of milliseconds. For example: SEND_STRING(\"VE\" SS_DELAY(1000) SS_TAP(X_HOME) \"LO\"); Which would send \"VE\" followed by a 1-second delay, then a KC_HOME tap, and \"LO\" (spelling \"LOVE\" if on a newline, but delayed in the middle). There's also a couple of mod shortcuts you can use: SS_LCTL(string) SS_LSFT(string) SS_LALT(string) or SS_LOPT(string) SS_LGUI(string) , SS_LCMD(string) or SS_LWIN(string) SS_RCTL(string) SS_RSFT(string) SS_RALT(string) , SS_ROPT(string) or SS_ALGR(string) SS_RGUI(string) , SS_RCMD(string) or SS_RWIN(string) These press the respective modifier, send the supplied string and then release the modifier. They can be used like this: SEND_STRING(SS_LCTL(\"a\")); Which would send Left Control+ a (Left Control down, a , Left Control up) - notice that they take strings (eg \"k\" ), and not the X_K keycodes.","title":"TAP, DOWN and UP"},{"location":"feature_macros/#alternative-keymaps","text":"By default, it assumes a US keymap with a QWERTY layout; if you want to change that (e.g. if your OS uses software Colemak), include this somewhere in your keymap: #include \"sendstring_colemak.h\"","title":"Alternative Keymaps"},{"location":"feature_macros/#strings-in-memory","text":"If for some reason you're manipulating strings and need to print out something you just generated (instead of being a literal, constant string), you can use send_string() , like this: char my_str [ 4 ] = \"ok.\" ; send_string ( my_str ); The shortcuts defined above won't work with send_string() , but you can separate things out to different lines if needed: char my_str [ 4 ] = \"ok.\" ; SEND_STRING ( \"I said: \" ); send_string ( my_str ); SEND_STRING ( \"..\" SS_TAP ( X_END ));","title":"Strings in Memory"},{"location":"feature_macros/#advanced-macro-functions","text":"There are some functions you may find useful in macro-writing. Keep in mind that while you can write some fairly advanced code within a macro, if your functionality gets too complex you may want to define a custom keycode instead. Macros are meant to be simple. Tip You can also use the functions described in Useful function and Checking modifier state for additional functionality. For example, reset_keyboard() allows you to reset the keyboard as part of a macro and get_mods() & MOD_MASK_SHIFT lets you check for the existence of active shift modifiers.","title":"Advanced Macro Functions"},{"location":"feature_macros/#record-eventpressed","text":"This is a boolean value that can be tested to see if the switch is being pressed or released. An example of this is if ( record -> event . pressed ) { // on keydown } else { // on keyup }","title":"record-&gt;event.pressed"},{"location":"feature_macros/#register_codekc","text":"This sends the <kc> keydown event to the computer. Some examples would be KC_ESC , KC_C , KC_4 , and even modifiers such as KC_LSFT and KC_LGUI .","title":"register_code(&lt;kc&gt;);"},{"location":"feature_macros/#unregister_codekc","text":"Parallel to register_code function, this sends the <kc> keyup event to the computer. If you don't use this, the key will be held down until it's sent.","title":"unregister_code(&lt;kc&gt;);"},{"location":"feature_macros/#tap_codekc","text":"Sends register_code(<kc>) and then unregister_code(<kc>) . This is useful if you want to send both the press and release events (\"tap\" the key, rather than hold it). If TAP_CODE_DELAY is defined (default 0), this function waits that many milliseconds before calling unregister_code(<kc>) . This can be useful when you are having issues with taps (un)registering. If the keycode is KC_CAPS , it waits TAP_HOLD_CAPS_DELAY milliseconds instead (default 80), as macOS prevents accidental Caps Lock activation by waiting for the key to be held for a certain amount of time.","title":"tap_code(&lt;kc&gt;);"},{"location":"feature_macros/#tap_code_delaykc-delay","text":"Like tap_code(<kc>) , but with a delay parameter for specifying arbitrary intervals before sending the unregister event.","title":"tap_code_delay(&lt;kc&gt;, &lt;delay&gt;);"},{"location":"feature_macros/#register_code16kc-unregister_code16kc-and-tap_code16kc","text":"These functions work similar to their regular counterparts, but allow you to use modded keycodes (with Shift, Alt, Control, and/or GUI applied to them). Eg, you could use register_code16(S(KC_5)); instead of registering the mod, then registering the keycode.","title":"register_code16(&lt;kc&gt;);, unregister_code16(&lt;kc&gt;); and tap_code16(&lt;kc&gt;);"},{"location":"feature_macros/#clear_keyboard","text":"This will clear all mods and keys currently pressed.","title":"clear_keyboard();"},{"location":"feature_macros/#clear_mods","text":"This will clear all mods currently pressed.","title":"clear_mods();"},{"location":"feature_macros/#clear_keyboard_but_mods","text":"This will clear all keys besides the mods currently pressed.","title":"clear_keyboard_but_mods();"},{"location":"feature_macros/#advanced-example","text":"","title":"Advanced Example:"},{"location":"feature_macros/#super-alttab","text":"This macro will register KC_LALT and tap KC_TAB , then wait for 1000ms. If the key is tapped again, it will send another KC_TAB ; if there is no tap, KC_LALT will be unregistered, thus allowing you to cycle through windows. bool is_alt_tab_active = false ; // ADD this near the begining of keymap.c uint16_t alt_tab_timer = 0 ; // we will be using them soon. enum custom_keycodes { // Make sure have the awesome keycode ready ALT_TAB = SAFE_RANGE , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { // This will do most of the grunt work with the keycodes. case ALT_TAB : if ( record -> event . pressed ) { if ( ! is_alt_tab_active ) { is_alt_tab_active = true ; register_code ( KC_LALT ); } alt_tab_timer = timer_read (); register_code ( KC_TAB ); } else { unregister_code ( KC_TAB ); } break ; } return true ; } void matrix_scan_user ( void ) { // The very important timer. if ( is_alt_tab_active ) { if ( timer_elapsed ( alt_tab_timer ) > 1000 ) { unregister_code ( KC_LALT ); is_alt_tab_active = false ; } } }","title":"Super ALT\u21afTAB"},{"location":"feature_midi/","text":"MIDI \u00b6 Usage \u00b6 First, enable MIDI by adding the following to your rules.mk : MIDI_ENABLE = yes There are two MIDI systems in QMK: basic and advanced. With basic MIDI you will only be able to send Note On and Note Off messages using the note keycodes, meaning that keycodes like MI_OCTU and MI_OCTD will not work. Advanced MIDI allows you to do things like octave shifts, channel changes, velocity changes, modulation, and more. Basic MIDI \u00b6 To enable basic MIDI, add the following to your config.h : #define MIDI_BASIC Advanced MIDI \u00b6 To enable advanced MIDI, add the following to your config.h : #define MIDI_ADVANCED Sending Control Change (CC) Messages \u00b6 If you're aiming to emulate the features of something like a Launchpad or other MIDI controller you'll need to access the internal MIDI device directly. Because there are so many possible CC messages, not all of them are implemented as keycodes. Additionally, you might need to provide more than just two values that you would get from a keycode (pressed and released) - for example, the analog values from a fader or a potentiometer. So, you will need to implement custom keycodes if you want to use them in your keymap directly using process_record_user() . For reference of all the possible control code numbers see MIDI Specification Example code for using Generic On Off Switches as per MIDI Specification. \u00b6 #include QMK_KEYBOARD_H extern MidiDevice midi_device ; // MIDI CC codes for generic on/off switches (80, 81, 82, 83) // Off: 0-63 // On: 64-127 #define MIDI_CC_OFF 0 #define MIDI_CC_ON 127 enum custom_keycodes { MIDI_CC80 = SAFE_RANGE , }; bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case MIDI_CC80 : if ( record -> event . pressed ) { midi_send_cc ( & midi_device , midi_config . channel , 80 , ON ); } else { midi_send_cc ( & midi_device , midi_config . channel , 80 , OFF ); } return true ; } return true ; }; const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { LAYOUT ( // ... MIDI_CC80 , // ... ) }; Keycodes \u00b6 Keycode Aliases Description MI_ON Turn MIDI on MI_OFF Turn MIDI off MI_TOG Toggle MIDI enabled MI_C C octave 0 MI_Cs MI_Db C\u266f/D\u266d octave 0 MI_D D octave 0 MI_Ds MI_Eb D\u266f/E\u266d octave 0 MI_E E octave 0 MI_F F octave 0 MI_Fs MI_Gb F\u266f/G\u266d octave 0 MI_G G octave 0 MI_Gs MI_Gs G\u266f/A\u266d octave 0 MI_A A octave 0 MI_As MI_Bb A\u266f/B\u266d octave 0 MI_B B octave 0 MI_C_1 C octave 1 MI_Cs_1 MI_Db_1 C\u266f/D\u266d octave 1 MI_D_1 D octave 1 MI_Ds_1 MI_Eb_1 D\u266f/E\u266d octave 1 MI_E_1 E octave 1 MI_F_1 F octave 1 MI_Fs_1 MI_Gb_1 F\u266f/G\u266d octave 1 MI_G_1 G octave 1 MI_Gs_1 MI_Ab_1 G\u266f/A\u266d octave 1 MI_A_1 A octave 1 MI_As_1 MI_Bb_1 A\u266f/B\u266d octave 1 MI_B_1 B octave 1 MI_C_2 C octave 2 MI_Cs_2 MI_Db_2 C\u266f/D\u266d octave 2 MI_D_2 D octave 2 MI_Ds_2 MI_Eb_2 D\u266f/E\u266d octave 2 MI_E_2 E octave 2 MI_F_2 F octave 2 MI_Fs_2 MI_Gb_2 F\u266f/G\u266d octave 2 MI_G_2 G octave 2 MI_Gs_2 MI_Ab_2 G\u266f/A\u266d octave 2 MI_A_2 A octave 2 MI_As_2 MI_Bb_2 A\u266f/B\u266d octave 2 MI_B_2 B octave 2 MI_C_3 C octave 3 MI_Cs_3 MI_Db_3 C\u266f/D\u266d octave 3 MI_D_3 D octave 3 MI_Ds_3 MI_Eb_3 D\u266f/E\u266d octave 3 MI_E_3 E octave 3 MI_F_3 F octave 3 MI_Fs_3 MI_Gb_3 F\u266f/G\u266d octave 3 MI_G_3 G octave 3 MI_Gs_3 MI_Ab_3 G\u266f/A\u266d octave 3 MI_A_3 A octave 3 MI_As_3 MI_Bb_3 A\u266f/B\u266d octave 3 MI_B_3 B octave 3 MI_C_4 C octave 4 MI_Cs_4 MI_Db_4 C\u266f/D\u266d octave 4 MI_D_4 D octave 4 MI_Ds_4 MI_Eb_4 D\u266f/E\u266d octave 4 MI_E_4 E octave 4 MI_F_4 F octave 4 MI_Fs_4 MI_Gb_4 F\u266f/G\u266d octave 4 MI_G_4 G octave 4 MI_Gs_4 MI_Ab_4 G\u266f/A\u266d octave 4 MI_A_4 A octave 4 MI_As_4 MI_Bb_4 A\u266f/B\u266d octave 4 MI_B_4 B octave 4 MI_C_5 C octave 5 MI_Cs_5 MI_Db_5 C\u266f/D\u266d octave 5 MI_D_5 D octave 5 MI_Ds_5 MI_Eb_5 D\u266f/E\u266d octave 5 MI_E_5 E octave 5 MI_F_5 F octave 5 MI_Fs_5 MI_Gb_5 F\u266f/G\u266d octave 5 MI_G_5 G octave 5 MI_Gs_5 MI_Ab_5 G\u266f/A\u266d octave 5 MI_A_5 A octave 5 MI_As_5 MI_Bb_5 A\u266f/B\u266d octave 5 MI_B_5 B octave 5 MI_OCT_N2 Set octave to -2 MI_OCT_N1 Set octave to -1 MI_OCT_0 Set octave to 0 MI_OCT_1 Set octave to 1 MI_OCT_2 Set octave to 2 MI_OCT_3 Set octave to 3 MI_OCT_4 Set octave to 4 MI_OCT_5 Set octave to 5 MI_OCT_6 Set octave to 6 MI_OCT_7 Set octave to 7 MI_OCTD Move down an octave MI_OCTU Move up an octave MI_TRNS_N6 Set transposition to -6 semitones MI_TRNS_N5 Set transposition to -5 semitones MI_TRNS_N4 Set transposition to -4 semitones MI_TRNS_N3 Set transposition to -3 semitones MI_TRNS_N2 Set transposition to -2 semitones MI_TRNS_N1 Set transposition to -1 semitone MI_TRNS_0 No transposition MI_TRNS_1 Set transposition to +1 semitone MI_TRNS_2 Set transposition to +2 semitones MI_TRNS_3 Set transposition to +3 semitones MI_TRNS_4 Set transposition to +4 semitones MI_TRNS_5 Set transposition to +5 semitones MI_TRNS_6 Set transposition to +6 semitones MI_TRNSD Decrease transposition MI_TRNSU Increase transposition MI_VEL_0 Set velocity to 0 MI_VEL_1 Set velocity to 12 MI_VEL_2 Set velocity to 25 MI_VEL_3 Set velocity to 38 MI_VEL_4 Set velocity to 51 MI_VEL_5 Set velocity to 64 MI_VEL_6 Set velocity to 76 MI_VEL_7 Set velocity to 89 MI_VEL_8 Set velocity to 102 MI_VEL_9 Set velocity to 114 MI_VEL_10 Set velocity to 127 MI_VELD Decrease velocity MI_VELU Increase velocity MI_CH1 Set channel to 1 MI_CH2 Set channel to 2 MI_CH3 Set channel to 3 MI_CH4 Set channel to 4 MI_CH5 Set channel to 5 MI_CH6 Set channel to 6 MI_CH7 Set channel to 7 MI_CH8 Set channel to 8 MI_CH9 Set channel to 9 MI_CH10 Set channel to 10 MI_CH11 Set channel to 11 MI_CH12 Set channel to 12 MI_CH13 Set channel to 13 MI_CH14 Set channel to 14 MI_CH15 Set channel to 15 MI_CH16 Set channel to 16 MI_CHD Decrease channel MI_CHU Increase channel MI_ALLOFF Stop all notes MI_SUS Sustain MI_PORT Portmento MI_SOST Sostenuto MI_SOFT Soft Pedal MI_LEG Legato MI_MOD Modulation MI_MODSD Decrease modulation speed MI_MODSU Increase modulation speed MI_BENDD Bend pitch down MI_BENDU Bend pitch up Configuration \u00b6 Certain values are stored in the midi_config struct. This configuration is not persisted to EEPROM. By default, these values are: Configuration Value Comments Octave 4 Corresponds to MI_OCT_2 Transposition 0 Velocity 127 Channel 0 Modulation Interval 8 For the above, the MI_C keycode will produce a C3 (note number 48), and so on. References \u00b6 MIDI Specification \u00b6 MIDI.org CMU MIDI Programmer's Reference QMK C Files \u00b6 quantum/process_keycode/process_midi.c quantum/quantum_keycodes.h tmk_core/protocol/midi.h tmk_core/protocol/midi.c tmk_core/protocol/qmk_midi.c tmk_core/protocol/midi_device.h","title":"MIDI"},{"location":"feature_midi/#midi","text":"","title":"MIDI"},{"location":"feature_midi/#usage","text":"First, enable MIDI by adding the following to your rules.mk : MIDI_ENABLE = yes There are two MIDI systems in QMK: basic and advanced. With basic MIDI you will only be able to send Note On and Note Off messages using the note keycodes, meaning that keycodes like MI_OCTU and MI_OCTD will not work. Advanced MIDI allows you to do things like octave shifts, channel changes, velocity changes, modulation, and more.","title":"Usage"},{"location":"feature_midi/#basic-midi","text":"To enable basic MIDI, add the following to your config.h : #define MIDI_BASIC","title":"Basic MIDI"},{"location":"feature_midi/#advanced-midi","text":"To enable advanced MIDI, add the following to your config.h : #define MIDI_ADVANCED","title":"Advanced MIDI"},{"location":"feature_midi/#keycodes","text":"Keycode Aliases Description MI_ON Turn MIDI on MI_OFF Turn MIDI off MI_TOG Toggle MIDI enabled MI_C C octave 0 MI_Cs MI_Db C\u266f/D\u266d octave 0 MI_D D octave 0 MI_Ds MI_Eb D\u266f/E\u266d octave 0 MI_E E octave 0 MI_F F octave 0 MI_Fs MI_Gb F\u266f/G\u266d octave 0 MI_G G octave 0 MI_Gs MI_Gs G\u266f/A\u266d octave 0 MI_A A octave 0 MI_As MI_Bb A\u266f/B\u266d octave 0 MI_B B octave 0 MI_C_1 C octave 1 MI_Cs_1 MI_Db_1 C\u266f/D\u266d octave 1 MI_D_1 D octave 1 MI_Ds_1 MI_Eb_1 D\u266f/E\u266d octave 1 MI_E_1 E octave 1 MI_F_1 F octave 1 MI_Fs_1 MI_Gb_1 F\u266f/G\u266d octave 1 MI_G_1 G octave 1 MI_Gs_1 MI_Ab_1 G\u266f/A\u266d octave 1 MI_A_1 A octave 1 MI_As_1 MI_Bb_1 A\u266f/B\u266d octave 1 MI_B_1 B octave 1 MI_C_2 C octave 2 MI_Cs_2 MI_Db_2 C\u266f/D\u266d octave 2 MI_D_2 D octave 2 MI_Ds_2 MI_Eb_2 D\u266f/E\u266d octave 2 MI_E_2 E octave 2 MI_F_2 F octave 2 MI_Fs_2 MI_Gb_2 F\u266f/G\u266d octave 2 MI_G_2 G octave 2 MI_Gs_2 MI_Ab_2 G\u266f/A\u266d octave 2 MI_A_2 A octave 2 MI_As_2 MI_Bb_2 A\u266f/B\u266d octave 2 MI_B_2 B octave 2 MI_C_3 C octave 3 MI_Cs_3 MI_Db_3 C\u266f/D\u266d octave 3 MI_D_3 D octave 3 MI_Ds_3 MI_Eb_3 D\u266f/E\u266d octave 3 MI_E_3 E octave 3 MI_F_3 F octave 3 MI_Fs_3 MI_Gb_3 F\u266f/G\u266d octave 3 MI_G_3 G octave 3 MI_Gs_3 MI_Ab_3 G\u266f/A\u266d octave 3 MI_A_3 A octave 3 MI_As_3 MI_Bb_3 A\u266f/B\u266d octave 3 MI_B_3 B octave 3 MI_C_4 C octave 4 MI_Cs_4 MI_Db_4 C\u266f/D\u266d octave 4 MI_D_4 D octave 4 MI_Ds_4 MI_Eb_4 D\u266f/E\u266d octave 4 MI_E_4 E octave 4 MI_F_4 F octave 4 MI_Fs_4 MI_Gb_4 F\u266f/G\u266d octave 4 MI_G_4 G octave 4 MI_Gs_4 MI_Ab_4 G\u266f/A\u266d octave 4 MI_A_4 A octave 4 MI_As_4 MI_Bb_4 A\u266f/B\u266d octave 4 MI_B_4 B octave 4 MI_C_5 C octave 5 MI_Cs_5 MI_Db_5 C\u266f/D\u266d octave 5 MI_D_5 D octave 5 MI_Ds_5 MI_Eb_5 D\u266f/E\u266d octave 5 MI_E_5 E octave 5 MI_F_5 F octave 5 MI_Fs_5 MI_Gb_5 F\u266f/G\u266d octave 5 MI_G_5 G octave 5 MI_Gs_5 MI_Ab_5 G\u266f/A\u266d octave 5 MI_A_5 A octave 5 MI_As_5 MI_Bb_5 A\u266f/B\u266d octave 5 MI_B_5 B octave 5 MI_OCT_N2 Set octave to -2 MI_OCT_N1 Set octave to -1 MI_OCT_0 Set octave to 0 MI_OCT_1 Set octave to 1 MI_OCT_2 Set octave to 2 MI_OCT_3 Set octave to 3 MI_OCT_4 Set octave to 4 MI_OCT_5 Set octave to 5 MI_OCT_6 Set octave to 6 MI_OCT_7 Set octave to 7 MI_OCTD Move down an octave MI_OCTU Move up an octave MI_TRNS_N6 Set transposition to -6 semitones MI_TRNS_N5 Set transposition to -5 semitones MI_TRNS_N4 Set transposition to -4 semitones MI_TRNS_N3 Set transposition to -3 semitones MI_TRNS_N2 Set transposition to -2 semitones MI_TRNS_N1 Set transposition to -1 semitone MI_TRNS_0 No transposition MI_TRNS_1 Set transposition to +1 semitone MI_TRNS_2 Set transposition to +2 semitones MI_TRNS_3 Set transposition to +3 semitones MI_TRNS_4 Set transposition to +4 semitones MI_TRNS_5 Set transposition to +5 semitones MI_TRNS_6 Set transposition to +6 semitones MI_TRNSD Decrease transposition MI_TRNSU Increase transposition MI_VEL_0 Set velocity to 0 MI_VEL_1 Set velocity to 12 MI_VEL_2 Set velocity to 25 MI_VEL_3 Set velocity to 38 MI_VEL_4 Set velocity to 51 MI_VEL_5 Set velocity to 64 MI_VEL_6 Set velocity to 76 MI_VEL_7 Set velocity to 89 MI_VEL_8 Set velocity to 102 MI_VEL_9 Set velocity to 114 MI_VEL_10 Set velocity to 127 MI_VELD Decrease velocity MI_VELU Increase velocity MI_CH1 Set channel to 1 MI_CH2 Set channel to 2 MI_CH3 Set channel to 3 MI_CH4 Set channel to 4 MI_CH5 Set channel to 5 MI_CH6 Set channel to 6 MI_CH7 Set channel to 7 MI_CH8 Set channel to 8 MI_CH9 Set channel to 9 MI_CH10 Set channel to 10 MI_CH11 Set channel to 11 MI_CH12 Set channel to 12 MI_CH13 Set channel to 13 MI_CH14 Set channel to 14 MI_CH15 Set channel to 15 MI_CH16 Set channel to 16 MI_CHD Decrease channel MI_CHU Increase channel MI_ALLOFF Stop all notes MI_SUS Sustain MI_PORT Portmento MI_SOST Sostenuto MI_SOFT Soft Pedal MI_LEG Legato MI_MOD Modulation MI_MODSD Decrease modulation speed MI_MODSU Increase modulation speed MI_BENDD Bend pitch down MI_BENDU Bend pitch up","title":"Keycodes"},{"location":"feature_midi/#configuration","text":"Certain values are stored in the midi_config struct. This configuration is not persisted to EEPROM. By default, these values are: Configuration Value Comments Octave 4 Corresponds to MI_OCT_2 Transposition 0 Velocity 127 Channel 0 Modulation Interval 8 For the above, the MI_C keycode will produce a C3 (note number 48), and so on.","title":"Configuration"},{"location":"feature_midi/#references","text":"","title":"References"},{"location":"feature_mouse_keys/","text":"Mouse keys \u00b6 Mouse keys is a feature that allows you to emulate a mouse using your keyboard. You can move the pointer at different speeds, press 5 buttons and scroll in 8 directions. Adding mouse keys to your keyboard \u00b6 To use mouse keys, you must at least enable mouse keys support and map mouse actions to keys on your keyboard. Enabling mouse keys \u00b6 To enable mouse keys, add the following line to your keymap\u2019s rules.mk : MOUSEKEY_ENABLE = yes Mapping mouse actions \u00b6 In your keymap you can use the following keycodes to map key presses to mouse actions: Key Aliases Description KC_MS_UP KC_MS_U Move cursor up KC_MS_DOWN KC_MS_D Move cursor down KC_MS_LEFT KC_MS_L Move cursor left KC_MS_RIGHT KC_MS_R Move cursor right KC_MS_BTN1 KC_BTN1 Press button 1 KC_MS_BTN2 KC_BTN2 Press button 2 KC_MS_BTN3 KC_BTN3 Press button 3 KC_MS_BTN4 KC_BTN4 Press button 4 KC_MS_BTN5 KC_BTN5 Press button 5 KC_MS_BTN6 KC_BTN6 Press button 6 KC_MS_BTN7 KC_BTN7 Press button 7 KC_MS_BTN8 KC_BTN8 Press button 8 KC_MS_WH_UP KC_WH_U Move wheel up KC_MS_WH_DOWN KC_WH_D Move wheel down KC_MS_WH_LEFT KC_WH_L Move wheel left KC_MS_WH_RIGHT KC_WH_R Move wheel right KC_MS_ACCEL0 KC_ACL0 Set speed to 0 KC_MS_ACCEL1 KC_ACL1 Set speed to 1 KC_MS_ACCEL2 KC_ACL2 Set speed to 2 Configuring mouse keys \u00b6 Mouse keys supports three different modes to move the cursor: Accelerated (default): Holding movement keys accelerates the cursor until it reaches its maximum speed. Kinetic: Holding movement keys accelerates the cursor with its speed following a quadratic curve until it reaches its maximum speed. Constant: Holding movement keys moves the cursor at constant speeds. Combined: Holding movement keys accelerates the cursor until it reaches its maximum speed, but holding acceleration and movement keys simultaneously moves the cursor at constant speeds. The same principle applies to scrolling. Configuration options that are times, intervals or delays are given in milliseconds. Scroll speed is given as multiples of the default scroll step. For example, a scroll speed of 8 means that each scroll action covers 8 times the length of the default scroll step as defined by your operating system or application. Accelerated mode \u00b6 This is the default mode. You can adjust the cursor and scrolling acceleration using the following settings in your keymap\u2019s config.h file: Define Default Description MOUSEKEY_DELAY 300 Delay between pressing a movement key and cursor movement MOUSEKEY_INTERVAL 50 Time between cursor movements in milliseconds MOUSEKEY_MOVE_DELTA 5 Step size MOUSEKEY_MAX_SPEED 10 Maximum cursor speed at which acceleration stops MOUSEKEY_TIME_TO_MAX 20 Time until maximum cursor speed is reached MOUSEKEY_WHEEL_DELAY 300 Delay between pressing a wheel key and wheel movement MOUSEKEY_WHEEL_INTERVAL 100 Time between wheel movements MOUSEKEY_WHEEL_MAX_SPEED 8 Maximum number of scroll steps per scroll action MOUSEKEY_WHEEL_TIME_TO_MAX 40 Time until maximum scroll speed is reached Tips: Setting MOUSEKEY_DELAY too low makes the cursor unresponsive. Setting it too high makes small movements difficult. For smoother cursor movements, lower the value of MOUSEKEY_INTERVAL . If the refresh rate of your display is 60Hz, you could set it to 16 (1/60). As this raises the cursor speed significantly, you may want to lower MOUSEKEY_MAX_SPEED . Setting MOUSEKEY_TIME_TO_MAX or MOUSEKEY_WHEEL_TIME_TO_MAX to 0 will disable acceleration for the cursor or scrolling respectively. This way you can make one of them constant while keeping the other accelerated, which is not possible in constant speed mode. Setting MOUSEKEY_WHEEL_INTERVAL too low will make scrolling too fast. Setting it too high will make scrolling too slow when the wheel key is held down. Cursor acceleration uses the same algorithm as the X Window System MouseKeysAccel feature. You can read more about it on Wikipedia . Kinetic Mode \u00b6 This is an extension of the accelerated mode. The kinetic mode uses a quadratic curve on the cursor speed which allows precise movements at the beginning and allows to cover large distances by increasing cursor speed quickly thereafter. You can adjust the cursor and scrolling acceleration using the following settings in your keymap\u2019s config.h file: Define Default Description MK_KINETIC_SPEED undefined Enable kinetic mode MOUSEKEY_DELAY 8 Delay between pressing a movement key and cursor movement MOUSEKEY_INTERVAL 8 Time between cursor movements in milliseconds MOUSEKEY_MOVE_DELTA 25 Step size for accelerating from initial to base speed MOUSEKEY_INITIAL_SPEED 100 Initial speed of the cursor in pixel per second MOUSEKEY_BASE_SPEED 1000 Maximum cursor speed at which acceleration stops MOUSEKEY_DECELERATED_SPEED 400 Decelerated cursor speed MOUSEKEY_ACCELERATED_SPEED 3000 Accelerated cursor speed MOUSEKEY_WHEEL_INITIAL_MOVEMENTS 16 Initial number of movements of the mouse wheel MOUSEKEY_WHEEL_BASE_MOVEMENTS 32 Maximum number of movements at which acceleration stops MOUSEKEY_WHEEL_ACCELERATED_MOVEMENTS 48 Accelerated wheel movements MOUSEKEY_WHEEL_DECELERATED_MOVEMENTS 8 Decelerated wheel movements Tips: The smoothness of the cursor movement depends on the MOUSEKEY_INTERVAL setting. The shorter the interval is set the smoother the movement will be. Setting the value too low makes the cursor unresponsive. Lower settings are possible if the micro processor is fast enough. For example: At an interval of 8 milliseconds, 125 movements per second will be initiated. With a base speed of 1000 each movement will move the cursor by 8 pixels. Mouse wheel movements are implemented differently from cursor movements. While it's okay for the cursor to move multiple pixels at once for the mouse wheel this would lead to jerky movements. Instead, the mouse wheel operates at step size 1 . Setting mouse wheel speed is done by adjusting the number of wheel movements per second. Constant mode \u00b6 In this mode you can define multiple different speeds for both the cursor and the mouse wheel. There is no acceleration. KC_ACL0 , KC_ACL1 and KC_ACL2 change the cursor and scroll speed to their respective setting. You can choose whether speed selection is momentary or tap-to-select: Momentary: The chosen speed is only active while you hold the respective key. When the key is raised, mouse keys returns to the unmodified speed. Tap-to-select: The chosen speed is activated when you press the respective key and remains active even after the key has been raised. The default speed is that of KC_ACL1 . There is no unmodified speed. The default speeds from slowest to fastest are as follows: Momentary: KC_ACL0 < KC_ACL1 < unmodified < KC_ACL2 Tap-to-select: KC_ACL0 < KC_ACL1 < KC_ACL2 To use constant speed mode, you must at least define MK_3_SPEED in your keymap\u2019s config.h file: #define MK_3_SPEED To enable momentary mode, also define MK_MOMENTARY_ACCEL : #define MK_MOMENTARY_ACCEL Use the following settings if you want to adjust cursor movement or scrolling: Define Default Description MK_3_SPEED Not defined Enable constant cursor speeds MK_MOMENTARY_ACCEL Not defined Enable momentary speed selection MK_C_OFFSET_UNMOD 16 Cursor offset per movement (unmodified) MK_C_INTERVAL_UNMOD 16 Time between cursor movements (unmodified) MK_C_OFFSET_0 1 Cursor offset per movement ( KC_ACL0 ) MK_C_INTERVAL_0 32 Time between cursor movements ( KC_ACL0 ) MK_C_OFFSET_1 4 Cursor offset per movement ( KC_ACL1 ) MK_C_INTERVAL_1 16 Time between cursor movements ( KC_ACL1 ) MK_C_OFFSET_2 32 Cursor offset per movement ( KC_ACL2 ) MK_C_INTERVAL_2 16 Time between cursor movements ( KC_ACL2 ) MK_W_OFFSET_UNMOD 1 Scroll steps per scroll action (unmodified) MK_W_INTERVAL_UNMOD 40 Time between scroll steps (unmodified) MK_W_OFFSET_0 1 Scroll steps per scroll action ( KC_ACL0 ) MK_W_INTERVAL_0 360 Time between scroll steps ( KC_ACL0 ) MK_W_OFFSET_1 1 Scroll steps per scroll action ( KC_ACL1 ) MK_W_INTERVAL_1 120 Time between scroll steps ( KC_ACL1 ) MK_W_OFFSET_2 1 Scroll steps per scroll action ( KC_ACL2 ) MK_W_INTERVAL_2 20 Time between scroll steps ( KC_ACL2 ) Combined mode \u00b6 This mode functions like Accelerated mode, however, you can hold KC_ACL0 , KC_ACL1 and KC_ACL2 to momentarily (while held) set the cursor and scroll speeds to constant speeds. When no acceleration keys are held, this mode is identical to Accelerated mode, and can be modified using all of the relevant settings. KC_ACL0: This acceleration sets your cursor to the slowest possible speed. This is useful for very small and detailed movements of the cursor. KC_ACL1: This acceleration sets your cursor to half the maximum (user defined) speed. KC_ACL2: This acceleration sets your cursor to the maximum (computer defined) speed. This is useful for moving the cursor large distances without much accuracy. To use constant speed mode, you must at least define MK_COMBINED in your keymap\u2019s config.h file: #define MK_COMBINED Use with PS/2 Mouse and Pointing Device \u00b6 Mouse keys button state is shared with PS/2 mouse and pointing device so mouse keys button presses can be used for clicks and drags.","title":"\u9f20\u6807\u952e"},{"location":"feature_mouse_keys/#mouse-keys","text":"Mouse keys is a feature that allows you to emulate a mouse using your keyboard. You can move the pointer at different speeds, press 5 buttons and scroll in 8 directions.","title":"Mouse keys"},{"location":"feature_mouse_keys/#adding-mouse-keys-to-your-keyboard","text":"To use mouse keys, you must at least enable mouse keys support and map mouse actions to keys on your keyboard.","title":"Adding mouse keys to your keyboard"},{"location":"feature_mouse_keys/#enabling-mouse-keys","text":"To enable mouse keys, add the following line to your keymap\u2019s rules.mk : MOUSEKEY_ENABLE = yes","title":"Enabling mouse keys"},{"location":"feature_mouse_keys/#mapping-mouse-actions","text":"In your keymap you can use the following keycodes to map key presses to mouse actions: Key Aliases Description KC_MS_UP KC_MS_U Move cursor up KC_MS_DOWN KC_MS_D Move cursor down KC_MS_LEFT KC_MS_L Move cursor left KC_MS_RIGHT KC_MS_R Move cursor right KC_MS_BTN1 KC_BTN1 Press button 1 KC_MS_BTN2 KC_BTN2 Press button 2 KC_MS_BTN3 KC_BTN3 Press button 3 KC_MS_BTN4 KC_BTN4 Press button 4 KC_MS_BTN5 KC_BTN5 Press button 5 KC_MS_BTN6 KC_BTN6 Press button 6 KC_MS_BTN7 KC_BTN7 Press button 7 KC_MS_BTN8 KC_BTN8 Press button 8 KC_MS_WH_UP KC_WH_U Move wheel up KC_MS_WH_DOWN KC_WH_D Move wheel down KC_MS_WH_LEFT KC_WH_L Move wheel left KC_MS_WH_RIGHT KC_WH_R Move wheel right KC_MS_ACCEL0 KC_ACL0 Set speed to 0 KC_MS_ACCEL1 KC_ACL1 Set speed to 1 KC_MS_ACCEL2 KC_ACL2 Set speed to 2","title":"Mapping mouse actions"},{"location":"feature_mouse_keys/#configuring-mouse-keys","text":"Mouse keys supports three different modes to move the cursor: Accelerated (default): Holding movement keys accelerates the cursor until it reaches its maximum speed. Kinetic: Holding movement keys accelerates the cursor with its speed following a quadratic curve until it reaches its maximum speed. Constant: Holding movement keys moves the cursor at constant speeds. Combined: Holding movement keys accelerates the cursor until it reaches its maximum speed, but holding acceleration and movement keys simultaneously moves the cursor at constant speeds. The same principle applies to scrolling. Configuration options that are times, intervals or delays are given in milliseconds. Scroll speed is given as multiples of the default scroll step. For example, a scroll speed of 8 means that each scroll action covers 8 times the length of the default scroll step as defined by your operating system or application.","title":"Configuring mouse keys"},{"location":"feature_mouse_keys/#accelerated-mode","text":"This is the default mode. You can adjust the cursor and scrolling acceleration using the following settings in your keymap\u2019s config.h file: Define Default Description MOUSEKEY_DELAY 300 Delay between pressing a movement key and cursor movement MOUSEKEY_INTERVAL 50 Time between cursor movements in milliseconds MOUSEKEY_MOVE_DELTA 5 Step size MOUSEKEY_MAX_SPEED 10 Maximum cursor speed at which acceleration stops MOUSEKEY_TIME_TO_MAX 20 Time until maximum cursor speed is reached MOUSEKEY_WHEEL_DELAY 300 Delay between pressing a wheel key and wheel movement MOUSEKEY_WHEEL_INTERVAL 100 Time between wheel movements MOUSEKEY_WHEEL_MAX_SPEED 8 Maximum number of scroll steps per scroll action MOUSEKEY_WHEEL_TIME_TO_MAX 40 Time until maximum scroll speed is reached Tips: Setting MOUSEKEY_DELAY too low makes the cursor unresponsive. Setting it too high makes small movements difficult. For smoother cursor movements, lower the value of MOUSEKEY_INTERVAL . If the refresh rate of your display is 60Hz, you could set it to 16 (1/60). As this raises the cursor speed significantly, you may want to lower MOUSEKEY_MAX_SPEED . Setting MOUSEKEY_TIME_TO_MAX or MOUSEKEY_WHEEL_TIME_TO_MAX to 0 will disable acceleration for the cursor or scrolling respectively. This way you can make one of them constant while keeping the other accelerated, which is not possible in constant speed mode. Setting MOUSEKEY_WHEEL_INTERVAL too low will make scrolling too fast. Setting it too high will make scrolling too slow when the wheel key is held down. Cursor acceleration uses the same algorithm as the X Window System MouseKeysAccel feature. You can read more about it on Wikipedia .","title":"Accelerated mode"},{"location":"feature_mouse_keys/#kinetic-mode","text":"This is an extension of the accelerated mode. The kinetic mode uses a quadratic curve on the cursor speed which allows precise movements at the beginning and allows to cover large distances by increasing cursor speed quickly thereafter. You can adjust the cursor and scrolling acceleration using the following settings in your keymap\u2019s config.h file: Define Default Description MK_KINETIC_SPEED undefined Enable kinetic mode MOUSEKEY_DELAY 8 Delay between pressing a movement key and cursor movement MOUSEKEY_INTERVAL 8 Time between cursor movements in milliseconds MOUSEKEY_MOVE_DELTA 25 Step size for accelerating from initial to base speed MOUSEKEY_INITIAL_SPEED 100 Initial speed of the cursor in pixel per second MOUSEKEY_BASE_SPEED 1000 Maximum cursor speed at which acceleration stops MOUSEKEY_DECELERATED_SPEED 400 Decelerated cursor speed MOUSEKEY_ACCELERATED_SPEED 3000 Accelerated cursor speed MOUSEKEY_WHEEL_INITIAL_MOVEMENTS 16 Initial number of movements of the mouse wheel MOUSEKEY_WHEEL_BASE_MOVEMENTS 32 Maximum number of movements at which acceleration stops MOUSEKEY_WHEEL_ACCELERATED_MOVEMENTS 48 Accelerated wheel movements MOUSEKEY_WHEEL_DECELERATED_MOVEMENTS 8 Decelerated wheel movements Tips: The smoothness of the cursor movement depends on the MOUSEKEY_INTERVAL setting. The shorter the interval is set the smoother the movement will be. Setting the value too low makes the cursor unresponsive. Lower settings are possible if the micro processor is fast enough. For example: At an interval of 8 milliseconds, 125 movements per second will be initiated. With a base speed of 1000 each movement will move the cursor by 8 pixels. Mouse wheel movements are implemented differently from cursor movements. While it's okay for the cursor to move multiple pixels at once for the mouse wheel this would lead to jerky movements. Instead, the mouse wheel operates at step size 1 . Setting mouse wheel speed is done by adjusting the number of wheel movements per second.","title":"Kinetic Mode"},{"location":"feature_mouse_keys/#constant-mode","text":"In this mode you can define multiple different speeds for both the cursor and the mouse wheel. There is no acceleration. KC_ACL0 , KC_ACL1 and KC_ACL2 change the cursor and scroll speed to their respective setting. You can choose whether speed selection is momentary or tap-to-select: Momentary: The chosen speed is only active while you hold the respective key. When the key is raised, mouse keys returns to the unmodified speed. Tap-to-select: The chosen speed is activated when you press the respective key and remains active even after the key has been raised. The default speed is that of KC_ACL1 . There is no unmodified speed. The default speeds from slowest to fastest are as follows: Momentary: KC_ACL0 < KC_ACL1 < unmodified < KC_ACL2 Tap-to-select: KC_ACL0 < KC_ACL1 < KC_ACL2 To use constant speed mode, you must at least define MK_3_SPEED in your keymap\u2019s config.h file: #define MK_3_SPEED To enable momentary mode, also define MK_MOMENTARY_ACCEL : #define MK_MOMENTARY_ACCEL Use the following settings if you want to adjust cursor movement or scrolling: Define Default Description MK_3_SPEED Not defined Enable constant cursor speeds MK_MOMENTARY_ACCEL Not defined Enable momentary speed selection MK_C_OFFSET_UNMOD 16 Cursor offset per movement (unmodified) MK_C_INTERVAL_UNMOD 16 Time between cursor movements (unmodified) MK_C_OFFSET_0 1 Cursor offset per movement ( KC_ACL0 ) MK_C_INTERVAL_0 32 Time between cursor movements ( KC_ACL0 ) MK_C_OFFSET_1 4 Cursor offset per movement ( KC_ACL1 ) MK_C_INTERVAL_1 16 Time between cursor movements ( KC_ACL1 ) MK_C_OFFSET_2 32 Cursor offset per movement ( KC_ACL2 ) MK_C_INTERVAL_2 16 Time between cursor movements ( KC_ACL2 ) MK_W_OFFSET_UNMOD 1 Scroll steps per scroll action (unmodified) MK_W_INTERVAL_UNMOD 40 Time between scroll steps (unmodified) MK_W_OFFSET_0 1 Scroll steps per scroll action ( KC_ACL0 ) MK_W_INTERVAL_0 360 Time between scroll steps ( KC_ACL0 ) MK_W_OFFSET_1 1 Scroll steps per scroll action ( KC_ACL1 ) MK_W_INTERVAL_1 120 Time between scroll steps ( KC_ACL1 ) MK_W_OFFSET_2 1 Scroll steps per scroll action ( KC_ACL2 ) MK_W_INTERVAL_2 20 Time between scroll steps ( KC_ACL2 )","title":"Constant mode"},{"location":"feature_mouse_keys/#combined-mode","text":"This mode functions like Accelerated mode, however, you can hold KC_ACL0 , KC_ACL1 and KC_ACL2 to momentarily (while held) set the cursor and scroll speeds to constant speeds. When no acceleration keys are held, this mode is identical to Accelerated mode, and can be modified using all of the relevant settings. KC_ACL0: This acceleration sets your cursor to the slowest possible speed. This is useful for very small and detailed movements of the cursor. KC_ACL1: This acceleration sets your cursor to half the maximum (user defined) speed. KC_ACL2: This acceleration sets your cursor to the maximum (computer defined) speed. This is useful for moving the cursor large distances without much accuracy. To use constant speed mode, you must at least define MK_COMBINED in your keymap\u2019s config.h file: #define MK_COMBINED","title":"Combined mode"},{"location":"feature_mouse_keys/#use-with-ps2-mouse-and-pointing-device","text":"Mouse keys button state is shared with PS/2 mouse and pointing device so mouse keys button presses can be used for clicks and drags.","title":"Use with PS/2 Mouse and Pointing Device"},{"location":"feature_oled_driver/","text":"OLED Driver \u00b6 Supported Hardware \u00b6 OLED modules using SSD1306 or SH1106 driver ICs, communicating over I2C. Tested combinations: IC Size Platform Notes SSD1306 128x32 AVR Primary support SSD1306 128x64 AVR Verified working SSD1306 128x32 Arm SH1106 128x64 AVR No rotation or scrolling Hardware configurations using Arm-based microcontrollers or different sizes of OLED modules may be compatible, but are untested. Warning This OLED driver currently uses the new i2c_master driver from Split Common code. If your split keyboard uses I2C to communicate between sides, this driver could cause an address conflict (serial is fine). Please contact your keyboard vendor and ask them to migrate to the latest Split Common code to fix this. In addition, the display timeout system to reduce OLED burn-in also uses Split Common to detect keypresses, so you will need to implement custom timeout logic for non-Split Common keyboards. Usage \u00b6 To enable the OLED feature, there are three steps. First, when compiling your keyboard, you'll need to add the following to your rules.mk : OLED_DRIVER_ENABLE = yes Then in your keymap.c file, implement the OLED task call. This example assumes your keymap has three layers named _QWERTY , _FN and _ADJ : #ifdef OLED_DRIVER_ENABLE void oled_task_user ( void ) { // Host Keyboard Layer Status oled_write_P ( PSTR ( \"Layer: \" ), false ); switch ( get_highest_layer ( layer_state )) { case _QWERTY : oled_write_P ( PSTR ( \"Default \\n \" ), false ); break ; case _FN : oled_write_P ( PSTR ( \"FN \\n \" ), false ); break ; case _ADJ : oled_write_P ( PSTR ( \"ADJ \\n \" ), false ); break ; default : // Or use the write_ln shortcut over adding '\\n' to the end of your string oled_write_ln_P ( PSTR ( \"Undefined\" ), false ); } // Host Keyboard LED Status led_t led_state = host_keyboard_led_state (); oled_write_P ( led_state . num_lock ? PSTR ( \"NUM \" ) : PSTR ( \" \" ), false ); oled_write_P ( led_state . caps_lock ? PSTR ( \"CAP \" ) : PSTR ( \" \" ), false ); oled_write_P ( led_state . scroll_lock ? PSTR ( \"SCR \" ) : PSTR ( \" \" ), false ); } #endif Logo Example \u00b6 In the default font, certain ranges of characters are reserved for a QMK logo. To render this logo to the OLED screen, use the following code example: static void render_logo ( void ) { static const char PROGMEM qmk_logo [] = { 0x80 , 0x81 , 0x82 , 0x83 , 0x84 , 0x85 , 0x86 , 0x87 , 0x88 , 0x89 , 0x8A , 0x8B , 0x8C , 0x8D , 0x8E , 0x8F , 0x90 , 0x91 , 0x92 , 0x93 , 0x94 , 0xA0 , 0xA1 , 0xA2 , 0xA3 , 0xA4 , 0xA5 , 0xA6 , 0xA7 , 0xA8 , 0xA9 , 0xAA , 0xAB , 0xAC , 0xAD , 0xAE , 0xAF , 0xB0 , 0xB1 , 0xB2 , 0xB3 , 0xB4 , 0xC0 , 0xC1 , 0xC2 , 0xC3 , 0xC4 , 0xC5 , 0xC6 , 0xC7 , 0xC8 , 0xC9 , 0xCA , 0xCB , 0xCC , 0xCD , 0xCE , 0xCF , 0xD0 , 0xD1 , 0xD2 , 0xD3 , 0xD4 , 0x00 }; oled_write_P ( qmk_logo , false ); } Buffer Read Example \u00b6 For some purposes, you may need to read the current state of the OLED display buffer. The oled_read_raw function can be used to safely read bytes from the buffer. In this example, calling fade_display in the oled_task_user function will slowly fade away whatever is on the screen by turning random pixels black over time. //Setup some mask which can be or'd with bytes to turn off pixels const uint8_t single_bit_masks [ 8 ] = { 127 , 191 , 223 , 239 , 247 , 251 , 253 , 254 }; static void fade_display ( void ) { //Define the reader structure oled_buffer_reader_t reader ; uint8_t buff_char ; if ( random () % 30 == 0 ) { srand ( timer_read ()); // Fetch a pointer for the buffer byte at index 0. The return structure // will have the pointer and the number of bytes remaining from this // index position if we want to perform a sequential read by // incrementing the buffer pointer reader = oled_read_raw ( 0 ); //Loop over the remaining buffer and erase pixels as we go for ( uint16_t i = 0 ; i < reader . remaining_element_count ; i ++ ) { //Get the actual byte in the buffer by dereferencing the pointer buff_char = * reader . current_element ; if ( buff_char != 0 ) { oled_write_raw_byte ( buff_char & single_bit_masks [ rand () % 8 ], i ); } //increment the pointer to fetch a new byte during the next loop reader . current_element ++ ; } } } Other Examples \u00b6 In split keyboards, it is very common to have two OLED displays that each render different content and are oriented or flipped differently. You can do this by switching which content to render by using the return value from is_keyboard_master() or is_keyboard_left() found in split_util.h , e.g: #ifdef OLED_DRIVER_ENABLE oled_rotation_t oled_init_user ( oled_rotation_t rotation ) { if ( ! is_keyboard_master ()) { return OLED_ROTATION_180 ; // flips the display 180 degrees if offhand } return rotation ; } void oled_task_user ( void ) { if ( is_keyboard_master ()) { render_status (); // Renders the current keyboard state (layer, lock, caps, scroll, etc) } else { render_logo (); // Renders a static logo oled_scroll_left (); // Turns on scrolling } } #endif Basic Configuration \u00b6 Define Default Description OLED_DISPLAY_ADDRESS 0x3C The i2c address of the OLED Display OLED_FONT_H \"glcdfont.c\" The font code file to use for custom fonts OLED_FONT_START 0 The starting character index for custom fonts OLED_FONT_END 223 The ending character index for custom fonts OLED_FONT_WIDTH 6 The font width OLED_FONT_HEIGHT 8 The font height (untested) OLED_TIMEOUT 60000 Turns off the OLED screen after 60000ms of keyboard inactivity. Helps reduce OLED Burn-in. Set to 0 to disable. OLED_FADE_OUT Not defined Enables fade out animation. Use together with OLED_TIMEOUT . OLED_FADE_OUT_INTERVAL 0 The speed of fade out animation, from 0 to 15. Larger values are slower. OLED_SCROLL_TIMEOUT 0 Scrolls the OLED screen after 0ms of OLED inactivity. Helps reduce OLED Burn-in. Set to 0 to disable. OLED_SCROLL_TIMEOUT_RIGHT Not defined Scroll timeout direction is right when defined, left when undefined. OLED_IC OLED_IC_SSD1306 Set to OLED_IC_SH1106 if you're using the SH1106 OLED controller. OLED_COLUMN_OFFSET 0 (SH1106 only.) Shift output to the right this many pixels. Useful for 128x64 displays centered on a 132x64 SH1106 IC. OLED_BRIGHTNESS 255 The default brightness level of the OLED, from 0 to 255. OLED_UPDATE_INTERVAL 0 Set the time interval for updating the OLED display in ms. This will improve the matrix scan rate. ## 128x64 & Custom sized OLED Displays The default display size for this feature is 128x32 and all necessary defines are precalculated with that in mind. We have added a define, OLED_DISPLAY_128X64 , to switch all the values to be used in a 128x64 display, as well as added a custom define, OLED_DISPLAY_CUSTOM , that allows you to provide the necessary values to the driver. Define Default Description OLED_DISPLAY_128X64 Not defined Changes the display defines for use with 128x64 displays. OLED_DISPLAY_CUSTOM Not defined Changes the display defines for use with custom displays. Requires user to implement the below defines. OLED_DISPLAY_WIDTH 128 The width of the OLED display. OLED_DISPLAY_HEIGHT 32 The height of the OLED display. OLED_MATRIX_SIZE 512 The local buffer size to allocate. (OLED_DISPLAY_HEIGHT / 8 * OLED_DISPLAY_WIDTH) . OLED_BLOCK_TYPE uint16_t The unsigned integer type to use for dirty rendering. OLED_BLOCK_COUNT 16 The number of blocks the display is divided into for dirty rendering. (sizeof(OLED_BLOCK_TYPE) * 8) . OLED_BLOCK_SIZE 32 The size of each block for dirty rendering (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT) . OLED_COM_PINS COM_PINS_SEQ How the SSD1306 chip maps it's memory to display. Options are COM_PINS_SEQ , COM_PINS_ALT , COM_PINS_SEQ_LR , & COM_PINS_ALT_LR . OLED_SOURCE_MAP { 0, ... N } Precalculated source array to use for mapping source buffer to target OLED memory in 90 degree rendering. OLED_TARGET_MAP { 24, ... N } Precalculated target array to use for mapping source buffer to target OLED memory in 90 degree rendering. 90 Degree Rotation - Technical Mumbo Jumbo \u00b6 Warning Rotation is unsupported on the SH1106. // OLED Rotation enum values are flags typedef enum { OLED_ROTATION_0 = 0 , OLED_ROTATION_90 = 1 , OLED_ROTATION_180 = 2 , OLED_ROTATION_270 = 3 , // OLED_ROTATION_90 | OLED_ROTATION_180 } oled_rotation_t ; OLED displays driven by SSD1306 drivers only natively support in hardware 0 degree and 180 degree rendering. This feature is done in software and not free. Using this feature will increase the time to calculate what data to send over i2c to the OLED. If you are strapped for cycles, this can cause keycodes to not register. In testing however, the rendering time on an ATmega32U4 board only went from 2ms to 5ms and keycodes not registering was only noticed once we hit 15ms. 90 degree rotation is achieved by using bitwise operations to rotate each 8 block of memory and uses two precalculated arrays to remap buffer memory to OLED memory. The memory map defines are precalculated for remap performance and are calculated based on the display height, width, and block size. For example, in the 128x32 implementation with a uint8_t block type, we have a 64 byte block size. This gives us eight 8 byte blocks that need to be rotated and rendered. The OLED renders horizontally two 8 byte blocks before moving down a page, e.g: 0 1 2 3 4 5 6 7 However the local buffer is stored as if it was Height x Width display instead of Width x Height, e.g: 3 7 2 6 1 5 0 4 So those precalculated arrays just index the memory offsets in the order in which each one iterates its data. OLED API \u00b6 // OLED rotation enum values are flags typedef enum { OLED_ROTATION_0 = 0 , OLED_ROTATION_90 = 1 , OLED_ROTATION_180 = 2 , OLED_ROTATION_270 = 3 , // OLED_ROTATION_90 | OLED_ROTATION_180 } oled_rotation_t ; // Initialize the OLED display, rotating the rendered output based on the define passed in. // Returns true if the OLED was initialized successfully bool oled_init ( oled_rotation_t rotation ); // Called at the start of oled_init, weak function overridable by the user // rotation - the value passed into oled_init // Return new oled_rotation_t if you want to override default rotation oled_rotation_t oled_init_user ( oled_rotation_t rotation ); // Clears the display buffer, resets cursor position to 0, and sets the buffer to dirty for rendering void oled_clear ( void ); // Renders the dirty chunks of the buffer to OLED display void oled_render ( void ); // Moves cursor to character position indicated by column and line, wraps if out of bounds // Max column denoted by 'oled_max_chars()' and max lines by 'oled_max_lines()' functions void oled_set_cursor ( uint8_t col , uint8_t line ); // Advances the cursor to the next page, writing ' ' if true // Wraps to the begining when out of bounds void oled_advance_page ( bool clearPageRemainder ); // Moves the cursor forward 1 character length // Advance page if there is not enough room for the next character // Wraps to the begining when out of bounds void oled_advance_char ( void ); // Writes a single character to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Main handler that writes character data to the display buffer void oled_write_char ( const char data , bool invert ); // Writes a string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true void oled_write ( const char * data , bool invert ); // Writes a string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Advances the cursor to the next page, wiring ' ' to the remainder of the current page void oled_write_ln ( const char * data , bool invert ); // Pans the buffer to the right (or left by passing true) by moving contents of the buffer // Useful for moving the screen in preparation for new drawing // oled_scroll_left or oled_scroll_right should be preferred for all cases of moving a static // image such as a logo or to avoid burn-in as it's much, much less cpu intensive void oled_pan ( bool left ); // Returns a pointer to the requested start index in the buffer plus remaining // buffer length as struct oled_buffer_reader_t oled_read_raw ( uint16_t start_index ); // Writes a string to the buffer at current cursor position void oled_write_raw ( const char * data , uint16_t size ); // Writes a single byte into the buffer at the specified index void oled_write_raw_byte ( const char data , uint16_t index ); // Sets a specific pixel on or off // Coordinates start at top-left and go right and down for positive x and y void oled_write_pixel ( uint8_t x , uint8_t y , bool on ); // Writes a PROGMEM string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Remapped to call 'void oled_write(const char *data, bool invert);' on ARM void oled_write_P ( const char * data , bool invert ); // Writes a PROGMEM string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Advances the cursor to the next page, wiring ' ' to the remainder of the current page // Remapped to call 'void oled_write_ln(const char *data, bool invert);' on ARM void oled_write_ln_P ( const char * data , bool invert ); // Writes a PROGMEM string to the buffer at current cursor position void oled_write_raw_P ( const char * data , uint16_t size ); // Can be used to manually turn on the screen if it is off // Returns true if the screen was on or turns on bool oled_on ( void ); // Can be used to manually turn off the screen if it is on // Returns true if the screen was off or turns off bool oled_off ( void ); // Returns true if the oled is currently on, false if it is // not bool is_oled_on ( void ); // Sets the brightness level of the display uint8_t oled_set_brightness ( uint8_t level ); // Gets the current brightness level of the display uint8_t oled_get_brightness ( void ); // Basically it's oled_render, but with timeout management and oled_task_user calling! void oled_task ( void ); // Called at the start of oled_task, weak function overridable by the user void oled_task_user ( void ); // Set the specific 8 lines rows of the screen to scroll. // 0 is the default for start, and 7 for end, which is the entire // height of the screen. For 128x32 screens, rows 4-7 are not used. void oled_scroll_set_area ( uint8_t start_line , uint8_t end_line ); // Sets scroll speed, 0-7, fastest to slowest. Default is three. // Does not take effect until scrolling is either started or restarted // the ssd1306 supports 8 speeds with the delay // listed below betwen each frame of the scrolling effect // 0=2, 1=3, 2=4, 3=5, 4=25, 5=64, 6=128, 7=256 void oled_scroll_set_speed ( uint8_t speed ); // Begin scrolling the entire display right // Returns true if the screen was scrolling or starts scrolling // NOTE: display contents cannot be changed while scrolling bool oled_scroll_right ( void ); // Begin scrolling the entire display left // Returns true if the screen was scrolling or starts scrolling // NOTE: display contents cannot be changed while scrolling bool oled_scroll_left ( void ); // Turns off display scrolling // Returns true if the screen was not scrolling or stops scrolling bool oled_scroll_off ( void ); // Returns the maximum number of characters that will fit on a line uint8_t oled_max_chars ( void ); // Returns the maximum number of lines that will fit on the OLED uint8_t oled_max_lines ( void ); Warning Scrolling and rotation are unsupported on the SH1106. SSD1306.h Driver Conversion Guide \u00b6 Old API Recommended New API struct CharacterMatrix removed - delete all references iota_gfx_init oled_init iota_gfx_on oled_on iota_gfx_off oled_off iota_gfx_flush oled_render iota_gfx_write_char oled_write_char iota_gfx_write oled_write iota_gfx_write_P oled_write_P iota_gfx_clear_screen oled_clear matrix_clear removed - delete all references matrix_write_char_inner oled_write_char matrix_write_char oled_write_char matrix_write oled_write matrix_write_ln oled_write_ln matrix_write_P oled_write_P matrix_write_ln_P oled_write_ln_P matrix_render oled_render iota_gfx_task oled_task iota_gfx_task_user oled_task_user","title":"OLED\u9a71\u52a8"},{"location":"feature_oled_driver/#oled-driver","text":"","title":"OLED Driver"},{"location":"feature_oled_driver/#supported-hardware","text":"OLED modules using SSD1306 or SH1106 driver ICs, communicating over I2C. Tested combinations: IC Size Platform Notes SSD1306 128x32 AVR Primary support SSD1306 128x64 AVR Verified working SSD1306 128x32 Arm SH1106 128x64 AVR No rotation or scrolling Hardware configurations using Arm-based microcontrollers or different sizes of OLED modules may be compatible, but are untested. Warning This OLED driver currently uses the new i2c_master driver from Split Common code. If your split keyboard uses I2C to communicate between sides, this driver could cause an address conflict (serial is fine). Please contact your keyboard vendor and ask them to migrate to the latest Split Common code to fix this. In addition, the display timeout system to reduce OLED burn-in also uses Split Common to detect keypresses, so you will need to implement custom timeout logic for non-Split Common keyboards.","title":"Supported Hardware"},{"location":"feature_oled_driver/#usage","text":"To enable the OLED feature, there are three steps. First, when compiling your keyboard, you'll need to add the following to your rules.mk : OLED_DRIVER_ENABLE = yes Then in your keymap.c file, implement the OLED task call. This example assumes your keymap has three layers named _QWERTY , _FN and _ADJ : #ifdef OLED_DRIVER_ENABLE void oled_task_user ( void ) { // Host Keyboard Layer Status oled_write_P ( PSTR ( \"Layer: \" ), false ); switch ( get_highest_layer ( layer_state )) { case _QWERTY : oled_write_P ( PSTR ( \"Default \\n \" ), false ); break ; case _FN : oled_write_P ( PSTR ( \"FN \\n \" ), false ); break ; case _ADJ : oled_write_P ( PSTR ( \"ADJ \\n \" ), false ); break ; default : // Or use the write_ln shortcut over adding '\\n' to the end of your string oled_write_ln_P ( PSTR ( \"Undefined\" ), false ); } // Host Keyboard LED Status led_t led_state = host_keyboard_led_state (); oled_write_P ( led_state . num_lock ? PSTR ( \"NUM \" ) : PSTR ( \" \" ), false ); oled_write_P ( led_state . caps_lock ? PSTR ( \"CAP \" ) : PSTR ( \" \" ), false ); oled_write_P ( led_state . scroll_lock ? PSTR ( \"SCR \" ) : PSTR ( \" \" ), false ); } #endif","title":"Usage"},{"location":"feature_oled_driver/#logo-example","text":"In the default font, certain ranges of characters are reserved for a QMK logo. To render this logo to the OLED screen, use the following code example: static void render_logo ( void ) { static const char PROGMEM qmk_logo [] = { 0x80 , 0x81 , 0x82 , 0x83 , 0x84 , 0x85 , 0x86 , 0x87 , 0x88 , 0x89 , 0x8A , 0x8B , 0x8C , 0x8D , 0x8E , 0x8F , 0x90 , 0x91 , 0x92 , 0x93 , 0x94 , 0xA0 , 0xA1 , 0xA2 , 0xA3 , 0xA4 , 0xA5 , 0xA6 , 0xA7 , 0xA8 , 0xA9 , 0xAA , 0xAB , 0xAC , 0xAD , 0xAE , 0xAF , 0xB0 , 0xB1 , 0xB2 , 0xB3 , 0xB4 , 0xC0 , 0xC1 , 0xC2 , 0xC3 , 0xC4 , 0xC5 , 0xC6 , 0xC7 , 0xC8 , 0xC9 , 0xCA , 0xCB , 0xCC , 0xCD , 0xCE , 0xCF , 0xD0 , 0xD1 , 0xD2 , 0xD3 , 0xD4 , 0x00 }; oled_write_P ( qmk_logo , false ); }","title":"Logo Example"},{"location":"feature_oled_driver/#buffer-read-example","text":"For some purposes, you may need to read the current state of the OLED display buffer. The oled_read_raw function can be used to safely read bytes from the buffer. In this example, calling fade_display in the oled_task_user function will slowly fade away whatever is on the screen by turning random pixels black over time. //Setup some mask which can be or'd with bytes to turn off pixels const uint8_t single_bit_masks [ 8 ] = { 127 , 191 , 223 , 239 , 247 , 251 , 253 , 254 }; static void fade_display ( void ) { //Define the reader structure oled_buffer_reader_t reader ; uint8_t buff_char ; if ( random () % 30 == 0 ) { srand ( timer_read ()); // Fetch a pointer for the buffer byte at index 0. The return structure // will have the pointer and the number of bytes remaining from this // index position if we want to perform a sequential read by // incrementing the buffer pointer reader = oled_read_raw ( 0 ); //Loop over the remaining buffer and erase pixels as we go for ( uint16_t i = 0 ; i < reader . remaining_element_count ; i ++ ) { //Get the actual byte in the buffer by dereferencing the pointer buff_char = * reader . current_element ; if ( buff_char != 0 ) { oled_write_raw_byte ( buff_char & single_bit_masks [ rand () % 8 ], i ); } //increment the pointer to fetch a new byte during the next loop reader . current_element ++ ; } } }","title":"Buffer Read Example"},{"location":"feature_oled_driver/#other-examples","text":"In split keyboards, it is very common to have two OLED displays that each render different content and are oriented or flipped differently. You can do this by switching which content to render by using the return value from is_keyboard_master() or is_keyboard_left() found in split_util.h , e.g: #ifdef OLED_DRIVER_ENABLE oled_rotation_t oled_init_user ( oled_rotation_t rotation ) { if ( ! is_keyboard_master ()) { return OLED_ROTATION_180 ; // flips the display 180 degrees if offhand } return rotation ; } void oled_task_user ( void ) { if ( is_keyboard_master ()) { render_status (); // Renders the current keyboard state (layer, lock, caps, scroll, etc) } else { render_logo (); // Renders a static logo oled_scroll_left (); // Turns on scrolling } } #endif","title":"Other Examples"},{"location":"feature_oled_driver/#basic-configuration","text":"Define Default Description OLED_DISPLAY_ADDRESS 0x3C The i2c address of the OLED Display OLED_FONT_H \"glcdfont.c\" The font code file to use for custom fonts OLED_FONT_START 0 The starting character index for custom fonts OLED_FONT_END 223 The ending character index for custom fonts OLED_FONT_WIDTH 6 The font width OLED_FONT_HEIGHT 8 The font height (untested) OLED_TIMEOUT 60000 Turns off the OLED screen after 60000ms of keyboard inactivity. Helps reduce OLED Burn-in. Set to 0 to disable. OLED_FADE_OUT Not defined Enables fade out animation. Use together with OLED_TIMEOUT . OLED_FADE_OUT_INTERVAL 0 The speed of fade out animation, from 0 to 15. Larger values are slower. OLED_SCROLL_TIMEOUT 0 Scrolls the OLED screen after 0ms of OLED inactivity. Helps reduce OLED Burn-in. Set to 0 to disable. OLED_SCROLL_TIMEOUT_RIGHT Not defined Scroll timeout direction is right when defined, left when undefined. OLED_IC OLED_IC_SSD1306 Set to OLED_IC_SH1106 if you're using the SH1106 OLED controller. OLED_COLUMN_OFFSET 0 (SH1106 only.) Shift output to the right this many pixels. Useful for 128x64 displays centered on a 132x64 SH1106 IC. OLED_BRIGHTNESS 255 The default brightness level of the OLED, from 0 to 255. OLED_UPDATE_INTERVAL 0 Set the time interval for updating the OLED display in ms. This will improve the matrix scan rate. ## 128x64 & Custom sized OLED Displays The default display size for this feature is 128x32 and all necessary defines are precalculated with that in mind. We have added a define, OLED_DISPLAY_128X64 , to switch all the values to be used in a 128x64 display, as well as added a custom define, OLED_DISPLAY_CUSTOM , that allows you to provide the necessary values to the driver. Define Default Description OLED_DISPLAY_128X64 Not defined Changes the display defines for use with 128x64 displays. OLED_DISPLAY_CUSTOM Not defined Changes the display defines for use with custom displays. Requires user to implement the below defines. OLED_DISPLAY_WIDTH 128 The width of the OLED display. OLED_DISPLAY_HEIGHT 32 The height of the OLED display. OLED_MATRIX_SIZE 512 The local buffer size to allocate. (OLED_DISPLAY_HEIGHT / 8 * OLED_DISPLAY_WIDTH) . OLED_BLOCK_TYPE uint16_t The unsigned integer type to use for dirty rendering. OLED_BLOCK_COUNT 16 The number of blocks the display is divided into for dirty rendering. (sizeof(OLED_BLOCK_TYPE) * 8) . OLED_BLOCK_SIZE 32 The size of each block for dirty rendering (OLED_MATRIX_SIZE / OLED_BLOCK_COUNT) . OLED_COM_PINS COM_PINS_SEQ How the SSD1306 chip maps it's memory to display. Options are COM_PINS_SEQ , COM_PINS_ALT , COM_PINS_SEQ_LR , & COM_PINS_ALT_LR . OLED_SOURCE_MAP { 0, ... N } Precalculated source array to use for mapping source buffer to target OLED memory in 90 degree rendering. OLED_TARGET_MAP { 24, ... N } Precalculated target array to use for mapping source buffer to target OLED memory in 90 degree rendering.","title":"Basic Configuration"},{"location":"feature_oled_driver/#90-degree-rotation-technical-mumbo-jumbo","text":"Warning Rotation is unsupported on the SH1106. // OLED Rotation enum values are flags typedef enum { OLED_ROTATION_0 = 0 , OLED_ROTATION_90 = 1 , OLED_ROTATION_180 = 2 , OLED_ROTATION_270 = 3 , // OLED_ROTATION_90 | OLED_ROTATION_180 } oled_rotation_t ; OLED displays driven by SSD1306 drivers only natively support in hardware 0 degree and 180 degree rendering. This feature is done in software and not free. Using this feature will increase the time to calculate what data to send over i2c to the OLED. If you are strapped for cycles, this can cause keycodes to not register. In testing however, the rendering time on an ATmega32U4 board only went from 2ms to 5ms and keycodes not registering was only noticed once we hit 15ms. 90 degree rotation is achieved by using bitwise operations to rotate each 8 block of memory and uses two precalculated arrays to remap buffer memory to OLED memory. The memory map defines are precalculated for remap performance and are calculated based on the display height, width, and block size. For example, in the 128x32 implementation with a uint8_t block type, we have a 64 byte block size. This gives us eight 8 byte blocks that need to be rotated and rendered. The OLED renders horizontally two 8 byte blocks before moving down a page, e.g: 0 1 2 3 4 5 6 7 However the local buffer is stored as if it was Height x Width display instead of Width x Height, e.g: 3 7 2 6 1 5 0 4 So those precalculated arrays just index the memory offsets in the order in which each one iterates its data.","title":"90 Degree Rotation - Technical Mumbo Jumbo"},{"location":"feature_oled_driver/#oled-api","text":"// OLED rotation enum values are flags typedef enum { OLED_ROTATION_0 = 0 , OLED_ROTATION_90 = 1 , OLED_ROTATION_180 = 2 , OLED_ROTATION_270 = 3 , // OLED_ROTATION_90 | OLED_ROTATION_180 } oled_rotation_t ; // Initialize the OLED display, rotating the rendered output based on the define passed in. // Returns true if the OLED was initialized successfully bool oled_init ( oled_rotation_t rotation ); // Called at the start of oled_init, weak function overridable by the user // rotation - the value passed into oled_init // Return new oled_rotation_t if you want to override default rotation oled_rotation_t oled_init_user ( oled_rotation_t rotation ); // Clears the display buffer, resets cursor position to 0, and sets the buffer to dirty for rendering void oled_clear ( void ); // Renders the dirty chunks of the buffer to OLED display void oled_render ( void ); // Moves cursor to character position indicated by column and line, wraps if out of bounds // Max column denoted by 'oled_max_chars()' and max lines by 'oled_max_lines()' functions void oled_set_cursor ( uint8_t col , uint8_t line ); // Advances the cursor to the next page, writing ' ' if true // Wraps to the begining when out of bounds void oled_advance_page ( bool clearPageRemainder ); // Moves the cursor forward 1 character length // Advance page if there is not enough room for the next character // Wraps to the begining when out of bounds void oled_advance_char ( void ); // Writes a single character to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Main handler that writes character data to the display buffer void oled_write_char ( const char data , bool invert ); // Writes a string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true void oled_write ( const char * data , bool invert ); // Writes a string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Advances the cursor to the next page, wiring ' ' to the remainder of the current page void oled_write_ln ( const char * data , bool invert ); // Pans the buffer to the right (or left by passing true) by moving contents of the buffer // Useful for moving the screen in preparation for new drawing // oled_scroll_left or oled_scroll_right should be preferred for all cases of moving a static // image such as a logo or to avoid burn-in as it's much, much less cpu intensive void oled_pan ( bool left ); // Returns a pointer to the requested start index in the buffer plus remaining // buffer length as struct oled_buffer_reader_t oled_read_raw ( uint16_t start_index ); // Writes a string to the buffer at current cursor position void oled_write_raw ( const char * data , uint16_t size ); // Writes a single byte into the buffer at the specified index void oled_write_raw_byte ( const char data , uint16_t index ); // Sets a specific pixel on or off // Coordinates start at top-left and go right and down for positive x and y void oled_write_pixel ( uint8_t x , uint8_t y , bool on ); // Writes a PROGMEM string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Remapped to call 'void oled_write(const char *data, bool invert);' on ARM void oled_write_P ( const char * data , bool invert ); // Writes a PROGMEM string to the buffer at current cursor position // Advances the cursor while writing, inverts the pixels if true // Advances the cursor to the next page, wiring ' ' to the remainder of the current page // Remapped to call 'void oled_write_ln(const char *data, bool invert);' on ARM void oled_write_ln_P ( const char * data , bool invert ); // Writes a PROGMEM string to the buffer at current cursor position void oled_write_raw_P ( const char * data , uint16_t size ); // Can be used to manually turn on the screen if it is off // Returns true if the screen was on or turns on bool oled_on ( void ); // Can be used to manually turn off the screen if it is on // Returns true if the screen was off or turns off bool oled_off ( void ); // Returns true if the oled is currently on, false if it is // not bool is_oled_on ( void ); // Sets the brightness level of the display uint8_t oled_set_brightness ( uint8_t level ); // Gets the current brightness level of the display uint8_t oled_get_brightness ( void ); // Basically it's oled_render, but with timeout management and oled_task_user calling! void oled_task ( void ); // Called at the start of oled_task, weak function overridable by the user void oled_task_user ( void ); // Set the specific 8 lines rows of the screen to scroll. // 0 is the default for start, and 7 for end, which is the entire // height of the screen. For 128x32 screens, rows 4-7 are not used. void oled_scroll_set_area ( uint8_t start_line , uint8_t end_line ); // Sets scroll speed, 0-7, fastest to slowest. Default is three. // Does not take effect until scrolling is either started or restarted // the ssd1306 supports 8 speeds with the delay // listed below betwen each frame of the scrolling effect // 0=2, 1=3, 2=4, 3=5, 4=25, 5=64, 6=128, 7=256 void oled_scroll_set_speed ( uint8_t speed ); // Begin scrolling the entire display right // Returns true if the screen was scrolling or starts scrolling // NOTE: display contents cannot be changed while scrolling bool oled_scroll_right ( void ); // Begin scrolling the entire display left // Returns true if the screen was scrolling or starts scrolling // NOTE: display contents cannot be changed while scrolling bool oled_scroll_left ( void ); // Turns off display scrolling // Returns true if the screen was not scrolling or stops scrolling bool oled_scroll_off ( void ); // Returns the maximum number of characters that will fit on a line uint8_t oled_max_chars ( void ); // Returns the maximum number of lines that will fit on the OLED uint8_t oled_max_lines ( void ); Warning Scrolling and rotation are unsupported on the SH1106.","title":"OLED API"},{"location":"feature_oled_driver/#ssd1306h-driver-conversion-guide","text":"Old API Recommended New API struct CharacterMatrix removed - delete all references iota_gfx_init oled_init iota_gfx_on oled_on iota_gfx_off oled_off iota_gfx_flush oled_render iota_gfx_write_char oled_write_char iota_gfx_write oled_write iota_gfx_write_P oled_write_P iota_gfx_clear_screen oled_clear matrix_clear removed - delete all references matrix_write_char_inner oled_write_char matrix_write_char oled_write_char matrix_write oled_write matrix_write_ln oled_write_ln matrix_write_P oled_write_P matrix_write_ln_P oled_write_ln_P matrix_render oled_render iota_gfx_task oled_task iota_gfx_task_user oled_task_user","title":"SSD1306.h Driver Conversion Guide"},{"location":"feature_pointing_device/","text":"Pointing Device \u00b6 Pointing Device is a generic name for a feature intended to be generic: moving the system pointer around. There are certainly other options for it - like mousekeys - but this aims to be easily modifiable and lightweight. You can implement custom keys to control functionality, or you can gather information from other peripherals and insert it directly here - let QMK handle the processing for you. To enable Pointing Device, uncomment the following line in your rules.mk: POINTING_DEVICE_ENABLE = yes To manipulate the mouse report, you can use the following functions: pointing_device_get_report() - Returns the current report_mouse_t that represents the information sent to the host computer pointing_device_set_report(report_mouse_t newMouseReport) - Overrides and saves the report_mouse_t to be sent to the host computer Keep in mind that a report_mouse_t (here \"mouseReport\") has the following properties: mouseReport.x - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing movement (+ to the right, - to the left) on the x axis. mouseReport.y - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing movement (+ upward, - downward) on the y axis. mouseReport.v - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing vertical scrolling (+ upward, - downward). mouseReport.h - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing horizontal scrolling (+ right, - left). mouseReport.buttons - this is a uint8_t in which all 8 bits are used. These bits represent the mouse button state - bit 0 is mouse button 1, and bit 7 is mouse button 8. Once you have made the necessary changes to the mouse report, you need to send it: pointing_device_send() - Sends the mouse report to the host and zeroes out the report. When the mouse report is sent, the x, y, v, and h values are set to 0 (this is done in pointing_device_send() , which can be overridden to avoid this behavior). This way, button states persist, but movement will only occur once. For further customization, both pointing_device_init and pointing_device_task can be overridden. Additionally, by default, pointing_device_send() will only send a report when the report has actually changed. This prevents it from continuously sending mouse reports, which will keep the host system awake. This behavior can be changed by creating your own pointing_device_send() function. Also, you use the has_mouse_report_changed(new, old) function to check to see if the report has changed. In the following example, a custom key is used to click the mouse and scroll 127 units vertically and horizontally, then undo all of that when released - because that's a totally useful function. Listen, this is an example: case MS_SPECIAL : report_mouse_t currentReport = pointing_device_get_report (); if ( record -> event . pressed ) { currentReport . v = 127 ; currentReport . h = 127 ; currentReport . buttons |= MOUSE_BTN1 ; // this is defined in report.h } else { currentReport . v = -127 ; currentReport . h = -127 ; currentReport . buttons &= ~ MOUSE_BTN1 ; } pointing_device_set_report ( currentReport ); pointing_device_send (); break ; Recall that the mouse report is set to zero (except the buttons) whenever it is sent, so the scrolling would only occur once in each case.","title":"\u6307\u9488\u8bbe\u5907"},{"location":"feature_pointing_device/#pointing-device","text":"Pointing Device is a generic name for a feature intended to be generic: moving the system pointer around. There are certainly other options for it - like mousekeys - but this aims to be easily modifiable and lightweight. You can implement custom keys to control functionality, or you can gather information from other peripherals and insert it directly here - let QMK handle the processing for you. To enable Pointing Device, uncomment the following line in your rules.mk: POINTING_DEVICE_ENABLE = yes To manipulate the mouse report, you can use the following functions: pointing_device_get_report() - Returns the current report_mouse_t that represents the information sent to the host computer pointing_device_set_report(report_mouse_t newMouseReport) - Overrides and saves the report_mouse_t to be sent to the host computer Keep in mind that a report_mouse_t (here \"mouseReport\") has the following properties: mouseReport.x - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing movement (+ to the right, - to the left) on the x axis. mouseReport.y - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing movement (+ upward, - downward) on the y axis. mouseReport.v - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing vertical scrolling (+ upward, - downward). mouseReport.h - this is a signed int from -127 to 127 (not 128, this is defined in USB HID spec) representing horizontal scrolling (+ right, - left). mouseReport.buttons - this is a uint8_t in which all 8 bits are used. These bits represent the mouse button state - bit 0 is mouse button 1, and bit 7 is mouse button 8. Once you have made the necessary changes to the mouse report, you need to send it: pointing_device_send() - Sends the mouse report to the host and zeroes out the report. When the mouse report is sent, the x, y, v, and h values are set to 0 (this is done in pointing_device_send() , which can be overridden to avoid this behavior). This way, button states persist, but movement will only occur once. For further customization, both pointing_device_init and pointing_device_task can be overridden. Additionally, by default, pointing_device_send() will only send a report when the report has actually changed. This prevents it from continuously sending mouse reports, which will keep the host system awake. This behavior can be changed by creating your own pointing_device_send() function. Also, you use the has_mouse_report_changed(new, old) function to check to see if the report has changed. In the following example, a custom key is used to click the mouse and scroll 127 units vertically and horizontally, then undo all of that when released - because that's a totally useful function. Listen, this is an example: case MS_SPECIAL : report_mouse_t currentReport = pointing_device_get_report (); if ( record -> event . pressed ) { currentReport . v = 127 ; currentReport . h = 127 ; currentReport . buttons |= MOUSE_BTN1 ; // this is defined in report.h } else { currentReport . v = -127 ; currentReport . h = -127 ; currentReport . buttons &= ~ MOUSE_BTN1 ; } pointing_device_set_report ( currentReport ); pointing_device_send (); break ; Recall that the mouse report is set to zero (except the buttons) whenever it is sent, so the scrolling would only occur once in each case.","title":"Pointing Device"},{"location":"feature_ps2_mouse/","text":"PS/2 Mouse Support {: id=ps }2-mouse-support \u00b6 Its possible to hook up a PS/2 mouse (for example touchpads or trackpoints) to your keyboard as a composite device. To hook up a Trackpoint, you need to obtain a Trackpoint module (i.e. harvest from a Thinkpad keyboard), identify the function of each pin of the module, and make the necessary circuitry between controller and Trackpoint module. For more information, please refer to Trackpoint Hardware page on Deskthority Wiki. There are three available modes for hooking up PS/2 devices: USART (best), interrupts (better) or busywait (not recommended). The Circuitry between Trackpoint and Controller \u00b6 To get the things working, a 4.7K drag is needed between the two lines DATA and CLK and the line 5+. DATA ----------+--------- PIN | 4.7K | MODULE 5+ --------+--+--------- PWR CONTROLLER | 4.7K | CLK ------+------------ PIN Busywait Version \u00b6 Note: This is not recommended, you may encounter jerky movement or unsent inputs. Please use interrupt or USART version if possible. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_BUSYWAIT = yes In your keyboard config.h: #ifdef PS2_USE_BUSYWAIT # define PS2_CLOCK_PORT PORTD # define PS2_CLOCK_PIN PIND # define PS2_CLOCK_DDR DDRD # define PS2_CLOCK_BIT 1 # define PS2_DATA_PORT PORTD # define PS2_DATA_PIN PIND # define PS2_DATA_DDR DDRD # define PS2_DATA_BIT 2 #endif Interrupt Version \u00b6 The following example uses D2 for clock and D5 for data. You can use any INT or PCINT pin for clock, and any pin for data. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_INT = yes In your keyboard config.h: #ifdef PS2_USE_INT #define PS2_CLOCK_PORT PORTD #define PS2_CLOCK_PIN PIND #define PS2_CLOCK_DDR DDRD #define PS2_CLOCK_BIT 2 #define PS2_DATA_PORT PORTD #define PS2_DATA_PIN PIND #define PS2_DATA_DDR DDRD #define PS2_DATA_BIT 5 #define PS2_INT_INIT() do { \\ EICRA |= ((1<<ISC21) | \\ (0<<ISC20)); \\ } while (0) #define PS2_INT_ON() do { \\ EIMSK |= (1<<INT2); \\ } while (0) #define PS2_INT_OFF() do { \\ EIMSK &= ~(1<<INT2); \\ } while (0) #define PS2_INT_VECT INT2_vect #endif USART Version \u00b6 To use USART on the ATMega32u4, you have to use PD5 for clock and PD2 for data. If one of those are unavailable, you need to use interrupt version. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_USART = yes In your keyboard config.h: #ifdef PS2_USE_USART #define PS2_CLOCK_PORT PORTD #define PS2_CLOCK_PIN PIND #define PS2_CLOCK_DDR DDRD #define PS2_CLOCK_BIT 5 #define PS2_DATA_PORT PORTD #define PS2_DATA_PIN PIND #define PS2_DATA_DDR DDRD #define PS2_DATA_BIT 2 /* synchronous, odd parity, 1-bit stop, 8-bit data, sample at falling edge */ /* set DDR of CLOCK as input to be slave */ #define PS2_USART_INIT() do { \\ PS2_CLOCK_DDR &= ~(1<<PS2_CLOCK_BIT); \\ PS2_DATA_DDR &= ~(1<<PS2_DATA_BIT); \\ UCSR1C = ((1 << UMSEL10) | \\ (3 << UPM10) | \\ (0 << USBS1) | \\ (3 << UCSZ10) | \\ (0 << UCPOL1)); \\ UCSR1A = 0; \\ UBRR1H = 0; \\ UBRR1L = 0; \\ } while (0) #define PS2_USART_RX_INT_ON() do { \\ UCSR1B = ((1 << RXCIE1) | \\ (1 << RXEN1)); \\ } while (0) #define PS2_USART_RX_POLL_ON() do { \\ UCSR1B = (1 << RXEN1); \\ } while (0) #define PS2_USART_OFF() do { \\ UCSR1C = 0; \\ UCSR1B &= ~((1 << RXEN1) | \\ (1 << TXEN1)); \\ } while (0) #define PS2_USART_RX_READY (UCSR1A & (1<<RXC1)) #define PS2_USART_RX_DATA UDR1 #define PS2_USART_ERROR (UCSR1A & ((1<<FE1) | (1<<DOR1) | (1<<UPE1))) #define PS2_USART_RX_VECT USART1_RX_vect #endif Additional Settings \u00b6 PS/2 Mouse Features {: id=ps }2-mouse-features \u00b6 These enable settings supported by the PS/2 mouse protocol. /* Use remote mode instead of the default stream mode (see link) */ #define PS2_MOUSE_USE_REMOTE_MODE /* Enable the scrollwheel or scroll gesture on your mouse or touchpad */ #define PS2_MOUSE_ENABLE_SCROLLING /* Some mice will need a scroll mask to be configured. The default is 0xFF. */ #define PS2_MOUSE_SCROLL_MASK 0x0F /* Applies a transformation to the movement before sending to the host (see link) */ #define PS2_MOUSE_USE_2_1_SCALING /* The time to wait after initializing the ps2 host */ #define PS2_MOUSE_INIT_DELAY 1000 /* Default */ You can also call the following functions from ps2_mouse.h void ps2_mouse_disable_data_reporting ( void ); void ps2_mouse_enable_data_reporting ( void ); void ps2_mouse_set_remote_mode ( void ); void ps2_mouse_set_stream_mode ( void ); void ps2_mouse_set_scaling_2_1 ( void ); void ps2_mouse_set_scaling_1_1 ( void ); void ps2_mouse_set_resolution ( ps2_mouse_resolution_t resolution ); void ps2_mouse_set_sample_rate ( ps2_mouse_sample_rate_t sample_rate ); Fine Control \u00b6 Use the following defines to change the sensitivity and speed of the mouse. Note: you can also use ps2_mouse_set_resolution for the same effect (not supported on most touchpads). #define PS2_MOUSE_X_MULTIPLIER 3 #define PS2_MOUSE_Y_MULTIPLIER 3 #define PS2_MOUSE_V_MULTIPLIER 1 Scroll Button \u00b6 If you're using a trackpoint, you will likely want to be able to use it for scrolling. It's possible to enable a \"scroll button/s\" that when pressed will cause the mouse to scroll instead of moving. To enable the feature, you must set a scroll button mask as follows: #define PS2_MOUSE_SCROLL_BTN_MASK (1<<PS2_MOUSE_BTN_MIDDLE) /* Default */ To disable the scroll button feature: #define PS2_MOUSE_SCROLL_BTN_MASK 0 The available buttons are: #define PS2_MOUSE_BTN_LEFT 0 #define PS2_MOUSE_BTN_RIGHT 1 #define PS2_MOUSE_BTN_MIDDLE 2 You can also combine buttons in the mask by | ing them together. Once you've configured your scroll button mask, you must configure the scroll button send interval. This is the interval before which if the scroll buttons were released they would be sent to the host. After this interval, they will cause the mouse to scroll and will not be sent. #define PS2_MOUSE_SCROLL_BTN_SEND 300 /* Default */ To disable sending the scroll buttons: #define PS2_MOUSE_SCROLL_BTN_SEND 0 Fine control over the scrolling is supported with the following defines: #define PS2_MOUSE_SCROLL_DIVISOR_H 2 #define PS2_MOUSE_SCROLL_DIVISOR_V 2 Invert Mouse and Scroll Axes \u00b6 To invert the X and Y axes you can put: #define PS2_MOUSE_INVERT_X #define PS2_MOUSE_INVERT_Y into config.h. To reverse the scroll axes you can put: #define PS2_MOUSE_INVERT_H #define PS2_MOUSE_INVERT_V into config.h. Rotate Mouse Axes \u00b6 Transform the output of the device with a clockwise rotation of 90, 180, or 270 degrees. When compensating for device orientation, rotate the output the same amount in the opposite direction. E.g. if the normal device orientation is considered to be North-facing, compensate as follows: #define PS2_MOUSE_ROTATE 270 /* Compensate for East-facing device orientation. */ #define PS2_MOUSE_ROTATE 180 /* Compensate for South-facing device orientation. */ #define PS2_MOUSE_ROTATE 90 /* Compensate for West-facing device orientation. */ Debug Settings \u00b6 To debug the mouse, add debug_mouse = true or enable via bootmagic. /* To debug the mouse reports */ #define PS2_MOUSE_DEBUG_HID #define PS2_MOUSE_DEBUG_RAW Movement Hook \u00b6 Process mouse movement in the keymap before it is sent to the host. Example uses include filtering noise, adding acceleration, and automatically activating a layer. To use, define the following function in your keymap: void ps2_mouse_moved_user ( report_mouse_t * mouse_report );","title":"PS/2\u9f20\u6807"},{"location":"feature_ps2_mouse/#ps2-mouse-support-idps-2-mouse-support","text":"Its possible to hook up a PS/2 mouse (for example touchpads or trackpoints) to your keyboard as a composite device. To hook up a Trackpoint, you need to obtain a Trackpoint module (i.e. harvest from a Thinkpad keyboard), identify the function of each pin of the module, and make the necessary circuitry between controller and Trackpoint module. For more information, please refer to Trackpoint Hardware page on Deskthority Wiki. There are three available modes for hooking up PS/2 devices: USART (best), interrupts (better) or busywait (not recommended).","title":"PS/2 Mouse Support {: id=ps }2-mouse-support"},{"location":"feature_ps2_mouse/#the-circuitry-between-trackpoint-and-controller","text":"To get the things working, a 4.7K drag is needed between the two lines DATA and CLK and the line 5+. DATA ----------+--------- PIN | 4.7K | MODULE 5+ --------+--+--------- PWR CONTROLLER | 4.7K | CLK ------+------------ PIN","title":"The Circuitry between Trackpoint and Controller"},{"location":"feature_ps2_mouse/#busywait-version","text":"Note: This is not recommended, you may encounter jerky movement or unsent inputs. Please use interrupt or USART version if possible. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_BUSYWAIT = yes In your keyboard config.h: #ifdef PS2_USE_BUSYWAIT # define PS2_CLOCK_PORT PORTD # define PS2_CLOCK_PIN PIND # define PS2_CLOCK_DDR DDRD # define PS2_CLOCK_BIT 1 # define PS2_DATA_PORT PORTD # define PS2_DATA_PIN PIND # define PS2_DATA_DDR DDRD # define PS2_DATA_BIT 2 #endif","title":"Busywait Version"},{"location":"feature_ps2_mouse/#interrupt-version","text":"The following example uses D2 for clock and D5 for data. You can use any INT or PCINT pin for clock, and any pin for data. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_INT = yes In your keyboard config.h: #ifdef PS2_USE_INT #define PS2_CLOCK_PORT PORTD #define PS2_CLOCK_PIN PIND #define PS2_CLOCK_DDR DDRD #define PS2_CLOCK_BIT 2 #define PS2_DATA_PORT PORTD #define PS2_DATA_PIN PIND #define PS2_DATA_DDR DDRD #define PS2_DATA_BIT 5 #define PS2_INT_INIT() do { \\ EICRA |= ((1<<ISC21) | \\ (0<<ISC20)); \\ } while (0) #define PS2_INT_ON() do { \\ EIMSK |= (1<<INT2); \\ } while (0) #define PS2_INT_OFF() do { \\ EIMSK &= ~(1<<INT2); \\ } while (0) #define PS2_INT_VECT INT2_vect #endif","title":"Interrupt Version"},{"location":"feature_ps2_mouse/#usart-version","text":"To use USART on the ATMega32u4, you have to use PD5 for clock and PD2 for data. If one of those are unavailable, you need to use interrupt version. In rules.mk: PS2_MOUSE_ENABLE = yes PS2_USE_USART = yes In your keyboard config.h: #ifdef PS2_USE_USART #define PS2_CLOCK_PORT PORTD #define PS2_CLOCK_PIN PIND #define PS2_CLOCK_DDR DDRD #define PS2_CLOCK_BIT 5 #define PS2_DATA_PORT PORTD #define PS2_DATA_PIN PIND #define PS2_DATA_DDR DDRD #define PS2_DATA_BIT 2 /* synchronous, odd parity, 1-bit stop, 8-bit data, sample at falling edge */ /* set DDR of CLOCK as input to be slave */ #define PS2_USART_INIT() do { \\ PS2_CLOCK_DDR &= ~(1<<PS2_CLOCK_BIT); \\ PS2_DATA_DDR &= ~(1<<PS2_DATA_BIT); \\ UCSR1C = ((1 << UMSEL10) | \\ (3 << UPM10) | \\ (0 << USBS1) | \\ (3 << UCSZ10) | \\ (0 << UCPOL1)); \\ UCSR1A = 0; \\ UBRR1H = 0; \\ UBRR1L = 0; \\ } while (0) #define PS2_USART_RX_INT_ON() do { \\ UCSR1B = ((1 << RXCIE1) | \\ (1 << RXEN1)); \\ } while (0) #define PS2_USART_RX_POLL_ON() do { \\ UCSR1B = (1 << RXEN1); \\ } while (0) #define PS2_USART_OFF() do { \\ UCSR1C = 0; \\ UCSR1B &= ~((1 << RXEN1) | \\ (1 << TXEN1)); \\ } while (0) #define PS2_USART_RX_READY (UCSR1A & (1<<RXC1)) #define PS2_USART_RX_DATA UDR1 #define PS2_USART_ERROR (UCSR1A & ((1<<FE1) | (1<<DOR1) | (1<<UPE1))) #define PS2_USART_RX_VECT USART1_RX_vect #endif","title":"USART Version"},{"location":"feature_ps2_mouse/#additional-settings","text":"","title":"Additional Settings"},{"location":"feature_ps2_mouse/#ps2-mouse-features-idps-2-mouse-features","text":"These enable settings supported by the PS/2 mouse protocol. /* Use remote mode instead of the default stream mode (see link) */ #define PS2_MOUSE_USE_REMOTE_MODE /* Enable the scrollwheel or scroll gesture on your mouse or touchpad */ #define PS2_MOUSE_ENABLE_SCROLLING /* Some mice will need a scroll mask to be configured. The default is 0xFF. */ #define PS2_MOUSE_SCROLL_MASK 0x0F /* Applies a transformation to the movement before sending to the host (see link) */ #define PS2_MOUSE_USE_2_1_SCALING /* The time to wait after initializing the ps2 host */ #define PS2_MOUSE_INIT_DELAY 1000 /* Default */ You can also call the following functions from ps2_mouse.h void ps2_mouse_disable_data_reporting ( void ); void ps2_mouse_enable_data_reporting ( void ); void ps2_mouse_set_remote_mode ( void ); void ps2_mouse_set_stream_mode ( void ); void ps2_mouse_set_scaling_2_1 ( void ); void ps2_mouse_set_scaling_1_1 ( void ); void ps2_mouse_set_resolution ( ps2_mouse_resolution_t resolution ); void ps2_mouse_set_sample_rate ( ps2_mouse_sample_rate_t sample_rate );","title":"PS/2 Mouse Features {: id=ps }2-mouse-features"},{"location":"feature_ps2_mouse/#fine-control","text":"Use the following defines to change the sensitivity and speed of the mouse. Note: you can also use ps2_mouse_set_resolution for the same effect (not supported on most touchpads). #define PS2_MOUSE_X_MULTIPLIER 3 #define PS2_MOUSE_Y_MULTIPLIER 3 #define PS2_MOUSE_V_MULTIPLIER 1","title":"Fine Control"},{"location":"feature_ps2_mouse/#scroll-button","text":"If you're using a trackpoint, you will likely want to be able to use it for scrolling. It's possible to enable a \"scroll button/s\" that when pressed will cause the mouse to scroll instead of moving. To enable the feature, you must set a scroll button mask as follows: #define PS2_MOUSE_SCROLL_BTN_MASK (1<<PS2_MOUSE_BTN_MIDDLE) /* Default */ To disable the scroll button feature: #define PS2_MOUSE_SCROLL_BTN_MASK 0 The available buttons are: #define PS2_MOUSE_BTN_LEFT 0 #define PS2_MOUSE_BTN_RIGHT 1 #define PS2_MOUSE_BTN_MIDDLE 2 You can also combine buttons in the mask by | ing them together. Once you've configured your scroll button mask, you must configure the scroll button send interval. This is the interval before which if the scroll buttons were released they would be sent to the host. After this interval, they will cause the mouse to scroll and will not be sent. #define PS2_MOUSE_SCROLL_BTN_SEND 300 /* Default */ To disable sending the scroll buttons: #define PS2_MOUSE_SCROLL_BTN_SEND 0 Fine control over the scrolling is supported with the following defines: #define PS2_MOUSE_SCROLL_DIVISOR_H 2 #define PS2_MOUSE_SCROLL_DIVISOR_V 2","title":"Scroll Button"},{"location":"feature_ps2_mouse/#invert-mouse-and-scroll-axes","text":"To invert the X and Y axes you can put: #define PS2_MOUSE_INVERT_X #define PS2_MOUSE_INVERT_Y into config.h. To reverse the scroll axes you can put: #define PS2_MOUSE_INVERT_H #define PS2_MOUSE_INVERT_V into config.h.","title":"Invert Mouse and Scroll Axes"},{"location":"feature_ps2_mouse/#rotate-mouse-axes","text":"Transform the output of the device with a clockwise rotation of 90, 180, or 270 degrees. When compensating for device orientation, rotate the output the same amount in the opposite direction. E.g. if the normal device orientation is considered to be North-facing, compensate as follows: #define PS2_MOUSE_ROTATE 270 /* Compensate for East-facing device orientation. */ #define PS2_MOUSE_ROTATE 180 /* Compensate for South-facing device orientation. */ #define PS2_MOUSE_ROTATE 90 /* Compensate for West-facing device orientation. */","title":"Rotate Mouse Axes"},{"location":"feature_ps2_mouse/#debug-settings","text":"To debug the mouse, add debug_mouse = true or enable via bootmagic. /* To debug the mouse reports */ #define PS2_MOUSE_DEBUG_HID #define PS2_MOUSE_DEBUG_RAW","title":"Debug Settings"},{"location":"feature_ps2_mouse/#movement-hook","text":"Process mouse movement in the keymap before it is sent to the host. Example uses include filtering noise, adding acceleration, and automatically activating a layer. To use, define the following function in your keymap: void ps2_mouse_moved_user ( report_mouse_t * mouse_report );","title":"Movement Hook"},{"location":"feature_rawhid/","text":"Raw HID \u00b6 Raw HID allows for bidirectional communication between QMK and the host computer over an HID interface. This has many potential use cases, such as switching keymaps on the fly or changing RGB LED colors and modes. There are two main components to getting raw HID working with your keyboard. Keyboard firmware \u00b6 The implementation is fairly straightforward for the firmware. In your rules.mk add: RAW_ENABLE = yes In your keymap.c include \"raw_hid.h\" and implement the following: void raw_hid_receive ( uint8_t * data , uint8_t length ) { // Your code goes here. data is the packet received from host. } The \"raw_hid.h\" header also declares void raw_hid_send(uint8_t *data, uint8_t length); which allows sending packets from keyboard to host. As an example, it can also be used for debugging when building your host application by returning all data back to the host. void raw_hid_receive ( uint8_t * data , uint8_t length ) { raw_hid_send ( data , length ); } These two functions send and receive packets of length RAW_EPSIZE bytes to and from the host (32 on LUFA/ChibiOS/V-USB, 64 on ATSAM). Make sure to flash raw enabled firmware before proceeding with working on the host side. Host (Windows/macOS/Linux) \u00b6 This is the more complicated part as it will require some digging. To connect your host computer to your keyboard with raw HID you need four pieces of information about your keyboard: Vendor ID Product ID Usage Page Usage The first two can easily be found in your keyboard's config.h in the keyboard's main directory under VENDOR_ID and PRODUCT_ID . The final two can be overridden in your keyboard's config.h in the keyboard's main directory by redefining the values: #define RAW_USAGE_PAGE 0xFF60 and #define RAW_USAGE_ID 0x61 . By default, Usage Page is 0xFF60 and Usage is 0x61 . Building your host \u00b6 You can build your host using any language that has an available HID implementation library if you don't wish to make your own. The ones we know of for popular languages are: Node: node-hid . C: hidapi . Java: purejavahidapi and hid4java . Python: pyhidapi . This is not an exhaustive cross-platform list but should get you started. There are no special requirements for using raw HID so any HID library should work. Now that you have all four pieces of information required to open HID interface to your keyboard. All you need to do is use your library's available functions to open the device with its ID parameters. Note that Vendor ID and Product ID are not actually required to open the device. They are used only to filter to a specific device out of the many HID devices you have plugged in. Many libraries will give you the option to open the device using Product Name or Manufacturer Name instead, node-hid being a prime example. This will create issues for devices with builtin USB Hub or any extra HID interfaces where you will have multiple interfaces with the same name or from the same manufacturer. The Vendor ID together with Product ID create a unique designation to a single interface and will not exhibit this problem. Therefore, even if your library doesn't require you to, it is best to use them to avoid issues. Unlike Vendor ID and Product ID though, Usage Page and Usage are necessary for successful communication. It should go without saying that regardless of the library you're using, you should always make sure to close the interface when finished. Depending on the operating system and your particular environment there may be issues connecting to it again afterwards with another client or another instance of the same client if it's not explicitly closed.","title":"Raw HID"},{"location":"feature_rawhid/#raw-hid","text":"Raw HID allows for bidirectional communication between QMK and the host computer over an HID interface. This has many potential use cases, such as switching keymaps on the fly or changing RGB LED colors and modes. There are two main components to getting raw HID working with your keyboard.","title":"Raw HID"},{"location":"feature_rawhid/#keyboard-firmware","text":"The implementation is fairly straightforward for the firmware. In your rules.mk add: RAW_ENABLE = yes In your keymap.c include \"raw_hid.h\" and implement the following: void raw_hid_receive ( uint8_t * data , uint8_t length ) { // Your code goes here. data is the packet received from host. } The \"raw_hid.h\" header also declares void raw_hid_send(uint8_t *data, uint8_t length); which allows sending packets from keyboard to host. As an example, it can also be used for debugging when building your host application by returning all data back to the host. void raw_hid_receive ( uint8_t * data , uint8_t length ) { raw_hid_send ( data , length ); } These two functions send and receive packets of length RAW_EPSIZE bytes to and from the host (32 on LUFA/ChibiOS/V-USB, 64 on ATSAM). Make sure to flash raw enabled firmware before proceeding with working on the host side.","title":"Keyboard firmware"},{"location":"feature_rawhid/#host-windowsmacoslinux","text":"This is the more complicated part as it will require some digging. To connect your host computer to your keyboard with raw HID you need four pieces of information about your keyboard: Vendor ID Product ID Usage Page Usage The first two can easily be found in your keyboard's config.h in the keyboard's main directory under VENDOR_ID and PRODUCT_ID . The final two can be overridden in your keyboard's config.h in the keyboard's main directory by redefining the values: #define RAW_USAGE_PAGE 0xFF60 and #define RAW_USAGE_ID 0x61 . By default, Usage Page is 0xFF60 and Usage is 0x61 .","title":"Host (Windows/macOS/Linux)"},{"location":"feature_rawhid/#building-your-host","text":"You can build your host using any language that has an available HID implementation library if you don't wish to make your own. The ones we know of for popular languages are: Node: node-hid . C: hidapi . Java: purejavahidapi and hid4java . Python: pyhidapi . This is not an exhaustive cross-platform list but should get you started. There are no special requirements for using raw HID so any HID library should work. Now that you have all four pieces of information required to open HID interface to your keyboard. All you need to do is use your library's available functions to open the device with its ID parameters. Note that Vendor ID and Product ID are not actually required to open the device. They are used only to filter to a specific device out of the many HID devices you have plugged in. Many libraries will give you the option to open the device using Product Name or Manufacturer Name instead, node-hid being a prime example. This will create issues for devices with builtin USB Hub or any extra HID interfaces where you will have multiple interfaces with the same name or from the same manufacturer. The Vendor ID together with Product ID create a unique designation to a single interface and will not exhibit this problem. Therefore, even if your library doesn't require you to, it is best to use them to avoid issues. Unlike Vendor ID and Product ID though, Usage Page and Usage are necessary for successful communication. It should go without saying that regardless of the library you're using, you should always make sure to close the interface when finished. Depending on the operating system and your particular environment there may be issues connecting to it again afterwards with another client or another instance of the same client if it's not explicitly closed.","title":"Building your host"},{"location":"feature_rgb_matrix/","text":"RGB Matrix Lighting \u00b6 This feature allows you to use RGB LED matrices driven by external drivers. It hooks into the RGBLIGHT system so you can use the same keycodes as RGBLIGHT to control it. If you want to use single color LED's you should use the LED Matrix Subsystem instead. Driver configuration \u00b6 IS31FL3731 {: id=is }31fl3731 \u00b6 There is basic support for addressable RGB matrix lighting with the I2C IS31FL3731 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3731 You can use between 1 and 4 IS31FL3731 IC's. Do not specify DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 DRIVER_COUNT (Required) How many RGB driver IC's are present DRIVER_LED_TOTAL (Required) How many RGB lights are present across all drivers DRIVER_ADDR_1 (Required) Address for the first RGB driver DRIVER_ADDR_2 (Optional) Address for the second RGB driver DRIVER_ADDR_3 (Optional) Address for the third RGB driver DRIVER_ADDR_4 (Optional) Address for the fourth RGB driver Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0b1110100 AD <-> GND // 0b1110111 AD <-> VCC // 0b1110101 AD <-> SCL // 0b1110110 AD <-> SDA #define DRIVER_ADDR_1 0b1110100 #define DRIVER_ADDR_2 0b1110110 #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 25 #define DRIVER_2_LED_TOTAL 24 #define DRIVER_LED_TOTAL (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) Tip Note the parentheses, this is so when DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) will give very different results than rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL . Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , C1_3 , C2_3 , C3_3 }, .... } Where Cx_y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3731.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 ). IS31FL3733 {: id=is }31fl3733 \u00b6 There is basic support for addressable RGB matrix lighting with the I2C IS31FL3733 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3733 You can use between 1 and 4 IS31FL3733 IC's. Do not specify DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 DRIVER_COUNT (Required) How many RGB driver IC's are present DRIVER_LED_TOTAL (Required) How many RGB lights are present across all drivers DRIVER_ADDR_1 (Required) Address for the first RGB driver DRIVER_ADDR_2 (Optional) Address for the second RGB driver DRIVER_ADDR_3 (Optional) Address for the third RGB driver DRIVER_ADDR_4 (Optional) Address for the fourth RGB driver DRIVER_SYNC_1 (Optional) Sync configuration for the first RGB driver 0 DRIVER_SYNC_2 (Optional) Sync configuration for the second RGB driver 0 DRIVER_SYNC_3 (Optional) Sync configuration for the third RGB driver 0 DRIVER_SYNC_4 (Optional) Sync configuration for the fourth RGB driver 0 Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 00 <-> GND // 01 <-> SCL // 10 <-> SDA // 11 <-> VCC // ADDR1 represents A1:A0 of the 7-bit address. // ADDR2 represents A3:A2 of the 7-bit address. // The result is: 0b101(ADDR2)(ADDR1) #define DRIVER_ADDR_1 0b1010000 #define DRIVER_ADDR_2 0b1010011 #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 58 #define DRIVER_2_LED_TOTAL 10 #define DRIVER_LED_TOTAL (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) Tip Note the parentheses, this is so when DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) will give very different results than rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL . Currently only 4 drivers are supported, but it would be trivial to support all 8 combinations. Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , B_1 , A_1 , C_1 }, .... } Where X_Y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3733.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 for now). IS31FL3737 {: id=is }31fl3737 \u00b6 There is basic support for addressable RGB matrix lighting with the I2C IS31FL3737 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3737 Configure the hardware via your config.h : // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0000 <-> GND // 0101 <-> SCL // 1010 <-> SDA // 1111 <-> VCC // ADDR represents A3:A0 of the 7-bit address. // The result is: 0b101(ADDR) #define DRIVER_ADDR_1 0b1010000 #define DRIVER_ADDR_2 0b1010000 // this is here for compliancy reasons. #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 64 #define DRIVER_LED_TOTAL DRIVER_1_LED_TOTAL Currently only a single drivers is supported, but it would be trivial to support all 4 combinations. For now define DRIVER_ADDR_2 as DRIVER_ADDR_1 Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , B_1 , A_1 , C_1 }, .... } Where X_Y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3737.h . The driver is the index of the driver you defined in your config.h (Only 0 right now). WS2812 {: id=ws }2812 \u00b6 There is basic support for addressable RGB matrix lighting with a WS2811/WS2812{a,b,c} addressable LED strand. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = WS2812 Configure the hardware via your config.h : // The pin connected to the data pin of the LEDs #define RGB_DI_PIN D7 // The number of LEDs connected #define DRIVER_LED_TOTAL 70 APA102 {: id=apa }102 \u00b6 There is basic support for APA102 based addressable LED strands. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = APA102 Configure the hardware via your config.h : // The pin connected to the data pin of the LEDs #define RGB_DI_PIN D7 // The pin connected to the clock pin of the LEDs #define RGB_CI_PIN D6 // The number of LEDs connected #define DRIVER_LED_TOTAL 70 Common Configuration \u00b6 From this point forward the configuration is the same for all the drivers. The led_config_t struct provides a key electrical matrix to led index lookup table, what the physical position of each LED is on the board, and what type of key or usage the LED if the LED represents. Here is a brief example: led_config_t g_led_config = { { // Key Matrix to LED Index { 5 , NO_LED , NO_LED , 0 }, { NO_LED , NO_LED , NO_LED , NO_LED }, { 4 , NO_LED , NO_LED , 1 }, { 3 , NO_LED , NO_LED , 2 } }, { // LED Index to Physical Position { 188 , 16 }, { 187 , 48 }, { 149 , 64 }, { 112 , 64 }, { 37 , 48 }, { 38 , 16 } }, { // LED Index to Flag 1 , 4 , 4 , 4 , 4 , 1 } }; The first part, // Key Matrix to LED Index , tells the system what key this LED represents by using the key's electrical matrix row & col. The second part, // LED Index to Physical Position represents the LED's physical { x, y } position on the keyboard. The default expected range of values for { x, y } is the inclusive range { 0..224, 0..64 } . This default expected range is due to effects that calculate the center of the keyboard for their animations. The easiest way to calculate these positions is imagine your keyboard is a grid, and the top left of the keyboard represents { x, y } coordinate { 0, 0 } and the bottom right of your keyboard represents { 224, 64 } . Using this as a basis, you can use the following formula to calculate the physical position: x = 224 / ( NUMBER_OF_COLS - 1 ) * COL_POSITION y = 64 / ( NUMBER_OF_ROWS - 1 ) * ROW_POSITION Where NUMBER_OF_COLS, NUMBER_OF_ROWS, COL_POSITION, & ROW_POSITION are all based on the physical layout of your keyboard, not the electrical layout. As mentioned earlier, the center of the keyboard by default is expected to be { 112, 32 } , but this can be changed if you want to more accurately calculate the LED's physical { x, y } positions. Keyboard designers can implement #define RGB_MATRIX_CENTER { 112, 32 } in their config.h file with the new center point of the keyboard, or where they want it to be allowing more possibilities for the { x, y } values. Do note that the maximum value for x or y is 255, and the recommended maximum is 224 as this gives animations runoff room before they reset. // LED Index to Flag is a bitmask, whether or not a certain LEDs is of a certain type. It is recommended that LEDs are set to only 1 type. Flags \u00b6 Define Value Description HAS_FLAGS(bits, flags) n/a Evaluates to true if bits has all flags set HAS_ANY_FLAGS(bits, flags) n/a Evaluates to true if bits has any flags set LED_FLAG_NONE 0x00 If this LED has no flags LED_FLAG_ALL 0xFF If this LED has all flags LED_FLAG_MODIFIER 0x01 If the LED is on a modifier key LED_FLAG_UNDERGLOW 0x02 If the LED is for underglow LED_FLAG_KEYLIGHT 0x04 If the LED is for key backlight LED_FLAG_INDICATOR 0x08 If the LED is for keyboard state indication Keycodes \u00b6 All RGB keycodes are currently shared with the RGBLIGHT system: Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_SPI Increase effect speed (does not support eeprom yet), decrease speed when Shift is held RGB_SPD Decrease effect speed (does not support eeprom yet), increase speed when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Full gradient scrolling left to right (uses the RGB_MATRIX_CYCLE_LEFT_RIGHT mode) RGB_MODE_SWIRL RGB_M_SW Full gradient spinning pinwheel around center of keyboard (uses RGB_MATRIX_CYCLE_PINWHEEL mode) RGB_MODE_* keycodes will generally work, but not all of the modes are currently mapped to the correct effects for the RGB Matrix system. RGB_MODE_PLAIN , RGB_MODE_BREATHE , RGB_MODE_RAINBOW , and RGB_MATRIX_SWIRL are the only ones that are mapped properly. The rest don't have a direct equivalent, and are not mapped. Tip By default, if you have both the RGB Light and the RGB Matrix feature enabled, these keycodes will work for both features, at the same time. You can disable the keycode functionality by defining the *_DISABLE_KEYCODES option for the specific feature. RGB Matrix Effects \u00b6 All effects have been configured to support current configuration values (Hue, Saturation, Value, & Speed) unless otherwise noted below. These are the effects that are currently available: enum rgb_matrix_effects { RGB_MATRIX_NONE = 0 , RGB_MATRIX_SOLID_COLOR = 1 , // Static single hue, no speed support RGB_MATRIX_ALPHAS_MODS , // Static dual hue, speed is hue for secondary hue RGB_MATRIX_GRADIENT_UP_DOWN , // Static gradient top to bottom, speed controls how much gradient changes RGB_MATRIX_GRADIENT_LEFT_RIGHT , // Static gradient left to right, speed controls how much gradient changes RGB_MATRIX_BREATHING , // Single hue brightness cycling animation RGB_MATRIX_BAND_SAT , // Single hue band fading saturation scrolling left to right RGB_MATRIX_BAND_VAL , // Single hue band fading brightness scrolling left to right RGB_MATRIX_BAND_PINWHEEL_SAT , // Single hue 3 blade spinning pinwheel fades saturation RGB_MATRIX_BAND_PINWHEEL_VAL , // Single hue 3 blade spinning pinwheel fades brightness RGB_MATRIX_BAND_SPIRAL_SAT , // Single hue spinning spiral fades saturation RGB_MATRIX_BAND_SPIRAL_VAL , // Single hue spinning spiral fades brightness RGB_MATRIX_CYCLE_ALL , // Full keyboard solid hue cycling through full gradient RGB_MATRIX_CYCLE_LEFT_RIGHT , // Full gradient scrolling left to right RGB_MATRIX_CYCLE_UP_DOWN , // Full gradient scrolling top to bottom RGB_MATRIX_CYCLE_OUT_IN , // Full gradient scrolling out to in RGB_MATRIX_CYCLE_OUT_IN_DUAL , // Full dual gradients scrolling out to in RGB_MATRIX_RAINBOW_MOVING_CHEVRON , // Full gradent Chevron shapped scrolling left to right RGB_MATRIX_CYCLE_PINWHEEL , // Full gradient spinning pinwheel around center of keyboard RGB_MATRIX_CYCLE_SPIRAL , // Full gradient spinning spiral around center of keyboard RGB_MATRIX_DUAL_BEACON , // Full gradient spinning around center of keyboard RGB_MATRIX_RAINBOW_BEACON , // Full tighter gradient spinning around center of keyboard RGB_MATRIX_RAINBOW_PINWHEELS , // Full dual gradients spinning two halfs of keyboard RGB_MATRIX_RAINDROPS , // Randomly changes a single key's hue RGB_MATRIX_JELLYBEAN_RAINDROPS , // Randomly changes a single key's hue and saturation RGB_MATRIX_HUE_BREATHING , // Hue shifts up a slight ammount at the same time, then shifts back RGB_MATRIX_HUE_PENDULUM , // Hue shifts up a slight ammount in a wave to the right, then back to the left RGB_MATRIX_HUE_WAVE , // Hue shifts up a slight ammount and then back down in a wave to the right #if define(RGB_MATRIX_FRAMEBUFFER_EFFECTS) RGB_MATRIX_TYPING_HEATMAP , // How hot is your WPM! RGB_MATRIX_DIGITAL_RAIN , // That famous computer simulation #endif #if defined(RGB_MATRIX_KEYPRESSES) || defined(RGB_MATRIX_KEYRELEASES) RGB_MATRIX_SOLID_REACTIVE_SIMPLE , // Pulses keys hit to hue & value then fades value out RGB_MATRIX_SOLID_REACTIVE , // Static single hue, pulses keys hit to shifted hue then fades to current hue RGB_MATRIX_SOLID_REACTIVE_WIDE // Hue & value pulse near a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE // Hue & value pulse near multiple key hits then fades value out RGB_MATRIX_SOLID_REACTIVE_CROSS // Hue & value pulse the same column and row of a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTICROSS // Hue & value pulse the same column and row of multiple key hits then fades value out RGB_MATRIX_SOLID_REACTIVE_NEXUS // Hue & value pulse away on the same column and row of a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS // Hue & value pulse away on the same column and row of multiple key hits then fades value out RGB_MATRIX_SPLASH , // Full gradient & value pulse away from a single key hit then fades value out RGB_MATRIX_MULTISPLASH , // Full gradient & value pulse away from multiple key hits then fades value out RGB_MATRIX_SOLID_SPLASH , // Hue & value pulse away from a single key hit then fades value out RGB_MATRIX_SOLID_MULTISPLASH , // Hue & value pulse away from multiple key hits then fades value out #endif RGB_MATRIX_EFFECT_MAX }; You can disable a single effect by defining DISABLE_[EFFECT_NAME] in your config.h : Define Description #define DISABLE_RGB_MATRIX_ALPHAS_MODS Disables RGB_MATRIX_ALPHAS_MODS #define DISABLE_RGB_MATRIX_GRADIENT_UP_DOWN Disables RGB_MATRIX_GRADIENT_UP_DOWN #define DISABLE_RGB_MATRIX_GRADIENT_LEFT_RIGHT Disables MATRIX_GRADIENT_LEFT_RIGHT #define DISABLE_RGB_MATRIX_BREATHING Disables RGB_MATRIX_BREATHING #define DISABLE_RGB_MATRIX_BAND_SAT Disables RGB_MATRIX_BAND_SAT #define DISABLE_RGB_MATRIX_BAND_VAL Disables RGB_MATRIX_BAND_VAL #define DISABLE_RGB_MATRIX_BAND_PINWHEEL_SAT Disables RGB_MATRIX_BAND_PINWHEEL_SAT #define DISABLE_RGB_MATRIX_BAND_PINWHEEL_VAL Disables RGB_MATRIX_BAND_PINWHEEL_VAL #define DISABLE_RGB_MATRIX_BAND_SPIRAL_SAT Disables RGB_MATRIX_BAND_SPIRAL_SAT #define DISABLE_RGB_MATRIX_BAND_SPIRAL_VAL Disables RGB_MATRIX_BAND_SPIRAL_VAL #define DISABLE_RGB_MATRIX_CYCLE_ALL Disables RGB_MATRIX_CYCLE_ALL #define DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT Disables RGB_MATRIX_CYCLE_LEFT_RIGHT #define DISABLE_RGB_MATRIX_CYCLE_UP_DOWN Disables RGB_MATRIX_CYCLE_UP_DOWN #define DISABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON Disables RGB_MATRIX_RAINBOW_MOVING_CHEVRON #define DISABLE_RGB_MATRIX_CYCLE_OUT_IN Disables RGB_MATRIX_CYCLE_OUT_IN #define DISABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL Disables RGB_MATRIX_CYCLE_OUT_IN_DUAL #define DISABLE_RGB_MATRIX_CYCLE_PINWHEEL Disables RGB_MATRIX_CYCLE_PINWHEEL #define DISABLE_RGB_MATRIX_CYCLE_SPIRAL Disables RGB_MATRIX_CYCLE_SPIRAL #define DISABLE_RGB_MATRIX_DUAL_BEACON Disables RGB_MATRIX_DUAL_BEACON #define DISABLE_RGB_MATRIX_RAINBOW_BEACON Disables RGB_MATRIX_RAINBOW_BEACON #define DISABLE_RGB_MATRIX_RAINBOW_PINWHEELS Disables RGB_MATRIX_RAINBOW_PINWHEELS #define DISABLE_RGB_MATRIX_RAINDROPS Disables RGB_MATRIX_RAINDROPS #define DISABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS Disables RGB_MATRIX_JELLYBEAN_RAINDROPS #define DISABLE_RGB_MATRIX_HUE_BREATHING Disables RGB_MATRIX_HUE_BREATHING #define DISABLE_RGB_MATRIX_HUE_PENDULUM Disables RGB_MATRIX_HUE_PENDULUM #define DISABLE_RGB_MATRIX_HUE_WAVE Disables RGB_MATRIX_HUE_WAVE #define DISABLE_RGB_MATRIX_TYPING_HEATMAP Disables RGB_MATRIX_TYPING_HEATMAP #define DISABLE_RGB_MATRIX_DIGITAL_RAIN Disables RGB_MATRIX_DIGITAL_RAIN #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE Disables RGB_MATRIX_SOLID_REACTIVE_SIMPLE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE Disables RGB_MATRIX_SOLID_REACTIVE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE Disables RGB_MATRIX_SOLID_REACTIVE_WIDE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE Disables RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS Disables RGB_MATRIX_SOLID_REACTIVE_CROSS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS Disables RGB_MATRIX_SOLID_REACTIVE_MULTICROSS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS Disables RGB_MATRIX_SOLID_REACTIVE_NEXUS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS Disables RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS #define DISABLE_RGB_MATRIX_SPLASH Disables RGB_MATRIX_SPLASH #define DISABLE_RGB_MATRIX_MULTISPLASH Disables RGB_MATRIX_MULTISPLASH #define DISABLE_RGB_MATRIX_SOLID_SPLASH Disables RGB_MATRIX_SOLID_SPLASH #define DISABLE_RGB_MATRIX_SOLID_MULTISPLASH Disables RGB_MATRIX_SOLID_MULTISPLASH RGB Matrix Effect Typing Heatmap \u00b6 This effect will color the RGB matrix according to a heatmap of recently pressed keys. Whenever a key is pressed its \"temperature\" increases as well as that of its neighboring keys. The temperature of each key is then decreased automatically every 25 milliseconds by default. In order to change the delay of temperature decrease define RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS : #define RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS 50 Custom RGB Matrix Effects \u00b6 By setting RGB_MATRIX_CUSTOM_USER (and/or RGB_MATRIX_CUSTOM_KB ) in rules.mk , new effects can be defined directly from userspace, without having to edit any QMK core files. To declare new effects, create a new rgb_matrix_user/kb.inc that looks something like this: rgb_matrix_user.inc should go in the root of the keymap directory. rgb_matrix_kb.inc should go in the root of the keyboard directory. To use custom effects in your code, simply prepend RGB_MATRIX_CUSTOM_ to the effect name specified in RGB_MATRIX_EFFECT() . For example, an effect declared as RGB_MATRIX_EFFECT(my_cool_effect) would be referenced with: rgb_matrix_mode ( RGB_MATRIX_CUSTOM_my_cool_effect ); // !!! DO NOT ADD #pragma once !!! // // Step 1. // Declare custom effects using the RGB_MATRIX_EFFECT macro // (note the lack of semicolon after the macro!) RGB_MATRIX_EFFECT ( my_cool_effect ) RGB_MATRIX_EFFECT ( my_cool_effect2 ) // Step 2. // Define effects inside the `RGB_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS // e.g: A simple effect, self-contained within a single method static bool my_cool_effect ( effect_params_t * params ) { RGB_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { rgb_matrix_set_color ( i , 0xff , 0xff , 0x00 ); } return led_max < DRIVER_LED_TOTAL ; } // e.g: A more complex effect, relying on external methods and state, with // dedicated init and run methods static uint8_t some_global_state ; static void my_cool_effect2_complex_init ( effect_params_t * params ) { some_global_state = 1 ; } static bool my_cool_effect2_complex_run ( effect_params_t * params ) { RGB_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { rgb_matrix_set_color ( i , 0xff , some_global_state ++ , 0xff ); } return led_max < DRIVER_LED_TOTAL ; } static bool my_cool_effect2 ( effect_params_t * params ) { if ( params -> init ) my_cool_effect2_complex_init ( params ); return my_cool_effect2_complex_run ( params ); } #endif // RGB_MATRIX_CUSTOM_EFFECT_IMPLS For inspiration and examples, check out the built-in effects under quantum/rgb_matrix_animations/ Colors \u00b6 These are shorthands to popular colors. The RGB ones can be passed to the setrgb functions, while the HSV ones to the sethsv functions. RGB HSV RGB_WHITE HSV_WHITE RGB_RED HSV_RED RGB_CORAL HSV_CORAL RGB_ORANGE HSV_ORANGE RGB_GOLDENROD HSV_GOLDENROD RGB_GOLD HSV_GOLD RGB_YELLOW HSV_YELLOW RGB_CHARTREUSE HSV_CHARTREUSE RGB_GREEN HSV_GREEN RGB_SPRINGGREEN HSV_SPRINGGREEN RGB_TURQUOISE HSV_TURQUOISE RGB_TEAL HSV_TEAL RGB_CYAN HSV_CYAN RGB_AZURE HSV_AZURE RGB_BLUE HSV_BLUE RGB_PURPLE HSV_PURPLE RGB_MAGENTA HSV_MAGENTA RGB_PINK HSV_PINK These are defined in rgblight_list.h . Feel free to add to this list! Additional config.h Options \u00b6 #define RGB_MATRIX_KEYPRESSES // reacts to keypresses #define RGB_MATRIX_KEYRELEASES // reacts to keyreleases (instead of keypresses) #define RGB_MATRIX_FRAMEBUFFER_EFFECTS // enable framebuffer effects #define RGB_DISABLE_TIMEOUT 0 // number of milliseconds to wait until rgb automatically turns off #define RGB_DISABLE_AFTER_TIMEOUT 0 // OBSOLETE: number of ticks to wait until disabling effects #define RGB_DISABLE_WHEN_USB_SUSPENDED // turn off effects when suspended #define RGB_MATRIX_LED_PROCESS_LIMIT (DRIVER_LED_TOTAL + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness) #define RGB_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness) #define RGB_MATRIX_MAXIMUM_BRIGHTNESS 200 // limits maximum brightness of LEDs to 200 out of 255. If not defined maximum brightness is set to 255 #define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CYCLE_LEFT_RIGHT // Sets the default mode, if none has been set #define RGB_MATRIX_STARTUP_HUE 0 // Sets the default hue value, if none has been set #define RGB_MATRIX_STARTUP_SAT 255 // Sets the default saturation value, if none has been set #define RGB_MATRIX_STARTUP_VAL RGB_MATRIX_MAXIMUM_BRIGHTNESS // Sets the default brightness value, if none has been set #define RGB_MATRIX_STARTUP_SPD 127 // Sets the default animation speed, if none has been set #define RGB_MATRIX_DISABLE_KEYCODES // disables control of rgb matrix by keycodes (must use code functions to control the feature) #define RGB_MATRIX_SPLIT { X, Y } // (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right. // If RGB_MATRIX_KEYPRESSES or RGB_MATRIX_KEYRELEASES is enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR EEPROM storage \u00b6 The EEPROM for it is currently shared with the LED Matrix system (it's generally assumed only one feature would be used at a time), but could be configured to use its own 32bit address with: #define EECONFIG_RGB_MATRIX (uint32_t *)28 Where 28 is an unused index from eeconfig.h . Functions \u00b6 Direct Operation \u00b6 Function Description rgb_matrix_set_color_all(r, g, b) Set all of the LEDs to the given RGB value, where r / g / b are between 0 and 255 (not written to EEPROM) rgb_matrix_set_color(index, r, g, b) Set a single LED to the given RGB value, where r / g / b are between 0 and 255, and index is between 0 and DRIVER_LED_TOTAL (not written to EEPROM) Disable/Enable Effects \u00b6 Function Description rgb_matrix_toggle() Toggle effect range LEDs between on and off rgb_matrix_toggle_noeeprom() Toggle effect range LEDs between on and off (not written to EEPROM) rgb_matrix_enable() Turn effect range LEDs on, based on their previous state rgb_matrix_enable_noeeprom() Turn effect range LEDs on, based on their previous state (not written to EEPROM) rgb_matrix_disable() Turn effect range LEDs off, based on their previous state rgb_matrix_disable_noeeprom() Turn effect range LEDs off, based on their previous state (not written to EEPROM) Change Effect Mode \u00b6 Function Description rgb_matrix_mode(mode) Set the mode, if RGB animations are enabled rgb_matrix_mode_noeeprom(mode) Set the mode, if RGB animations are enabled (not written to EEPROM) rgb_matrix_step() Change the mode to the next RGB animation in the list of enabled RGB animations rgb_matrix_step_noeeprom() Change the mode to the next RGB animation in the list of enabled RGB animations (not written to EEPROM) rgb_matrix_step_reverse() Change the mode to the previous RGB animation in the list of enabled RGB animations rgb_matrix_step_reverse_noeeprom() Change the mode to the previous RGB animation in the list of enabled RGB animations (not written to EEPROM) rgb_matrix_increase_speed() Increase the speed of the animations rgb_matrix_increase_speed_noeeprom() Increase the speed of the animations (not written to EEPROM) rgb_matrix_decrease_speed() Decrease the speed of the animations rgb_matrix_decrease_speed_noeeprom() Decrease the speed of the animations (not written to EEPROM) rgb_matrix_set_speed(speed) Set the speed of the animations to the given value where speed is between 0 and 255 rgb_matrix_set_speed_noeeprom(speed) Set the speed of the animations to the given value where speed is between 0 and 255 (not written to EEPROM) Change Color \u00b6 Function Description rgb_matrix_increase_hue() Increase the hue for effect range LEDs. This wraps around at maximum hue rgb_matrix_increase_hue_noeeprom() Increase the hue for effect range LEDs. This wraps around at maximum hue (not written to EEPROM) rgb_matrix_decrease_hue() Decrease the hue for effect range LEDs. This wraps around at minimum hue rgb_matrix_decrease_hue_noeeprom() Decrease the hue for effect range LEDs. This wraps around at minimum hue (not written to EEPROM) rgb_matrix_increase_sat() Increase the saturation for effect range LEDs. This wraps around at maximum saturation rgb_matrix_increase_sat_noeeprom() Increase the saturation for effect range LEDs. This wraps around at maximum saturation (not written to EEPROM) rgb_matrix_decrease_sat() Decrease the saturation for effect range LEDs. This wraps around at minimum saturation rgb_matrix_decrease_sat_noeeprom() Decrease the saturation for effect range LEDs. This wraps around at minimum saturation (not written to EEPROM) rgb_matrix_increase_val() Increase the value for effect range LEDs. This wraps around at maximum value rgb_matrix_increase_val_noeeprom() Increase the value for effect range LEDs. This wraps around at maximum value (not written to EEPROM) rgb_matrix_decrease_val() Decrease the value for effect range LEDs. This wraps around at minimum value rgb_matrix_decrease_val_noeeprom() Decrease the value for effect range LEDs. This wraps around at minimum value (not written to EEPROM) rgb_matrix_sethsv(h, s, v) Set LEDs to the given HSV value where h / s / v are between 0 and 255 rgb_matrix_sethsv_noeeprom(h, s, v) Set LEDs to the given HSV value where h / s / v are between 0 and 255 (not written to EEPROM) Query Current Status \u00b6 Function Description rgb_matrix_is_enabled() Gets current on/off status rgb_matrix_get_mode() Gets current mode rgb_matrix_get_hue() Gets current hue rgb_matrix_get_sat() Gets current sat rgb_matrix_get_val() Gets current val rgb_matrix_get_hsv() Gets hue, sat, and val and returns a HSV structure rgb_matrix_get_speed() Gets current speed rgb_matrix_get_suspend_state() Gets current suspend state Callbacks \u00b6 Indicators \u00b6 If you want to set custom indicators, such as an LED for Caps Lock, or layer indication, you can use the rgb_matrix_indicators_kb or rgb_matrix_indicators_user function for that: void rgb_matrix_indicators_kb ( void ) { rgb_matrix_set_color ( index , red , green , blue ); } In addition, there are the advanced indicator functions. These are aimed at those with heavily customized displays, where rendering every LED per cycle is expensive. Such as some of the \"drashna\" layouts. This includes a special macro to help make this easier to use: RGB_MATRIX_INDICATOR_SET_COLOR(i, r, g, b) . void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { RGB_MATRIX_INDICATOR_SET_COLOR ( index , red , green , blue ); } Indicator Examples \u00b6 Caps Lock indicator on alphanumeric flagged keys: void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { if ( host_keyboard_led_state (). caps_lock ) { for ( uint8_t i = led_min ; i <= led_max ; i ++ ) { if ( g_led_config . flags [ i ] & LED_FLAG_KEYLIGHT ) { rgb_matrix_set_color ( i , RGB_RED ); } } } } Layer indicator on all flagged keys: void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { for ( uint8_t i = led_min ; i <= led_max ; i ++ ) { switch ( get_highest_layer ( layer_state | default_layer_state )) { case RAISE : rgb_matrix_set_color ( i , RGB_BLUE ); break ; case LOWER : rgb_matrix_set_color ( i , RGB_YELLOW ); break ; default : break ; } } } Suspended state \u00b6 To use the suspend feature, make sure that #define RGB_DISABLE_WHEN_USB_SUSPENDED true is added to the config.h file. Additionally add this to your <keyboard>.c : void suspend_power_down_kb ( void ) { rgb_matrix_set_suspend_state ( true ); suspend_power_down_user (); } void suspend_wakeup_init_kb ( void ) { rgb_matrix_set_suspend_state ( false ); suspend_wakeup_init_user (); } or add this to your keymap.c : void suspend_power_down_user ( void ) { rgb_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { rgb_matrix_set_suspend_state ( false ); }","title":"RGB\u77e9\u9635"},{"location":"feature_rgb_matrix/#rgb-matrix-lighting","text":"This feature allows you to use RGB LED matrices driven by external drivers. It hooks into the RGBLIGHT system so you can use the same keycodes as RGBLIGHT to control it. If you want to use single color LED's you should use the LED Matrix Subsystem instead.","title":"RGB Matrix Lighting"},{"location":"feature_rgb_matrix/#driver-configuration","text":"","title":"Driver configuration"},{"location":"feature_rgb_matrix/#is31fl3731-idis-31fl3731","text":"There is basic support for addressable RGB matrix lighting with the I2C IS31FL3731 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3731 You can use between 1 and 4 IS31FL3731 IC's. Do not specify DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 DRIVER_COUNT (Required) How many RGB driver IC's are present DRIVER_LED_TOTAL (Required) How many RGB lights are present across all drivers DRIVER_ADDR_1 (Required) Address for the first RGB driver DRIVER_ADDR_2 (Optional) Address for the second RGB driver DRIVER_ADDR_3 (Optional) Address for the third RGB driver DRIVER_ADDR_4 (Optional) Address for the fourth RGB driver Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0b1110100 AD <-> GND // 0b1110111 AD <-> VCC // 0b1110101 AD <-> SCL // 0b1110110 AD <-> SDA #define DRIVER_ADDR_1 0b1110100 #define DRIVER_ADDR_2 0b1110110 #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 25 #define DRIVER_2_LED_TOTAL 24 #define DRIVER_LED_TOTAL (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) Tip Note the parentheses, this is so when DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) will give very different results than rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL . Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , C1_3 , C2_3 , C3_3 }, .... } Where Cx_y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3731.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 ).","title":"IS31FL3731 {: id=is }31fl3731"},{"location":"feature_rgb_matrix/#is31fl3733-idis-31fl3733","text":"There is basic support for addressable RGB matrix lighting with the I2C IS31FL3733 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3733 You can use between 1 and 4 IS31FL3733 IC's. Do not specify DRIVER_ADDR_<N> defines for IC's that are not present on your keyboard. You can define the following items in config.h : Variable Description Default ISSI_TIMEOUT (Optional) How long to wait for i2c messages, in milliseconds 100 ISSI_PERSISTENCE (Optional) Retry failed messages this many times 0 DRIVER_COUNT (Required) How many RGB driver IC's are present DRIVER_LED_TOTAL (Required) How many RGB lights are present across all drivers DRIVER_ADDR_1 (Required) Address for the first RGB driver DRIVER_ADDR_2 (Optional) Address for the second RGB driver DRIVER_ADDR_3 (Optional) Address for the third RGB driver DRIVER_ADDR_4 (Optional) Address for the fourth RGB driver DRIVER_SYNC_1 (Optional) Sync configuration for the first RGB driver 0 DRIVER_SYNC_2 (Optional) Sync configuration for the second RGB driver 0 DRIVER_SYNC_3 (Optional) Sync configuration for the third RGB driver 0 DRIVER_SYNC_4 (Optional) Sync configuration for the fourth RGB driver 0 Here is an example using 2 drivers. // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 00 <-> GND // 01 <-> SCL // 10 <-> SDA // 11 <-> VCC // ADDR1 represents A1:A0 of the 7-bit address. // ADDR2 represents A3:A2 of the 7-bit address. // The result is: 0b101(ADDR2)(ADDR1) #define DRIVER_ADDR_1 0b1010000 #define DRIVER_ADDR_2 0b1010011 #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 58 #define DRIVER_2_LED_TOTAL 10 #define DRIVER_LED_TOTAL (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) Tip Note the parentheses, this is so when DRIVER_LED_TOTAL is used in code and expanded, the values are added together before any additional math is applied to them. As an example, rand() % (DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL) will give very different results than rand() % DRIVER_1_LED_TOTAL + DRIVER_2_LED_TOTAL . Currently only 4 drivers are supported, but it would be trivial to support all 8 combinations. Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , B_1 , A_1 , C_1 }, .... } Where X_Y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3733.h . The driver is the index of the driver you defined in your config.h ( 0 , 1 , 2 , or 3 for now).","title":"IS31FL3733 {: id=is }31fl3733"},{"location":"feature_rgb_matrix/#is31fl3737-idis-31fl3737","text":"There is basic support for addressable RGB matrix lighting with the I2C IS31FL3737 RGB controller. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = IS31FL3737 Configure the hardware via your config.h : // This is a 7-bit address, that gets left-shifted and bit 0 // set to 0 for write, 1 for read (as per I2C protocol) // The address will vary depending on your wiring: // 0000 <-> GND // 0101 <-> SCL // 1010 <-> SDA // 1111 <-> VCC // ADDR represents A3:A0 of the 7-bit address. // The result is: 0b101(ADDR) #define DRIVER_ADDR_1 0b1010000 #define DRIVER_ADDR_2 0b1010000 // this is here for compliancy reasons. #define DRIVER_COUNT 2 #define DRIVER_1_LED_TOTAL 64 #define DRIVER_LED_TOTAL DRIVER_1_LED_TOTAL Currently only a single drivers is supported, but it would be trivial to support all 4 combinations. For now define DRIVER_ADDR_2 as DRIVER_ADDR_1 Define these arrays listing all the LEDs in your <keyboard>.c : const is31_led g_is31_leds [ DRIVER_LED_TOTAL ] = { /* Refer to IS31 manual for these locations * driver * | R location * | | G location * | | | B location * | | | | */ { 0 , B_1 , A_1 , C_1 }, .... } Where X_Y is the location of the LED in the matrix defined by the datasheet and the header file drivers/issi/is31fl3737.h . The driver is the index of the driver you defined in your config.h (Only 0 right now).","title":"IS31FL3737 {: id=is }31fl3737"},{"location":"feature_rgb_matrix/#ws2812-idws-2812","text":"There is basic support for addressable RGB matrix lighting with a WS2811/WS2812{a,b,c} addressable LED strand. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = WS2812 Configure the hardware via your config.h : // The pin connected to the data pin of the LEDs #define RGB_DI_PIN D7 // The number of LEDs connected #define DRIVER_LED_TOTAL 70","title":"WS2812 {: id=ws }2812"},{"location":"feature_rgb_matrix/#apa102-idapa-102","text":"There is basic support for APA102 based addressable LED strands. To enable it, add this to your rules.mk : RGB_MATRIX_ENABLE = yes RGB_MATRIX_DRIVER = APA102 Configure the hardware via your config.h : // The pin connected to the data pin of the LEDs #define RGB_DI_PIN D7 // The pin connected to the clock pin of the LEDs #define RGB_CI_PIN D6 // The number of LEDs connected #define DRIVER_LED_TOTAL 70","title":"APA102 {: id=apa }102"},{"location":"feature_rgb_matrix/#common-configuration","text":"From this point forward the configuration is the same for all the drivers. The led_config_t struct provides a key electrical matrix to led index lookup table, what the physical position of each LED is on the board, and what type of key or usage the LED if the LED represents. Here is a brief example: led_config_t g_led_config = { { // Key Matrix to LED Index { 5 , NO_LED , NO_LED , 0 }, { NO_LED , NO_LED , NO_LED , NO_LED }, { 4 , NO_LED , NO_LED , 1 }, { 3 , NO_LED , NO_LED , 2 } }, { // LED Index to Physical Position { 188 , 16 }, { 187 , 48 }, { 149 , 64 }, { 112 , 64 }, { 37 , 48 }, { 38 , 16 } }, { // LED Index to Flag 1 , 4 , 4 , 4 , 4 , 1 } }; The first part, // Key Matrix to LED Index , tells the system what key this LED represents by using the key's electrical matrix row & col. The second part, // LED Index to Physical Position represents the LED's physical { x, y } position on the keyboard. The default expected range of values for { x, y } is the inclusive range { 0..224, 0..64 } . This default expected range is due to effects that calculate the center of the keyboard for their animations. The easiest way to calculate these positions is imagine your keyboard is a grid, and the top left of the keyboard represents { x, y } coordinate { 0, 0 } and the bottom right of your keyboard represents { 224, 64 } . Using this as a basis, you can use the following formula to calculate the physical position: x = 224 / ( NUMBER_OF_COLS - 1 ) * COL_POSITION y = 64 / ( NUMBER_OF_ROWS - 1 ) * ROW_POSITION Where NUMBER_OF_COLS, NUMBER_OF_ROWS, COL_POSITION, & ROW_POSITION are all based on the physical layout of your keyboard, not the electrical layout. As mentioned earlier, the center of the keyboard by default is expected to be { 112, 32 } , but this can be changed if you want to more accurately calculate the LED's physical { x, y } positions. Keyboard designers can implement #define RGB_MATRIX_CENTER { 112, 32 } in their config.h file with the new center point of the keyboard, or where they want it to be allowing more possibilities for the { x, y } values. Do note that the maximum value for x or y is 255, and the recommended maximum is 224 as this gives animations runoff room before they reset. // LED Index to Flag is a bitmask, whether or not a certain LEDs is of a certain type. It is recommended that LEDs are set to only 1 type.","title":"Common Configuration"},{"location":"feature_rgb_matrix/#flags","text":"Define Value Description HAS_FLAGS(bits, flags) n/a Evaluates to true if bits has all flags set HAS_ANY_FLAGS(bits, flags) n/a Evaluates to true if bits has any flags set LED_FLAG_NONE 0x00 If this LED has no flags LED_FLAG_ALL 0xFF If this LED has all flags LED_FLAG_MODIFIER 0x01 If the LED is on a modifier key LED_FLAG_UNDERGLOW 0x02 If the LED is for underglow LED_FLAG_KEYLIGHT 0x04 If the LED is for key backlight LED_FLAG_INDICATOR 0x08 If the LED is for keyboard state indication","title":"Flags"},{"location":"feature_rgb_matrix/#keycodes","text":"All RGB keycodes are currently shared with the RGBLIGHT system: Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_SPI Increase effect speed (does not support eeprom yet), decrease speed when Shift is held RGB_SPD Decrease effect speed (does not support eeprom yet), increase speed when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Full gradient scrolling left to right (uses the RGB_MATRIX_CYCLE_LEFT_RIGHT mode) RGB_MODE_SWIRL RGB_M_SW Full gradient spinning pinwheel around center of keyboard (uses RGB_MATRIX_CYCLE_PINWHEEL mode) RGB_MODE_* keycodes will generally work, but not all of the modes are currently mapped to the correct effects for the RGB Matrix system. RGB_MODE_PLAIN , RGB_MODE_BREATHE , RGB_MODE_RAINBOW , and RGB_MATRIX_SWIRL are the only ones that are mapped properly. The rest don't have a direct equivalent, and are not mapped. Tip By default, if you have both the RGB Light and the RGB Matrix feature enabled, these keycodes will work for both features, at the same time. You can disable the keycode functionality by defining the *_DISABLE_KEYCODES option for the specific feature.","title":"Keycodes"},{"location":"feature_rgb_matrix/#rgb-matrix-effects","text":"All effects have been configured to support current configuration values (Hue, Saturation, Value, & Speed) unless otherwise noted below. These are the effects that are currently available: enum rgb_matrix_effects { RGB_MATRIX_NONE = 0 , RGB_MATRIX_SOLID_COLOR = 1 , // Static single hue, no speed support RGB_MATRIX_ALPHAS_MODS , // Static dual hue, speed is hue for secondary hue RGB_MATRIX_GRADIENT_UP_DOWN , // Static gradient top to bottom, speed controls how much gradient changes RGB_MATRIX_GRADIENT_LEFT_RIGHT , // Static gradient left to right, speed controls how much gradient changes RGB_MATRIX_BREATHING , // Single hue brightness cycling animation RGB_MATRIX_BAND_SAT , // Single hue band fading saturation scrolling left to right RGB_MATRIX_BAND_VAL , // Single hue band fading brightness scrolling left to right RGB_MATRIX_BAND_PINWHEEL_SAT , // Single hue 3 blade spinning pinwheel fades saturation RGB_MATRIX_BAND_PINWHEEL_VAL , // Single hue 3 blade spinning pinwheel fades brightness RGB_MATRIX_BAND_SPIRAL_SAT , // Single hue spinning spiral fades saturation RGB_MATRIX_BAND_SPIRAL_VAL , // Single hue spinning spiral fades brightness RGB_MATRIX_CYCLE_ALL , // Full keyboard solid hue cycling through full gradient RGB_MATRIX_CYCLE_LEFT_RIGHT , // Full gradient scrolling left to right RGB_MATRIX_CYCLE_UP_DOWN , // Full gradient scrolling top to bottom RGB_MATRIX_CYCLE_OUT_IN , // Full gradient scrolling out to in RGB_MATRIX_CYCLE_OUT_IN_DUAL , // Full dual gradients scrolling out to in RGB_MATRIX_RAINBOW_MOVING_CHEVRON , // Full gradent Chevron shapped scrolling left to right RGB_MATRIX_CYCLE_PINWHEEL , // Full gradient spinning pinwheel around center of keyboard RGB_MATRIX_CYCLE_SPIRAL , // Full gradient spinning spiral around center of keyboard RGB_MATRIX_DUAL_BEACON , // Full gradient spinning around center of keyboard RGB_MATRIX_RAINBOW_BEACON , // Full tighter gradient spinning around center of keyboard RGB_MATRIX_RAINBOW_PINWHEELS , // Full dual gradients spinning two halfs of keyboard RGB_MATRIX_RAINDROPS , // Randomly changes a single key's hue RGB_MATRIX_JELLYBEAN_RAINDROPS , // Randomly changes a single key's hue and saturation RGB_MATRIX_HUE_BREATHING , // Hue shifts up a slight ammount at the same time, then shifts back RGB_MATRIX_HUE_PENDULUM , // Hue shifts up a slight ammount in a wave to the right, then back to the left RGB_MATRIX_HUE_WAVE , // Hue shifts up a slight ammount and then back down in a wave to the right #if define(RGB_MATRIX_FRAMEBUFFER_EFFECTS) RGB_MATRIX_TYPING_HEATMAP , // How hot is your WPM! RGB_MATRIX_DIGITAL_RAIN , // That famous computer simulation #endif #if defined(RGB_MATRIX_KEYPRESSES) || defined(RGB_MATRIX_KEYRELEASES) RGB_MATRIX_SOLID_REACTIVE_SIMPLE , // Pulses keys hit to hue & value then fades value out RGB_MATRIX_SOLID_REACTIVE , // Static single hue, pulses keys hit to shifted hue then fades to current hue RGB_MATRIX_SOLID_REACTIVE_WIDE // Hue & value pulse near a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE // Hue & value pulse near multiple key hits then fades value out RGB_MATRIX_SOLID_REACTIVE_CROSS // Hue & value pulse the same column and row of a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTICROSS // Hue & value pulse the same column and row of multiple key hits then fades value out RGB_MATRIX_SOLID_REACTIVE_NEXUS // Hue & value pulse away on the same column and row of a single key hit then fades value out RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS // Hue & value pulse away on the same column and row of multiple key hits then fades value out RGB_MATRIX_SPLASH , // Full gradient & value pulse away from a single key hit then fades value out RGB_MATRIX_MULTISPLASH , // Full gradient & value pulse away from multiple key hits then fades value out RGB_MATRIX_SOLID_SPLASH , // Hue & value pulse away from a single key hit then fades value out RGB_MATRIX_SOLID_MULTISPLASH , // Hue & value pulse away from multiple key hits then fades value out #endif RGB_MATRIX_EFFECT_MAX }; You can disable a single effect by defining DISABLE_[EFFECT_NAME] in your config.h : Define Description #define DISABLE_RGB_MATRIX_ALPHAS_MODS Disables RGB_MATRIX_ALPHAS_MODS #define DISABLE_RGB_MATRIX_GRADIENT_UP_DOWN Disables RGB_MATRIX_GRADIENT_UP_DOWN #define DISABLE_RGB_MATRIX_GRADIENT_LEFT_RIGHT Disables MATRIX_GRADIENT_LEFT_RIGHT #define DISABLE_RGB_MATRIX_BREATHING Disables RGB_MATRIX_BREATHING #define DISABLE_RGB_MATRIX_BAND_SAT Disables RGB_MATRIX_BAND_SAT #define DISABLE_RGB_MATRIX_BAND_VAL Disables RGB_MATRIX_BAND_VAL #define DISABLE_RGB_MATRIX_BAND_PINWHEEL_SAT Disables RGB_MATRIX_BAND_PINWHEEL_SAT #define DISABLE_RGB_MATRIX_BAND_PINWHEEL_VAL Disables RGB_MATRIX_BAND_PINWHEEL_VAL #define DISABLE_RGB_MATRIX_BAND_SPIRAL_SAT Disables RGB_MATRIX_BAND_SPIRAL_SAT #define DISABLE_RGB_MATRIX_BAND_SPIRAL_VAL Disables RGB_MATRIX_BAND_SPIRAL_VAL #define DISABLE_RGB_MATRIX_CYCLE_ALL Disables RGB_MATRIX_CYCLE_ALL #define DISABLE_RGB_MATRIX_CYCLE_LEFT_RIGHT Disables RGB_MATRIX_CYCLE_LEFT_RIGHT #define DISABLE_RGB_MATRIX_CYCLE_UP_DOWN Disables RGB_MATRIX_CYCLE_UP_DOWN #define DISABLE_RGB_MATRIX_RAINBOW_MOVING_CHEVRON Disables RGB_MATRIX_RAINBOW_MOVING_CHEVRON #define DISABLE_RGB_MATRIX_CYCLE_OUT_IN Disables RGB_MATRIX_CYCLE_OUT_IN #define DISABLE_RGB_MATRIX_CYCLE_OUT_IN_DUAL Disables RGB_MATRIX_CYCLE_OUT_IN_DUAL #define DISABLE_RGB_MATRIX_CYCLE_PINWHEEL Disables RGB_MATRIX_CYCLE_PINWHEEL #define DISABLE_RGB_MATRIX_CYCLE_SPIRAL Disables RGB_MATRIX_CYCLE_SPIRAL #define DISABLE_RGB_MATRIX_DUAL_BEACON Disables RGB_MATRIX_DUAL_BEACON #define DISABLE_RGB_MATRIX_RAINBOW_BEACON Disables RGB_MATRIX_RAINBOW_BEACON #define DISABLE_RGB_MATRIX_RAINBOW_PINWHEELS Disables RGB_MATRIX_RAINBOW_PINWHEELS #define DISABLE_RGB_MATRIX_RAINDROPS Disables RGB_MATRIX_RAINDROPS #define DISABLE_RGB_MATRIX_JELLYBEAN_RAINDROPS Disables RGB_MATRIX_JELLYBEAN_RAINDROPS #define DISABLE_RGB_MATRIX_HUE_BREATHING Disables RGB_MATRIX_HUE_BREATHING #define DISABLE_RGB_MATRIX_HUE_PENDULUM Disables RGB_MATRIX_HUE_PENDULUM #define DISABLE_RGB_MATRIX_HUE_WAVE Disables RGB_MATRIX_HUE_WAVE #define DISABLE_RGB_MATRIX_TYPING_HEATMAP Disables RGB_MATRIX_TYPING_HEATMAP #define DISABLE_RGB_MATRIX_DIGITAL_RAIN Disables RGB_MATRIX_DIGITAL_RAIN #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_SIMPLE Disables RGB_MATRIX_SOLID_REACTIVE_SIMPLE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE Disables RGB_MATRIX_SOLID_REACTIVE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_WIDE Disables RGB_MATRIX_SOLID_REACTIVE_WIDE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE Disables RGB_MATRIX_SOLID_REACTIVE_MULTIWIDE #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_CROSS Disables RGB_MATRIX_SOLID_REACTIVE_CROSS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTICROSS Disables RGB_MATRIX_SOLID_REACTIVE_MULTICROSS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_NEXUS Disables RGB_MATRIX_SOLID_REACTIVE_NEXUS #define DISABLE_RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS Disables RGB_MATRIX_SOLID_REACTIVE_MULTINEXUS #define DISABLE_RGB_MATRIX_SPLASH Disables RGB_MATRIX_SPLASH #define DISABLE_RGB_MATRIX_MULTISPLASH Disables RGB_MATRIX_MULTISPLASH #define DISABLE_RGB_MATRIX_SOLID_SPLASH Disables RGB_MATRIX_SOLID_SPLASH #define DISABLE_RGB_MATRIX_SOLID_MULTISPLASH Disables RGB_MATRIX_SOLID_MULTISPLASH","title":"RGB Matrix Effects"},{"location":"feature_rgb_matrix/#rgb-matrix-effect-typing-heatmap","text":"This effect will color the RGB matrix according to a heatmap of recently pressed keys. Whenever a key is pressed its \"temperature\" increases as well as that of its neighboring keys. The temperature of each key is then decreased automatically every 25 milliseconds by default. In order to change the delay of temperature decrease define RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS : #define RGB_MATRIX_TYPING_HEATMAP_DECREASE_DELAY_MS 50","title":"RGB Matrix Effect Typing Heatmap"},{"location":"feature_rgb_matrix/#custom-rgb-matrix-effects","text":"By setting RGB_MATRIX_CUSTOM_USER (and/or RGB_MATRIX_CUSTOM_KB ) in rules.mk , new effects can be defined directly from userspace, without having to edit any QMK core files. To declare new effects, create a new rgb_matrix_user/kb.inc that looks something like this: rgb_matrix_user.inc should go in the root of the keymap directory. rgb_matrix_kb.inc should go in the root of the keyboard directory. To use custom effects in your code, simply prepend RGB_MATRIX_CUSTOM_ to the effect name specified in RGB_MATRIX_EFFECT() . For example, an effect declared as RGB_MATRIX_EFFECT(my_cool_effect) would be referenced with: rgb_matrix_mode ( RGB_MATRIX_CUSTOM_my_cool_effect ); // !!! DO NOT ADD #pragma once !!! // // Step 1. // Declare custom effects using the RGB_MATRIX_EFFECT macro // (note the lack of semicolon after the macro!) RGB_MATRIX_EFFECT ( my_cool_effect ) RGB_MATRIX_EFFECT ( my_cool_effect2 ) // Step 2. // Define effects inside the `RGB_MATRIX_CUSTOM_EFFECT_IMPLS` ifdef block #ifdef RGB_MATRIX_CUSTOM_EFFECT_IMPLS // e.g: A simple effect, self-contained within a single method static bool my_cool_effect ( effect_params_t * params ) { RGB_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { rgb_matrix_set_color ( i , 0xff , 0xff , 0x00 ); } return led_max < DRIVER_LED_TOTAL ; } // e.g: A more complex effect, relying on external methods and state, with // dedicated init and run methods static uint8_t some_global_state ; static void my_cool_effect2_complex_init ( effect_params_t * params ) { some_global_state = 1 ; } static bool my_cool_effect2_complex_run ( effect_params_t * params ) { RGB_MATRIX_USE_LIMITS ( led_min , led_max ); for ( uint8_t i = led_min ; i < led_max ; i ++ ) { rgb_matrix_set_color ( i , 0xff , some_global_state ++ , 0xff ); } return led_max < DRIVER_LED_TOTAL ; } static bool my_cool_effect2 ( effect_params_t * params ) { if ( params -> init ) my_cool_effect2_complex_init ( params ); return my_cool_effect2_complex_run ( params ); } #endif // RGB_MATRIX_CUSTOM_EFFECT_IMPLS For inspiration and examples, check out the built-in effects under quantum/rgb_matrix_animations/","title":"Custom RGB Matrix Effects"},{"location":"feature_rgb_matrix/#colors","text":"These are shorthands to popular colors. The RGB ones can be passed to the setrgb functions, while the HSV ones to the sethsv functions. RGB HSV RGB_WHITE HSV_WHITE RGB_RED HSV_RED RGB_CORAL HSV_CORAL RGB_ORANGE HSV_ORANGE RGB_GOLDENROD HSV_GOLDENROD RGB_GOLD HSV_GOLD RGB_YELLOW HSV_YELLOW RGB_CHARTREUSE HSV_CHARTREUSE RGB_GREEN HSV_GREEN RGB_SPRINGGREEN HSV_SPRINGGREEN RGB_TURQUOISE HSV_TURQUOISE RGB_TEAL HSV_TEAL RGB_CYAN HSV_CYAN RGB_AZURE HSV_AZURE RGB_BLUE HSV_BLUE RGB_PURPLE HSV_PURPLE RGB_MAGENTA HSV_MAGENTA RGB_PINK HSV_PINK These are defined in rgblight_list.h . Feel free to add to this list!","title":"Colors"},{"location":"feature_rgb_matrix/#additional-configh-options","text":"#define RGB_MATRIX_KEYPRESSES // reacts to keypresses #define RGB_MATRIX_KEYRELEASES // reacts to keyreleases (instead of keypresses) #define RGB_MATRIX_FRAMEBUFFER_EFFECTS // enable framebuffer effects #define RGB_DISABLE_TIMEOUT 0 // number of milliseconds to wait until rgb automatically turns off #define RGB_DISABLE_AFTER_TIMEOUT 0 // OBSOLETE: number of ticks to wait until disabling effects #define RGB_DISABLE_WHEN_USB_SUSPENDED // turn off effects when suspended #define RGB_MATRIX_LED_PROCESS_LIMIT (DRIVER_LED_TOTAL + 4) / 5 // limits the number of LEDs to process in an animation per task run (increases keyboard responsiveness) #define RGB_MATRIX_LED_FLUSH_LIMIT 16 // limits in milliseconds how frequently an animation will update the LEDs. 16 (16ms) is equivalent to limiting to 60fps (increases keyboard responsiveness) #define RGB_MATRIX_MAXIMUM_BRIGHTNESS 200 // limits maximum brightness of LEDs to 200 out of 255. If not defined maximum brightness is set to 255 #define RGB_MATRIX_STARTUP_MODE RGB_MATRIX_CYCLE_LEFT_RIGHT // Sets the default mode, if none has been set #define RGB_MATRIX_STARTUP_HUE 0 // Sets the default hue value, if none has been set #define RGB_MATRIX_STARTUP_SAT 255 // Sets the default saturation value, if none has been set #define RGB_MATRIX_STARTUP_VAL RGB_MATRIX_MAXIMUM_BRIGHTNESS // Sets the default brightness value, if none has been set #define RGB_MATRIX_STARTUP_SPD 127 // Sets the default animation speed, if none has been set #define RGB_MATRIX_DISABLE_KEYCODES // disables control of rgb matrix by keycodes (must use code functions to control the feature) #define RGB_MATRIX_SPLIT { X, Y } // (Optional) For split keyboards, the number of LEDs connected on each half. X = left, Y = Right. // If RGB_MATRIX_KEYPRESSES or RGB_MATRIX_KEYRELEASES is enabled, you also will want to enable SPLIT_TRANSPORT_MIRROR","title":"Additional config.h Options"},{"location":"feature_rgb_matrix/#eeprom-storage","text":"The EEPROM for it is currently shared with the LED Matrix system (it's generally assumed only one feature would be used at a time), but could be configured to use its own 32bit address with: #define EECONFIG_RGB_MATRIX (uint32_t *)28 Where 28 is an unused index from eeconfig.h .","title":"EEPROM storage"},{"location":"feature_rgb_matrix/#functions","text":"","title":"Functions"},{"location":"feature_rgb_matrix/#direct-operation","text":"Function Description rgb_matrix_set_color_all(r, g, b) Set all of the LEDs to the given RGB value, where r / g / b are between 0 and 255 (not written to EEPROM) rgb_matrix_set_color(index, r, g, b) Set a single LED to the given RGB value, where r / g / b are between 0 and 255, and index is between 0 and DRIVER_LED_TOTAL (not written to EEPROM)","title":"Direct Operation"},{"location":"feature_rgb_matrix/#disable-enable-effects","text":"Function Description rgb_matrix_toggle() Toggle effect range LEDs between on and off rgb_matrix_toggle_noeeprom() Toggle effect range LEDs between on and off (not written to EEPROM) rgb_matrix_enable() Turn effect range LEDs on, based on their previous state rgb_matrix_enable_noeeprom() Turn effect range LEDs on, based on their previous state (not written to EEPROM) rgb_matrix_disable() Turn effect range LEDs off, based on their previous state rgb_matrix_disable_noeeprom() Turn effect range LEDs off, based on their previous state (not written to EEPROM)","title":"Disable/Enable Effects"},{"location":"feature_rgb_matrix/#change-effect-mode","text":"Function Description rgb_matrix_mode(mode) Set the mode, if RGB animations are enabled rgb_matrix_mode_noeeprom(mode) Set the mode, if RGB animations are enabled (not written to EEPROM) rgb_matrix_step() Change the mode to the next RGB animation in the list of enabled RGB animations rgb_matrix_step_noeeprom() Change the mode to the next RGB animation in the list of enabled RGB animations (not written to EEPROM) rgb_matrix_step_reverse() Change the mode to the previous RGB animation in the list of enabled RGB animations rgb_matrix_step_reverse_noeeprom() Change the mode to the previous RGB animation in the list of enabled RGB animations (not written to EEPROM) rgb_matrix_increase_speed() Increase the speed of the animations rgb_matrix_increase_speed_noeeprom() Increase the speed of the animations (not written to EEPROM) rgb_matrix_decrease_speed() Decrease the speed of the animations rgb_matrix_decrease_speed_noeeprom() Decrease the speed of the animations (not written to EEPROM) rgb_matrix_set_speed(speed) Set the speed of the animations to the given value where speed is between 0 and 255 rgb_matrix_set_speed_noeeprom(speed) Set the speed of the animations to the given value where speed is between 0 and 255 (not written to EEPROM)","title":"Change Effect Mode"},{"location":"feature_rgb_matrix/#change-color","text":"Function Description rgb_matrix_increase_hue() Increase the hue for effect range LEDs. This wraps around at maximum hue rgb_matrix_increase_hue_noeeprom() Increase the hue for effect range LEDs. This wraps around at maximum hue (not written to EEPROM) rgb_matrix_decrease_hue() Decrease the hue for effect range LEDs. This wraps around at minimum hue rgb_matrix_decrease_hue_noeeprom() Decrease the hue for effect range LEDs. This wraps around at minimum hue (not written to EEPROM) rgb_matrix_increase_sat() Increase the saturation for effect range LEDs. This wraps around at maximum saturation rgb_matrix_increase_sat_noeeprom() Increase the saturation for effect range LEDs. This wraps around at maximum saturation (not written to EEPROM) rgb_matrix_decrease_sat() Decrease the saturation for effect range LEDs. This wraps around at minimum saturation rgb_matrix_decrease_sat_noeeprom() Decrease the saturation for effect range LEDs. This wraps around at minimum saturation (not written to EEPROM) rgb_matrix_increase_val() Increase the value for effect range LEDs. This wraps around at maximum value rgb_matrix_increase_val_noeeprom() Increase the value for effect range LEDs. This wraps around at maximum value (not written to EEPROM) rgb_matrix_decrease_val() Decrease the value for effect range LEDs. This wraps around at minimum value rgb_matrix_decrease_val_noeeprom() Decrease the value for effect range LEDs. This wraps around at minimum value (not written to EEPROM) rgb_matrix_sethsv(h, s, v) Set LEDs to the given HSV value where h / s / v are between 0 and 255 rgb_matrix_sethsv_noeeprom(h, s, v) Set LEDs to the given HSV value where h / s / v are between 0 and 255 (not written to EEPROM)","title":"Change Color"},{"location":"feature_rgb_matrix/#query-current-status","text":"Function Description rgb_matrix_is_enabled() Gets current on/off status rgb_matrix_get_mode() Gets current mode rgb_matrix_get_hue() Gets current hue rgb_matrix_get_sat() Gets current sat rgb_matrix_get_val() Gets current val rgb_matrix_get_hsv() Gets hue, sat, and val and returns a HSV structure rgb_matrix_get_speed() Gets current speed rgb_matrix_get_suspend_state() Gets current suspend state","title":"Query Current Status"},{"location":"feature_rgb_matrix/#callbacks","text":"","title":"Callbacks"},{"location":"feature_rgb_matrix/#indicators","text":"If you want to set custom indicators, such as an LED for Caps Lock, or layer indication, you can use the rgb_matrix_indicators_kb or rgb_matrix_indicators_user function for that: void rgb_matrix_indicators_kb ( void ) { rgb_matrix_set_color ( index , red , green , blue ); } In addition, there are the advanced indicator functions. These are aimed at those with heavily customized displays, where rendering every LED per cycle is expensive. Such as some of the \"drashna\" layouts. This includes a special macro to help make this easier to use: RGB_MATRIX_INDICATOR_SET_COLOR(i, r, g, b) . void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { RGB_MATRIX_INDICATOR_SET_COLOR ( index , red , green , blue ); }","title":"Indicators"},{"location":"feature_rgb_matrix/#indicator-examples","text":"Caps Lock indicator on alphanumeric flagged keys: void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { if ( host_keyboard_led_state (). caps_lock ) { for ( uint8_t i = led_min ; i <= led_max ; i ++ ) { if ( g_led_config . flags [ i ] & LED_FLAG_KEYLIGHT ) { rgb_matrix_set_color ( i , RGB_RED ); } } } } Layer indicator on all flagged keys: void rgb_matrix_indicators_advanced_user ( uint8_t led_min , uint8_t led_max ) { for ( uint8_t i = led_min ; i <= led_max ; i ++ ) { switch ( get_highest_layer ( layer_state | default_layer_state )) { case RAISE : rgb_matrix_set_color ( i , RGB_BLUE ); break ; case LOWER : rgb_matrix_set_color ( i , RGB_YELLOW ); break ; default : break ; } } }","title":"Indicator Examples"},{"location":"feature_rgb_matrix/#suspended-state","text":"To use the suspend feature, make sure that #define RGB_DISABLE_WHEN_USB_SUSPENDED true is added to the config.h file. Additionally add this to your <keyboard>.c : void suspend_power_down_kb ( void ) { rgb_matrix_set_suspend_state ( true ); suspend_power_down_user (); } void suspend_wakeup_init_kb ( void ) { rgb_matrix_set_suspend_state ( false ); suspend_wakeup_init_user (); } or add this to your keymap.c : void suspend_power_down_user ( void ) { rgb_matrix_set_suspend_state ( true ); } void suspend_wakeup_init_user ( void ) { rgb_matrix_set_suspend_state ( false ); }","title":"Suspended state"},{"location":"feature_rgblight/","text":"RGB Lighting \u00b6 QMK has the ability to control RGB LEDs attached to your keyboard. This is commonly called underglow , due to the LEDs often being mounted on the bottom of the keyboard, producing a nice diffused effect when combined with a translucent case. Some keyboards come with RGB LEDs preinstalled. Others must have them installed after the fact. See the Hardware Modification section for information on adding RGB lighting to your keyboard. Currently QMK supports the following addressable LEDs (however, the white LED in RGBW variants is not supported): WS2811, WS2812, WS2812B, WS2812C, etc. SK6812, SK6812MINI, SK6805 APA102 These LEDs are called \"addressable\" because instead of using a wire per color, each LED contains a small microchip that understands a special protocol sent over a single wire. The chip passes on the remaining data to the next LED, allowing them to be chained together. In this way, you can easily control the color of the individual LEDs. Usage \u00b6 On keyboards with onboard RGB LEDs, it is usually enabled by default. If it is not working for you, check that your rules.mk includes the following: RGBLIGHT_ENABLE = yes For APA102 LEDs, add the following to your rules.mk : RGBLIGHT_ENABLE = yes RGBLIGHT_DRIVER = APA102 At minimum you must define the data pin your LED strip is connected to, and the number of LEDs in the strip, in your config.h . For APA102 LEDs, you must also define the clock pin. If your keyboard has onboard RGB LEDs, and you are simply creating a keymap, you usually won't need to modify these. Define Description RGB_DI_PIN The pin connected to the data pin of the LEDs RGB_CI_PIN The pin connected to the clock pin of the LEDs (APA102 only) RGBLED_NUM The number of LEDs connected RGBLED_SPLIT (Optional) For split keyboards, the number of LEDs connected on each half directly wired to RGB_DI_PIN Then you should be able to use the keycodes below to change the RGB lighting to your liking. Color Selection \u00b6 QMK uses Hue, Saturation, and Value to select colors rather than RGB. The color wheel below demonstrates how this works. Changing the Hue cycles around the circle. Changing the Saturation moves between the inner and outer sections of the wheel, affecting the intensity of the color. Changing the Value sets the overall brightness. Keycodes \u00b6 Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Rainbow animation mode RGB_MODE_SWIRL RGB_M_SW Swirl animation mode RGB_MODE_SNAKE RGB_M_SN Snake animation mode RGB_MODE_KNIGHT RGB_M_K \"Knight Rider\" animation mode RGB_MODE_XMAS RGB_M_X Christmas animation mode RGB_MODE_GRADIENT RGB_M_G Static gradient animation mode RGB_MODE_RGBTEST RGB_M_T Red, Green, Blue test animation mode RGB_MODE_TWINKLE RGB_M_TW Twinkle animation mode Info By default, if you have both the RGB Light and the RGB Matrix feature enabled, these keycodes will work for both features, at the same time. You can disable the keycode functionality by defining the *_DISABLE_KEYCODES option for the specific feature. Configuration \u00b6 Your RGB lighting can be configured by placing these #define s in your config.h : Define Default Description RGBLIGHT_HUE_STEP 10 The number of steps to cycle through the hue by RGBLIGHT_SAT_STEP 17 The number of steps to increment the saturation by RGBLIGHT_VAL_STEP 17 The number of steps to increment the brightness by RGBLIGHT_LIMIT_VAL 255 The maximum brightness level RGBLIGHT_SLEEP Not defined If defined, the RGB lighting will be switched off when the host goes to sleep RGBLIGHT_SPLIT Not defined If defined, synchronization functionality for split keyboards is added RGBLIGHT_DISABLE_KEYCODES Not defined If defined, disables the ability to control RGB Light from the keycodes. You must use code functions to control the feature RGBLIGHT_DEFAULT_MODE RGBLIGHT_MODE_STATIC_LIGHT The default mode to use upon clearing the EEPROM RGBLIGHT_DEFAULT_HUE 0 (red) The default hue to use upon clearing the EEPROM RGBLIGHT_DEFAULT_SAT UINT8_MAX (255) The default saturation to use upon clearing the EEPROM RGBLIGHT_DEFAULT_VAL RGBLIGHT_LIMIT_VAL The default value (brightness) to use upon clearing the EEPROM RGBLIGHT_DEFAULT_SPD 0 The default speed to use upon clearing the EEPROM Effects and Animations \u00b6 Not only can this lighting be whatever color you want, if RGBLIGHT_EFFECT_xxxx or RGBLIGHT_ANIMATIONS is defined, you also have a number of animation modes at your disposal: Mode number symbol Additional number Description RGBLIGHT_MODE_STATIC_LIGHT None Solid color (this mode is always enabled) RGBLIGHT_MODE_BREATHING 0,1,2,3 Solid color breathing RGBLIGHT_MODE_RAINBOW_MOOD 0,1,2 Cycling rainbow RGBLIGHT_MODE_RAINBOW_SWIRL 0,1,2,3,4,5 Swirling rainbow RGBLIGHT_MODE_SNAKE 0,1,2,3,4,5 Snake RGBLIGHT_MODE_KNIGHT 0,1,2 Knight RGBLIGHT_MODE_CHRISTMAS None Christmas RGBLIGHT_MODE_STATIC_GRADIENT 0,1,..,9 Static gradient RGBLIGHT_MODE_RGB_TEST None RGB Test RGBLIGHT_MODE_ALTERNATING None Alternating RGBLIGHT_MODE_TWINKLE 0,1,2,3,4,5 Twinkle Check out this video for a demonstration. Note: For versions older than 0.6.117, The mode numbers were written directly. In quantum/rgblight.h there is a contrast table between the old mode number and the current symbol. Effect and Animation Toggles \u00b6 Use these defines to add or remove animations from the firmware. When you are running low on flash space, it can be helpful to disable animations you are not using. Define Default Description RGBLIGHT_ANIMATIONS Not defined Enable all additional animation modes. RGBLIGHT_EFFECT_ALTERNATING Not defined Enable alternating animation mode. RGBLIGHT_EFFECT_BREATHING Not defined Enable breathing animation mode. RGBLIGHT_EFFECT_CHRISTMAS Not defined Enable christmas animation mode. RGBLIGHT_EFFECT_KNIGHT Not defined Enable knight animation mode. RGBLIGHT_EFFECT_RAINBOW_MOOD Not defined Enable rainbow mood animation mode. RGBLIGHT_EFFECT_RAINBOW_SWIRL Not defined Enable rainbow swirl animation mode. RGBLIGHT_EFFECT_RGB_TEST Not defined Enable RGB test animation mode. RGBLIGHT_EFFECT_SNAKE Not defined Enable snake animation mode. RGBLIGHT_EFFECT_STATIC_GRADIENT Not defined Enable static gradient mode. RGBLIGHT_EFFECT_TWINKLE Not defined Enable twinkle animation mode. Effect and Animation Settings \u00b6 The following options are used to tweak the various animations: Define Default Description RGBLIGHT_EFFECT_BREATHE_CENTER Not defined If defined, used to calculate the curve for the breathing animation. Valid values are 1.0 to 2.7 RGBLIGHT_EFFECT_BREATHE_MAX 255 The maximum brightness for the breathing mode. Valid values are 1 to 255 RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL 40 How long (in milliseconds) to wait between animation steps for the \"Christmas\" animation RGBLIGHT_EFFECT_CHRISTMAS_STEP 2 The number of LEDs to group the red/green colors by for the \"Christmas\" animation RGBLIGHT_EFFECT_KNIGHT_LED_NUM RGBLED_NUM The number of LEDs to have the \"Knight\" animation travel RGBLIGHT_EFFECT_KNIGHT_LENGTH 3 The number of LEDs to light up for the \"Knight\" animation RGBLIGHT_EFFECT_KNIGHT_OFFSET 0 The number of LEDs to start the \"Knight\" animation from the start of the strip by RGBLIGHT_RAINBOW_SWIRL_RANGE 255 Range adjustment for the rainbow swirl effect to get different swirls RGBLIGHT_EFFECT_SNAKE_LENGTH 4 The number of LEDs to light up for the \"Snake\" animation RGBLIGHT_EFFECT_TWINKLE_LIFE 200 Adjusts how quickly each LED brightens and dims when twinkling (in animation steps) RGBLIGHT_EFFECT_TWINKLE_PROBABILITY 1/127 Adjusts how likely each LED is to twinkle (on each animation step) Example Usage to Reduce Memory Footprint \u00b6 Remove RGBLIGHT_ANIMATIONS from config.h . Selectively add the animations you want to enable. The following would enable two animations and save about 4KiB: #undef RGBLED_NUM -#define RGBLIGHT_ANIMATIONS +#define RGBLIGHT_EFFECT_STATIC_GRADIENT +#define RGBLIGHT_EFFECT_RAINBOW_SWIRL #define RGBLED_NUM 12 #define RGBLIGHT_HUE_STEP 8 #define RGBLIGHT_SAT_STEP 8 Animation Speed \u00b6 You can also modify the speeds that the different modes animate at: Here is a quick demo on Youtube (with NPKC KC60) (https://www.youtube.com/watch?v=VKrpPAHlisY). // How long (in milliseconds) to wait between animation steps for each of the \"Solid color breathing\" animations const uint8_t RGBLED_BREATHING_INTERVALS [] PROGMEM = { 30 , 20 , 10 , 5 }; // How long (in milliseconds) to wait between animation steps for each of the \"Cycling rainbow\" animations const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS [] PROGMEM = { 120 , 60 , 30 }; // How long (in milliseconds) to wait between animation steps for each of the \"Swirling rainbow\" animations const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS [] PROGMEM = { 100 , 50 , 20 }; // How long (in milliseconds) to wait between animation steps for each of the \"Snake\" animations const uint8_t RGBLED_SNAKE_INTERVALS [] PROGMEM = { 100 , 50 , 20 }; // How long (in milliseconds) to wait between animation steps for each of the \"Knight\" animations const uint8_t RGBLED_KNIGHT_INTERVALS [] PROGMEM = { 127 , 63 , 31 }; // How long (in milliseconds) to wait between animation steps for each of the \"Twinkle\" animations const uint8_t RGBLED_TWINKLE_INTERVALS [] PROGMEM = { 50 , 25 , 10 }; // These control which hues are selected for each of the \"Static gradient\" modes const uint8_t RGBLED_GRADIENT_RANGES [] PROGMEM = { 255 , 170 , 127 , 85 , 64 }; Lighting Layers \u00b6 Note Lighting Layers is an RGB Light feature, it will not work for RGB Matrix. See RGB Matrix Indicators for details on how to do so. By including #define RGBLIGHT_LAYERS in your config.h file you can enable lighting layers. These make it easy to use your underglow LEDs as status indicators to show which keyboard layer is currently active, or the state of caps lock, all without disrupting any animations. Here's a video showing an example of what you can do. Defining Lighting Layers \u00b6 By default, 8 layers are possible. This can be expanded to as many as 32 by overriding the definition of RGBLIGHT_MAX_LAYERS in config.h (e.g. #define RGBLIGHT_MAX_LAYERS 32 ). Please note, if you use a split keyboard, you will need to flash both sides of the split after changing this. Also, increasing the maximum will increase the firmware size, and will slow sync on split keyboards. To define a layer, we modify keymap.c to list the LED ranges and the colors we want to overlay on them using an array of rgblight_segment_t using the RGBLIGHT_LAYER_SEGMENTS macro. We can define multiple layers and enable/disable them independently: // Light LEDs 6 to 9 and 12 to 15 red when caps lock is active. Hard to ignore! const rgblight_segment_t PROGMEM my_capslock_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 6 , 4 , HSV_RED }, // Light 4 LEDs, starting with LED 6 { 12 , 4 , HSV_RED } // Light 4 LEDs, starting with LED 12 ); // Light LEDs 9 & 10 in cyan when keyboard layer 1 is active const rgblight_segment_t PROGMEM my_layer1_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 2 , HSV_CYAN } ); // Light LEDs 11 & 12 in purple when keyboard layer 2 is active const rgblight_segment_t PROGMEM my_layer2_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 11 , 2 , HSV_PURPLE } ); // Light LEDs 13 & 14 in green when keyboard layer 3 is active const rgblight_segment_t PROGMEM my_layer3_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 13 , 2 , HSV_GREEN } ); // etc.. We combine these layers into an array using the RGBLIGHT_LAYERS_LIST macro, and assign it to the rgblight_layers variable during keyboard setup. Note that you can only define up to 8 lighting layers. Any extra layers will be ignored. Since the different lighting layers overlap, the order matters in the array, with later layers taking precedence: // Now define the array of layers. Later layers take precedence const rgblight_segment_t * const PROGMEM my_rgb_layers [] = RGBLIGHT_LAYERS_LIST ( my_capslock_layer , my_layer1_layer , // Overrides caps lock layer my_layer2_layer , // Overrides other layers my_layer3_layer // Overrides other layers ); void keyboard_post_init_user ( void ) { // Enable the LED layers rgblight_layers = my_rgb_layers ; } Note: For split keyboards with two controllers, both sides need to be flashed when updating the contents of rgblight_layers. Enabling and disabling lighting layers \u00b6 Everything above just configured the definition of each lighting layer. We can now enable and disable the lighting layers whenever the state of the keyboard changes: bool led_update_user ( led_t led_state ) { rgblight_set_layer_state ( 0 , led_state . caps_lock ); return true ; } layer_state_t default_layer_state_set_user ( layer_state_t state ) { rgblight_set_layer_state ( 1 , layer_state_cmp ( state , _DVORAK )); return state ; } layer_state_t layer_state_set_user ( layer_state_t state ) { rgblight_set_layer_state ( 2 , layer_state_cmp ( state , _FN )); rgblight_set_layer_state ( 3 , layer_state_cmp ( state , _ADJUST )); return state ; } Lighting layer blink \u00b6 By including #define RGBLIGHT_LAYER_BLINK in your config.h file you can turn a lighting layer on for a specified duration. Once the specified number of milliseconds has elapsed the layer will be turned off. This is useful, e.g., if you want to acknowledge some action (e.g. toggling some setting): const rgblight_segment_t PROGMEM _yes_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 6 , HSV_GREEN } ); const rgblight_segment_t PROGMEM _no_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 6 , HSV_RED } ); const rgblight_segment_t * const PROGMEM _rgb_layers [] = RGBLIGHT_LAYERS_LIST ( _yes_layer , _no_layer ); void keyboard_post_init_user ( void ) { rgblight_layers = _rgb_layers ; } // Note we user post_process_record_user because we want the state // after the flag has been flipped... void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case DEBUG : rgblight_blink_layer ( debug_enable ? 0 : 1 , 500 ); break ; case NK_TOGG : case NK_ON : case NK_OFF : rgblight_blink_layer ( keymap_config . nkro ? 0 : 1 , 500 ); break ; } } You can also use rgblight_blink_layer_repeat to specify the amount of times the layer is supposed to blink. Using the layers from above, void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case DEBUG : rgblight_blink_layer_repeat ( debug_enable ? 0 : 1 , 200 , 3 ); break ; } } would turn the layer 0 (or 1) on and off again three times when DEBUG is pressed. Overriding RGB Lighting on/off status \u00b6 Normally lighting layers are not shown when RGB Lighting is disabled (e.g. with RGB_TOG keycode). If you would like lighting layers to work even when the RGB Lighting is otherwise off, add #define RGBLIGHT_LAYERS_OVERRIDE_RGB_OFF to your config.h . Functions \u00b6 If you need to change your RGB lighting in code, for example in a macro to change the color whenever you switch layers, QMK provides a set of functions to assist you. See rgblight.h for the full list, but the most commonly used functions include: Utility Functions \u00b6 Function Description sethsv(hue, sat, val, ledbuf) Set ledbuf to the given HSV value sethsv_raw(hue, sat, val, ledbuf) Set ledbuf to the given HSV value without RGBLIGHT_LIMIT_VAL check setrgb(r, g, b, ledbuf) Set ledbuf to the given RGB value where r / g / b Low level Functions \u00b6 Function Description rgblight_set() Flash out led buffers to LEDs rgblight_set_clipping_range(pos, num) Set clipping Range. see Clipping Range Example: sethsv ( HSV_WHITE , ( LED_TYPE * ) & led [ 0 ]); // led 0 sethsv ( HSV_RED , ( LED_TYPE * ) & led [ 1 ]); // led 1 sethsv ( HSV_GREEN , ( LED_TYPE * ) & led [ 2 ]); // led 2 rgblight_set (); // Utility functions do not call rgblight_set() automatically, so they need to be called explicitly. Effects and Animations Functions \u00b6 effect range setting \u00b6 Function Description rgblight_set_effect_range(pos, num) Set Effects Range direct operation \u00b6 Function Description rgblight_setrgb_at(r, g, b, index) Set a single LED to the given RGB value, where r / g / b are between 0 and 255 and index is between 0 and RGBLED_NUM (not written to EEPROM) rgblight_sethsv_at(h, s, v, index) Set a single LED to the given HSV value, where h / s / v are between 0 and 255, and index is between 0 and RGBLED_NUM (not written to EEPROM) rgblight_setrgb_range(r, g, b, start, end) Set a continuous range of LEDs to the given RGB value, where r / g / b are between 0 and 255 and start (included) and stop (excluded) are between 0 and RGBLED_NUM (not written to EEPROM) rgblight_sethsv_range(h, s, v, start, end) Set a continuous range of LEDs to the given HSV value, where h / s / v are between 0 and 255, and start (included) and stop (excluded) are between 0 and RGBLED_NUM (not written to EEPROM) rgblight_setrgb(r, g, b) Set effect range LEDs to the given RGB value where r / g / b are between 0 and 255 (not written to EEPROM) rgblight_setrgb_master(r, g, b) Set the LEDs on the master side to the given RGB value, where r / g / b are between 0 and 255 (not written to EEPROM) rgblight_setrgb_slave(r, g, b) Set the LEDs on the slave side to the given RGB value, where r / g / b are between 0 and 255 (not written to EEPROM) rgblight_sethsv_master(h, s, v) Set the LEDs on the master side to the given HSV value, where h / s / v are between 0 and 255 (not written to EEPROM) rgblight_sethsv_slave(h, s, v) Set the LEDs on the slave side to the given HSV value, where h / s / v are between 0 and 255 (not written to EEPROM) Example: rgblight_sethsv_at ( HSV_WHITE , 0 ); // led 0 rgblight_sethsv_at ( HSV_RED , 1 ); // led 1 rgblight_sethsv_at ( HSV_GREEN , 2 ); // led 2 // The above functions automatically calls rgblight_set(), so there is no need to call it explicitly. // Note that it is inefficient to call repeatedly. effect mode change \u00b6 Function Description rgblight_mode(x) Set the mode, if RGB animations are enabled rgblight_mode_noeeprom(x) Set the mode, if RGB animations are enabled (not written to EEPROM) rgblight_step() Change the mode to the next RGB animation in the list of enabled RGB animations rgblight_step_noeeprom() Change the mode to the next RGB animation in the list of enabled RGB animations (not written to EEPROM) rgblight_step_reverse() Change the mode to the previous RGB animation in the list of enabled RGB animations rgblight_step_reverse_noeeprom() Change the mode to the previous RGB animation in the list of enabled RGB animations (not written to EEPROM) rgblight_reload_from_eeprom() Reload the effect configuration (enabled, mode and color) from EEPROM effects mode disable/enable \u00b6 Function Description rgblight_toggle() Toggle effect range LEDs between on and off rgblight_toggle_noeeprom() Toggle effect range LEDs between on and off (not written to EEPROM) rgblight_enable() Turn effect range LEDs on, based on their previous state rgblight_enable_noeeprom() Turn effect range LEDs on, based on their previous state (not written to EEPROM) rgblight_disable() Turn effect range LEDs off rgblight_disable_noeeprom() Turn effect range LEDs off (not written to EEPROM) hue, sat, val change \u00b6 Function Description rgblight_increase_hue() Increase the hue for effect range LEDs. This wraps around at maximum hue rgblight_increase_hue_noeeprom() Increase the hue for effect range LEDs. This wraps around at maximum hue (not written to EEPROM) rgblight_decrease_hue() Decrease the hue for effect range LEDs. This wraps around at minimum hue rgblight_decrease_hue_noeeprom() Decrease the hue for effect range LEDs. This wraps around at minimum hue (not written to EEPROM) rgblight_increase_sat() Increase the saturation for effect range LEDs. This stops at maximum saturation rgblight_increase_sat_noeeprom() Increase the saturation for effect range LEDs. This stops at maximum saturation (not written to EEPROM) rgblight_decrease_sat() Decrease the saturation for effect range LEDs. This stops at minimum saturation rgblight_decrease_sat_noeeprom() Decrease the saturation for effect range LEDs. This stops at minimum saturation (not written to EEPROM) rgblight_increase_val() Increase the value for effect range LEDs. This stops at maximum value rgblight_increase_val_noeeprom() Increase the value for effect range LEDs. This stops at maximum value (not written to EEPROM) rgblight_decrease_val() Decrease the value for effect range LEDs. This stops at minimum value rgblight_decrease_val_noeeprom() Decrease the value for effect range LEDs. This stops at minimum value (not written to EEPROM) rgblight_sethsv(h, s, v) Set effect range LEDs to the given HSV value where h / s / v are between 0 and 255 rgblight_sethsv_noeeprom(h, s, v) Set effect range LEDs to the given HSV value where h / s / v are between 0 and 255 (not written to EEPROM) Speed functions \u00b6 Function Description rgblight_increase_speed() Increases the animation speed rgblight_increase_speed_noeeprom() Increases the animation speed (not written to EEPROM) rgblight_decrease_speed() Decreases the animation speed rgblight_decrease_speed_noeeprom() Decreases the animation speed (not written to EEPROM) rgblight_set_speed() Sets the speed. Value is between 0 and 255 rgblight_set_speed_noeeprom() Sets the speed. Value is between 0 and 255 (not written to EEPROM) layer functions \u00b6 Function Description rgblight_get_layer_state(i) Returns true if lighting layer i is enabled rgblight_set_layer_state(i, is_on) Enable or disable lighting layer i based on value of bool is_on query \u00b6 Function Description rgblight_is_enabled() Gets current on/off status rgblight_get_mode() Gets current mode rgblight_get_hue() Gets current hue rgblight_get_sat() Gets current sat rgblight_get_val() Gets current val rgblight_get_speed() Gets current speed Colors \u00b6 These are shorthands to popular colors. The RGB ones can be passed to the setrgb functions, while the HSV ones to the sethsv functions. RGB HSV RGB_WHITE HSV_WHITE RGB_RED HSV_RED RGB_CORAL HSV_CORAL RGB_ORANGE HSV_ORANGE RGB_GOLDENROD HSV_GOLDENROD RGB_GOLD HSV_GOLD RGB_YELLOW HSV_YELLOW RGB_CHARTREUSE HSV_CHARTREUSE RGB_GREEN HSV_GREEN RGB_SPRINGGREEN HSV_SPRINGGREEN RGB_TURQUOISE HSV_TURQUOISE RGB_TEAL HSV_TEAL RGB_CYAN HSV_CYAN RGB_AZURE HSV_AZURE RGB_BLUE HSV_BLUE RGB_PURPLE HSV_PURPLE RGB_MAGENTA HSV_MAGENTA RGB_PINK HSV_PINK rgblight_setrgb ( RGB_ORANGE ); rgblight_sethsv_noeeprom ( HSV_GREEN ); rgblight_setrgb_at ( RGB_GOLD , 3 ); rgblight_sethsv_range ( HSV_WHITE , 0 , 6 ); These are defined in rgblight_list.h . Feel free to add to this list! Changing the order of the LEDs \u00b6 If you want to make the logical order of LEDs different from the electrical connection order, you can do this by defining the RGBLIGHT_LED_MAP macro in your config.h . Normally, the contents of the LED buffer are output to the LEDs in the same order. By defining RGBLIGHT_LED_MAP as in the example below, you can specify the LED with addressing in reverse order of the electrical connection order. // config.h #define RGBLED_NUM 4 #define RGBLIGHT_LED_MAP { 3, 2, 1, 0 } For keyboards that use the RGB LEDs as a backlight for each key, you can also define it as in the example below. // config.h #define RGBLED_NUM 30 /* RGB LED Conversion macro from physical array to electric array */ #define LED_LAYOUT( \\ L00, L01, L02, L03, L04, L05, \\ L10, L11, L12, L13, L14, L15, \\ L20, L21, L22, L23, L24, L25, \\ L30, L31, L32, L33, L34, L35, \\ L40, L41, L42, L43, L44, L45 ) \\ { \\ L05, L04, L03, L02, L01, L00, \\ L10, L11, L12, L13, L14, L15, \\ L25, L24, L23, L22, L21, L20, \\ L30, L31, L32, L33, L34, L35, \\ L46, L45, L44, L43, L42, L41 \\ } /* RGB LED logical order map */ /* Top->Bottom, Right->Left */ #define RGBLIGHT_LED_MAP LED_LAYOUT( \\ 25, 20, 15, 10, 5, 0, \\ 26, 21, 16, 11, 6, 1, \\ 27, 22, 17, 12, 7, 2, \\ 28, 23, 18, 13, 8, 3, \\ 29, 24, 19, 14, 9, 4 ) Clipping Range \u00b6 Using the rgblight_set_clipping_range() function, you can prepare more buffers than the actual number of LEDs, and output some of the buffers to the LEDs. This is useful if you want the split keyboard to treat left and right LEDs as logically contiguous. You can set the Clipping Range by executing the following code. // some source rgblight_set_clipping_range ( 3 , 4 ); In addition to setting the Clipping Range, you can use RGBLIGHT_LED_MAP together. // config.h #define RGBLED_NUM 8 #define RGBLIGHT_LED_MAP { 7, 6, 5, 4, 3, 2, 1, 0 } // some soruce rgblight_set_clipping_range ( 3 , 4 ); Hardware Modification \u00b6 If your keyboard lacks onboard underglow LEDs, you may often be able to solder on an RGB LED strip yourself. You will need to find an unused pin to wire to the data pin of your LED strip. Some keyboards may break out unused pins from the MCU to make soldering easier. The other two pins, VCC and GND, must also be connected to the appropriate power pins.","title":"RGB\u706f\u5149"},{"location":"feature_rgblight/#rgb-lighting","text":"QMK has the ability to control RGB LEDs attached to your keyboard. This is commonly called underglow , due to the LEDs often being mounted on the bottom of the keyboard, producing a nice diffused effect when combined with a translucent case. Some keyboards come with RGB LEDs preinstalled. Others must have them installed after the fact. See the Hardware Modification section for information on adding RGB lighting to your keyboard. Currently QMK supports the following addressable LEDs (however, the white LED in RGBW variants is not supported): WS2811, WS2812, WS2812B, WS2812C, etc. SK6812, SK6812MINI, SK6805 APA102 These LEDs are called \"addressable\" because instead of using a wire per color, each LED contains a small microchip that understands a special protocol sent over a single wire. The chip passes on the remaining data to the next LED, allowing them to be chained together. In this way, you can easily control the color of the individual LEDs.","title":"RGB Lighting"},{"location":"feature_rgblight/#usage","text":"On keyboards with onboard RGB LEDs, it is usually enabled by default. If it is not working for you, check that your rules.mk includes the following: RGBLIGHT_ENABLE = yes For APA102 LEDs, add the following to your rules.mk : RGBLIGHT_ENABLE = yes RGBLIGHT_DRIVER = APA102 At minimum you must define the data pin your LED strip is connected to, and the number of LEDs in the strip, in your config.h . For APA102 LEDs, you must also define the clock pin. If your keyboard has onboard RGB LEDs, and you are simply creating a keymap, you usually won't need to modify these. Define Description RGB_DI_PIN The pin connected to the data pin of the LEDs RGB_CI_PIN The pin connected to the clock pin of the LEDs (APA102 only) RGBLED_NUM The number of LEDs connected RGBLED_SPLIT (Optional) For split keyboards, the number of LEDs connected on each half directly wired to RGB_DI_PIN Then you should be able to use the keycodes below to change the RGB lighting to your liking.","title":"Usage"},{"location":"feature_rgblight/#color-selection","text":"QMK uses Hue, Saturation, and Value to select colors rather than RGB. The color wheel below demonstrates how this works. Changing the Hue cycles around the circle. Changing the Saturation moves between the inner and outer sections of the wheel, affecting the intensity of the color. Changing the Value sets the overall brightness.","title":"Color Selection"},{"location":"feature_rgblight/#keycodes","text":"Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Rainbow animation mode RGB_MODE_SWIRL RGB_M_SW Swirl animation mode RGB_MODE_SNAKE RGB_M_SN Snake animation mode RGB_MODE_KNIGHT RGB_M_K \"Knight Rider\" animation mode RGB_MODE_XMAS RGB_M_X Christmas animation mode RGB_MODE_GRADIENT RGB_M_G Static gradient animation mode RGB_MODE_RGBTEST RGB_M_T Red, Green, Blue test animation mode RGB_MODE_TWINKLE RGB_M_TW Twinkle animation mode Info By default, if you have both the RGB Light and the RGB Matrix feature enabled, these keycodes will work for both features, at the same time. You can disable the keycode functionality by defining the *_DISABLE_KEYCODES option for the specific feature.","title":"Keycodes"},{"location":"feature_rgblight/#configuration","text":"Your RGB lighting can be configured by placing these #define s in your config.h : Define Default Description RGBLIGHT_HUE_STEP 10 The number of steps to cycle through the hue by RGBLIGHT_SAT_STEP 17 The number of steps to increment the saturation by RGBLIGHT_VAL_STEP 17 The number of steps to increment the brightness by RGBLIGHT_LIMIT_VAL 255 The maximum brightness level RGBLIGHT_SLEEP Not defined If defined, the RGB lighting will be switched off when the host goes to sleep RGBLIGHT_SPLIT Not defined If defined, synchronization functionality for split keyboards is added RGBLIGHT_DISABLE_KEYCODES Not defined If defined, disables the ability to control RGB Light from the keycodes. You must use code functions to control the feature RGBLIGHT_DEFAULT_MODE RGBLIGHT_MODE_STATIC_LIGHT The default mode to use upon clearing the EEPROM RGBLIGHT_DEFAULT_HUE 0 (red) The default hue to use upon clearing the EEPROM RGBLIGHT_DEFAULT_SAT UINT8_MAX (255) The default saturation to use upon clearing the EEPROM RGBLIGHT_DEFAULT_VAL RGBLIGHT_LIMIT_VAL The default value (brightness) to use upon clearing the EEPROM RGBLIGHT_DEFAULT_SPD 0 The default speed to use upon clearing the EEPROM","title":"Configuration"},{"location":"feature_rgblight/#effects-and-animations","text":"Not only can this lighting be whatever color you want, if RGBLIGHT_EFFECT_xxxx or RGBLIGHT_ANIMATIONS is defined, you also have a number of animation modes at your disposal: Mode number symbol Additional number Description RGBLIGHT_MODE_STATIC_LIGHT None Solid color (this mode is always enabled) RGBLIGHT_MODE_BREATHING 0,1,2,3 Solid color breathing RGBLIGHT_MODE_RAINBOW_MOOD 0,1,2 Cycling rainbow RGBLIGHT_MODE_RAINBOW_SWIRL 0,1,2,3,4,5 Swirling rainbow RGBLIGHT_MODE_SNAKE 0,1,2,3,4,5 Snake RGBLIGHT_MODE_KNIGHT 0,1,2 Knight RGBLIGHT_MODE_CHRISTMAS None Christmas RGBLIGHT_MODE_STATIC_GRADIENT 0,1,..,9 Static gradient RGBLIGHT_MODE_RGB_TEST None RGB Test RGBLIGHT_MODE_ALTERNATING None Alternating RGBLIGHT_MODE_TWINKLE 0,1,2,3,4,5 Twinkle Check out this video for a demonstration. Note: For versions older than 0.6.117, The mode numbers were written directly. In quantum/rgblight.h there is a contrast table between the old mode number and the current symbol.","title":"Effects and Animations"},{"location":"feature_rgblight/#effect-and-animation-toggles","text":"Use these defines to add or remove animations from the firmware. When you are running low on flash space, it can be helpful to disable animations you are not using. Define Default Description RGBLIGHT_ANIMATIONS Not defined Enable all additional animation modes. RGBLIGHT_EFFECT_ALTERNATING Not defined Enable alternating animation mode. RGBLIGHT_EFFECT_BREATHING Not defined Enable breathing animation mode. RGBLIGHT_EFFECT_CHRISTMAS Not defined Enable christmas animation mode. RGBLIGHT_EFFECT_KNIGHT Not defined Enable knight animation mode. RGBLIGHT_EFFECT_RAINBOW_MOOD Not defined Enable rainbow mood animation mode. RGBLIGHT_EFFECT_RAINBOW_SWIRL Not defined Enable rainbow swirl animation mode. RGBLIGHT_EFFECT_RGB_TEST Not defined Enable RGB test animation mode. RGBLIGHT_EFFECT_SNAKE Not defined Enable snake animation mode. RGBLIGHT_EFFECT_STATIC_GRADIENT Not defined Enable static gradient mode. RGBLIGHT_EFFECT_TWINKLE Not defined Enable twinkle animation mode.","title":"Effect and Animation Toggles"},{"location":"feature_rgblight/#effect-and-animation-settings","text":"The following options are used to tweak the various animations: Define Default Description RGBLIGHT_EFFECT_BREATHE_CENTER Not defined If defined, used to calculate the curve for the breathing animation. Valid values are 1.0 to 2.7 RGBLIGHT_EFFECT_BREATHE_MAX 255 The maximum brightness for the breathing mode. Valid values are 1 to 255 RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL 40 How long (in milliseconds) to wait between animation steps for the \"Christmas\" animation RGBLIGHT_EFFECT_CHRISTMAS_STEP 2 The number of LEDs to group the red/green colors by for the \"Christmas\" animation RGBLIGHT_EFFECT_KNIGHT_LED_NUM RGBLED_NUM The number of LEDs to have the \"Knight\" animation travel RGBLIGHT_EFFECT_KNIGHT_LENGTH 3 The number of LEDs to light up for the \"Knight\" animation RGBLIGHT_EFFECT_KNIGHT_OFFSET 0 The number of LEDs to start the \"Knight\" animation from the start of the strip by RGBLIGHT_RAINBOW_SWIRL_RANGE 255 Range adjustment for the rainbow swirl effect to get different swirls RGBLIGHT_EFFECT_SNAKE_LENGTH 4 The number of LEDs to light up for the \"Snake\" animation RGBLIGHT_EFFECT_TWINKLE_LIFE 200 Adjusts how quickly each LED brightens and dims when twinkling (in animation steps) RGBLIGHT_EFFECT_TWINKLE_PROBABILITY 1/127 Adjusts how likely each LED is to twinkle (on each animation step)","title":"Effect and Animation Settings"},{"location":"feature_rgblight/#example-usage-to-reduce-memory-footprint","text":"Remove RGBLIGHT_ANIMATIONS from config.h . Selectively add the animations you want to enable. The following would enable two animations and save about 4KiB: #undef RGBLED_NUM -#define RGBLIGHT_ANIMATIONS +#define RGBLIGHT_EFFECT_STATIC_GRADIENT +#define RGBLIGHT_EFFECT_RAINBOW_SWIRL #define RGBLED_NUM 12 #define RGBLIGHT_HUE_STEP 8 #define RGBLIGHT_SAT_STEP 8","title":"Example Usage to Reduce Memory Footprint"},{"location":"feature_rgblight/#animation-speed","text":"You can also modify the speeds that the different modes animate at: Here is a quick demo on Youtube (with NPKC KC60) (https://www.youtube.com/watch?v=VKrpPAHlisY). // How long (in milliseconds) to wait between animation steps for each of the \"Solid color breathing\" animations const uint8_t RGBLED_BREATHING_INTERVALS [] PROGMEM = { 30 , 20 , 10 , 5 }; // How long (in milliseconds) to wait between animation steps for each of the \"Cycling rainbow\" animations const uint8_t RGBLED_RAINBOW_MOOD_INTERVALS [] PROGMEM = { 120 , 60 , 30 }; // How long (in milliseconds) to wait between animation steps for each of the \"Swirling rainbow\" animations const uint8_t RGBLED_RAINBOW_SWIRL_INTERVALS [] PROGMEM = { 100 , 50 , 20 }; // How long (in milliseconds) to wait between animation steps for each of the \"Snake\" animations const uint8_t RGBLED_SNAKE_INTERVALS [] PROGMEM = { 100 , 50 , 20 }; // How long (in milliseconds) to wait between animation steps for each of the \"Knight\" animations const uint8_t RGBLED_KNIGHT_INTERVALS [] PROGMEM = { 127 , 63 , 31 }; // How long (in milliseconds) to wait between animation steps for each of the \"Twinkle\" animations const uint8_t RGBLED_TWINKLE_INTERVALS [] PROGMEM = { 50 , 25 , 10 }; // These control which hues are selected for each of the \"Static gradient\" modes const uint8_t RGBLED_GRADIENT_RANGES [] PROGMEM = { 255 , 170 , 127 , 85 , 64 };","title":"Animation Speed"},{"location":"feature_rgblight/#lighting-layers","text":"Note Lighting Layers is an RGB Light feature, it will not work for RGB Matrix. See RGB Matrix Indicators for details on how to do so. By including #define RGBLIGHT_LAYERS in your config.h file you can enable lighting layers. These make it easy to use your underglow LEDs as status indicators to show which keyboard layer is currently active, or the state of caps lock, all without disrupting any animations. Here's a video showing an example of what you can do.","title":"Lighting Layers"},{"location":"feature_rgblight/#defining-lighting-layers","text":"By default, 8 layers are possible. This can be expanded to as many as 32 by overriding the definition of RGBLIGHT_MAX_LAYERS in config.h (e.g. #define RGBLIGHT_MAX_LAYERS 32 ). Please note, if you use a split keyboard, you will need to flash both sides of the split after changing this. Also, increasing the maximum will increase the firmware size, and will slow sync on split keyboards. To define a layer, we modify keymap.c to list the LED ranges and the colors we want to overlay on them using an array of rgblight_segment_t using the RGBLIGHT_LAYER_SEGMENTS macro. We can define multiple layers and enable/disable them independently: // Light LEDs 6 to 9 and 12 to 15 red when caps lock is active. Hard to ignore! const rgblight_segment_t PROGMEM my_capslock_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 6 , 4 , HSV_RED }, // Light 4 LEDs, starting with LED 6 { 12 , 4 , HSV_RED } // Light 4 LEDs, starting with LED 12 ); // Light LEDs 9 & 10 in cyan when keyboard layer 1 is active const rgblight_segment_t PROGMEM my_layer1_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 2 , HSV_CYAN } ); // Light LEDs 11 & 12 in purple when keyboard layer 2 is active const rgblight_segment_t PROGMEM my_layer2_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 11 , 2 , HSV_PURPLE } ); // Light LEDs 13 & 14 in green when keyboard layer 3 is active const rgblight_segment_t PROGMEM my_layer3_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 13 , 2 , HSV_GREEN } ); // etc.. We combine these layers into an array using the RGBLIGHT_LAYERS_LIST macro, and assign it to the rgblight_layers variable during keyboard setup. Note that you can only define up to 8 lighting layers. Any extra layers will be ignored. Since the different lighting layers overlap, the order matters in the array, with later layers taking precedence: // Now define the array of layers. Later layers take precedence const rgblight_segment_t * const PROGMEM my_rgb_layers [] = RGBLIGHT_LAYERS_LIST ( my_capslock_layer , my_layer1_layer , // Overrides caps lock layer my_layer2_layer , // Overrides other layers my_layer3_layer // Overrides other layers ); void keyboard_post_init_user ( void ) { // Enable the LED layers rgblight_layers = my_rgb_layers ; } Note: For split keyboards with two controllers, both sides need to be flashed when updating the contents of rgblight_layers.","title":"Defining Lighting Layers"},{"location":"feature_rgblight/#enabling-lighting-layers","text":"Everything above just configured the definition of each lighting layer. We can now enable and disable the lighting layers whenever the state of the keyboard changes: bool led_update_user ( led_t led_state ) { rgblight_set_layer_state ( 0 , led_state . caps_lock ); return true ; } layer_state_t default_layer_state_set_user ( layer_state_t state ) { rgblight_set_layer_state ( 1 , layer_state_cmp ( state , _DVORAK )); return state ; } layer_state_t layer_state_set_user ( layer_state_t state ) { rgblight_set_layer_state ( 2 , layer_state_cmp ( state , _FN )); rgblight_set_layer_state ( 3 , layer_state_cmp ( state , _ADJUST )); return state ; }","title":"Enabling and disabling lighting layers"},{"location":"feature_rgblight/#lighting-layer-blink","text":"By including #define RGBLIGHT_LAYER_BLINK in your config.h file you can turn a lighting layer on for a specified duration. Once the specified number of milliseconds has elapsed the layer will be turned off. This is useful, e.g., if you want to acknowledge some action (e.g. toggling some setting): const rgblight_segment_t PROGMEM _yes_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 6 , HSV_GREEN } ); const rgblight_segment_t PROGMEM _no_layer [] = RGBLIGHT_LAYER_SEGMENTS ( { 9 , 6 , HSV_RED } ); const rgblight_segment_t * const PROGMEM _rgb_layers [] = RGBLIGHT_LAYERS_LIST ( _yes_layer , _no_layer ); void keyboard_post_init_user ( void ) { rgblight_layers = _rgb_layers ; } // Note we user post_process_record_user because we want the state // after the flag has been flipped... void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case DEBUG : rgblight_blink_layer ( debug_enable ? 0 : 1 , 500 ); break ; case NK_TOGG : case NK_ON : case NK_OFF : rgblight_blink_layer ( keymap_config . nkro ? 0 : 1 , 500 ); break ; } } You can also use rgblight_blink_layer_repeat to specify the amount of times the layer is supposed to blink. Using the layers from above, void post_process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case DEBUG : rgblight_blink_layer_repeat ( debug_enable ? 0 : 1 , 200 , 3 ); break ; } } would turn the layer 0 (or 1) on and off again three times when DEBUG is pressed.","title":"Lighting layer blink"},{"location":"feature_rgblight/#overriding-rgb-lighting-onoff-status","text":"Normally lighting layers are not shown when RGB Lighting is disabled (e.g. with RGB_TOG keycode). If you would like lighting layers to work even when the RGB Lighting is otherwise off, add #define RGBLIGHT_LAYERS_OVERRIDE_RGB_OFF to your config.h .","title":"Overriding RGB Lighting on/off status"},{"location":"feature_rgblight/#functions","text":"If you need to change your RGB lighting in code, for example in a macro to change the color whenever you switch layers, QMK provides a set of functions to assist you. See rgblight.h for the full list, but the most commonly used functions include:","title":"Functions"},{"location":"feature_rgblight/#utility-functions","text":"Function Description sethsv(hue, sat, val, ledbuf) Set ledbuf to the given HSV value sethsv_raw(hue, sat, val, ledbuf) Set ledbuf to the given HSV value without RGBLIGHT_LIMIT_VAL check setrgb(r, g, b, ledbuf) Set ledbuf to the given RGB value where r / g / b","title":"Utility Functions"},{"location":"feature_rgblight/#low-level-functions","text":"Function Description rgblight_set() Flash out led buffers to LEDs rgblight_set_clipping_range(pos, num) Set clipping Range. see Clipping Range Example: sethsv ( HSV_WHITE , ( LED_TYPE * ) & led [ 0 ]); // led 0 sethsv ( HSV_RED , ( LED_TYPE * ) & led [ 1 ]); // led 1 sethsv ( HSV_GREEN , ( LED_TYPE * ) & led [ 2 ]); // led 2 rgblight_set (); // Utility functions do not call rgblight_set() automatically, so they need to be called explicitly.","title":"Low level Functions"},{"location":"feature_rgblight/#effects-and-animations-functions","text":"","title":"Effects and Animations Functions"},{"location":"feature_rgblight/#colors","text":"These are shorthands to popular colors. The RGB ones can be passed to the setrgb functions, while the HSV ones to the sethsv functions. RGB HSV RGB_WHITE HSV_WHITE RGB_RED HSV_RED RGB_CORAL HSV_CORAL RGB_ORANGE HSV_ORANGE RGB_GOLDENROD HSV_GOLDENROD RGB_GOLD HSV_GOLD RGB_YELLOW HSV_YELLOW RGB_CHARTREUSE HSV_CHARTREUSE RGB_GREEN HSV_GREEN RGB_SPRINGGREEN HSV_SPRINGGREEN RGB_TURQUOISE HSV_TURQUOISE RGB_TEAL HSV_TEAL RGB_CYAN HSV_CYAN RGB_AZURE HSV_AZURE RGB_BLUE HSV_BLUE RGB_PURPLE HSV_PURPLE RGB_MAGENTA HSV_MAGENTA RGB_PINK HSV_PINK rgblight_setrgb ( RGB_ORANGE ); rgblight_sethsv_noeeprom ( HSV_GREEN ); rgblight_setrgb_at ( RGB_GOLD , 3 ); rgblight_sethsv_range ( HSV_WHITE , 0 , 6 ); These are defined in rgblight_list.h . Feel free to add to this list!","title":"Colors"},{"location":"feature_rgblight/#changing-the-order-of-the-leds","text":"If you want to make the logical order of LEDs different from the electrical connection order, you can do this by defining the RGBLIGHT_LED_MAP macro in your config.h . Normally, the contents of the LED buffer are output to the LEDs in the same order. By defining RGBLIGHT_LED_MAP as in the example below, you can specify the LED with addressing in reverse order of the electrical connection order. // config.h #define RGBLED_NUM 4 #define RGBLIGHT_LED_MAP { 3, 2, 1, 0 } For keyboards that use the RGB LEDs as a backlight for each key, you can also define it as in the example below. // config.h #define RGBLED_NUM 30 /* RGB LED Conversion macro from physical array to electric array */ #define LED_LAYOUT( \\ L00, L01, L02, L03, L04, L05, \\ L10, L11, L12, L13, L14, L15, \\ L20, L21, L22, L23, L24, L25, \\ L30, L31, L32, L33, L34, L35, \\ L40, L41, L42, L43, L44, L45 ) \\ { \\ L05, L04, L03, L02, L01, L00, \\ L10, L11, L12, L13, L14, L15, \\ L25, L24, L23, L22, L21, L20, \\ L30, L31, L32, L33, L34, L35, \\ L46, L45, L44, L43, L42, L41 \\ } /* RGB LED logical order map */ /* Top->Bottom, Right->Left */ #define RGBLIGHT_LED_MAP LED_LAYOUT( \\ 25, 20, 15, 10, 5, 0, \\ 26, 21, 16, 11, 6, 1, \\ 27, 22, 17, 12, 7, 2, \\ 28, 23, 18, 13, 8, 3, \\ 29, 24, 19, 14, 9, 4 )","title":"Changing the order of the LEDs"},{"location":"feature_rgblight/#clipping-range","text":"Using the rgblight_set_clipping_range() function, you can prepare more buffers than the actual number of LEDs, and output some of the buffers to the LEDs. This is useful if you want the split keyboard to treat left and right LEDs as logically contiguous. You can set the Clipping Range by executing the following code. // some source rgblight_set_clipping_range ( 3 , 4 ); In addition to setting the Clipping Range, you can use RGBLIGHT_LED_MAP together. // config.h #define RGBLED_NUM 8 #define RGBLIGHT_LED_MAP { 7, 6, 5, 4, 3, 2, 1, 0 } // some soruce rgblight_set_clipping_range ( 3 , 4 );","title":"Clipping Range"},{"location":"feature_rgblight/#hardware-modification","text":"If your keyboard lacks onboard underglow LEDs, you may often be able to solder on an RGB LED strip yourself. You will need to find an unused pin to wire to the data pin of your LED strip. Some keyboards may break out unused pins from the MCU to make soldering easier. The other two pins, VCC and GND, must also be connected to the appropriate power pins.","title":"Hardware Modification"},{"location":"feature_sequencer/","text":"Sequencer \u00b6 Since QMK has experimental support for MIDI, you can now turn your keyboard into a step sequencer ! Important This feature is highly experimental, it has only been tested on a Planck EZ so far. Also, the scope will be limited to support the drum machine use-case to start with. Enable the step sequencer \u00b6 Add the following line to your rules.mk : SEQUENCER_ENABLE = yes By default the sequencer has 16 steps, but you can override this setting in your config.h : #define SEQUENCER_STEPS 32 Tracks \u00b6 You can program up to 8 independent tracks with the step sequencer. Select the tracks you want to edit, enable or disable some steps, and start the sequence! Resolutions \u00b6 While the tempo defines the absolute speed at which the sequencer goes through the steps, the resolution defines the granularity of these steps (from coarser to finer). Resolution Description SQ_RES_2 Every other beat SQ_RES_2T Every 1.5 beats SQ_RES_4 Every beat SQ_RES_4T Three times per 2 beats SQ_RES_8 Twice per beat SQ_RES_8T Three times per beat SQ_RES_16 Four times per beat SQ_RES_16T Six times per beat SQ_RES_32 Eight times per beat Keycodes \u00b6 Keycode Description SQ_ON Start the step sequencer SQ_OFF Stop the step sequencer SQ_TOG Toggle the step sequencer playback SQ_SALL Enable all the steps SQ_SCLR Disable all the steps SQ_S(n) Toggle the step n SQ_TMPD Decrease the tempo SQ_TMPU Increase the tempo SQ_R(n) Set the resolution to n SQ_RESD Change to the slower resolution SQ_RESU Change to the faster resolution SQ_T(n) Set n as the only active track or deactivate all Functions \u00b6 Function Description bool is_sequencer_on(void); Return whether the sequencer is playing void sequencer_toggle(void); Toggle the step sequencer playback void sequencer_on(void); Start the step sequencer void sequencer_off(void); Stop the step sequencer bool is_sequencer_step_on(uint8_t step); Return whether the step is currently enabled void sequencer_set_step(uint8_t step, bool value); Enable or disable the step void sequencer_set_step_on(); Enable the step void sequencer_set_step_off(); Disable the step void sequencer_toggle_step(uint8_t step); Toggle the step void sequencer_set_all_steps(bool value); Enable or disable all the steps void sequencer_set_all_steps_on(); Enable all the steps void sequencer_set_all_steps_off(); Disable all the steps uint8_t sequencer_get_tempo(void); Return the current tempo void sequencer_set_tempo(uint8_t tempo); Set the tempo to tempo (between 1 and 255) void sequencer_increase_tempo(void); Increase the tempo void sequencer_decrease_tempo(void); Decrease the tempo sequencer_resolution_t sequencer_get_resolution(void); Return the current resolution void sequencer_set_resolution(sequencer_resolution_t resolution); Set the resolution to resolution void sequencer_increase_resolution(void); Change to the faster resolution void sequencer_decrease_resolution(void); Change to the slower resolution bool is_sequencer_track_active(uint8_t track); Return whether the track is active void sequencer_set_track_activation(uint8_t track, bool value); Activate or deactivate the track void sequencer_toggle_track_activation(uint8_t track); Toggle the track void sequencer_activate_track(uint8_t track); Activate the track void sequencer_deactivate_track(uint8_t track); Deactivate the track void sequencer_toggle_single_active_track(uint8_t track); Set track as the only active track or deactivate all","title":"Sequencer"},{"location":"feature_sequencer/#sequencer","text":"Since QMK has experimental support for MIDI, you can now turn your keyboard into a step sequencer ! Important This feature is highly experimental, it has only been tested on a Planck EZ so far. Also, the scope will be limited to support the drum machine use-case to start with.","title":"Sequencer"},{"location":"feature_sequencer/#enable-the-step-sequencer","text":"Add the following line to your rules.mk : SEQUENCER_ENABLE = yes By default the sequencer has 16 steps, but you can override this setting in your config.h : #define SEQUENCER_STEPS 32","title":"Enable the step sequencer"},{"location":"feature_sequencer/#tracks","text":"You can program up to 8 independent tracks with the step sequencer. Select the tracks you want to edit, enable or disable some steps, and start the sequence!","title":"Tracks"},{"location":"feature_sequencer/#resolutions","text":"While the tempo defines the absolute speed at which the sequencer goes through the steps, the resolution defines the granularity of these steps (from coarser to finer). Resolution Description SQ_RES_2 Every other beat SQ_RES_2T Every 1.5 beats SQ_RES_4 Every beat SQ_RES_4T Three times per 2 beats SQ_RES_8 Twice per beat SQ_RES_8T Three times per beat SQ_RES_16 Four times per beat SQ_RES_16T Six times per beat SQ_RES_32 Eight times per beat","title":"Resolutions"},{"location":"feature_sequencer/#keycodes","text":"Keycode Description SQ_ON Start the step sequencer SQ_OFF Stop the step sequencer SQ_TOG Toggle the step sequencer playback SQ_SALL Enable all the steps SQ_SCLR Disable all the steps SQ_S(n) Toggle the step n SQ_TMPD Decrease the tempo SQ_TMPU Increase the tempo SQ_R(n) Set the resolution to n SQ_RESD Change to the slower resolution SQ_RESU Change to the faster resolution SQ_T(n) Set n as the only active track or deactivate all","title":"Keycodes"},{"location":"feature_sequencer/#functions","text":"Function Description bool is_sequencer_on(void); Return whether the sequencer is playing void sequencer_toggle(void); Toggle the step sequencer playback void sequencer_on(void); Start the step sequencer void sequencer_off(void); Stop the step sequencer bool is_sequencer_step_on(uint8_t step); Return whether the step is currently enabled void sequencer_set_step(uint8_t step, bool value); Enable or disable the step void sequencer_set_step_on(); Enable the step void sequencer_set_step_off(); Disable the step void sequencer_toggle_step(uint8_t step); Toggle the step void sequencer_set_all_steps(bool value); Enable or disable all the steps void sequencer_set_all_steps_on(); Enable all the steps void sequencer_set_all_steps_off(); Disable all the steps uint8_t sequencer_get_tempo(void); Return the current tempo void sequencer_set_tempo(uint8_t tempo); Set the tempo to tempo (between 1 and 255) void sequencer_increase_tempo(void); Increase the tempo void sequencer_decrease_tempo(void); Decrease the tempo sequencer_resolution_t sequencer_get_resolution(void); Return the current resolution void sequencer_set_resolution(sequencer_resolution_t resolution); Set the resolution to resolution void sequencer_increase_resolution(void); Change to the faster resolution void sequencer_decrease_resolution(void); Change to the slower resolution bool is_sequencer_track_active(uint8_t track); Return whether the track is active void sequencer_set_track_activation(uint8_t track, bool value); Activate or deactivate the track void sequencer_toggle_track_activation(uint8_t track); Toggle the track void sequencer_activate_track(uint8_t track); Activate the track void sequencer_deactivate_track(uint8_t track); Deactivate the track void sequencer_toggle_single_active_track(uint8_t track); Set track as the only active track or deactivate all","title":"Functions"},{"location":"feature_space_cadet/","text":"Space Cadet: The Future, Built In \u00b6 Steve Losh described the Space Cadet Shift quite well. Essentially, when you tap Left Shift on its own, you get an opening parenthesis; tap Right Shift on its own and you get the closing one. When held, the Shift keys function as normal. Yes, it's as cool as it sounds, and now even cooler supporting Control and Alt as well! Usage \u00b6 Firstly, in your keymap, do one of the following: - Replace the Left Shift key with KC_LSPO (Left Shift, Parenthesis Open), and Right Shift with KC_RSPC (Right Shift, Parenthesis Close). - Replace the Left Control key with KC_LCPO (Left Control, Parenthesis Open), and Right Control with KC_RCPC (Right Control, Parenthesis Close). - Replace the Left Alt key with KC_LAPO (Left Alt, Parenthesis Open), and Right Alt with KC_RAPC (Right Alt, Parenthesis Close). - Replace any Shift key in your keymap with KC_SFTENT (Right Shift, Enter). Keycodes \u00b6 Keycode Description KC_LSPO Left Shift when held, ( when tapped KC_RSPC Right Shift when held, ) when tapped KC_LCPO Left Control when held, ( when tapped KC_RCPC Right Control when held, ) when tapped KC_LAPO Left Alt when held, ( when tapped KC_RAPC Right Alt when held, ) when tapped KC_SFTENT Right Shift when held, Enter when tapped Caveats \u00b6 Space Cadet's functionality can conflict with the default Command functionality when both Shift keys are held at the same time. See the Command feature for info on how to change it, or make sure that Command is disabled in your rules.mk with: COMMAND_ENABLE = no Configuration \u00b6 By default Space Cadet assumes a US ANSI layout, but if your layout uses different keys for parentheses, you can redefine them in your config.h . In addition, you can redefine the modifier to send on tap, or even send no modifier at all. The new configuration defines bundle all options up into a single define of 3 key codes in this order: the Modifier when held or when used with other keys, the Tap Modifer sent when tapped (no modifier if KC_TRNS ), finally the Keycode sent when tapped. Now keep in mind, mods from other keys will still apply to the Keycode if say KC_RSFT is held while tapping KC_LSPO key with KC_TRNS as the Tap Modifer . Define Default Description LSPO_KEYS KC_LSFT, LSPO_MOD, LSPO_KEY Send KC_LSFT when held, the mod and key defined by LSPO_MOD and LSPO_KEY . RSPC_KEYS KC_RSFT, RSPC_MOD, RSPC_KEY Send KC_RSFT when held, the mod and key defined by RSPC_MOD and RSPC_KEY . LCPO_KEYS KC_LCTL, KC_LSFT, KC_9 Send KC_LCTL when held, the mod KC_LSFT with the key KC_9 when tapped. RCPC_KEYS KC_RCTL, KC_RSFT, KC_0 Send KC_RCTL when held, the mod KC_RSFT with the key KC_0 when tapped. LAPO_KEYS KC_LALT, KC_LSFT, KC_9 Send KC_LALT when held, the mod KC_LSFT with the key KC_9 when tapped. RAPC_KEYS KC_RALT, KC_RSFT, KC_0 Send KC_RALT when held, the mod KC_RSFT with the key KC_0 when tapped. SFTENT_KEYS KC_RSFT, KC_TRNS, SFTENT_KEY Send KC_RSFT when held, no mod with the key SFTENT_KEY when tapped. SPACE_CADET_MODIFIER_CARRYOVER Not defined Store current modifiers before the hold mod is pressed and use them with the tap mod and keycode. Useful for when you frequently release a modifier before triggering Space Cadet. Obsolete Configuration \u00b6 These defines are used in the above defines internally to support backwards compatibility, so you may continue to use them, however the above defines open up a larger range of flexibility than before. As an example, say you want to not send any modifier when you tap just KC_LSPO , with the old defines you had an all or nothing choice of using the DISABLE_SPACE_CADET_MODIFIER define. Now you can define that key as: #define LSPO_KEYS KC_LSFT, KC_TRNS, KC_9 . This tells the system to set Left Shift if held or used with other keys, then on tap send no modifier (transparent) with the KC_9 . Define Default Description LSPO_KEY KC_9 The keycode to send when Left Shift is tapped RSPC_KEY KC_0 The keycode to send when Right Shift is tapped LSPO_MOD KC_LSFT The modifier to apply to LSPO_KEY RSPC_MOD KC_RSFT The modifier to apply to RSPC_KEY SFTENT_KEY KC_ENT The keycode to send when the Shift key is tapped DISABLE_SPACE_CADET_MODIFIER Not defined If defined, prevent the Space Cadet from applying a modifier","title":"\u7a7a\u683c\u5019\u8865\u6362\u6321"},{"location":"feature_space_cadet/#space-cadet-the-future-built-in","text":"Steve Losh described the Space Cadet Shift quite well. Essentially, when you tap Left Shift on its own, you get an opening parenthesis; tap Right Shift on its own and you get the closing one. When held, the Shift keys function as normal. Yes, it's as cool as it sounds, and now even cooler supporting Control and Alt as well!","title":"Space Cadet: The Future, Built In"},{"location":"feature_space_cadet/#usage","text":"Firstly, in your keymap, do one of the following: - Replace the Left Shift key with KC_LSPO (Left Shift, Parenthesis Open), and Right Shift with KC_RSPC (Right Shift, Parenthesis Close). - Replace the Left Control key with KC_LCPO (Left Control, Parenthesis Open), and Right Control with KC_RCPC (Right Control, Parenthesis Close). - Replace the Left Alt key with KC_LAPO (Left Alt, Parenthesis Open), and Right Alt with KC_RAPC (Right Alt, Parenthesis Close). - Replace any Shift key in your keymap with KC_SFTENT (Right Shift, Enter).","title":"Usage"},{"location":"feature_space_cadet/#keycodes","text":"Keycode Description KC_LSPO Left Shift when held, ( when tapped KC_RSPC Right Shift when held, ) when tapped KC_LCPO Left Control when held, ( when tapped KC_RCPC Right Control when held, ) when tapped KC_LAPO Left Alt when held, ( when tapped KC_RAPC Right Alt when held, ) when tapped KC_SFTENT Right Shift when held, Enter when tapped","title":"Keycodes"},{"location":"feature_space_cadet/#caveats","text":"Space Cadet's functionality can conflict with the default Command functionality when both Shift keys are held at the same time. See the Command feature for info on how to change it, or make sure that Command is disabled in your rules.mk with: COMMAND_ENABLE = no","title":"Caveats"},{"location":"feature_space_cadet/#configuration","text":"By default Space Cadet assumes a US ANSI layout, but if your layout uses different keys for parentheses, you can redefine them in your config.h . In addition, you can redefine the modifier to send on tap, or even send no modifier at all. The new configuration defines bundle all options up into a single define of 3 key codes in this order: the Modifier when held or when used with other keys, the Tap Modifer sent when tapped (no modifier if KC_TRNS ), finally the Keycode sent when tapped. Now keep in mind, mods from other keys will still apply to the Keycode if say KC_RSFT is held while tapping KC_LSPO key with KC_TRNS as the Tap Modifer . Define Default Description LSPO_KEYS KC_LSFT, LSPO_MOD, LSPO_KEY Send KC_LSFT when held, the mod and key defined by LSPO_MOD and LSPO_KEY . RSPC_KEYS KC_RSFT, RSPC_MOD, RSPC_KEY Send KC_RSFT when held, the mod and key defined by RSPC_MOD and RSPC_KEY . LCPO_KEYS KC_LCTL, KC_LSFT, KC_9 Send KC_LCTL when held, the mod KC_LSFT with the key KC_9 when tapped. RCPC_KEYS KC_RCTL, KC_RSFT, KC_0 Send KC_RCTL when held, the mod KC_RSFT with the key KC_0 when tapped. LAPO_KEYS KC_LALT, KC_LSFT, KC_9 Send KC_LALT when held, the mod KC_LSFT with the key KC_9 when tapped. RAPC_KEYS KC_RALT, KC_RSFT, KC_0 Send KC_RALT when held, the mod KC_RSFT with the key KC_0 when tapped. SFTENT_KEYS KC_RSFT, KC_TRNS, SFTENT_KEY Send KC_RSFT when held, no mod with the key SFTENT_KEY when tapped. SPACE_CADET_MODIFIER_CARRYOVER Not defined Store current modifiers before the hold mod is pressed and use them with the tap mod and keycode. Useful for when you frequently release a modifier before triggering Space Cadet.","title":"Configuration"},{"location":"feature_space_cadet/#obsolete-configuration","text":"These defines are used in the above defines internally to support backwards compatibility, so you may continue to use them, however the above defines open up a larger range of flexibility than before. As an example, say you want to not send any modifier when you tap just KC_LSPO , with the old defines you had an all or nothing choice of using the DISABLE_SPACE_CADET_MODIFIER define. Now you can define that key as: #define LSPO_KEYS KC_LSFT, KC_TRNS, KC_9 . This tells the system to set Left Shift if held or used with other keys, then on tap send no modifier (transparent) with the KC_9 . Define Default Description LSPO_KEY KC_9 The keycode to send when Left Shift is tapped RSPC_KEY KC_0 The keycode to send when Right Shift is tapped LSPO_MOD KC_LSFT The modifier to apply to LSPO_KEY RSPC_MOD KC_RSFT The modifier to apply to RSPC_KEY SFTENT_KEY KC_ENT The keycode to send when the Shift key is tapped DISABLE_SPACE_CADET_MODIFIER Not defined If defined, prevent the Space Cadet from applying a modifier","title":"Obsolete Configuration"},{"location":"feature_split_keyboard/","text":"Split Keyboard \u00b6 Many keyboards in the QMK Firmware repo are \"split\" keyboards. They use two controllers\u2014one plugging into USB, and the second connected by a serial or an I 2 C connection over a TRRS or similar cable. Split keyboards can have a lot of benefits, but there is some additional work needed to get them enabled. QMK Firmware has a generic implementation that is usable by any board, as well as numerous board specific implementations. For this, we will mostly be talking about the generic implementation used by the Let's Split and other keyboards. Info ARM is not yet fully supported for Split Keyboards and has many limitations. Progress is being made, but we have not yet reached 100% feature parity. Compatibility Overview \u00b6 Transport AVR ARM 'serial' :heavy_check_mark: :white_check_mark: 1 I2C :heavy_check_mark: Notes: Both hardware and software limitations are detailed within the driver documentation . Hardware Configuration \u00b6 This assumes that you're using two Pro Micro-compatible controllers, and are using TRRS jacks to connect to two halves. Required Hardware \u00b6 Apart from diodes and key switches for the keyboard matrix in each half, you will need 2x TRRS sockets and 1x TRRS cable. Alternatively, you can use any sort of cable and socket that has at least 3 wires. If you want to use I 2 C to communicate between halves, you will need a cable with at least 4 wires and 2x 4.7k\u03a9 pull-up resistors. Considerations \u00b6 The most commonly used connection is a TRRS cable and jacks. These provide 4 wires, making them very useful for split keyboards, and are easy to find. However, since one of the wires carries VCC, this means that the boards are not hot pluggable. You should always disconnect the board from USB before unplugging and plugging in TRRS cables, or you can short the controller, or worse. Another option is to use phone cables (as in, old school RJ-11/RJ-14 cables). Make sure that you use one that actually supports 4 wires/lanes. However, USB cables, SATA cables, and even just 4 wires have been known to be used for communication between the controllers. Tip Using USB cables for communication between the controllers works just fine, but the connector could be mistaken for a normal USB connection and potentially short out the keyboard, depending on how it's wired. For this reason, they are not recommended for connecting split keyboards. Serial Wiring \u00b6 The 3 wires of the TRS/TRRS cable need to connect GND, VCC, and D0/D1/D2/D3 (aka PD0/PD1/PD2/PD3) between the two Pro Micros. Note The pin used here is actually set by SOFT_SERIAL_PIN below. I 2 C Wiring \u00b6 The 4 wires of the TRRS cable need to connect GND, VCC, and SCL and SDA (aka PD0/pin 3 and PD1/pin 2, respectively) between the two Pro Micros. The pull-up resistors may be placed on either half. If you wish to use the halves independently, it is also possible to use 4 resistors and have the pull-ups in both halves. Note that the total resistance for the connected system should be within spec at 2.2k-10kOhm, with an 'ideal' at 4.7kOhm, regardless of the placement and number. Firmware Configuration \u00b6 To enable the split keyboard feature, add the following to your rules.mk : SPLIT_KEYBOARD = yes If you're using a custom transport (communication method), then you will also need to add: SPLIT_TRANSPORT = custom Setting Handedness \u00b6 By default, the firmware does not know which side is which; it needs some help to determine that. There are several ways to do this, listed in order of precedence. Handedness by Pin \u00b6 You can configure the firmware to read a pin on the controller to determine handedness. To do this, add the following to your config.h file: #define SPLIT_HAND_PIN B7 This will read the specified pin. If it's high, then the controller assumes it is the left hand, and if it's low, it's assumed to be the right side. Handedness by Matrix Pin \u00b6 You can configure the firmware to read key matrix pins on the controller to determine handedness. To do this, add the following to your config.h file: #define SPLIT_HAND_MATRIX_GRID D0, F1 The first pin is the output pin and the second is the input pin. Some keyboards have unused intersections in the key matrix. This setting uses one of these unused intersections to determine the handness. Normally, when a diode is connected to an intersection, it is judged to be left. If you add the following definition, it will be judged to be right. #define SPLIT_HAND_MATRIX_GRID_LOW_IS_RIGHT Note that adding a diode at a previously unused intersection will effectively tell the firmware that there is a key held down at that point. You can instruct qmk to ignore that intersection by defining MATRIX_MASKED and then defining a matrix_row_t matrix_mask[MATRIX_ROWS] array in your keyboard config. Each bit of a single value (starting form the least-significant bit) is used to tell qmk whether or not to pay attention to key presses at that intersection. While MATRIX_MASKED isn't necessary to use SPLIT_HAND_MATRIX_GRID successfully, without it you may experience issues trying to suspend your computer with your keyboard attached as the matrix will always report at least one key-press. Handedness by EEPROM \u00b6 This method sets the keyboard's handedness by setting a flag in the persistent storage ( EEPROM ). This is checked when the controller first starts up, and determines what half the keyboard is, and how to orient the keyboard layout. To enable this method, add the following to your config.h file: #define EE_HANDS However, you'll have to flash the EEPROM files for the correct hand to each controller. You can do this manually, or there are targets for avrdude and dfu to do this, while flashing the firmware: :avrdude-split-left :avrdude-split-right :dfu-split-left :dfu-split-right :dfu-util-split-left :dfu-util-split-right Example: make crkbd:default:avrdude-split-left This setting is not changed when re-initializing the EEPROM using the EEP_RST key, or using the eeconfig_init() function. However, if you reset the EEPROM outside of the firmware's built in options (such as flashing a file that overwrites the EEPROM , like how the QMK Toolbox 's \"Reset EEPROM\" button works), you'll need to re-flash the controller with the EEPROM files. You can find the EEPROM files in the QMK firmware repo, here . Handedness by #define \u00b6 You can set the handedness at compile time. This is done by adding the following to your config.h file: #define MASTER_RIGHT or #define MASTER_LEFT If neither are defined, the handedness defaults to MASTER_LEFT . Communication Options \u00b6 Because not every split keyboard is identical, there are a number of additional options that can be configured in your config.h file. #define USE_I2C This enables I 2 C support for split keyboards. This isn't strictly for communication, but can be used for OLED or other I 2 C-based devices. #define SOFT_SERIAL_PIN D0 This sets the pin to be used for serial communication. If you're not using serial, you shouldn't need to define this. However, if you are using serial and I 2 C on the board, you will need to set this, and to something other than D0 and D1 (as these are used for I 2 C communication). #define SELECT_SOFT_SERIAL_SPEED {#}` If you're having issues with serial communication, you can change this value, as it controls the communication speed for serial. The default is 1, and the possible values are: 0 : about 189kbps (Experimental only) 1 : about 137kbps (default) 2 : about 75kbps 3 : about 39kbps 4 : about 26kbps 5 : about 20kbps #define SPLIT_MODS_ENABLE This enables transmitting modifier state (normal, weak and oneshot) to the non primary side of the split keyboard. This adds a few bytes of data to the split communication protocol and may impact the matrix scan speed when enabled. The purpose of this feature is to support cosmetic use of modifer state (e.g. displaying status on an OLED screen). #define SPLIT_TRANSPORT_MIRROR This mirrors the master side matrix to the slave side for features that react or require knowledge of master side key presses on the slave side. This adds a few bytes of data to the split communication protocol and may impact the matrix scan speed when enabled. The purpose of this feature is to support cosmetic use of key events (e.g. RGB reacting to Keypresses). Hardware Configuration Options \u00b6 There are some settings that you may need to configure, based on how the hardware is set up. #define MATRIX_ROW_PINS_RIGHT { <row pins> } #define MATRIX_COL_PINS_RIGHT { <col pins> } This allows you to specify a different set of pins for the matrix on the right side. This is useful if you have a board with differently-shaped halves that requires a different configuration (such as Keebio's Quefrency). #define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } This allows you to specify a different set of direct pins for the right side. #define ENCODERS_PAD_A_RIGHT { encoder1a, encoder2a } #define ENCODERS_PAD_B_RIGHT { encoder1b, encoder2b } This allows you to specify a different set of encoder pins for the right side. #define RGBLIGHT_SPLIT This option enables synchronization of the RGB Light modes between the controllers of the split keyboard. This is for keyboards that have RGB LEDs that are directly wired to the controller (that is, they are not using the \"extra data\" option on the TRRS cable). #define RGBLED_SPLIT { 6, 6 } This sets how many LEDs are directly connected to each controller. The first number is the left side, and the second number is the right side. Info This setting implies that RGBLIGHT_SPLIT is enabled, and will forcibly enable it, if it's not. #define SPLIT_USB_DETECT Enabling this option changes the startup behavior to listen for an active USB communication to delegate which part is master and which is slave. With this option enabled and theres's USB communication, then that half assumes it is the master, otherwise it assumes it is the slave. Without this option, the master is the half that can detect voltage on the physical USB connection (VBUS detection). Enabled by default on ChibiOS/ARM. Tip This setting will stop the ability to demo using battery packs. #define SPLIT_USB_TIMEOUT 2000 This sets the maximum timeout when detecting master/slave when using SPLIT_USB_DETECT . #define SPLIT_USB_TIMEOUT_POLL 10 This sets the poll frequency when detecting master/slave when using SPLIT_USB_DETECT Hardware Considerations and Mods \u00b6 Master/slave delegation is made either by detecting voltage on VBUS connection or waiting for USB communication ( SPLIT_USB_DETECT ). Pro Micro boards can use VBUS detection out of the box and be used with or without SPLIT_USB_DETECT . Many ARM boards, but not all, do not support VBUS detection. Because it is common that ARM boards lack VBUS detection, SPLIT_USB_DETECT is automatically defined on ARM targets (technically when ChibiOS is targetted). Teensy boards \u00b6 Teensy boards lack VBUS detection out of the box and must have SPLIT_USB_DETECT defined. With the Teensy 2.0 and Teensy++ 2.0, there is a simple hardware mod that you can perform to add VBUS detection, so you don't need the SPLIT_USB_DETECT option. You'll only need a few things: A knife (x-acto knife, ideally) A solder station or hot air station An appropriate Schottky diode, such as the PMEG2005EH You'll need to cut the small trace between the 5V and center pads on the back of the Teensy. Once you have done that, you will want to solder the diode from the 5V pad to the center pad. You may need to use the 5V pad from the regulator block above as the pads were too small and placed too closely together to place the Schottky diode properly. Additional Resources \u00b6 Nicinabox has a very nice and detailed guide for the Let's Split keyboard, that covers most everything you need to know, including troubleshooting information. However, the RGB Light section is out of date, as it was written long before the RGB Split code was added to QMK Firmware. Instead, wire each strip up directly to the controller.","title":"\u5206\u4f53\u952e\u76d8"},{"location":"feature_split_keyboard/#split-keyboard","text":"Many keyboards in the QMK Firmware repo are \"split\" keyboards. They use two controllers\u2014one plugging into USB, and the second connected by a serial or an I 2 C connection over a TRRS or similar cable. Split keyboards can have a lot of benefits, but there is some additional work needed to get them enabled. QMK Firmware has a generic implementation that is usable by any board, as well as numerous board specific implementations. For this, we will mostly be talking about the generic implementation used by the Let's Split and other keyboards. Info ARM is not yet fully supported for Split Keyboards and has many limitations. Progress is being made, but we have not yet reached 100% feature parity.","title":"Split Keyboard"},{"location":"feature_split_keyboard/#compatibility-overview","text":"Transport AVR ARM 'serial' :heavy_check_mark: :white_check_mark: 1 I2C :heavy_check_mark: Notes: Both hardware and software limitations are detailed within the driver documentation .","title":"Compatibility Overview"},{"location":"feature_split_keyboard/#hardware-configuration","text":"This assumes that you're using two Pro Micro-compatible controllers, and are using TRRS jacks to connect to two halves.","title":"Hardware Configuration"},{"location":"feature_split_keyboard/#required-hardware","text":"Apart from diodes and key switches for the keyboard matrix in each half, you will need 2x TRRS sockets and 1x TRRS cable. Alternatively, you can use any sort of cable and socket that has at least 3 wires. If you want to use I 2 C to communicate between halves, you will need a cable with at least 4 wires and 2x 4.7k\u03a9 pull-up resistors.","title":"Required Hardware"},{"location":"feature_split_keyboard/#serial-wiring","text":"The 3 wires of the TRS/TRRS cable need to connect GND, VCC, and D0/D1/D2/D3 (aka PD0/PD1/PD2/PD3) between the two Pro Micros. Note The pin used here is actually set by SOFT_SERIAL_PIN below.","title":"Serial Wiring"},{"location":"feature_split_keyboard/#i2c-wiring","text":"The 4 wires of the TRRS cable need to connect GND, VCC, and SCL and SDA (aka PD0/pin 3 and PD1/pin 2, respectively) between the two Pro Micros. The pull-up resistors may be placed on either half. If you wish to use the halves independently, it is also possible to use 4 resistors and have the pull-ups in both halves. Note that the total resistance for the connected system should be within spec at 2.2k-10kOhm, with an 'ideal' at 4.7kOhm, regardless of the placement and number.","title":"I2C Wiring"},{"location":"feature_split_keyboard/#firmware-configuration","text":"To enable the split keyboard feature, add the following to your rules.mk : SPLIT_KEYBOARD = yes If you're using a custom transport (communication method), then you will also need to add: SPLIT_TRANSPORT = custom","title":"Firmware Configuration"},{"location":"feature_split_keyboard/#setting-handedness","text":"By default, the firmware does not know which side is which; it needs some help to determine that. There are several ways to do this, listed in order of precedence.","title":"Setting Handedness"},{"location":"feature_split_keyboard/#communication-options","text":"Because not every split keyboard is identical, there are a number of additional options that can be configured in your config.h file. #define USE_I2C This enables I 2 C support for split keyboards. This isn't strictly for communication, but can be used for OLED or other I 2 C-based devices. #define SOFT_SERIAL_PIN D0 This sets the pin to be used for serial communication. If you're not using serial, you shouldn't need to define this. However, if you are using serial and I 2 C on the board, you will need to set this, and to something other than D0 and D1 (as these are used for I 2 C communication). #define SELECT_SOFT_SERIAL_SPEED {#}` If you're having issues with serial communication, you can change this value, as it controls the communication speed for serial. The default is 1, and the possible values are: 0 : about 189kbps (Experimental only) 1 : about 137kbps (default) 2 : about 75kbps 3 : about 39kbps 4 : about 26kbps 5 : about 20kbps #define SPLIT_MODS_ENABLE This enables transmitting modifier state (normal, weak and oneshot) to the non primary side of the split keyboard. This adds a few bytes of data to the split communication protocol and may impact the matrix scan speed when enabled. The purpose of this feature is to support cosmetic use of modifer state (e.g. displaying status on an OLED screen). #define SPLIT_TRANSPORT_MIRROR This mirrors the master side matrix to the slave side for features that react or require knowledge of master side key presses on the slave side. This adds a few bytes of data to the split communication protocol and may impact the matrix scan speed when enabled. The purpose of this feature is to support cosmetic use of key events (e.g. RGB reacting to Keypresses).","title":"Communication Options"},{"location":"feature_split_keyboard/#hardware-configuration-options","text":"There are some settings that you may need to configure, based on how the hardware is set up. #define MATRIX_ROW_PINS_RIGHT { <row pins> } #define MATRIX_COL_PINS_RIGHT { <col pins> } This allows you to specify a different set of pins for the matrix on the right side. This is useful if you have a board with differently-shaped halves that requires a different configuration (such as Keebio's Quefrency). #define DIRECT_PINS_RIGHT { { F1, F0, B0, C7 }, { F4, F5, F6, F7 } } This allows you to specify a different set of direct pins for the right side. #define ENCODERS_PAD_A_RIGHT { encoder1a, encoder2a } #define ENCODERS_PAD_B_RIGHT { encoder1b, encoder2b } This allows you to specify a different set of encoder pins for the right side. #define RGBLIGHT_SPLIT This option enables synchronization of the RGB Light modes between the controllers of the split keyboard. This is for keyboards that have RGB LEDs that are directly wired to the controller (that is, they are not using the \"extra data\" option on the TRRS cable). #define RGBLED_SPLIT { 6, 6 } This sets how many LEDs are directly connected to each controller. The first number is the left side, and the second number is the right side. Info This setting implies that RGBLIGHT_SPLIT is enabled, and will forcibly enable it, if it's not. #define SPLIT_USB_DETECT Enabling this option changes the startup behavior to listen for an active USB communication to delegate which part is master and which is slave. With this option enabled and theres's USB communication, then that half assumes it is the master, otherwise it assumes it is the slave. Without this option, the master is the half that can detect voltage on the physical USB connection (VBUS detection). Enabled by default on ChibiOS/ARM. Tip This setting will stop the ability to demo using battery packs. #define SPLIT_USB_TIMEOUT 2000 This sets the maximum timeout when detecting master/slave when using SPLIT_USB_DETECT . #define SPLIT_USB_TIMEOUT_POLL 10 This sets the poll frequency when detecting master/slave when using SPLIT_USB_DETECT","title":"Hardware Configuration Options"},{"location":"feature_split_keyboard/#hardware-considerations-and-mods","text":"Master/slave delegation is made either by detecting voltage on VBUS connection or waiting for USB communication ( SPLIT_USB_DETECT ). Pro Micro boards can use VBUS detection out of the box and be used with or without SPLIT_USB_DETECT . Many ARM boards, but not all, do not support VBUS detection. Because it is common that ARM boards lack VBUS detection, SPLIT_USB_DETECT is automatically defined on ARM targets (technically when ChibiOS is targetted).","title":"Hardware Considerations and Mods"},{"location":"feature_split_keyboard/#teensy-boards","text":"Teensy boards lack VBUS detection out of the box and must have SPLIT_USB_DETECT defined. With the Teensy 2.0 and Teensy++ 2.0, there is a simple hardware mod that you can perform to add VBUS detection, so you don't need the SPLIT_USB_DETECT option. You'll only need a few things: A knife (x-acto knife, ideally) A solder station or hot air station An appropriate Schottky diode, such as the PMEG2005EH You'll need to cut the small trace between the 5V and center pads on the back of the Teensy. Once you have done that, you will want to solder the diode from the 5V pad to the center pad. You may need to use the 5V pad from the regulator block above as the pads were too small and placed too closely together to place the Schottky diode properly.","title":"Teensy boards"},{"location":"feature_split_keyboard/#additional-resources","text":"Nicinabox has a very nice and detailed guide for the Let's Split keyboard, that covers most everything you need to know, including troubleshooting information. However, the RGB Light section is out of date, as it was written long before the RGB Split code was added to QMK Firmware. Instead, wire each strip up directly to the controller.","title":"Additional Resources"},{"location":"feature_stenography/","text":"Stenography in QMK \u00b6 Stenography is a method of writing most often used by court reports, closed-captioning, and real-time transcription for the deaf. In stenography words are chorded syllable by syllable with a mixture of spelling, phonetic, and shortcut (briefs) strokes. Professional stenographers can reach 200-300 WPM without any of the strain usually found in standard typing and with far fewer errors (>99.9% accuracy). The Open Steno Project has built an open-source program called Plover that provides real-time translation of steno strokes into words and commands. It has an established dictionary and supports Plover with QWERTY Keyboard \u00b6 Plover can work with any standard QWERTY keyboard, although it is more efficient if the keyboard supports NKRO (n-key rollover) to allow Plover to see all the pressed keys at once. An example keymap for Plover can be found in planck/keymaps/default . Switching to the PLOVER layer adjusts the position of the keyboard to support the number bar. To use Plover with QMK just enable NKRO and optionally adjust your layout if you have anything other than a standard layout. You may also want to purchase some steno-friendly keycaps to make it easier to hit multiple keys. Plover with Steno Protocol \u00b6 Plover also understands the language of several steno machines. QMK can speak a couple of these languages, TX Bolt and GeminiPR. An example layout can be found in planck/keymaps/steno . When QMK speaks to Plover over a steno protocol Plover will not use the keyboard as input. This means that you can switch back and forth between a standard keyboard and your steno keyboard, or even switch layers from Plover to standard and back without needing to activate/deactivate Plover. In this mode Plover expects to speak with a steno machine over a serial port so QMK will present itself to the operating system as a virtual serial port in addition to a keyboard. By default QMK will speak the TX Bolt protocol but can be switched to GeminiPR; the last protocol used is stored in non-volatile memory so QMK will use the same protocol on restart. Note: Due to hardware limitations you may not be able to run both a virtual serial port and mouse emulation at the same time. TX Bolt \u00b6 TX Bolt communicates the status of 24 keys over a very simple protocol in variable-sized (1-5 byte) packets. GeminiPR \u00b6 GeminiPR encodes 42 keys into a 6-byte packet. While TX Bolt contains everything that is necessary for standard stenography, GeminiPR opens up many more options, including supporting non-English theories. Configuring QMK for Steno \u00b6 Firstly, enable steno in your keymap's Makefile. You may also need disable mousekeys, extra keys, or another USB endpoint to prevent conflicts. The builtin USB stack for some processors only supports a certain number of USB endpoints and the virtual serial port needed for steno fills 3 of them. STENO_ENABLE = yes MOUSEKEY_ENABLE = no In your keymap create a new layer for Plover. You will need to include keymap_steno.h . See planck/keymaps/steno/keymap.c for an example. Remember to create a key to switch to the layer as well as a key for exiting the layer. If you would like to switch modes on the fly you can use the keycodes QK_STENO_BOLT and QK_STENO_GEMINI . If you only want to use one of the protocols you may set it up in your initialization function: void matrix_init_user () { steno_set_mode ( STENO_MODE_GEMINI ); // or STENO_MODE_BOLT } Once you have your keyboard flashed launch Plover. Click the 'Configure...' button. In the 'Machine' tab select the Stenotype Machine that corresponds to your desired protocol. Click the 'Configure...' button on this tab and enter the serial port or click 'Scan'. Baud rate is fine at 9600 (although you should be able to set as high as 115200 with no issues). Use the default settings for everything else (Data Bits: 8, Stop Bits: 1, Parity: N, no flow control). On the display tab click 'Open stroke display'. With Plover disabled you should be able to hit keys on your keyboard and see them show up in the stroke display window. Use this to make sure you have set up your keymap correctly. You are now ready to steno! Learning Stenography \u00b6 Learn Plover! Steno Jig More resources at the Plover Learning Stenography wiki Interfacing with the code \u00b6 The steno code has three interceptable hooks. If you define these functions, they will be called at certain points in processing; if they return true, processing continues, otherwise it's assumed you handled things. bool send_steno_chord_user ( steno_mode_t mode , uint8_t chord [ 6 ]); This function is called when a chord is about to be sent. Mode will be one of STENO_MODE_BOLT or STENO_MODE_GEMINI . This represents the actual chord that would be sent via whichever protocol. You can modify the chord provided to alter what gets sent. Remember to return true if you want the regular sending process to happen. bool process_steno_user ( uint16_t keycode , keyrecord_t * record ) { return true ; } This function is called when a keypress has come in, before it is processed. The keycode should be one of QK_STENO_BOLT , QK_STENO_GEMINI , or one of the STN_* key values. bool postprocess_steno_user ( uint16_t keycode , keyrecord_t * record , steno_mode_t mode , uint8_t chord [ 6 ], int8_t pressed ); This function is called after a key has been processed, but before any decision about whether or not to send a chord. If IS_PRESSED(record->event) is false, and pressed is 0 or 1, the chord will be sent shortly, but has not yet been sent. This is where to put hooks for things like, say, live displays of steno chords or keys. Keycode Reference \u00b6 As defined in keymap_steno.h . Note: TX Bolt does not support the full set of keys. The TX Bolt implementation in QMK will map the GeminiPR keys to the nearest TX Bolt key so that one key map will work for both. GeminiPR TX Bolt Steno Key STN_N1 STN_NUM Number bar #1 STN_N2 STN_NUM Number bar #2 STN_N3 STN_NUM Number bar #3 STN_N4 STN_NUM Number bar #4 STN_N5 STN_NUM Number bar #5 STN_N6 STN_NUM Number bar #6 STN_N7 STN_NUM Number bar #7 STN_N8 STN_NUM Number bar #8 STN_N9 STN_NUM Number bar #9 STN_NA STN_NUM Number bar #A STN_NB STN_NUM Number bar #B STN_NC STN_NUM Number bar #C STN_S1 STN_SL S- upper STN_S2 STN_SL S- lower STN_TL STN_TL T- STN_KL STN_KL K- STN_PL STN_PL P- STN_WL STN_WL W- STN_HL STN_HL H- STN_RL STN_RL R- STN_A STN_A A vowel STN_O STN_O O vowel STN_ST1 STN_STR * upper-left STN_ST2 STN_STR * lower-left STN_ST3 STN_STR * upper-right STN_ST4 STN_STR * lower-right STN_E STN_E E vowel STN_U STN_U U vowel STN_FR STN_FR -F STN_PR STN_PR -P STN_RR STN_RR -R STN_BR STN_BR -B STN_LR STN_LR -L STN_GR STN_GR -G STN_TR STN_TR -T STN_SR STN_SR -S STN_DR STN_DR -D STN_ZR STN_ZR -Z STN_FN (GeminiPR only) STN_RES1 (GeminiPR only) STN_RES2 (GeminiPR only) STN_PWR (GeminiPR only)","title":"\u901f\u5f55\u673a"},{"location":"feature_stenography/#stenography-in-qmk","text":"Stenography is a method of writing most often used by court reports, closed-captioning, and real-time transcription for the deaf. In stenography words are chorded syllable by syllable with a mixture of spelling, phonetic, and shortcut (briefs) strokes. Professional stenographers can reach 200-300 WPM without any of the strain usually found in standard typing and with far fewer errors (>99.9% accuracy). The Open Steno Project has built an open-source program called Plover that provides real-time translation of steno strokes into words and commands. It has an established dictionary and supports","title":"Stenography in QMK"},{"location":"feature_stenography/#plover-with-qwerty-keyboard","text":"Plover can work with any standard QWERTY keyboard, although it is more efficient if the keyboard supports NKRO (n-key rollover) to allow Plover to see all the pressed keys at once. An example keymap for Plover can be found in planck/keymaps/default . Switching to the PLOVER layer adjusts the position of the keyboard to support the number bar. To use Plover with QMK just enable NKRO and optionally adjust your layout if you have anything other than a standard layout. You may also want to purchase some steno-friendly keycaps to make it easier to hit multiple keys.","title":"Plover with QWERTY Keyboard"},{"location":"feature_stenography/#plover-with-steno-protocol","text":"Plover also understands the language of several steno machines. QMK can speak a couple of these languages, TX Bolt and GeminiPR. An example layout can be found in planck/keymaps/steno . When QMK speaks to Plover over a steno protocol Plover will not use the keyboard as input. This means that you can switch back and forth between a standard keyboard and your steno keyboard, or even switch layers from Plover to standard and back without needing to activate/deactivate Plover. In this mode Plover expects to speak with a steno machine over a serial port so QMK will present itself to the operating system as a virtual serial port in addition to a keyboard. By default QMK will speak the TX Bolt protocol but can be switched to GeminiPR; the last protocol used is stored in non-volatile memory so QMK will use the same protocol on restart. Note: Due to hardware limitations you may not be able to run both a virtual serial port and mouse emulation at the same time.","title":"Plover with Steno Protocol"},{"location":"feature_stenography/#tx-bolt","text":"TX Bolt communicates the status of 24 keys over a very simple protocol in variable-sized (1-5 byte) packets.","title":"TX Bolt"},{"location":"feature_stenography/#geminipr","text":"GeminiPR encodes 42 keys into a 6-byte packet. While TX Bolt contains everything that is necessary for standard stenography, GeminiPR opens up many more options, including supporting non-English theories.","title":"GeminiPR"},{"location":"feature_stenography/#configuring-qmk-for-steno","text":"Firstly, enable steno in your keymap's Makefile. You may also need disable mousekeys, extra keys, or another USB endpoint to prevent conflicts. The builtin USB stack for some processors only supports a certain number of USB endpoints and the virtual serial port needed for steno fills 3 of them. STENO_ENABLE = yes MOUSEKEY_ENABLE = no In your keymap create a new layer for Plover. You will need to include keymap_steno.h . See planck/keymaps/steno/keymap.c for an example. Remember to create a key to switch to the layer as well as a key for exiting the layer. If you would like to switch modes on the fly you can use the keycodes QK_STENO_BOLT and QK_STENO_GEMINI . If you only want to use one of the protocols you may set it up in your initialization function: void matrix_init_user () { steno_set_mode ( STENO_MODE_GEMINI ); // or STENO_MODE_BOLT } Once you have your keyboard flashed launch Plover. Click the 'Configure...' button. In the 'Machine' tab select the Stenotype Machine that corresponds to your desired protocol. Click the 'Configure...' button on this tab and enter the serial port or click 'Scan'. Baud rate is fine at 9600 (although you should be able to set as high as 115200 with no issues). Use the default settings for everything else (Data Bits: 8, Stop Bits: 1, Parity: N, no flow control). On the display tab click 'Open stroke display'. With Plover disabled you should be able to hit keys on your keyboard and see them show up in the stroke display window. Use this to make sure you have set up your keymap correctly. You are now ready to steno!","title":"Configuring QMK for Steno"},{"location":"feature_stenography/#learning-stenography","text":"Learn Plover! Steno Jig More resources at the Plover Learning Stenography wiki","title":"Learning Stenography"},{"location":"feature_stenography/#interfacing-with-the-code","text":"The steno code has three interceptable hooks. If you define these functions, they will be called at certain points in processing; if they return true, processing continues, otherwise it's assumed you handled things. bool send_steno_chord_user ( steno_mode_t mode , uint8_t chord [ 6 ]); This function is called when a chord is about to be sent. Mode will be one of STENO_MODE_BOLT or STENO_MODE_GEMINI . This represents the actual chord that would be sent via whichever protocol. You can modify the chord provided to alter what gets sent. Remember to return true if you want the regular sending process to happen. bool process_steno_user ( uint16_t keycode , keyrecord_t * record ) { return true ; } This function is called when a keypress has come in, before it is processed. The keycode should be one of QK_STENO_BOLT , QK_STENO_GEMINI , or one of the STN_* key values. bool postprocess_steno_user ( uint16_t keycode , keyrecord_t * record , steno_mode_t mode , uint8_t chord [ 6 ], int8_t pressed ); This function is called after a key has been processed, but before any decision about whether or not to send a chord. If IS_PRESSED(record->event) is false, and pressed is 0 or 1, the chord will be sent shortly, but has not yet been sent. This is where to put hooks for things like, say, live displays of steno chords or keys.","title":"Interfacing with the code"},{"location":"feature_stenography/#keycode-reference","text":"As defined in keymap_steno.h . Note: TX Bolt does not support the full set of keys. The TX Bolt implementation in QMK will map the GeminiPR keys to the nearest TX Bolt key so that one key map will work for both. GeminiPR TX Bolt Steno Key STN_N1 STN_NUM Number bar #1 STN_N2 STN_NUM Number bar #2 STN_N3 STN_NUM Number bar #3 STN_N4 STN_NUM Number bar #4 STN_N5 STN_NUM Number bar #5 STN_N6 STN_NUM Number bar #6 STN_N7 STN_NUM Number bar #7 STN_N8 STN_NUM Number bar #8 STN_N9 STN_NUM Number bar #9 STN_NA STN_NUM Number bar #A STN_NB STN_NUM Number bar #B STN_NC STN_NUM Number bar #C STN_S1 STN_SL S- upper STN_S2 STN_SL S- lower STN_TL STN_TL T- STN_KL STN_KL K- STN_PL STN_PL P- STN_WL STN_WL W- STN_HL STN_HL H- STN_RL STN_RL R- STN_A STN_A A vowel STN_O STN_O O vowel STN_ST1 STN_STR * upper-left STN_ST2 STN_STR * lower-left STN_ST3 STN_STR * upper-right STN_ST4 STN_STR * lower-right STN_E STN_E E vowel STN_U STN_U U vowel STN_FR STN_FR -F STN_PR STN_PR -P STN_RR STN_RR -R STN_BR STN_BR -B STN_LR STN_LR -L STN_GR STN_GR -G STN_TR STN_TR -T STN_SR STN_SR -S STN_DR STN_DR -D STN_ZR STN_ZR -Z STN_FN (GeminiPR only) STN_RES1 (GeminiPR only) STN_RES2 (GeminiPR only) STN_PWR (GeminiPR only)","title":"Keycode Reference"},{"location":"feature_swap_hands/","text":"Swap-Hands Action \u00b6 The swap-hands action allows support for one-handed typing without requiring a separate layer. Set SWAP_HANDS_ENABLE in the Makefile and define a hand_swap_config entry in your keymap. Now whenever the ACTION_SWAP_HANDS command key is pressed the keyboard is mirrored. For instance, to type \"Hello, World\" on QWERTY you would type ^Ge^s^s^w^c W^wr^sd Configuration \u00b6 The configuration table is a simple 2-dimensional array to map from column/row to new column/row. Example hand_swap_config for Planck: const keypos_t PROGMEM hand_swap_config [ MATRIX_ROWS ][ MATRIX_COLS ] = { {{ 11 , 0 }, { 10 , 0 }, { 9 , 0 }, { 8 , 0 }, { 7 , 0 }, { 6 , 0 }, { 5 , 0 }, { 4 , 0 }, { 3 , 0 }, { 2 , 0 }, { 1 , 0 }, { 0 , 0 }}, {{ 11 , 1 }, { 10 , 1 }, { 9 , 1 }, { 8 , 1 }, { 7 , 1 }, { 6 , 1 }, { 5 , 1 }, { 4 , 1 }, { 3 , 1 }, { 2 , 1 }, { 1 , 1 }, { 0 , 1 }}, {{ 11 , 2 }, { 10 , 2 }, { 9 , 2 }, { 8 , 2 }, { 7 , 2 }, { 6 , 2 }, { 5 , 2 }, { 4 , 2 }, { 3 , 2 }, { 2 , 2 }, { 1 , 2 }, { 0 , 2 }}, {{ 11 , 3 }, { 10 , 3 }, { 9 , 3 }, { 8 , 3 }, { 7 , 3 }, { 6 , 3 }, { 5 , 3 }, { 4 , 3 }, { 3 , 3 }, { 2 , 3 }, { 1 , 3 }, { 0 , 3 }}, }; Note that the array indices are reversed same as the matrix and the values are of type keypos_t which is {col, row} and all values are zero-based. In the example above, hand_swap_config[2][4] (third row, fifth column) would return {7, 2} (third row, eighth column). Yes, this is confusing. Swap Keycodes \u00b6 Key Description SH_T(key) Sends key with a tap; momentary swap when held. SH_ON Turns on swapping and leaves it on. SH_OFF Turn off swapping and leaves it off. Good for returning to a known state. SH_MON Swaps hands when pressed, returns to normal when released (momentary). SH_MOFF Momentarily turns off swap. SH_TG Toggles swap on and off with every key press. SH_TT Toggles with a tap; momentary when held. SH_OS One shot swap hands: toggles while pressed or until next key press.","title":"\u6362\u624b"},{"location":"feature_swap_hands/#swap-hands-action","text":"The swap-hands action allows support for one-handed typing without requiring a separate layer. Set SWAP_HANDS_ENABLE in the Makefile and define a hand_swap_config entry in your keymap. Now whenever the ACTION_SWAP_HANDS command key is pressed the keyboard is mirrored. For instance, to type \"Hello, World\" on QWERTY you would type ^Ge^s^s^w^c W^wr^sd","title":"Swap-Hands Action"},{"location":"feature_swap_hands/#configuration","text":"The configuration table is a simple 2-dimensional array to map from column/row to new column/row. Example hand_swap_config for Planck: const keypos_t PROGMEM hand_swap_config [ MATRIX_ROWS ][ MATRIX_COLS ] = { {{ 11 , 0 }, { 10 , 0 }, { 9 , 0 }, { 8 , 0 }, { 7 , 0 }, { 6 , 0 }, { 5 , 0 }, { 4 , 0 }, { 3 , 0 }, { 2 , 0 }, { 1 , 0 }, { 0 , 0 }}, {{ 11 , 1 }, { 10 , 1 }, { 9 , 1 }, { 8 , 1 }, { 7 , 1 }, { 6 , 1 }, { 5 , 1 }, { 4 , 1 }, { 3 , 1 }, { 2 , 1 }, { 1 , 1 }, { 0 , 1 }}, {{ 11 , 2 }, { 10 , 2 }, { 9 , 2 }, { 8 , 2 }, { 7 , 2 }, { 6 , 2 }, { 5 , 2 }, { 4 , 2 }, { 3 , 2 }, { 2 , 2 }, { 1 , 2 }, { 0 , 2 }}, {{ 11 , 3 }, { 10 , 3 }, { 9 , 3 }, { 8 , 3 }, { 7 , 3 }, { 6 , 3 }, { 5 , 3 }, { 4 , 3 }, { 3 , 3 }, { 2 , 3 }, { 1 , 3 }, { 0 , 3 }}, }; Note that the array indices are reversed same as the matrix and the values are of type keypos_t which is {col, row} and all values are zero-based. In the example above, hand_swap_config[2][4] (third row, fifth column) would return {7, 2} (third row, eighth column). Yes, this is confusing.","title":"Configuration"},{"location":"feature_swap_hands/#swap-keycodes","text":"Key Description SH_T(key) Sends key with a tap; momentary swap when held. SH_ON Turns on swapping and leaves it on. SH_OFF Turn off swapping and leaves it off. Good for returning to a known state. SH_MON Swaps hands when pressed, returns to normal when released (momentary). SH_MOFF Momentarily turns off swap. SH_TG Toggles swap on and off with every key press. SH_TT Toggles with a tap; momentary when held. SH_OS One shot swap hands: toggles while pressed or until next key press.","title":"Swap Keycodes"},{"location":"feature_tap_dance/","text":"Tap Dance: A Single Key Can Do 3, 5, or 100 Different Things \u00b6 Introduction \u00b6 Hit the semicolon key once, send a semicolon. Hit it twice, rapidly -- send a colon. Hit it three times, and your keyboard's LEDs do a wild dance. That's just one example of what Tap Dance can do. It's one of the nicest community-contributed features in the firmware, conceived and created by algernon in #451 . Here's how algernon describes the feature: With this feature one can specify keys that behave differently, based on the amount of times they have been tapped, and when interrupted, they get handled before the interrupter. How to Use Tap Dance \u00b6 First, you will need TAP_DANCE_ENABLE = yes in your rules.mk , because the feature is disabled by default. This adds a little less than 1k to the firmware size. Optionally, you might want to set a custom TAPPING_TERM time by adding something like this in you config.h : #define TAPPING_TERM 175 The TAPPING_TERM time is the maximum time allowed between taps of your Tap Dance key, and is measured in milliseconds. For example, if you used the above #define statement and set up a Tap Dance key that sends Space on single-tap and Enter on double-tap, then this key will send ENT only if you tap this key twice in less than 175ms. If you tap the key, wait more than 175ms, and tap the key again you'll end up sending SPC SPC instead. Next, you will want to define some tap-dance keys, which is easiest to do with the TD() macro, that takes a number which will later be used as an index into the tap_dance_actions array. After this, you'll want to use the tap_dance_actions array to specify what actions shall be taken when a tap-dance key is in action. Currently, there are five possible options: ACTION_TAP_DANCE_DOUBLE(kc1, kc2) : Sends the kc1 keycode when tapped once, kc2 otherwise. When the key is held, the appropriate keycode is registered: kc1 when pressed and held, kc2 when tapped once, then pressed and held. ACTION_TAP_DANCE_LAYER_MOVE(kc, layer) : Sends the kc keycode when tapped once, or moves to layer . (this functions like the TO layer keycode). This is the same as ACTION_TAP_DANCE_DUAL_ROLE , but renamed to something that is clearer about its functionality. Both names will work. ACTION_TAP_DANCE_LAYER_TOGGLE(kc, layer) : Sends the kc keycode when tapped once, or toggles the state of layer . (this functions like the TG layer keycode). ACTION_TAP_DANCE_FN(fn) : Calls the specified function - defined in the user keymap - with the final tap count of the tap dance action. ACTION_TAP_DANCE_FN_ADVANCED(on_each_tap_fn, on_dance_finished_fn, on_dance_reset_fn) : Calls the first specified function - defined in the user keymap - on every tap, the second function when the dance action finishes (like the previous option), and the last function when the tap dance action resets. ACTION_TAP_DANCE_FN_ADVANCED_TIME(on_each_tap_fn, on_dance_finished_fn, on_dance_reset_fn, tap_specific_tapping_term) : This functions identically to the ACTION_TAP_DANCE_FN_ADVANCED function, but uses a custom tapping term for it, instead of the predefined TAPPING_TERM . This is deprecated in favor of the Per Key Tapping Term functionality, as outlined here . You'd want to check for the specific TD() macro that you want to use (such as TD(TD_ESC_CAPS) ) instead of using this specific Tap Dance function. The first option is enough for a lot of cases, that just want dual roles. For example, ACTION_TAP_DANCE_DOUBLE(KC_SPC, KC_ENT) will result in Space being sent on single-tap, Enter otherwise. Info Keep in mind that only basic keycodes are supported here. Custom keycodes are not supported. Similar to the first option, the second option is good for simple layer-switching cases. For more complicated cases, use the third or fourth options (examples of each are listed below). Finally, the fifth option is particularly useful if your non-Tap-Dance keys start behaving weirdly after adding the code for your Tap Dance keys. The likely problem is that you changed the TAPPING_TERM time to make your Tap Dance keys easier for you to use, and that this has changed the way your other keys handle interrupts. Implementation Details \u00b6 Well, that's the bulk of it! You should now be able to work through the examples below, and to develop your own Tap Dance functionality. But if you want a deeper understanding of what's going on behind the scenes, then read on for the explanation of how it all works! The main entry point is process_tap_dance() , called from process_record_quantum() , which is run for every keypress, and our handler gets to run early. This function checks whether the key pressed is a tap-dance key. If it is not, and a tap-dance was in action, we handle that first, and enqueue the newly pressed key. If it is a tap-dance key, then we check if it is the same as the already active one (if there's one active, that is). If it is not, we fire off the old one first, then register the new one. If it was the same, we increment the counter and reset the timer. This means that you have TAPPING_TERM time to tap the key again; you do not have to input all the taps within a single TAPPING_TERM timeframe. This allows for longer tap counts, with minimal impact on responsiveness. Our next stop is matrix_scan_tap_dance() . This handles the timeout of tap-dance keys. For the sake of flexibility, tap-dance actions can be either a pair of keycodes, or a user function. The latter allows one to handle higher tap counts, or do extra things, like blink the LEDs, fiddle with the backlighting, and so on. This is accomplished by using an union, and some clever macros. Examples \u00b6 Simple Example \u00b6 Here's a simple example for a single definition: In your rules.mk , add TAP_DANCE_ENABLE = yes In your config.h (which you can copy from qmk_firmware/keyboards/planck/config.h to your keymap directory), add #define TAPPING_TERM 200 In your keymap.c file, define the variables and definitions, then add to your keymap: // Tap Dance declarations enum { TD_ESC_CAPS , }; // Tap Dance definitions qk_tap_dance_action_t tap_dance_actions [] = { // Tap once for Escape, twice for Caps Lock [ TD_ESC_CAPS ] = ACTION_TAP_DANCE_DOUBLE ( KC_ESC , KC_CAPS ), }; // Add tap dance item to your keymap in place of a keycode const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { // ... TD ( TD_ESC_CAPS ) // ... }; Complex Examples \u00b6 This section details several complex tap dance examples. All the enums used in the examples are declared like this: // Enums defined for all examples: enum { CT_SE , CT_CLN , CT_EGG , CT_FLSH , X_TAP_DANCE }; Example 1: Send : on Single Tap, ; on Double Tap {: id=example- }1 \u00b6 void dance_cln_finished ( qk_tap_dance_state_t * state , void * user_data ) { if ( state -> count == 1 ) { register_code16 ( KC_COLN ); } else { register_code ( KC_SCLN ); } } void dance_cln_reset ( qk_tap_dance_state_t * state , void * user_data ) { if ( state -> count == 1 ) { unregister_code16 ( KC_COLN ); } else { unregister_code ( KC_SCLN ); } } // All tap dance functions would go here. Only showing this one. qk_tap_dance_action_t tap_dance_actions [] = { [ CT_CLN ] = ACTION_TAP_DANCE_FN_ADVANCED ( NULL , dance_cln_finished , dance_cln_reset ), }; Example 2: Send \"Safety Dance!\" After 100 Taps {: id=example- }2 \u00b6 void dance_egg ( qk_tap_dance_state_t * state , void * user_data ) { if ( state -> count >= 100 ) { SEND_STRING ( \"Safety dance!\" ); reset_tap_dance ( state ); } } qk_tap_dance_action_t tap_dance_actions [] = { [ CT_EGG ] = ACTION_TAP_DANCE_FN ( dance_egg ), }; Example 3: Turn LED Lights On Then Off, One at a Time {: id=example- }3 \u00b6 // On each tap, light up one LED, from right to left // On the fourth tap, turn them off from right to left void dance_flsh_each ( qk_tap_dance_state_t * state , void * user_data ) { switch ( state -> count ) { case 1 : ergodox_right_led_3_on (); break ; case 2 : ergodox_right_led_2_on (); break ; case 3 : ergodox_right_led_1_on (); break ; case 4 : ergodox_right_led_3_off (); wait_ms ( 50 ); ergodox_right_led_2_off (); wait_ms ( 50 ); ergodox_right_led_1_off (); } } // On the fourth tap, set the keyboard on flash state void dance_flsh_finished ( qk_tap_dance_state_t * state , void * user_data ) { if ( state -> count >= 4 ) { reset_keyboard (); } } // If the flash state didn't happen, then turn off LEDs, left to right void dance_flsh_reset ( qk_tap_dance_state_t * state , void * user_data ) { ergodox_right_led_1_off (); wait_ms ( 50 ); ergodox_right_led_2_off (); wait_ms ( 50 ); ergodox_right_led_3_off (); } // All tap dances now put together. Example 3 is \"CT_FLASH\" qk_tap_dance_action_t tap_dance_actions [] = { [ CT_SE ] = ACTION_TAP_DANCE_DOUBLE ( KC_SPC , KC_ENT ), [ CT_CLN ] = ACTION_TAP_DANCE_FN_ADVANCED ( NULL , dance_cln_finished , dance_cln_reset ), [ CT_EGG ] = ACTION_TAP_DANCE_FN ( dance_egg ), [ CT_FLSH ] = ACTION_TAP_DANCE_FN_ADVANCED ( dance_flsh_each , dance_flsh_finished , dance_flsh_reset ) }; Example 4: 'Quad Function Tap-Dance' {: id=example- }4 \u00b6 By DanielGGordon Allow one key to have 4 (or more) functions, depending on number of presses, and if the key is held or tapped. Below is a specific example: * Tap = Send x * Hold = Send Control * Double Tap = Send Escape * Double Tap and Hold = Send Alt You will need a few things that can be used for 'Quad Function Tap-Dance'. You'll need to add these to the top of your keymap.c file, before your keymap. typedef enum { TD_NONE , TD_UNKNOWN , TD_SINGLE_TAP , TD_SINGLE_HOLD , TD_DOUBLE_TAP , TD_DOUBLE_HOLD , TD_DOUBLE_SINGLE_TAP , // Send two single taps TD_TRIPLE_TAP , TD_TRIPLE_HOLD } td_state_t ; typedef struct { bool is_press_action ; td_state_t state ; } td_tap_t ; // Tap dance enums enum { X_CTL , SOME_OTHER_DANCE }; td_state_t cur_dance ( qk_tap_dance_state_t * state ); // For the x tap dance. Put it here so it can be used in any keymap void x_finished ( qk_tap_dance_state_t * state , void * user_data ); void x_reset ( qk_tap_dance_state_t * state , void * user_data ); Now, at the bottom of your keymap.c file, you'll need to add the following: /* Return an integer that corresponds to what kind of tap dance should be executed. * * How to figure out tap dance state: interrupted and pressed. * * Interrupted: If the state of a dance dance is \"interrupted\", that means that another key has been hit * under the tapping term. This is typically indicitive that you are trying to \"tap\" the key. * * Pressed: Whether or not the key is still being pressed. If this value is true, that means the tapping term * has ended, but the key is still being pressed down. This generally means the key is being \"held\". * * One thing that is currenlty not possible with qmk software in regards to tap dance is to mimic the \"permissive hold\" * feature. In general, advanced tap dances do not work well if they are used with commonly typed letters. * For example \"A\". Tap dances are best used on non-letter keys that are not hit while typing letters. * * Good places to put an advanced tap dance: * z,q,x,j,k,v,b, any function key, home/end, comma, semi-colon * * Criteria for \"good placement\" of a tap dance key: * Not a key that is hit frequently in a sentence * Not a key that is used frequently to double tap, for example 'tab' is often double tapped in a terminal, or * in a web form. So 'tab' would be a poor choice for a tap dance. * Letters used in common words as a double. For example 'p' in 'pepper'. If a tap dance function existed on the * letter 'p', the word 'pepper' would be quite frustating to type. * * For the third point, there does exist the 'TD_DOUBLE_SINGLE_TAP', however this is not fully tested * */ td_state_t cur_dance ( qk_tap_dance_state_t * state ) { if ( state -> count == 1 ) { if ( state -> interrupted || ! state -> pressed ) return TD_SINGLE_TAP ; // Key has not been interrupted, but the key is still held. Means you want to send a 'HOLD'. else return TD_SINGLE_HOLD ; } else if ( state -> count == 2 ) { // TD_DOUBLE_SINGLE_TAP is to distinguish between typing \"pepper\", and actually wanting a double tap // action when hitting 'pp'. Suggested use case for this return value is when you want to send two // keystrokes of the key, and not the 'double tap' action/macro. if ( state -> interrupted ) return TD_DOUBLE_SINGLE_TAP ; else if ( state -> pressed ) return TD_DOUBLE_HOLD ; else return TD_DOUBLE_TAP ; } // Assumes no one is trying to type the same letter three times (at least not quickly). // If your tap dance key is 'KC_W', and you want to type \"www.\" quickly - then you will need to add // an exception here to return a 'TD_TRIPLE_SINGLE_TAP', and define that enum just like 'TD_DOUBLE_SINGLE_TAP' if ( state -> count == 3 ) { if ( state -> interrupted || ! state -> pressed ) return TD_TRIPLE_TAP ; else return TD_TRIPLE_HOLD ; } else return TD_UNKNOWN ; } // Create an instance of 'td_tap_t' for the 'x' tap dance. static td_tap_t xtap_state = { . is_press_action = true , . state = TD_NONE }; void x_finished ( qk_tap_dance_state_t * state , void * user_data ) { xtap_state . state = cur_dance ( state ); switch ( xtap_state . state ) { case TD_SINGLE_TAP : register_code ( KC_X ); break ; case TD_SINGLE_HOLD : register_code ( KC_LCTRL ); break ; case TD_DOUBLE_TAP : register_code ( KC_ESC ); break ; case TD_DOUBLE_HOLD : register_code ( KC_LALT ); break ; // Last case is for fast typing. Assuming your key is `f`: // For example, when typing the word `buffer`, and you want to make sure that you send `ff` and not `Esc`. // In order to type `ff` when typing fast, the next character will have to be hit within the `TAPPING_TERM`, which by default is 200ms. case TD_DOUBLE_SINGLE_TAP : tap_code ( KC_X ); register_code ( KC_X ); } } void x_reset ( qk_tap_dance_state_t * state , void * user_data ) { switch ( xtap_state . state ) { case TD_SINGLE_TAP : unregister_code ( KC_X ); break ; case TD_SINGLE_HOLD : unregister_code ( KC_LCTRL ); break ; case TD_DOUBLE_TAP : unregister_code ( KC_ESC ); break ; case TD_DOUBLE_HOLD : unregister_code ( KC_LALT ); case TD_DOUBLE_SINGLE_TAP : unregister_code ( KC_X ); } xtap_state . state = TD_NONE ; } qk_tap_dance_action_t tap_dance_actions [] = { [ X_CTL ] = ACTION_TAP_DANCE_FN_ADVANCED ( NULL , x_finished , x_reset ) }; And then simply use TD(X_CTL) anywhere in your keymap. If you want to implement this in your userspace, then you may want to check out how DanielGGordon has implemented this in their userspace. In this configuration \"hold\" takes place after tap dance timeout (see ACTION_TAP_DANCE_FN_ADVANCED_TIME ). To achieve instant hold, remove state->interrupted checks in conditions. As a result you may use comfortable longer tapping periods to have more time for taps and not to wait too long for holds (try starting with doubled TAPPING_TERM ). Example 5: Using tap dance for advanced mod-tap and layer-tap keys {: id=example- }5 \u00b6 Tap dance can be used to emulate MT() and LT() behavior when the tapped code is not a basic keycode. This is useful to send tapped keycodes that normally require Shift , such as parentheses or curly braces\u2014or other modified keycodes, such as Control + X . Below your layers and custom keycodes, add the following: // Tap Dance keycodes enum td_keycodes { ALT_LP // Our example key: `LALT` when held, `(` when tapped. Add additional keycodes for each tapdance. }; // Define a type containing as many tapdance states as you need typedef enum { TD_NONE , TD_UNKNOWN , TD_SINGLE_TAP , TD_SINGLE_HOLD , TD_DOUBLE_SINGLE_TAP } td_state_t ; // Create a global instance of the tapdance state type static td_state_t td_state ; // Declare your tapdance functions: // Function to determine the current tapdance state td_state_t cur_dance ( qk_tap_dance_state_t * state ); // `finished` and `reset` functions for each tapdance keycode void altlp_finished ( qk_tap_dance_state_t * state , void * user_data ); void altlp_reset ( qk_tap_dance_state_t * state , void * user_data ); Below your LAYOUT , define each of the tapdance functions: // Determine the tapdance state to return td_state_t cur_dance ( qk_tap_dance_state_t * state ) { if ( state -> count == 1 ) { if ( state -> interrupted || ! state -> pressed ) return TD_SINGLE_TAP ; else return TD_SINGLE_HOLD ; } if ( state -> count == 2 ) return TD_DOUBLE_SINGLE_TAP ; else return TD_UNKNOWN ; // Any number higher than the maximum state value you return above } // Handle the possible states for each tapdance keycode you define: void altlp_finished ( qk_tap_dance_state_t * state , void * user_data ) { td_state = cur_dance ( state ); switch ( td_state ) { case TD_SINGLE_TAP : register_code16 ( KC_LPRN ); break ; case TD_SINGLE_HOLD : register_mods ( MOD_BIT ( KC_LALT )); // For a layer-tap key, use `layer_on(_MY_LAYER)` here break ; case TD_DOUBLE_SINGLE_TAP : // Allow nesting of 2 parens `((` within tapping term tap_code16 ( KC_LPRN ); register_code16 ( KC_LPRN ); } } void altlp_reset ( qk_tap_dance_state_t * state , void * user_data ) { switch ( td_state ) { case TD_SINGLE_TAP : unregister_code16 ( KC_LPRN ); break ; case TD_SINGLE_HOLD : unregister_mods ( MOD_BIT ( KC_LALT )); // For a layer-tap key, use `layer_off(_MY_LAYER)` here break ; case TD_DOUBLE_SINGLE_TAP : unregister_code16 ( KC_LPRN ); } } // Define `ACTION_TAP_DANCE_FN_ADVANCED()` for each tapdance keycode, passing in `finished` and `reset` functions qk_tap_dance_action_t tap_dance_actions [] = { [ ALT_LP ] = ACTION_TAP_DANCE_FN_ADVANCED ( NULL , altlp_finished , altlp_reset ) }; Wrap each tapdance keycode in TD() when including it in your keymap, e.g. TD(ALT_LP) . Example 6: Using tap dance for momentary-layer-switch and layer-toggle keys {: id=example- }6 \u00b6 Tap Dance can be used to mimic MO(layer) and TG(layer) functionality. For this example, we will set up a key to function as KC_QUOT on single-tap, as MO(_MY_LAYER) on single-hold, and TG(_MY_LAYER) on double-tap. The first step is to include the following code towards the beginning of your keymap.c : // Define a type for as many tap dance states as you need typedef enum { TD_NONE , TD_UNKNOWN , TD_SINGLE_TAP , TD_SINGLE_HOLD , TD_DOUBLE_TAP } td_state_t ; typedef struct { bool is_press_action ; td_state_t state ; } td_tap_t ; enum { QUOT_LAYR , // Our custom tap dance key; add any other tap dance keys to this enum }; // Declare the functions to be used with your tap dance key(s) // Function associated with all tap dances td_state_t cur_dance ( qk_tap_dance_state_t * state ); // Functions associated with individual tap dances void ql_finished ( qk_tap_dance_state_t * state , void * user_data ); void ql_reset ( qk_tap_dance_state_t * state , void * user_data ); Towards the bottom of your keymap.c , include the following code: // Determine the current tap dance state td_state_t cur_dance ( qk_tap_dance_state_t * state ) { if ( state -> count == 1 ) { if ( ! state -> pressed ) return TD_SINGLE_TAP ; else return TD_SINGLE_HOLD ; } else if ( state -> count == 2 ) return TD_DOUBLE_TAP ; else return TD_UNKNOWN ; } // Initialize tap structure associated with example tap dance key static td_tap_t ql_tap_state = { . is_press_action = true , . state = TD_NONE }; // Functions that control what our tap dance key does void ql_finished ( qk_tap_dance_state_t * state , void * user_data ) { ql_tap_state . state = cur_dance ( state ); switch ( ql_tap_state . state ) { case TD_SINGLE_TAP : tap_code ( KC_QUOT ); break ; case TD_SINGLE_HOLD : layer_on ( _MY_LAYER ); break ; case TD_DOUBLE_TAP : // Check to see if the layer is already set if ( layer_state_is ( _MY_LAYER )) { // If already set, then switch it off layer_off ( _MY_LAYER ); } else { // If not already set, then switch the layer on layer_on ( _MY_LAYER ); } break ; default : break ; } } void ql_reset ( qk_tap_dance_state_t * state , void * user_data ) { // If the key was held down and now is released then switch off the layer if ( ql_tap_state . state == TD_SINGLE_HOLD ) { layer_off ( _MY_LAYER ); } ql_tap_state . state = TD_NONE ; } // Associate our tap dance key with its functionality qk_tap_dance_action_t tap_dance_actions [] = { [ QUOT_LAYR ] = ACTION_TAP_DANCE_FN_ADVANCED_TIME ( NULL , ql_finished , ql_reset , 275 ) }; The above code is similar to that used in previous examples. The one point to note is that we need to be able to check which layers are active at any time so we can toggle them if needed. To do this we use the layer_state_is(layer) function which returns true if the given layer is active. The use of cur_dance() and ql_tap_state mirrors the above examples. The case: TD_SINGLE_TAP in ql_finished is similar to the above examples. The TD_SINGLE_HOLD case works in conjunction with ql_reset() to switch to _MY_LAYER while the tap dance key is held, and to switch away from _MY_LAYER when the key is released. This mirrors the use of MO(_MY_LAYER) . The TD_DOUBLE_TAP case works by checking whether _MY_LAYER is the active layer, and toggling it on or off accordingly. This mirrors the use of TG(_MY_LAYER) . tap_dance_actions[] works similar to the above examples. Note that I used ACTION_TAP_DANCE_FN_ADVANCED_TIME() instead of ACTION_TAP_DANCE_FN_ADVANCED() . This is because I like my TAPPING_TERM to be short (~175ms) for my non-tap-dance keys but find that this is too quick for me to reliably complete tap dance actions - thus the increased time of 275ms here. Finally, to get this tap dance key working, be sure to include TD(QUOT_LAYR) in your keymaps[] .","title":"\u591a\u51fb\u952e"},{"location":"feature_tap_dance/#tap-dance-a-single-key-can-do-3-5-or-100-different-things","text":"","title":"Tap Dance: A Single Key Can Do 3, 5, or 100 Different Things"},{"location":"feature_tap_dance/#introduction","text":"Hit the semicolon key once, send a semicolon. Hit it twice, rapidly -- send a colon. Hit it three times, and your keyboard's LEDs do a wild dance. That's just one example of what Tap Dance can do. It's one of the nicest community-contributed features in the firmware, conceived and created by algernon in #451 . Here's how algernon describes the feature: With this feature one can specify keys that behave differently, based on the amount of times they have been tapped, and when interrupted, they get handled before the interrupter.","title":"Introduction"},{"location":"feature_tap_dance/#how-to-use","text":"First, you will need TAP_DANCE_ENABLE = yes in your rules.mk , because the feature is disabled by default. This adds a little less than 1k to the firmware size. Optionally, you might want to set a custom TAPPING_TERM time by adding something like this in you config.h : #define TAPPING_TERM 175 The TAPPING_TERM time is the maximum time allowed between taps of your Tap Dance key, and is measured in milliseconds. For example, if you used the above #define statement and set up a Tap Dance key that sends Space on single-tap and Enter on double-tap, then this key will send ENT only if you tap this key twice in less than 175ms. If you tap the key, wait more than 175ms, and tap the key again you'll end up sending SPC SPC instead. Next, you will want to define some tap-dance keys, which is easiest to do with the TD() macro, that takes a number which will later be used as an index into the tap_dance_actions array. After this, you'll want to use the tap_dance_actions array to specify what actions shall be taken when a tap-dance key is in action. Currently, there are five possible options: ACTION_TAP_DANCE_DOUBLE(kc1, kc2) : Sends the kc1 keycode when tapped once, kc2 otherwise. When the key is held, the appropriate keycode is registered: kc1 when pressed and held, kc2 when tapped once, then pressed and held. ACTION_TAP_DANCE_LAYER_MOVE(kc, layer) : Sends the kc keycode when tapped once, or moves to layer . (this functions like the TO layer keycode). This is the same as ACTION_TAP_DANCE_DUAL_ROLE , but renamed to something that is clearer about its functionality. Both names will work. ACTION_TAP_DANCE_LAYER_TOGGLE(kc, layer) : Sends the kc keycode when tapped once, or toggles the state of layer . (this functions like the TG layer keycode). ACTION_TAP_DANCE_FN(fn) : Calls the specified function - defined in the user keymap - with the final tap count of the tap dance action. ACTION_TAP_DANCE_FN_ADVANCED(on_each_tap_fn, on_dance_finished_fn, on_dance_reset_fn) : Calls the first specified function - defined in the user keymap - on every tap, the second function when the dance action finishes (like the previous option), and the last function when the tap dance action resets. ACTION_TAP_DANCE_FN_ADVANCED_TIME(on_each_tap_fn, on_dance_finished_fn, on_dance_reset_fn, tap_specific_tapping_term) : This functions identically to the ACTION_TAP_DANCE_FN_ADVANCED function, but uses a custom tapping term for it, instead of the predefined TAPPING_TERM . This is deprecated in favor of the Per Key Tapping Term functionality, as outlined here . You'd want to check for the specific TD() macro that you want to use (such as TD(TD_ESC_CAPS) ) instead of using this specific Tap Dance function. The first option is enough for a lot of cases, that just want dual roles. For example, ACTION_TAP_DANCE_DOUBLE(KC_SPC, KC_ENT) will result in Space being sent on single-tap, Enter otherwise. Info Keep in mind that only basic keycodes are supported here. Custom keycodes are not supported. Similar to the first option, the second option is good for simple layer-switching cases. For more complicated cases, use the third or fourth options (examples of each are listed below). Finally, the fifth option is particularly useful if your non-Tap-Dance keys start behaving weirdly after adding the code for your Tap Dance keys. The likely problem is that you changed the TAPPING_TERM time to make your Tap Dance keys easier for you to use, and that this has changed the way your other keys handle interrupts.","title":"How to Use Tap Dance"},{"location":"feature_tap_dance/#implementation","text":"Well, that's the bulk of it! You should now be able to work through the examples below, and to develop your own Tap Dance functionality. But if you want a deeper understanding of what's going on behind the scenes, then read on for the explanation of how it all works! The main entry point is process_tap_dance() , called from process_record_quantum() , which is run for every keypress, and our handler gets to run early. This function checks whether the key pressed is a tap-dance key. If it is not, and a tap-dance was in action, we handle that first, and enqueue the newly pressed key. If it is a tap-dance key, then we check if it is the same as the already active one (if there's one active, that is). If it is not, we fire off the old one first, then register the new one. If it was the same, we increment the counter and reset the timer. This means that you have TAPPING_TERM time to tap the key again; you do not have to input all the taps within a single TAPPING_TERM timeframe. This allows for longer tap counts, with minimal impact on responsiveness. Our next stop is matrix_scan_tap_dance() . This handles the timeout of tap-dance keys. For the sake of flexibility, tap-dance actions can be either a pair of keycodes, or a user function. The latter allows one to handle higher tap counts, or do extra things, like blink the LEDs, fiddle with the backlighting, and so on. This is accomplished by using an union, and some clever macros.","title":"Implementation Details"},{"location":"feature_tap_dance/#examples","text":"","title":"Examples"},{"location":"feature_tap_dance/#simple-example","text":"Here's a simple example for a single definition: In your rules.mk , add TAP_DANCE_ENABLE = yes In your config.h (which you can copy from qmk_firmware/keyboards/planck/config.h to your keymap directory), add #define TAPPING_TERM 200 In your keymap.c file, define the variables and definitions, then add to your keymap: // Tap Dance declarations enum { TD_ESC_CAPS , }; // Tap Dance definitions qk_tap_dance_action_t tap_dance_actions [] = { // Tap once for Escape, twice for Caps Lock [ TD_ESC_CAPS ] = ACTION_TAP_DANCE_DOUBLE ( KC_ESC , KC_CAPS ), }; // Add tap dance item to your keymap in place of a keycode const uint16_t PROGMEM keymaps [][ MATRIX_ROWS ][ MATRIX_COLS ] = { // ... TD ( TD_ESC_CAPS ) // ... };","title":"Simple Example"},{"location":"feature_tap_dance/#complex-examples","text":"This section details several complex tap dance examples. All the enums used in the examples are declared like this: // Enums defined for all examples: enum { CT_SE , CT_CLN , CT_EGG , CT_FLSH , X_TAP_DANCE };","title":"Complex Examples"},{"location":"feature_terminal/","text":"Terminal \u00b6 This feature is currently huge , and should probably only be put on boards with a lot of memory, or for fun. The terminal feature is a command-line-like interface designed to communicate through a text editor with keystrokes. It's beneficial to turn off auto-indent features in your editor. To enable, stick this in your rules.mk or Makefile : TERMINAL_ENABLE = yes And use the TERM_ON and TERM_OFF keycodes to turn it on or off. When enabled, a > prompt will appear, where you'll be able to type, backspace (a bell will ding if you reach the beginning and audio is enabled), and hit enter to send the command. Arrow keys are currently disabled so it doesn't get confused. Moving your cursor around with the mouse is discouraged. #define TERMINAL_HELP enables some other output helpers that aren't really needed with this page. Pressing \"up\" and \"down\" will allow you to cycle through the past 5 commands entered. Future Ideas \u00b6 Keyboard/user-extensible commands Smaller footprint Arrow key support Command history - Done SD card support LCD support for buffer display Keycode -> name string LUT Layer status Analog/digital port read/write RGB mode stuff Macro definitions EEPROM read/write Audio control Current Commands \u00b6 about \u00b6 Prints out the current version of QMK with a build date: > about QMK Firmware v0.5.115-7-g80ed73-dirty Built: 2017-08-29-20:24:44 print-buffer \u00b6 Outputs the last 5 commands entered > print-buffer 0. print-buffer 1. help 2. about 3. keymap 0 4. help 5. flush-buffer flush-buffer \u00b6 Clears command buffer > flush-buffer Buffer cleared! help \u00b6 Prints out the available commands: > help commands available: about help keycode keymap exit print-buffer flush-buffer keycode <layer> <row> <col> \u00b6 Prints out the keycode value of a certain layer, row, and column: > keycode 0 1 0 0x29 (41) keymap <layer> \u00b6 Prints out the entire keymap for a certain layer > keymap 0 0x002b, 0x0014, 0x001a, 0x0008, 0x0015, 0x0017, 0x001c, 0x0018, 0x000c, 0x0012, 0x0013, 0x002a, 0x0029, 0x0004, 0x0016, 0x0007, 0x0009, 0x000a, 0x000b, 0x000d, 0x000e, 0x000f, 0x0033, 0x0034, 0x00e1, 0x001d, 0x001b, 0x0006, 0x0019, 0x0005, 0x0011, 0x0010, 0x0036, 0x0037, 0x0038, 0x0028, 0x5cd6, 0x00e0, 0x00e2, 0x00e3, 0x5cd4, 0x002c, 0x002c, 0x5cd5, 0x0050, 0x0051, 0x0052, 0x004f, > exit \u00b6 Exits the terminal - same as TERM_OFF .","title":"\u7ec8\u7aef"},{"location":"feature_terminal/#terminal","text":"This feature is currently huge , and should probably only be put on boards with a lot of memory, or for fun. The terminal feature is a command-line-like interface designed to communicate through a text editor with keystrokes. It's beneficial to turn off auto-indent features in your editor. To enable, stick this in your rules.mk or Makefile : TERMINAL_ENABLE = yes And use the TERM_ON and TERM_OFF keycodes to turn it on or off. When enabled, a > prompt will appear, where you'll be able to type, backspace (a bell will ding if you reach the beginning and audio is enabled), and hit enter to send the command. Arrow keys are currently disabled so it doesn't get confused. Moving your cursor around with the mouse is discouraged. #define TERMINAL_HELP enables some other output helpers that aren't really needed with this page. Pressing \"up\" and \"down\" will allow you to cycle through the past 5 commands entered.","title":"Terminal"},{"location":"feature_terminal/#future-ideas","text":"Keyboard/user-extensible commands Smaller footprint Arrow key support Command history - Done SD card support LCD support for buffer display Keycode -> name string LUT Layer status Analog/digital port read/write RGB mode stuff Macro definitions EEPROM read/write Audio control","title":"Future Ideas"},{"location":"feature_terminal/#current-commands","text":"","title":"Current Commands"},{"location":"feature_terminal/#about","text":"Prints out the current version of QMK with a build date: > about QMK Firmware v0.5.115-7-g80ed73-dirty Built: 2017-08-29-20:24:44","title":"about"},{"location":"feature_terminal/#print-buffer","text":"Outputs the last 5 commands entered > print-buffer 0. print-buffer 1. help 2. about 3. keymap 0 4. help 5. flush-buffer","title":"print-buffer"},{"location":"feature_terminal/#flush-buffer","text":"Clears command buffer > flush-buffer Buffer cleared!","title":"flush-buffer"},{"location":"feature_terminal/#help","text":"Prints out the available commands: > help commands available: about help keycode keymap exit print-buffer flush-buffer","title":"help"},{"location":"feature_terminal/#keycode-layer-row-col","text":"Prints out the keycode value of a certain layer, row, and column: > keycode 0 1 0 0x29 (41)","title":"keycode &lt;layer&gt; &lt;row&gt; &lt;col&gt;"},{"location":"feature_terminal/#keymap-layer","text":"Prints out the entire keymap for a certain layer > keymap 0 0x002b, 0x0014, 0x001a, 0x0008, 0x0015, 0x0017, 0x001c, 0x0018, 0x000c, 0x0012, 0x0013, 0x002a, 0x0029, 0x0004, 0x0016, 0x0007, 0x0009, 0x000a, 0x000b, 0x000d, 0x000e, 0x000f, 0x0033, 0x0034, 0x00e1, 0x001d, 0x001b, 0x0006, 0x0019, 0x0005, 0x0011, 0x0010, 0x0036, 0x0037, 0x0038, 0x0028, 0x5cd6, 0x00e0, 0x00e2, 0x00e3, 0x5cd4, 0x002c, 0x002c, 0x5cd5, 0x0050, 0x0051, 0x0052, 0x004f, >","title":"keymap &lt;layer&gt;"},{"location":"feature_terminal/#exit","text":"Exits the terminal - same as TERM_OFF .","title":"exit"},{"location":"feature_thermal_printer/","text":"Thermal Printer \u00b6 Thermal Printer Keycodes \u00b6 Key Description PRINT_ON Start printing everything the user types PRINT_OFF Stop printing everything the user types","title":"\u70ed\u654f\u6253\u5370\u673a"},{"location":"feature_thermal_printer/#thermal-printer","text":"","title":"Thermal Printer"},{"location":"feature_thermal_printer/#thermal-printer-keycodes","text":"Key Description PRINT_ON Start printing everything the user types PRINT_OFF Stop printing everything the user types","title":"Thermal Printer Keycodes"},{"location":"feature_unicode/","text":"Unicode Support \u00b6 Unicode characters can be input straight from your keyboard! There are some limitations, however. In order to enable Unicode support on your keyboard, you will need to do the following: Choose one of three supported Unicode implementations: Basic Unicode , Unicode Map , UCIS . Find which input mode is the best match for your operating system and setup. Set the appropriate input mode (or modes) in your configuration. Add Unicode keycodes to your keymap. 1. Methods \u00b6 QMK supports three different methods for enabling Unicode input and adding Unicode characters to your keymap. Each has its pros and cons in terms of flexibility and ease of use. Choose the one that best fits your use case. The Basic method should be enough for most users. However, if you need a wider range of supported characters (including emoji, rare symbols etc.), you should use Unicode Map. 1.1. Basic Unicode \u00b6 The easiest to use method, albeit somewhat limited. It stores Unicode characters as keycodes in the keymap itself, so it only supports code points up to 0x7FFF . This covers characters for most modern languages (including East Asian), as well as symbols, but it doesn't cover emoji. Add the following to your rules.mk : UNICODE_ENABLE = yes Then add UC(c) keycodes to your keymap, where c is the code point of the desired character (preferably in hexadecimal, up to 4 digits long). For example, UC(0x40B) will output \u040b , and UC(0x30C4) will output \u30c4 . 1.2. Unicode Map \u00b6 In addition to standard character ranges, this method also covers emoji, ancient scripts, rare symbols etc. In fact, all possible code points (up to 0x10FFFF ) are supported. Here, Unicode characters are stored in a separate mapping table. You need to maintain a unicode_map array in your keymap file, which may contain at most 16384 entries. Add the following to your rules.mk : UNICODEMAP_ENABLE = yes Then add X(i) keycodes to your keymap, where i is the desired character's index in the mapping table. This can be a numeric value, but it's recommended to keep the indices in an enum and access them by name. enum unicode_names { BANG , IRONY , SNEK }; const uint32_t PROGMEM unicode_map [] = { [ BANG ] = 0x203D , // \u203d [ IRONY ] = 0x2E2E , // \u2e2e [ SNEK ] = 0x1F40D , // \ud83d\udc0d }; Then you can use X(BANG) , X(SNEK) etc. in your keymap. Lower and Upper Case \u00b6 Characters often come in lower and upper case pairs, such as \u00e5 and \u00c5. To make inputting these characters easier, you can use XP(i, j) in your keymap, where i and j are the mapping table indices of the lower and upper case character, respectively. If you're holding down Shift or have Caps Lock turned on when you press the key, the second (upper case) character will be inserted; otherwise, the first (lower case) version will appear. This is most useful when creating a keymap for an international layout with special characters. Instead of having to put the lower and upper case versions of a character on separate keys, you can have them both on the same key by using XP() . This helps blend Unicode keys in with regular alphas. Due to keycode size constraints, i and j can each only refer to one of the first 128 characters in your unicode_map . In other words, 0 \u2264 i \u2264 127 and 0 \u2264 j \u2264 127. This is enough for most use cases, but if you'd like to customize the index calculation, you can override the unicodemap_index() function. This also allows you to, say, check Ctrl instead of Shift/Caps. 1.3. UCIS \u00b6 This method also supports all possible code points. As with the Unicode Map method, you need to maintain a mapping table in your keymap file. However, there are no built-in keycodes for this feature \u2014 you have to create a custom keycode or function that invokes this functionality. Add the following to your rules.mk : UCIS_ENABLE = yes Then define a table like this in your keymap file: const qk_ucis_symbol_t ucis_symbol_table [] = UCIS_TABLE ( UCIS_SYM ( \"poop\" , 0x1F4A9 ), // \ud83d\udca9 UCIS_SYM ( \"rofl\" , 0x1F923 ), // \ud83e\udd23 UCIS_SYM ( \"cuba\" , 0x1F1E8 , 0x1F1FA ), // \ud83c\udde8\ud83c\uddfa UCIS_SYM ( \"look\" , 0x0CA0 , 0x005F , 0x0CA0 ) // \u0ca0_\u0ca0 ); By default, each table entry may be up to 3 code points long. This number can be changed by adding #define UCIS_MAX_CODE_POINTS n to your config.h file. To use UCIS input, call qk_ucis_start() . Then, type the mnemonic for the character (such as \"rofl\") and hit Space, Enter or Esc. QMK should erase the \"rofl\" text and insert the laughing emoji. Customization \u00b6 There are several functions that you can define in your keymap to customize the functionality of this feature. void qk_ucis_start_user(void) \u2013 This runs when you call the \"start\" function, and can be used to provide feedback. By default, it types out a keyboard emoji. void qk_ucis_success(uint8_t symbol_index) \u2013 This runs when the input has matched something and has completed. By default, it doesn't do anything. void qk_ucis_symbol_fallback (void) \u2013 This runs when the input doesn't match anything. By default, it falls back to trying that input as a Unicode code. You can find the default implementations of these functions in process_ucis.c . 2. Input Modes \u00b6 Unicode input in QMK works by inputting a sequence of characters to the OS, sort of like a macro. Unfortunately, the way this is done differs for each platform. Specifically, each platform requires a different combination of keys to trigger Unicode input. Therefore, a corresponding input mode has to be set in QMK. The following input modes are available. UC_MAC \u00b6 macOS built-in Unicode hex input. Supports code points up to 0x10FFFF (all possible code points). To enable, go to System Preferences > Keyboard > Input Sources , add Unicode Hex Input to the list (it's under Other ), then activate it from the input dropdown in the Menu Bar. By default, this mode uses the left Option key ( KC_LALT ) for Unicode input, but this can be changed by defining UNICODE_KEY_MAC with a different keycode. Info Using the Unicode Hex Input input source may disable some Option-based shortcuts, such as Option+Left and Option+Right. Warning UC_OSX is a deprecated alias of UC_MAC that will be removed in future versions of QMK. All new keymaps should use UC_MAC . UC_LNX \u00b6 Linux built-in IBus Unicode input. Supports code points up to 0x10FFFF (all possible code points). Enabled by default and works almost anywhere on IBus-enabled distros. Without IBus, this mode works under GTK apps, but rarely anywhere else. By default, this mode uses Ctrl+Shift+U ( LCTL(LSFT(KC_U)) ) to start Unicode input, but this can be changed by defining UNICODE_KEY_LNX with a different keycode. This might be required for IBus versions \u22651.5.15, where Ctrl+Shift+U behavior is consolidated into Ctrl+Shift+E. Users who wish support in non-GTK apps without IBus may need to resort to a more indirect method, such as creating a custom keyboard layout ( more on this method ). UC_WIN \u00b6 (not recommended) Windows built-in hex numpad Unicode input. Supports code points up to 0xFFFF . To enable, create a registry key under HKEY_CURRENT_USER\\Control Panel\\Input Method of type REG_SZ called EnableHexNumpad and set its value to 1 . This can be done from the Command Prompt by running reg add \"HKCU\\Control Panel\\Input Method\" -v EnableHexNumpad -t REG_SZ -d 1 with administrator privileges. Reboot afterwards. This mode is not recommended because of reliability and compatibility issues; use the UC_WINC mode instead. UC_BSD \u00b6 (non implemented) Unicode input under BSD. Not implemented at this time. If you're a BSD user and want to help add support for it, please open an issue on GitHub . UC_WINC \u00b6 Windows Unicode input using WinCompose . As of v0.9.0, supports code points up to 0x10FFFF (all possible code points). To enable, install the latest release . Once installed, WinCompose will automatically run on startup. This mode works reliably under all version of Windows supported by the app. By default, this mode uses right Alt ( KC_RALT ) as the Compose key, but this can be changed in the WinCompose settings and by defining UNICODE_KEY_WINC with a different keycode. 3. Setting the Input Mode \u00b6 To set your desired input mode, add the following define to your config.h : #define UNICODE_SELECTED_MODES UC_LNX This example sets the board's default input mode to UC_LNX . You can replace this with UC_MAC , UC_WINC , or any of the other modes listed above . The board will automatically use the selected mode on startup, unless you manually switch to another mode (see below ). You can also select multiple input modes, which allows you to easily cycle through them using the UC_MOD / UC_RMOD keycodes. #define UNICODE_SELECTED_MODES UC_MAC, UC_LNX, UC_WINC Note that the values are separated by commas. The board will remember the last used input mode and will continue using it on next power-up. You can disable this and force it to always start with the first mode in the list by adding #define UNICODE_CYCLE_PERSIST false to your config.h . Keycodes \u00b6 You can switch the input mode at any time by using the following keycodes. Adding these to your keymap allows you to quickly switch to a specific input mode, including modes not listed in UNICODE_SELECTED_MODES . Keycode Alias Input Mode Description UNICODE_MODE_FORWARD UC_MOD Next in list Cycle through selected modes, reverse direction when Shift is held UNICODE_MODE_REVERSE UC_RMOD Prev in list Cycle through selected modes in reverse, forward direction when Shift is held UNICODE_MODE_MAC UC_M_MA UC_MAC Switch to macOS input UNICODE_MODE_LNX UC_M_LN UC_LNX Switch to Linux input UNICODE_MODE_WIN UC_M_WI UC_WIN Switch to Windows input UNICODE_MODE_BSD UC_M_BS UC_BSD Switch to BSD input (not implemented) UNICODE_MODE_WINC UC_M_WC UC_WINC Switch to Windows input using WinCompose You can also switch the input mode by calling set_unicode_input_mode(x) in your code, where x is one of the above input mode constants (e.g. UC_LNX ). Tip Using UNICODE_SELECTED_MODES is preferable to calling set_unicode_input_mode() in matrix_init_user() or similar functions, since it's better integrated into the Unicode system and has the added benefit of avoiding unnecessary writes to EEPROM. Audio Feedback \u00b6 If you have the Audio feature enabled on the board, you can set melodies to be played when you press the above keys. That way you can have some audio feedback when switching input modes. For instance, you can add these definitions to your config.h file: #define UNICODE_SONG_MAC AUDIO_ON_SOUND #define UNICODE_SONG_LNX UNICODE_LINUX #define UNICODE_SONG_BSD TERMINAL_SOUND #define UNICODE_SONG_WIN UNICODE_WINDOWS #define UNICODE_SONG_WINC UNICODE_WINDOWS Additional Customization \u00b6 Because Unicode is a large and versatile feature, there are a number of options you can customize to make it work better on your system. Start and Finish Input Functions \u00b6 The functions for starting and finishing Unicode input on your platform can be overridden locally. Possible uses include customizing input mode behavior if you don't use the default keys, or adding extra visual/audio feedback to Unicode input. void unicode_input_start(void) \u2013 This sends the initial sequence that tells your platform to enter Unicode input mode. For example, it holds the left Alt key followed by Num+ on Windows, and presses the UNICODE_KEY_LNX combination (default: Ctrl+Shift+U) on Linux. void unicode_input_finish(void) \u2013 This is called to exit Unicode input mode, for example by pressing Space or releasing the Alt key. You can find the default implementations of these functions in process_unicode_common.c . Input Key Configuration \u00b6 You can customize the keys used to trigger Unicode input for macOS, Linux and WinCompose by adding corresponding defines to your config.h . The default values match the platforms' default settings, so you shouldn't need to change this unless Unicode input isn't working, or you want to use a different key (e.g. in order to free up left or right Alt). Define Type Default Example UNICODE_KEY_MAC uint8_t KC_LALT #define UNICODE_KEY_MAC KC_RALT UNICODE_KEY_LNX uint16_t LCTL(LSFT(KC_U)) #define UNICODE_KEY_LNX LCTL(LSFT(KC_E)) UNICODE_KEY_WINC uint8_t KC_RALT #define UNICODE_KEY_WINC KC_RGUI Sending Unicode Strings \u00b6 QMK provides several functions that allow you to send Unicode input to the host programmatically: send_unicode_string() \u00b6 This function is much like send_string() , but it allows you to input UTF-8 characters directly. It supports all code points, provided the selected input mode also supports it. Make sure your keymap.c file is formatted using UTF-8 encoding. send_unicode_string ( \"(\u30ce\u0ca0\u75ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\" ); Example uses include sending Unicode strings when a key is pressed, as described in Macros . send_unicode_hex_string() (Deprecated) \u00b6 Similar to send_unicode_string() , but the characters are represented by their Unicode code points, written in hexadecimal and separated by spaces. For example, the table flip above would be achieved with: send_unicode_hex_string ( \"0028 30CE 0CA0 75CA 0CA0 0029 30CE 5F61 253B 2501 253B\" ); An easy way to convert your Unicode string to this format is to use this site and take the result in the \"Hex/UTF-32\" section. Additional Language Support \u00b6 In quantum/keymap_extras , you'll see various language files \u2014 these work the same way as the ones for alternative layouts such as Colemak or B\u00c9PO. When you include one of these language headers, you gain access to keycodes specific to that language / national layout. Such keycodes are defined by a 2-letter country/language code, followed by an underscore and a 4-letter abbreviation of the character to which the key corresponds. For example, including keymap_french.h and using FR_UGRV in your keymap will output \u00f9 when typed on a system with a native French AZERTY layout. If the primary system layout you use on your machine is different from US ANSI, using these language-specific keycodes can help your QMK keymaps better match what will actually be output on the screen. However, keep in mind that these keycodes are just aliases for the corresponding default US keycodes under the hood, and that the HID protocol used by keyboards is itself inherently based on US ANSI. International Characters on Windows \u00b6 AutoHotkey \u00b6 The method does not require Unicode support in the keyboard itself but instead depends on AutoHotkey running in the background. First you need to select a modifier combination that is not in use by any of your programs. Ctrl+Alt+Win is not used very widely and should therefore be perfect for this. There is a macro defined for a mod-tab combo LCAG_T . Add this mod-tab combo to a key on your keyboard, e.g.: LCAG_T(KC_TAB) . This makes the key behave like a tab key if pressed and released immediately but changes it to the modifier if used with another key. In the default script of AutoHotkey you can define custom hotkeys. <^<!<#a::Send, \u00e4 <^<!<#<+a::Send, \u00c4 The hotkeys above are for the combination CtrlAltGui and CtrlAltGuiShift plus the letter a. AutoHotkey inserts the Text right of Send, when this combination is pressed. US International \u00b6 If you enable the US International layout on the system, it will use punctuation to accent the characters. For instance, typing \"`a\" will result in \u00e0. You can find details on how to enable this here . Software keyboard layout on Linux \u00b6 This method does not require Unicode support on the keyboard itself but instead uses a custom keyboard layout for Xorg. This is how special characters are inserted by regular keyboards. This does not require IBus and works in practically all software. Help on creating a custom layout can be found here , here and here . An example of how you could edit the us layout to gain \ud83e\udd23 on RALT(KC_R) : Edit the keyboard layout file /usr/share/X11/xkb/symbols/us . Inside xkb_symbols \"basic\" { , add include \"level3(ralt_switch)\" . Find the line defining the R key and add an entry to the list, making it look like this: key <AD04> { [ r, R, U1F923 ] }; Save the file and run the command setxkbmap us to reload the layout. You can define one custom character for key defined in the layout, and another if you populate the fourth layer. Additional layers up to 8th are also possible. This method is specific to the computer on which you set the custom layout. The custom keys will be available only when Xorg is running. To avoid accidents, you should always reload the layout using setxkbmap , otherwise an invalid layout could prevent you from logging into your system, locking you out.","title":"Unicode"},{"location":"feature_unicode/#unicode-support","text":"Unicode characters can be input straight from your keyboard! There are some limitations, however. In order to enable Unicode support on your keyboard, you will need to do the following: Choose one of three supported Unicode implementations: Basic Unicode , Unicode Map , UCIS . Find which input mode is the best match for your operating system and setup. Set the appropriate input mode (or modes) in your configuration. Add Unicode keycodes to your keymap.","title":"Unicode Support"},{"location":"feature_unicode/#methods","text":"QMK supports three different methods for enabling Unicode input and adding Unicode characters to your keymap. Each has its pros and cons in terms of flexibility and ease of use. Choose the one that best fits your use case. The Basic method should be enough for most users. However, if you need a wider range of supported characters (including emoji, rare symbols etc.), you should use Unicode Map.","title":"1. Methods"},{"location":"feature_unicode/#basic-unicode","text":"The easiest to use method, albeit somewhat limited. It stores Unicode characters as keycodes in the keymap itself, so it only supports code points up to 0x7FFF . This covers characters for most modern languages (including East Asian), as well as symbols, but it doesn't cover emoji. Add the following to your rules.mk : UNICODE_ENABLE = yes Then add UC(c) keycodes to your keymap, where c is the code point of the desired character (preferably in hexadecimal, up to 4 digits long). For example, UC(0x40B) will output \u040b , and UC(0x30C4) will output \u30c4 .","title":"1.1. Basic Unicode"},{"location":"feature_unicode/#unicode-map","text":"In addition to standard character ranges, this method also covers emoji, ancient scripts, rare symbols etc. In fact, all possible code points (up to 0x10FFFF ) are supported. Here, Unicode characters are stored in a separate mapping table. You need to maintain a unicode_map array in your keymap file, which may contain at most 16384 entries. Add the following to your rules.mk : UNICODEMAP_ENABLE = yes Then add X(i) keycodes to your keymap, where i is the desired character's index in the mapping table. This can be a numeric value, but it's recommended to keep the indices in an enum and access them by name. enum unicode_names { BANG , IRONY , SNEK }; const uint32_t PROGMEM unicode_map [] = { [ BANG ] = 0x203D , // \u203d [ IRONY ] = 0x2E2E , // \u2e2e [ SNEK ] = 0x1F40D , // \ud83d\udc0d }; Then you can use X(BANG) , X(SNEK) etc. in your keymap.","title":"1.2. Unicode Map"},{"location":"feature_unicode/#ucis","text":"This method also supports all possible code points. As with the Unicode Map method, you need to maintain a mapping table in your keymap file. However, there are no built-in keycodes for this feature \u2014 you have to create a custom keycode or function that invokes this functionality. Add the following to your rules.mk : UCIS_ENABLE = yes Then define a table like this in your keymap file: const qk_ucis_symbol_t ucis_symbol_table [] = UCIS_TABLE ( UCIS_SYM ( \"poop\" , 0x1F4A9 ), // \ud83d\udca9 UCIS_SYM ( \"rofl\" , 0x1F923 ), // \ud83e\udd23 UCIS_SYM ( \"cuba\" , 0x1F1E8 , 0x1F1FA ), // \ud83c\udde8\ud83c\uddfa UCIS_SYM ( \"look\" , 0x0CA0 , 0x005F , 0x0CA0 ) // \u0ca0_\u0ca0 ); By default, each table entry may be up to 3 code points long. This number can be changed by adding #define UCIS_MAX_CODE_POINTS n to your config.h file. To use UCIS input, call qk_ucis_start() . Then, type the mnemonic for the character (such as \"rofl\") and hit Space, Enter or Esc. QMK should erase the \"rofl\" text and insert the laughing emoji.","title":"1.3. UCIS"},{"location":"feature_unicode/#input-modes","text":"Unicode input in QMK works by inputting a sequence of characters to the OS, sort of like a macro. Unfortunately, the way this is done differs for each platform. Specifically, each platform requires a different combination of keys to trigger Unicode input. Therefore, a corresponding input mode has to be set in QMK. The following input modes are available.","title":"2. Input Modes"},{"location":"feature_unicode/#uc_mac","text":"macOS built-in Unicode hex input. Supports code points up to 0x10FFFF (all possible code points). To enable, go to System Preferences > Keyboard > Input Sources , add Unicode Hex Input to the list (it's under Other ), then activate it from the input dropdown in the Menu Bar. By default, this mode uses the left Option key ( KC_LALT ) for Unicode input, but this can be changed by defining UNICODE_KEY_MAC with a different keycode. Info Using the Unicode Hex Input input source may disable some Option-based shortcuts, such as Option+Left and Option+Right. Warning UC_OSX is a deprecated alias of UC_MAC that will be removed in future versions of QMK. All new keymaps should use UC_MAC .","title":"UC_MAC"},{"location":"feature_unicode/#uc_lnx","text":"Linux built-in IBus Unicode input. Supports code points up to 0x10FFFF (all possible code points). Enabled by default and works almost anywhere on IBus-enabled distros. Without IBus, this mode works under GTK apps, but rarely anywhere else. By default, this mode uses Ctrl+Shift+U ( LCTL(LSFT(KC_U)) ) to start Unicode input, but this can be changed by defining UNICODE_KEY_LNX with a different keycode. This might be required for IBus versions \u22651.5.15, where Ctrl+Shift+U behavior is consolidated into Ctrl+Shift+E. Users who wish support in non-GTK apps without IBus may need to resort to a more indirect method, such as creating a custom keyboard layout ( more on this method ).","title":"UC_LNX"},{"location":"feature_unicode/#uc_win","text":"(not recommended) Windows built-in hex numpad Unicode input. Supports code points up to 0xFFFF . To enable, create a registry key under HKEY_CURRENT_USER\\Control Panel\\Input Method of type REG_SZ called EnableHexNumpad and set its value to 1 . This can be done from the Command Prompt by running reg add \"HKCU\\Control Panel\\Input Method\" -v EnableHexNumpad -t REG_SZ -d 1 with administrator privileges. Reboot afterwards. This mode is not recommended because of reliability and compatibility issues; use the UC_WINC mode instead.","title":"UC_WIN"},{"location":"feature_unicode/#uc_bsd","text":"(non implemented) Unicode input under BSD. Not implemented at this time. If you're a BSD user and want to help add support for it, please open an issue on GitHub .","title":"UC_BSD"},{"location":"feature_unicode/#uc_winc","text":"Windows Unicode input using WinCompose . As of v0.9.0, supports code points up to 0x10FFFF (all possible code points). To enable, install the latest release . Once installed, WinCompose will automatically run on startup. This mode works reliably under all version of Windows supported by the app. By default, this mode uses right Alt ( KC_RALT ) as the Compose key, but this can be changed in the WinCompose settings and by defining UNICODE_KEY_WINC with a different keycode.","title":"UC_WINC"},{"location":"feature_unicode/#setting-the-input-mode","text":"To set your desired input mode, add the following define to your config.h : #define UNICODE_SELECTED_MODES UC_LNX This example sets the board's default input mode to UC_LNX . You can replace this with UC_MAC , UC_WINC , or any of the other modes listed above . The board will automatically use the selected mode on startup, unless you manually switch to another mode (see below ). You can also select multiple input modes, which allows you to easily cycle through them using the UC_MOD / UC_RMOD keycodes. #define UNICODE_SELECTED_MODES UC_MAC, UC_LNX, UC_WINC Note that the values are separated by commas. The board will remember the last used input mode and will continue using it on next power-up. You can disable this and force it to always start with the first mode in the list by adding #define UNICODE_CYCLE_PERSIST false to your config.h .","title":"3. Setting the Input Mode"},{"location":"feature_unicode/#additional-customization","text":"Because Unicode is a large and versatile feature, there are a number of options you can customize to make it work better on your system.","title":"Additional Customization"},{"location":"feature_unicode/#start-and-finish-input-functions","text":"The functions for starting and finishing Unicode input on your platform can be overridden locally. Possible uses include customizing input mode behavior if you don't use the default keys, or adding extra visual/audio feedback to Unicode input. void unicode_input_start(void) \u2013 This sends the initial sequence that tells your platform to enter Unicode input mode. For example, it holds the left Alt key followed by Num+ on Windows, and presses the UNICODE_KEY_LNX combination (default: Ctrl+Shift+U) on Linux. void unicode_input_finish(void) \u2013 This is called to exit Unicode input mode, for example by pressing Space or releasing the Alt key. You can find the default implementations of these functions in process_unicode_common.c .","title":"Start and Finish Input Functions"},{"location":"feature_unicode/#input-key-configuration","text":"You can customize the keys used to trigger Unicode input for macOS, Linux and WinCompose by adding corresponding defines to your config.h . The default values match the platforms' default settings, so you shouldn't need to change this unless Unicode input isn't working, or you want to use a different key (e.g. in order to free up left or right Alt). Define Type Default Example UNICODE_KEY_MAC uint8_t KC_LALT #define UNICODE_KEY_MAC KC_RALT UNICODE_KEY_LNX uint16_t LCTL(LSFT(KC_U)) #define UNICODE_KEY_LNX LCTL(LSFT(KC_E)) UNICODE_KEY_WINC uint8_t KC_RALT #define UNICODE_KEY_WINC KC_RGUI","title":"Input Key Configuration"},{"location":"feature_unicode/#sending-unicode-strings","text":"QMK provides several functions that allow you to send Unicode input to the host programmatically:","title":"Sending Unicode Strings"},{"location":"feature_unicode/#send_unicode_string","text":"This function is much like send_string() , but it allows you to input UTF-8 characters directly. It supports all code points, provided the selected input mode also supports it. Make sure your keymap.c file is formatted using UTF-8 encoding. send_unicode_string ( \"(\u30ce\u0ca0\u75ca\u0ca0)\u30ce\u5f61\u253b\u2501\u253b\" ); Example uses include sending Unicode strings when a key is pressed, as described in Macros .","title":"send_unicode_string()"},{"location":"feature_unicode/#send_unicode_hex_string-deprecated","text":"Similar to send_unicode_string() , but the characters are represented by their Unicode code points, written in hexadecimal and separated by spaces. For example, the table flip above would be achieved with: send_unicode_hex_string ( \"0028 30CE 0CA0 75CA 0CA0 0029 30CE 5F61 253B 2501 253B\" ); An easy way to convert your Unicode string to this format is to use this site and take the result in the \"Hex/UTF-32\" section.","title":"send_unicode_hex_string() (Deprecated)"},{"location":"feature_unicode/#additional-language-support","text":"In quantum/keymap_extras , you'll see various language files \u2014 these work the same way as the ones for alternative layouts such as Colemak or B\u00c9PO. When you include one of these language headers, you gain access to keycodes specific to that language / national layout. Such keycodes are defined by a 2-letter country/language code, followed by an underscore and a 4-letter abbreviation of the character to which the key corresponds. For example, including keymap_french.h and using FR_UGRV in your keymap will output \u00f9 when typed on a system with a native French AZERTY layout. If the primary system layout you use on your machine is different from US ANSI, using these language-specific keycodes can help your QMK keymaps better match what will actually be output on the screen. However, keep in mind that these keycodes are just aliases for the corresponding default US keycodes under the hood, and that the HID protocol used by keyboards is itself inherently based on US ANSI.","title":"Additional Language Support"},{"location":"feature_unicode/#international-characters-on-windows","text":"","title":"International Characters on Windows"},{"location":"feature_unicode/#autohotkey","text":"The method does not require Unicode support in the keyboard itself but instead depends on AutoHotkey running in the background. First you need to select a modifier combination that is not in use by any of your programs. Ctrl+Alt+Win is not used very widely and should therefore be perfect for this. There is a macro defined for a mod-tab combo LCAG_T . Add this mod-tab combo to a key on your keyboard, e.g.: LCAG_T(KC_TAB) . This makes the key behave like a tab key if pressed and released immediately but changes it to the modifier if used with another key. In the default script of AutoHotkey you can define custom hotkeys. <^<!<#a::Send, \u00e4 <^<!<#<+a::Send, \u00c4 The hotkeys above are for the combination CtrlAltGui and CtrlAltGuiShift plus the letter a. AutoHotkey inserts the Text right of Send, when this combination is pressed.","title":"AutoHotkey"},{"location":"feature_unicode/#us-international","text":"If you enable the US International layout on the system, it will use punctuation to accent the characters. For instance, typing \"`a\" will result in \u00e0. You can find details on how to enable this here .","title":"US International"},{"location":"feature_unicode/#custom-linux-layout","text":"This method does not require Unicode support on the keyboard itself but instead uses a custom keyboard layout for Xorg. This is how special characters are inserted by regular keyboards. This does not require IBus and works in practically all software. Help on creating a custom layout can be found here , here and here . An example of how you could edit the us layout to gain \ud83e\udd23 on RALT(KC_R) : Edit the keyboard layout file /usr/share/X11/xkb/symbols/us . Inside xkb_symbols \"basic\" { , add include \"level3(ralt_switch)\" . Find the line defining the R key and add an entry to the list, making it look like this: key <AD04> { [ r, R, U1F923 ] }; Save the file and run the command setxkbmap us to reload the layout. You can define one custom character for key defined in the layout, and another if you populate the fourth layer. Additional layers up to 8th are also possible. This method is specific to the computer on which you set the custom layout. The custom keys will be available only when Xorg is running. To avoid accidents, you should always reload the layout using setxkbmap , otherwise an invalid layout could prevent you from logging into your system, locking you out.","title":"Software keyboard layout on Linux"},{"location":"feature_userspace/","text":"Userspace: Sharing Code Between Keymaps \u00b6 If you use more than one keyboard with a similar keymap, you might see the benefit in being able to share code between them. Create your own folder in users/ named the same as your keymap (ideally your GitHub username, <name> ) with the following structure: /users/<name>/ (added to the path automatically) readme.md (optional, recommended) rules.mk (included automatically) config.h (included automatically) <name>.h (optional) <name>.c (optional) cool_rgb_stuff.c (optional) cool_rgb_stuff.h (optional) All this only happens when you build a keymap named <name> , like this: make planck:<name> For example, make planck:jack Will include the /users/jack/ folder in the path, along with /users/jack/rules.mk . Tip This name can be overridden , if needed. Rules.mk \u00b6 The rules.mk is one of the two files that gets processed automatically. This is how you add additional source files (such as <name>.c ) will be added when compiling. It's highly recommended that you use <name>.c as the default source file to be added. And to add it, you need to add it the SRC in rules.mk like this: SRC += <name>.c Additional files may be added in the same way - it's recommended you have one named <name> .c/.h to start off with, though. The /users/<name>/rules.mk file will be included in the build after the rules.mk from your keymap. This allows you to have features in your userspace rules.mk that depend on individual QMK features that may or may not be available on a specific keyboard. For example, if you have RGB control features shared between all your keyboards that support RGB lighting, you can add support for that if the RGBLIGHT feature is enabled: ifeq ($(strip $(RGBLIGHT_ENABLE)), yes) # Include my fancy rgb functions source here SRC += cool_rgb_stuff.c endif Alternatively, you can define RGB_ENABLE in your keymap's rules.mk and then check for the variable in your userspace's rules.mk like this: ifdef RGB_ENABLE # Include my fancy rgb functions source here SRC += cool_rgb_stuff.c endif Override default userspace \u00b6 By default the userspace used will be the same as the keymap name. In some situations this isn't desirable. For instance, if you use the layout feature you can't use the same name for different keymaps (e.g. ANSI and ISO). You can name your layouts mylayout-ansi and mylayout-iso and add the following line to your layout's rules.mk : USER_NAME := mylayout This is also useful if you have multiple different keyboards with different features physically present on the board (such as one with RGB Lights, and one with Audio, or different number of LEDs, or connected to a different PIN on the controller). Configuration Options ( config.h ) \u00b6 Additionally, config.h here will be processed like the same file in your keymap folder. This is handled separately from the <name>.h file. The reason for this, is that <name>.h won't be added in time to add settings (such as #define TAPPING_TERM 100 ), and including the <name.h> file in any config.h files will result in compile issues. Tip You should use the config.h for configuration options , and the <name>.h file for user or keymap specific settings (such as the enum for layer or keycodes) Readme ( readme.md ) \u00b6 Please include authorship (your name, GitHub username, email), and optionally a license that's GPL compatible . You can use this as a template: Copyright <year> <name> <email> @<github_username> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. You'd want to replace the year, name, email and GitHub username with your info. Additionally, this is a good place to document your code, if you wish to share it with others. Build All Keyboards That Support a Specific Keymap \u00b6 Want to check all your keymaps build in a single command? You can run: make all:<name> For example, make all:jack This is ideal for when you want ensure everything compiles successfully when preparing a Pull request . Examples \u00b6 For a brief example, checkout /users/_example/ . For a more complicated example, checkout /users/drashna/ 's userspace. Customized Functions \u00b6 QMK has a bunch of functions that have _quantum , _kb , and _user versions that you can use. You will pretty much always want to use the user version of these functions. But the problem is that if you use them in your userspace, then you don't have a version that you can use in your keymap. However, you can actually add support for keymap version, so that you can use it in both your userspace and your keymap! For instance, let's look at the layer_state_set_user() function. You can enable the Tri Layer State functionality on all of your boards, while also retaining the Tri Layer functionality in your keymap.c files. In your <name.c> file, you'd want to add this: __attribute__ (( weak )) layer_state_t layer_state_set_keymap ( layer_state_t state ) { return state ; } layer_state_t layer_state_set_user ( layer_state_t state ) { state = update_tri_layer_state ( state , 2 , 3 , 5 ); return layer_state_set_keymap ( state ); } The __attribute__ ((weak)) part tells the compiler that this is a placeholder function that can then be replaced by a version in your keymap.c . That way, you don't need to add it to your keymap.c , but if you do, you won't get any conflicts because the function is the same name. The _keymap part here doesn't matter, it just needs to be something other than _quantum , _kb , or _user , since those are already in use. So you could use layer_state_set_mine , layer_state_set_fn , or anything else. You can see a list of this and other common functions in template.c in users/drashna . Custom Features \u00b6 Since the Userspace feature can support a staggering number of boards, you may have boards that you want to enable certain functionality for, but not for others. And you can actually create \"features\" that you can enable or disable in your own userspace. For instance, if you wanted to have a bunch of macros available, but only on certain boards (to save space), you could \"hide\" them being a #ifdef MACROS_ENABLED , and then enable it per board. To do this, add this to your rules.mk ifeq ($(strip $(MACROS_ENABLED)), yes) OPT_DEFS += -DMACROS_ENABLED endif The OPT_DEFS setting causes MACROS_ENABLED to be defined for your keyboards (note the -D in front of the name), and you could use #ifdef MACROS_ENABLED to check the status in your c/h files, and handle that code based on that. Then you add MACROS_ENABLED = yes to the rules.mk for you keymap to enable this feature and the code in your userspace. And in your process_record_user function, you'd do something like this: bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { #ifdef MACROS_ENABLED case MACRO1 : if ( ! record -> event . pressed ) { SEND_STRING ( \"This is macro 1!\" ); } break ; case MACRO2 : if ( ! record -> event . pressed ) { SEND_STRING ( \"This is macro 2!\" ); } break ; #endif } return true ; } Consolidated Macros \u00b6 If you wanted to consolidate macros and other functions into your userspace for all of your keymaps, you can do that. This builds upon the Customized Functions example above. This lets you maintain a bunch of macros that are shared between the different keyboards, and allow for keyboard specific macros, too. First, you'd want to go through all of your keymap.c files and replace process_record_user with process_record_keymap instead. This way, you can still use keyboard specific codes on those boards, and use your custom \"global\" keycodes as well. You'll also want to replace SAFE_RANGE with NEW_SAFE_RANGE so that you wont have any overlapping keycodes Then add #include \"<name>.h\" to all of your keymap.c files. This allows you to use these new keycodes without having to redefine them in each keymap. Once you've done that, you'll want to set the keycode definitions that you need to the <name>.h file. For instance: #pragma once #include \"quantum.h\" #include \"action.h\" #include \"version.h\" // Define all of enum custom_keycodes { KC_MAKE = SAFE_RANGE , NEW_SAFE_RANGE //use \"NEW_SAFE_RANGE\" for keymap specific codes }; Now you want to create the <name>.c file, and add this content to it: #include \"<name>.h\" __attribute__ (( weak )) bool process_record_keymap ( uint16_t keycode , keyrecord_t * record ) { return true ; } bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_MAKE : // Compiles the firmware, and adds the flash command based on keyboard bootloader if ( ! record -> event . pressed ) { uint8_t temp_mod = get_mods (); uint8_t temp_osm = get_oneshot_mods (); clear_mods (); clear_oneshot_mods (); SEND_STRING ( \"make \" QMK_KEYBOARD \":\" QMK_KEYMAP ); #ifndef FLASH_BOOTLOADER if (( temp_mod | temp_osm ) & MOD_MASK_SHIFT ) #endif { SEND_STRING ( \":flash\" ); } if (( temp_mod | temp_osm ) & MOD_MASK_CTRL ) { SEND_STRING ( \" -j8 --output-sync\" ); } tap_code ( KC_ENT ); set_mods ( temp_mod ); } break ; } return process_record_keymap ( keycode , record ); } For boards that may not have a shift button (such as on a macro pad), we need a way to always include the bootloader option. To do that, add the following to the rules.mk in your userspace folder: ifeq ($(strip $(FLASH_BOOTLOADER)), yes) OPT_DEFS += -DFLASH_BOOTLOADER endif This will add a new KC_MAKE keycode that can be used in any of your keymaps. And this keycode will output make <keyboard>:<keymap> , making frequent compiling easier. And this will work with any keyboard and any keymap as it will output the current boards info, so that you don't have to type this out every time. Also, holding Shift will add the flash target ( :flash ) to the command. Holding Control will add some commands that will speed up compiling time by processing multiple files at once. And for the boards that lack a shift key, or that you want to always attempt the flashing part, you can add FLASH_BOOTLOADER = yes to the rules.mk of that keymap. Note This should flash the newly compiled firmware automatically, using the correct utility, based on the bootloader settings (or default to just generating the HEX file). However, it should be noted that this may not work on all systems. AVRDUDE doesn't work on WSL, namely. And this doesn't support BootloadHID or mdloader.","title":"\u7528\u6237\u7a7a\u95f4"},{"location":"feature_userspace/#userspace-sharing-code-between-keymaps","text":"If you use more than one keyboard with a similar keymap, you might see the benefit in being able to share code between them. Create your own folder in users/ named the same as your keymap (ideally your GitHub username, <name> ) with the following structure: /users/<name>/ (added to the path automatically) readme.md (optional, recommended) rules.mk (included automatically) config.h (included automatically) <name>.h (optional) <name>.c (optional) cool_rgb_stuff.c (optional) cool_rgb_stuff.h (optional) All this only happens when you build a keymap named <name> , like this: make planck:<name> For example, make planck:jack Will include the /users/jack/ folder in the path, along with /users/jack/rules.mk . Tip This name can be overridden , if needed.","title":"Userspace: Sharing Code Between Keymaps"},{"location":"feature_userspace/#rulesmk","text":"The rules.mk is one of the two files that gets processed automatically. This is how you add additional source files (such as <name>.c ) will be added when compiling. It's highly recommended that you use <name>.c as the default source file to be added. And to add it, you need to add it the SRC in rules.mk like this: SRC += <name>.c Additional files may be added in the same way - it's recommended you have one named <name> .c/.h to start off with, though. The /users/<name>/rules.mk file will be included in the build after the rules.mk from your keymap. This allows you to have features in your userspace rules.mk that depend on individual QMK features that may or may not be available on a specific keyboard. For example, if you have RGB control features shared between all your keyboards that support RGB lighting, you can add support for that if the RGBLIGHT feature is enabled: ifeq ($(strip $(RGBLIGHT_ENABLE)), yes) # Include my fancy rgb functions source here SRC += cool_rgb_stuff.c endif Alternatively, you can define RGB_ENABLE in your keymap's rules.mk and then check for the variable in your userspace's rules.mk like this: ifdef RGB_ENABLE # Include my fancy rgb functions source here SRC += cool_rgb_stuff.c endif","title":"Rules.mk"},{"location":"feature_userspace/#override-default-userspace","text":"By default the userspace used will be the same as the keymap name. In some situations this isn't desirable. For instance, if you use the layout feature you can't use the same name for different keymaps (e.g. ANSI and ISO). You can name your layouts mylayout-ansi and mylayout-iso and add the following line to your layout's rules.mk : USER_NAME := mylayout This is also useful if you have multiple different keyboards with different features physically present on the board (such as one with RGB Lights, and one with Audio, or different number of LEDs, or connected to a different PIN on the controller).","title":"Override default userspace"},{"location":"feature_userspace/#configuration-options-configh","text":"Additionally, config.h here will be processed like the same file in your keymap folder. This is handled separately from the <name>.h file. The reason for this, is that <name>.h won't be added in time to add settings (such as #define TAPPING_TERM 100 ), and including the <name.h> file in any config.h files will result in compile issues. Tip You should use the config.h for configuration options , and the <name>.h file for user or keymap specific settings (such as the enum for layer or keycodes)","title":"Configuration Options (config.h)"},{"location":"feature_userspace/#readme-readmemd","text":"Please include authorship (your name, GitHub username, email), and optionally a license that's GPL compatible . You can use this as a template: Copyright <year> <name> <email> @<github_username> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 2 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <http://www.gnu.org/licenses/>. You'd want to replace the year, name, email and GitHub username with your info. Additionally, this is a good place to document your code, if you wish to share it with others.","title":"Readme (readme.md)"},{"location":"feature_userspace/#build-all-keyboards-that-support-a-specific-keymap","text":"Want to check all your keymaps build in a single command? You can run: make all:<name> For example, make all:jack This is ideal for when you want ensure everything compiles successfully when preparing a Pull request .","title":"Build All Keyboards That Support a Specific Keymap"},{"location":"feature_userspace/#examples","text":"For a brief example, checkout /users/_example/ . For a more complicated example, checkout /users/drashna/ 's userspace.","title":"Examples"},{"location":"feature_userspace/#customized-functions","text":"QMK has a bunch of functions that have _quantum , _kb , and _user versions that you can use. You will pretty much always want to use the user version of these functions. But the problem is that if you use them in your userspace, then you don't have a version that you can use in your keymap. However, you can actually add support for keymap version, so that you can use it in both your userspace and your keymap! For instance, let's look at the layer_state_set_user() function. You can enable the Tri Layer State functionality on all of your boards, while also retaining the Tri Layer functionality in your keymap.c files. In your <name.c> file, you'd want to add this: __attribute__ (( weak )) layer_state_t layer_state_set_keymap ( layer_state_t state ) { return state ; } layer_state_t layer_state_set_user ( layer_state_t state ) { state = update_tri_layer_state ( state , 2 , 3 , 5 ); return layer_state_set_keymap ( state ); } The __attribute__ ((weak)) part tells the compiler that this is a placeholder function that can then be replaced by a version in your keymap.c . That way, you don't need to add it to your keymap.c , but if you do, you won't get any conflicts because the function is the same name. The _keymap part here doesn't matter, it just needs to be something other than _quantum , _kb , or _user , since those are already in use. So you could use layer_state_set_mine , layer_state_set_fn , or anything else. You can see a list of this and other common functions in template.c in users/drashna .","title":"Customized Functions"},{"location":"feature_userspace/#custom-features","text":"Since the Userspace feature can support a staggering number of boards, you may have boards that you want to enable certain functionality for, but not for others. And you can actually create \"features\" that you can enable or disable in your own userspace. For instance, if you wanted to have a bunch of macros available, but only on certain boards (to save space), you could \"hide\" them being a #ifdef MACROS_ENABLED , and then enable it per board. To do this, add this to your rules.mk ifeq ($(strip $(MACROS_ENABLED)), yes) OPT_DEFS += -DMACROS_ENABLED endif The OPT_DEFS setting causes MACROS_ENABLED to be defined for your keyboards (note the -D in front of the name), and you could use #ifdef MACROS_ENABLED to check the status in your c/h files, and handle that code based on that. Then you add MACROS_ENABLED = yes to the rules.mk for you keymap to enable this feature and the code in your userspace. And in your process_record_user function, you'd do something like this: bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { #ifdef MACROS_ENABLED case MACRO1 : if ( ! record -> event . pressed ) { SEND_STRING ( \"This is macro 1!\" ); } break ; case MACRO2 : if ( ! record -> event . pressed ) { SEND_STRING ( \"This is macro 2!\" ); } break ; #endif } return true ; }","title":"Custom Features"},{"location":"feature_userspace/#consolidated-macros","text":"If you wanted to consolidate macros and other functions into your userspace for all of your keymaps, you can do that. This builds upon the Customized Functions example above. This lets you maintain a bunch of macros that are shared between the different keyboards, and allow for keyboard specific macros, too. First, you'd want to go through all of your keymap.c files and replace process_record_user with process_record_keymap instead. This way, you can still use keyboard specific codes on those boards, and use your custom \"global\" keycodes as well. You'll also want to replace SAFE_RANGE with NEW_SAFE_RANGE so that you wont have any overlapping keycodes Then add #include \"<name>.h\" to all of your keymap.c files. This allows you to use these new keycodes without having to redefine them in each keymap. Once you've done that, you'll want to set the keycode definitions that you need to the <name>.h file. For instance: #pragma once #include \"quantum.h\" #include \"action.h\" #include \"version.h\" // Define all of enum custom_keycodes { KC_MAKE = SAFE_RANGE , NEW_SAFE_RANGE //use \"NEW_SAFE_RANGE\" for keymap specific codes }; Now you want to create the <name>.c file, and add this content to it: #include \"<name>.h\" __attribute__ (( weak )) bool process_record_keymap ( uint16_t keycode , keyrecord_t * record ) { return true ; } bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case KC_MAKE : // Compiles the firmware, and adds the flash command based on keyboard bootloader if ( ! record -> event . pressed ) { uint8_t temp_mod = get_mods (); uint8_t temp_osm = get_oneshot_mods (); clear_mods (); clear_oneshot_mods (); SEND_STRING ( \"make \" QMK_KEYBOARD \":\" QMK_KEYMAP ); #ifndef FLASH_BOOTLOADER if (( temp_mod | temp_osm ) & MOD_MASK_SHIFT ) #endif { SEND_STRING ( \":flash\" ); } if (( temp_mod | temp_osm ) & MOD_MASK_CTRL ) { SEND_STRING ( \" -j8 --output-sync\" ); } tap_code ( KC_ENT ); set_mods ( temp_mod ); } break ; } return process_record_keymap ( keycode , record ); } For boards that may not have a shift button (such as on a macro pad), we need a way to always include the bootloader option. To do that, add the following to the rules.mk in your userspace folder: ifeq ($(strip $(FLASH_BOOTLOADER)), yes) OPT_DEFS += -DFLASH_BOOTLOADER endif This will add a new KC_MAKE keycode that can be used in any of your keymaps. And this keycode will output make <keyboard>:<keymap> , making frequent compiling easier. And this will work with any keyboard and any keymap as it will output the current boards info, so that you don't have to type this out every time. Also, holding Shift will add the flash target ( :flash ) to the command. Holding Control will add some commands that will speed up compiling time by processing multiple files at once. And for the boards that lack a shift key, or that you want to always attempt the flashing part, you can add FLASH_BOOTLOADER = yes to the rules.mk of that keymap. Note This should flash the newly compiled firmware automatically, using the correct utility, based on the bootloader settings (or default to just generating the HEX file). However, it should be noted that this may not work on all systems. AVRDUDE doesn't work on WSL, namely. And this doesn't support BootloadHID or mdloader.","title":"Consolidated Macros"},{"location":"feature_velocikey/","text":"Velocikey \u00b6 Velocikey is a feature that lets you control the speed of lighting effects (like the Rainbow Swirl effect) with the speed of your typing. The faster you type, the faster the lights will go! Usage \u00b6 For Velocikey to take effect, there are two steps. First, when compiling your keyboard, you'll need to set VELOCIKEY_ENABLE=yes in rules.mk , e.g.: BOOTMAGIC_ENABLE = no MOUSEKEY_ENABLE = no STENO_ENABLE = no EXTRAKEY_ENABLE = yes VELOCIKEY_ENABLE = yes Then, while using your keyboard, you need to also turn it on with the VLK_TOG keycode, which toggles the feature on and off. The following light effects will all be controlled by Velocikey when it is enabled: - RGB Breathing - RGB Rainbow Mood - RGB Rainbow Swirl - RGB Snake - RGB Knight Support for LED breathing effects is planned but not available yet. As long as Velocikey is enabled, it will control the speed regardless of any other speed setting that your RGB lights are currently on. ## Configuration Velocikey doesn't currently support any configuration via keyboard settings. If you want to adjust something like the speed increase or decay rate, you would need to edit velocikey.c and adjust the values there to achieve the kinds of speeds that you like.","title":"\u901f\u5ea6\u952e"},{"location":"feature_velocikey/#velocikey","text":"Velocikey is a feature that lets you control the speed of lighting effects (like the Rainbow Swirl effect) with the speed of your typing. The faster you type, the faster the lights will go!","title":"Velocikey"},{"location":"feature_velocikey/#usage","text":"For Velocikey to take effect, there are two steps. First, when compiling your keyboard, you'll need to set VELOCIKEY_ENABLE=yes in rules.mk , e.g.: BOOTMAGIC_ENABLE = no MOUSEKEY_ENABLE = no STENO_ENABLE = no EXTRAKEY_ENABLE = yes VELOCIKEY_ENABLE = yes Then, while using your keyboard, you need to also turn it on with the VLK_TOG keycode, which toggles the feature on and off. The following light effects will all be controlled by Velocikey when it is enabled: - RGB Breathing - RGB Rainbow Mood - RGB Rainbow Swirl - RGB Snake - RGB Knight Support for LED breathing effects is planned but not available yet. As long as Velocikey is enabled, it will control the speed regardless of any other speed setting that your RGB lights are currently on. ## Configuration Velocikey doesn't currently support any configuration via keyboard settings. If you want to adjust something like the speed increase or decay rate, you would need to edit velocikey.c and adjust the values there to achieve the kinds of speeds that you like.","title":"Usage"},{"location":"feature_wpm/","text":"Word Per Minute (WPM) Calculcation \u00b6 The WPM feature uses time between keystrokes to compute a rolling average words per minute rate and makes this available for various uses. Enable the WPM system by adding this to your rules.mk : WPM_ENABLE = yes For split keyboards using soft serial, the computed WPM score will be available on the master AND slave half. Configuration \u00b6 Define Default Description WPM_SMOOTHING 0.0487 Sets the smoothing to about 40 keystrokes WPM_ESTIMATED_WORD_SIZE 5 This is the value used when estimating average word size (for regression and normal use) WPM_ALLOW_COUNT_REGRESSOIN Not defined If defined allows the WPM to be decreased when hitting Delete or Backspace ## Public Functions Function Description get_current_wpm(void) Returns the current WPM as a value between 0-255 set_current_wpm(x) Sets the current WPM to x (between 0-255) Callbacks \u00b6 By default, the WPM score only includes letters, numbers, space and some punctuation. If you want to change the set of characters considered as part of the WPM calculation, you can implement your own bool wpm_keycode_user(uint16_t keycode) and return true for any characters you would like included in the calculation, or false to not count that particular keycode. For instance, the default is: bool wpm_keycode_user ( uint16_t keycode ) { if (( keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX ) || ( keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX ) || ( keycode >= QK_MODS && keycode <= QK_MODS_MAX )) { keycode = keycode & 0xFF ; } else if ( keycode > 0xFF ) { keycode = 0 ; } if (( keycode >= KC_A && keycode <= KC_0 ) || ( keycode >= KC_TAB && keycode <= KC_SLASH )) { return true ; } return false ; } Additionally, if WPM_ALLOW_COUNT_REGRESSION is defined, there is the uint8_t wpm_regress_count(uint16_t keycode) function that allows you to decrease the WPM. This is useful if you want to be able to penalize certain keycodes (or even combinations). __attribute__ (( weak )) uint8_t wpm_regress_count ( uint16_t keycode ) { bool weak_modded = ( keycode >= QK_LCTL && keycode < QK_LSFT ) || ( keycode >= QK_RCTL && keycode < QK_RSFT ); if (( keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX ) || ( keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX ) || ( keycode >= QK_MODS && keycode <= QK_MODS_MAX )) { keycode = keycode & 0xFF ; } else if ( keycode > 0xFF ) { keycode = 0 ; } if ((( get_mods () | get_oneshot_mods ()) & MOD_MASK_CTRL } || weak_modded ) && ( keycode == KC_DEL || keycode == KC_BSPC )) { return WPM_ESTIMATED_WORD_SIZE ; } if ( keycode == KC_DEL || keycode == KC_BSPC ) { return 1 ; } }","title":"Word Per Minute (WPM) Calculcation"},{"location":"feature_wpm/#word-per-minute-wpm-calculcation","text":"The WPM feature uses time between keystrokes to compute a rolling average words per minute rate and makes this available for various uses. Enable the WPM system by adding this to your rules.mk : WPM_ENABLE = yes For split keyboards using soft serial, the computed WPM score will be available on the master AND slave half.","title":"Word Per Minute (WPM) Calculcation"},{"location":"feature_wpm/#configuration","text":"Define Default Description WPM_SMOOTHING 0.0487 Sets the smoothing to about 40 keystrokes WPM_ESTIMATED_WORD_SIZE 5 This is the value used when estimating average word size (for regression and normal use) WPM_ALLOW_COUNT_REGRESSOIN Not defined If defined allows the WPM to be decreased when hitting Delete or Backspace ## Public Functions Function Description get_current_wpm(void) Returns the current WPM as a value between 0-255 set_current_wpm(x) Sets the current WPM to x (between 0-255)","title":"Configuration"},{"location":"feature_wpm/#callbacks","text":"By default, the WPM score only includes letters, numbers, space and some punctuation. If you want to change the set of characters considered as part of the WPM calculation, you can implement your own bool wpm_keycode_user(uint16_t keycode) and return true for any characters you would like included in the calculation, or false to not count that particular keycode. For instance, the default is: bool wpm_keycode_user ( uint16_t keycode ) { if (( keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX ) || ( keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX ) || ( keycode >= QK_MODS && keycode <= QK_MODS_MAX )) { keycode = keycode & 0xFF ; } else if ( keycode > 0xFF ) { keycode = 0 ; } if (( keycode >= KC_A && keycode <= KC_0 ) || ( keycode >= KC_TAB && keycode <= KC_SLASH )) { return true ; } return false ; } Additionally, if WPM_ALLOW_COUNT_REGRESSION is defined, there is the uint8_t wpm_regress_count(uint16_t keycode) function that allows you to decrease the WPM. This is useful if you want to be able to penalize certain keycodes (or even combinations). __attribute__ (( weak )) uint8_t wpm_regress_count ( uint16_t keycode ) { bool weak_modded = ( keycode >= QK_LCTL && keycode < QK_LSFT ) || ( keycode >= QK_RCTL && keycode < QK_RSFT ); if (( keycode >= QK_MOD_TAP && keycode <= QK_MOD_TAP_MAX ) || ( keycode >= QK_LAYER_TAP && keycode <= QK_LAYER_TAP_MAX ) || ( keycode >= QK_MODS && keycode <= QK_MODS_MAX )) { keycode = keycode & 0xFF ; } else if ( keycode > 0xFF ) { keycode = 0 ; } if ((( get_mods () | get_oneshot_mods ()) & MOD_MASK_CTRL } || weak_modded ) && ( keycode == KC_DEL || keycode == KC_BSPC )) { return WPM_ESTIMATED_WORD_SIZE ; } if ( keycode == KC_DEL || keycode == KC_BSPC ) { return 1 ; } }","title":"Callbacks"},{"location":"flashing/","text":"Flashing Instructions and Bootloader Information \u00b6 There are quite a few different types of bootloaders that keyboards use, and almost all of them use their own flashing method and tools. Luckily, projects like the QMK Toolbox aim to support as many of them as possible, but this article will describe the different types of bootloaders, and available methods for flashing them. For AVR-based keyboards, QMK will automatically calculate if your .hex file is the right size to be flashed to the device based on the BOOTLOADER value set in rules.mk , and output the total size in bytes (along with the max). You will also be able to use the CLI to flash your keyboard, by running: $ qmk flash -kb <keyboard> -km <keymap> See the qmk flash documentation for more information. Atmel DFU \u00b6 Atmel's DFU bootloader comes on all USB AVRs by default (except for 16/32U4RC), and is used by many keyboards that have their own ICs on their PCBs (older OLKB boards, Clueboards). Some keyboards may also use LUFA's DFU bootloader, or QMK's fork of it (newer OLKB boards), that adds in additional features specific to that hardware. To ensure compatibility with the DFU bootloader, make sure this block is present in your rules.mk (optionally with lufa-dfu or qmk-dfu instead): # Bootloader selection BOOTLOADER = atmel-dfu Compatible flashers: QMK Toolbox (recommended GUI) dfu-programmer / :dfu target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Press the RESET keycode Press the RESET button on the PCB if available Short RST to GND quickly Wait for the OS to detect the device Erase the flash memory (will be done automatically if using the Toolbox or CLI/ make command) Flash a .hex file Reset the device into application mode (will be done automatically as above) QMK DFU \u00b6 QMK maintains a fork of the LUFA DFU bootloader that additionally performs a simple matrix scan for exiting the bootloader and returning to the application, as well as flashing an LED/making a ticking noise with a speaker when things are happening. To enable these features, add the following defines to your config.h : #define QMK_ESC_OUTPUT F1 // COL pin if COL2ROW #define QMK_ESC_INPUT D5 // ROW pin if COL2ROW // Optional: //#define QMK_LED E6 //#define QMK_SPEAKER C6 Currently we do not recommend making QMK_ESC the same key as the one designated for Bootmagic Lite , as holding it down will cause the MCU to loop back and forth between entering and exiting the bootloader. The manufacturer and product strings are automatically pulled from config.h , with \" Bootloader\" appended to the product string. To generate this bootloader, use the bootloader target, eg. make planck/rev4:default:bootloader . To generate a production-ready .hex file (combining QMK and the bootloader), use the production target, eg. make planck/rev4:default:production . make Targets \u00b6 :dfu : Checks every 5 seconds until a DFU device is available, and then flashes the firmware. :dfu-split-left and :dfu-split-right : Flashes the firmware as with :dfu , but also sets the handedness setting in EEPROM. This is ideal for Elite-C-based split keyboards. Caterina \u00b6 Arduino boards and their clones use the Caterina bootloader or a variant of it (any keyboard built with a Pro Micro or clone, and the Pololu A-Star), and uses the AVR109 protocol to communicate through virtual serial. To ensure compatibility with the Caterina bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = caterina Compatible flashers: QMK Toolbox (recommended GUI) avrdude with the avr109 programmer / :avrdude target in QMK (recommended command line) AVRDUDESS Flashing sequence: Enter the bootloader using any of the following methods (you only have 7 seconds to flash once it enters; some variants may require you to reset twice within 750 milliseconds): Press the RESET keycode Press the RESET button on the PCB if available Short RST to GND quickly Wait for the OS to detect the device Flash a .hex file Wait for the device to reset automatically make Targets \u00b6 :avrdude : Checks every 5 seconds until a Caterina device is available (by detecting a new COM port), and then flashes the firmware. :avrdude-loop : Flashes the firmware as with :avrdude , but after each device is flashed, will attempt to flash again. This is useful for bulk flashing. Hit Ctrl+C to escape the loop. :avrdude-split-left and :avrdude-split-right : Flashes the firmware as with :avrdude , but also sets the handedness setting in EEPROM. This is ideal for Pro Micro-based split keyboards. HalfKay \u00b6 HalfKay is a super-slim bootloader developed by PJRC that presents itself as an HID device (which requires no additional driver), and comes preflashed on all Teensys, namely the 2.0. It is currently closed-source, and thus once overwritten (eg. via ISP flashing another bootloader), cannot be restored. To ensure compatibility with the Halfkay bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = halfkay Compatible flashers: QMK Toolbox (recommended GUI) Teensy Loader Command Line / :teensy target in QMK (recommended command line) Teensy Loader Flashing sequence: Enter the bootloader using any of the following methods (you only have 7 seconds to flash once it enters): Press the RESET keycode Press the RESET button on the Teensy or PCB if available short RST to GND quickly Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically) USBasploader \u00b6 USBasploader is a bootloader originally by Objective Development . It emulates a USBasp ISP programmer and is used in some non-USB AVR chips such as the ATmega328P, which run V-USB. To ensure compatibility with the USBasploader bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = USBasp Compatible flashers: QMK Toolbox (recommended GUI) avrdude with the usbasp programmer / :usbasp target in QMK (recommended command line) AVRDUDESS Flashing sequence: Enter the bootloader using any of the following methods: Press the RESET keycode Keep the BOOT button held while quickly tapping the RESET button on the PCB Wait for the OS to detect the device Flash a .hex file Press the RESET button on the PCB or short RST to GND BootloadHID \u00b6 BootloadHID is a USB bootloader for AVR microcontrollers. It presents itself as an HID input device, much like HalfKay, and can therefore be run without installing any driver on Windows. To ensure compatibility with the bootloadHID bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = bootloadHID Compatible flashers: QMK Toolbox (recommended GUI) bootloadHID CLI / :bootloadHID target in QMK (recommended command line) HIDBootFlash Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode Hold the salt key while plugging the keyboard in - for PS2AVRGB boards, this is usually the key connected to MCU pins A0 and B0, otherwise it will be documented in your keyboard's readme Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically) STM32/APM32 DFU \u00b6 All STM32 and APM32 MCUs, except for F103 (see the STM32duino section ) come preloaded with a factory bootloader that cannot be modified nor deleted. To ensure compatibility with the STM32-DFU bootloader, make sure this block is present in your rules.mk (optionally with apm32-dfu instead): # Bootloader selection BOOTLOADER = stm32-dfu Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (may not work on STM32F042 devices) If a reset circuit is present, tap the RESET button on the PCB; some boards may also have a toggle switch that must be flipped Otherwise, you need to bridge BOOT0 to VCC (via BOOT0 button or jumper), short RESET to GND (via RESET button or jumper), and then let go of the BOOT0 bridge Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically) make Targets \u00b6 :dfu-util : Waits until an STM32 bootloader device is available, and then flashes the firmware. :dfu-util-split-left and :dfu-util-split-right : Flashes the firmware as with :avrdude , but also sets the handedness setting in EEPROM. This is ideal for Proton-C-based split keyboards. :st-link-cli : Allows you to flash the firmware via the ST-Link CLI utility, rather than dfu-util. Requires an ST-Link dongle. :st-flash : Allows you to flash the firmware via the st-flash utility from STLink Tools , rather than dfu-util. Requires an ST-Link dongle. STM32duino \u00b6 This bootloader is used almost exclusively for STM32F103 boards, as they do not come with a USB DFU bootloader. The source code and prebuilt binaries can be found here . To ensure compatibility with the STM32duino bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = stm32duino Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode If a reset circuit is present, tap the RESET button on the PCB Otherwise, you need to bridge BOOT0 to VCC (via BOOT0 button or jumper), short RESET to GND (via RESET button or jumper), and then let go of the BOOT0 bridge Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically) Kiibohd DFU \u00b6 Keyboards produced by Input Club use NXP Kinetis microcontrollers rather than STM32, and come with their own custom bootloader , however the process and protocol is largely the same. The rules.mk setting for this bootloader is kiibohd , but since this bootloader is limited to Input Club boards, it should not be necessary to set at keymap or user level. Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (this may only enter the MCU into a \"secure\" bootloader mode; see https://github.com/qmk/qmk_firmware/issues/6112) Press the RESET button on the PCB Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically) tinyuf2 \u00b6 Keyboards may opt into supporting the tinyuf2 bootloader. This is currently only supported on the F411 blackpill. The rules.mk setting for this bootloader is tinyuf2 , and can be specified at the keymap or user level. To ensure compatibility with the tinyuf2 bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = tinyuf2 Compatible flashers: Any application able to copy a file from one place to another, such as macOS Finder or Windows Explorer . Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode Double-tap the nRST button on the PCB. Wait for the OS to detect the device Copy the .uf2 file to the new USB disk Wait for the keyboard to become available","title":"\u5237\u65b0\u56fa\u4ef6"},{"location":"flashing/#flashing-instructions-and-bootloader-information","text":"There are quite a few different types of bootloaders that keyboards use, and almost all of them use their own flashing method and tools. Luckily, projects like the QMK Toolbox aim to support as many of them as possible, but this article will describe the different types of bootloaders, and available methods for flashing them. For AVR-based keyboards, QMK will automatically calculate if your .hex file is the right size to be flashed to the device based on the BOOTLOADER value set in rules.mk , and output the total size in bytes (along with the max). You will also be able to use the CLI to flash your keyboard, by running: $ qmk flash -kb <keyboard> -km <keymap> See the qmk flash documentation for more information.","title":"Flashing Instructions and Bootloader Information"},{"location":"flashing/#atmel-dfu","text":"Atmel's DFU bootloader comes on all USB AVRs by default (except for 16/32U4RC), and is used by many keyboards that have their own ICs on their PCBs (older OLKB boards, Clueboards). Some keyboards may also use LUFA's DFU bootloader, or QMK's fork of it (newer OLKB boards), that adds in additional features specific to that hardware. To ensure compatibility with the DFU bootloader, make sure this block is present in your rules.mk (optionally with lufa-dfu or qmk-dfu instead): # Bootloader selection BOOTLOADER = atmel-dfu Compatible flashers: QMK Toolbox (recommended GUI) dfu-programmer / :dfu target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Press the RESET keycode Press the RESET button on the PCB if available Short RST to GND quickly Wait for the OS to detect the device Erase the flash memory (will be done automatically if using the Toolbox or CLI/ make command) Flash a .hex file Reset the device into application mode (will be done automatically as above)","title":"Atmel DFU"},{"location":"flashing/#qmk-dfu","text":"QMK maintains a fork of the LUFA DFU bootloader that additionally performs a simple matrix scan for exiting the bootloader and returning to the application, as well as flashing an LED/making a ticking noise with a speaker when things are happening. To enable these features, add the following defines to your config.h : #define QMK_ESC_OUTPUT F1 // COL pin if COL2ROW #define QMK_ESC_INPUT D5 // ROW pin if COL2ROW // Optional: //#define QMK_LED E6 //#define QMK_SPEAKER C6 Currently we do not recommend making QMK_ESC the same key as the one designated for Bootmagic Lite , as holding it down will cause the MCU to loop back and forth between entering and exiting the bootloader. The manufacturer and product strings are automatically pulled from config.h , with \" Bootloader\" appended to the product string. To generate this bootloader, use the bootloader target, eg. make planck/rev4:default:bootloader . To generate a production-ready .hex file (combining QMK and the bootloader), use the production target, eg. make planck/rev4:default:production .","title":"QMK DFU"},{"location":"flashing/#make-targets","text":":dfu : Checks every 5 seconds until a DFU device is available, and then flashes the firmware. :dfu-split-left and :dfu-split-right : Flashes the firmware as with :dfu , but also sets the handedness setting in EEPROM. This is ideal for Elite-C-based split keyboards.","title":"make Targets"},{"location":"flashing/#caterina","text":"Arduino boards and their clones use the Caterina bootloader or a variant of it (any keyboard built with a Pro Micro or clone, and the Pololu A-Star), and uses the AVR109 protocol to communicate through virtual serial. To ensure compatibility with the Caterina bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = caterina Compatible flashers: QMK Toolbox (recommended GUI) avrdude with the avr109 programmer / :avrdude target in QMK (recommended command line) AVRDUDESS Flashing sequence: Enter the bootloader using any of the following methods (you only have 7 seconds to flash once it enters; some variants may require you to reset twice within 750 milliseconds): Press the RESET keycode Press the RESET button on the PCB if available Short RST to GND quickly Wait for the OS to detect the device Flash a .hex file Wait for the device to reset automatically","title":"Caterina"},{"location":"flashing/#make-targets_1","text":":avrdude : Checks every 5 seconds until a Caterina device is available (by detecting a new COM port), and then flashes the firmware. :avrdude-loop : Flashes the firmware as with :avrdude , but after each device is flashed, will attempt to flash again. This is useful for bulk flashing. Hit Ctrl+C to escape the loop. :avrdude-split-left and :avrdude-split-right : Flashes the firmware as with :avrdude , but also sets the handedness setting in EEPROM. This is ideal for Pro Micro-based split keyboards.","title":"make Targets"},{"location":"flashing/#halfkay","text":"HalfKay is a super-slim bootloader developed by PJRC that presents itself as an HID device (which requires no additional driver), and comes preflashed on all Teensys, namely the 2.0. It is currently closed-source, and thus once overwritten (eg. via ISP flashing another bootloader), cannot be restored. To ensure compatibility with the Halfkay bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = halfkay Compatible flashers: QMK Toolbox (recommended GUI) Teensy Loader Command Line / :teensy target in QMK (recommended command line) Teensy Loader Flashing sequence: Enter the bootloader using any of the following methods (you only have 7 seconds to flash once it enters): Press the RESET keycode Press the RESET button on the Teensy or PCB if available short RST to GND quickly Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically)","title":"HalfKay"},{"location":"flashing/#usbasploader","text":"USBasploader is a bootloader originally by Objective Development . It emulates a USBasp ISP programmer and is used in some non-USB AVR chips such as the ATmega328P, which run V-USB. To ensure compatibility with the USBasploader bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = USBasp Compatible flashers: QMK Toolbox (recommended GUI) avrdude with the usbasp programmer / :usbasp target in QMK (recommended command line) AVRDUDESS Flashing sequence: Enter the bootloader using any of the following methods: Press the RESET keycode Keep the BOOT button held while quickly tapping the RESET button on the PCB Wait for the OS to detect the device Flash a .hex file Press the RESET button on the PCB or short RST to GND","title":"USBasploader"},{"location":"flashing/#bootloadhid","text":"BootloadHID is a USB bootloader for AVR microcontrollers. It presents itself as an HID input device, much like HalfKay, and can therefore be run without installing any driver on Windows. To ensure compatibility with the bootloadHID bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = bootloadHID Compatible flashers: QMK Toolbox (recommended GUI) bootloadHID CLI / :bootloadHID target in QMK (recommended command line) HIDBootFlash Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode Hold the salt key while plugging the keyboard in - for PS2AVRGB boards, this is usually the key connected to MCU pins A0 and B0, otherwise it will be documented in your keyboard's readme Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically)","title":"BootloadHID"},{"location":"flashing/#stm32apm32-dfu","text":"All STM32 and APM32 MCUs, except for F103 (see the STM32duino section ) come preloaded with a factory bootloader that cannot be modified nor deleted. To ensure compatibility with the STM32-DFU bootloader, make sure this block is present in your rules.mk (optionally with apm32-dfu instead): # Bootloader selection BOOTLOADER = stm32-dfu Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (may not work on STM32F042 devices) If a reset circuit is present, tap the RESET button on the PCB; some boards may also have a toggle switch that must be flipped Otherwise, you need to bridge BOOT0 to VCC (via BOOT0 button or jumper), short RESET to GND (via RESET button or jumper), and then let go of the BOOT0 bridge Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically)","title":"STM32/APM32 DFU"},{"location":"flashing/#make-targets_2","text":":dfu-util : Waits until an STM32 bootloader device is available, and then flashes the firmware. :dfu-util-split-left and :dfu-util-split-right : Flashes the firmware as with :avrdude , but also sets the handedness setting in EEPROM. This is ideal for Proton-C-based split keyboards. :st-link-cli : Allows you to flash the firmware via the ST-Link CLI utility, rather than dfu-util. Requires an ST-Link dongle. :st-flash : Allows you to flash the firmware via the st-flash utility from STLink Tools , rather than dfu-util. Requires an ST-Link dongle.","title":"make Targets"},{"location":"flashing/#stm32duino","text":"This bootloader is used almost exclusively for STM32F103 boards, as they do not come with a USB DFU bootloader. The source code and prebuilt binaries can be found here . To ensure compatibility with the STM32duino bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = stm32duino Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode If a reset circuit is present, tap the RESET button on the PCB Otherwise, you need to bridge BOOT0 to VCC (via BOOT0 button or jumper), short RESET to GND (via RESET button or jumper), and then let go of the BOOT0 bridge Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically)","title":"STM32duino"},{"location":"flashing/#kiibohd-dfu","text":"Keyboards produced by Input Club use NXP Kinetis microcontrollers rather than STM32, and come with their own custom bootloader , however the process and protocol is largely the same. The rules.mk setting for this bootloader is kiibohd , but since this bootloader is limited to Input Club boards, it should not be necessary to set at keymap or user level. Compatible flashers: QMK Toolbox (recommended GUI) dfu-util / :dfu-util target in QMK (recommended command line) Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (this may only enter the MCU into a \"secure\" bootloader mode; see https://github.com/qmk/qmk_firmware/issues/6112) Press the RESET button on the PCB Wait for the OS to detect the device Flash a .bin file Reset the device into application mode (may be done automatically)","title":"Kiibohd DFU"},{"location":"flashing/#tinyuf2","text":"Keyboards may opt into supporting the tinyuf2 bootloader. This is currently only supported on the F411 blackpill. The rules.mk setting for this bootloader is tinyuf2 , and can be specified at the keymap or user level. To ensure compatibility with the tinyuf2 bootloader, make sure this block is present in your rules.mk : # Bootloader selection BOOTLOADER = tinyuf2 Compatible flashers: Any application able to copy a file from one place to another, such as macOS Finder or Windows Explorer . Flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode Double-tap the nRST button on the PCB. Wait for the OS to detect the device Copy the .uf2 file to the new USB disk Wait for the keyboard to become available","title":"tinyuf2"},{"location":"flashing_bootloadhid/","text":"BootloadHID Flashing Instructions and Bootloader Information \u00b6 ps2avr(GB) boards use an ATmega32A microcontroller and a different bootloader. It is not flashable using the regular QMK methods. General flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (may not work on all devices) Hold the salt key while plugging the keyboard in (usually documented within keyboard readme) Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically) bootloadHID Flashing Target \u00b6 Tip Using the QMK installation script, detailed here , the required bootloadHID tools should be automatically installed. To flash via the command line, use the target :bootloadHID by executing the following command: make <keyboard>:<keymap>:bootloadHID GUI Flashing \u00b6 Windows \u00b6 Download HIDBootFlash . Place your keyboard into reset. Ensure the configured VendorID is 16c0 and ProductID is 05df Press the Find Device button and ensure that your keyboard is found. Press the Open .hex File button and locate the .hex file you created. Press the Flash Device button and wait for the process to complete. Command Line Flashing \u00b6 Place your keyboard into reset. Flash the board by typing bootloadHID -r followed by the path to your .hex file. Windows Manual Installation \u00b6 For MSYS2: 1. Download the BootloadHID firmware package from https://www.obdev.at/downloads/vusb/bootloadHID.2012-12-08.tar.gz. 2. Extract contents using a compatible tool, for example 7-Zip. 3. Add to the MSYS path by copying commandline/bootloadHID.exe from the extracted archive to your MSYS2 installation, typically C:\\msys64\\usr\\bin . For native Windows flashing, the bootloadHID.exe can be used outside of the MSYS2 environment. Linux Manual Installation \u00b6 Install libusb development dependency: # This depends on OS - for Debian the following works sudo apt-get install libusb-dev Download the BootloadHID firmware package: wget https://www.obdev.at/downloads/vusb/bootloadHID.2012-12-08.tar.gz -O - | tar -xz -C /tmp Build the bootloadHID executable: cd /tmp/bootloadHID.2012-12-08/commandline/ make sudo cp bootloadHID /usr/local/bin MacOS Manual Installation \u00b6 Install Homebrew by typing the following: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Install the following packages: brew install --HEAD https://raw.githubusercontent.com/robertgzr/homebrew-tap/master/bootloadhid.rb","title":"BootloadHID Flashing Instructions and Bootloader Information"},{"location":"flashing_bootloadhid/#bootloadhid-flashing-instructions-and-bootloader-information","text":"ps2avr(GB) boards use an ATmega32A microcontroller and a different bootloader. It is not flashable using the regular QMK methods. General flashing sequence: Enter the bootloader using any of the following methods: Tap the RESET keycode (may not work on all devices) Hold the salt key while plugging the keyboard in (usually documented within keyboard readme) Wait for the OS to detect the device Flash a .hex file Reset the device into application mode (may be done automatically)","title":"BootloadHID Flashing Instructions and Bootloader Information"},{"location":"flashing_bootloadhid/#bootloadhid-flashing-target","text":"Tip Using the QMK installation script, detailed here , the required bootloadHID tools should be automatically installed. To flash via the command line, use the target :bootloadHID by executing the following command: make <keyboard>:<keymap>:bootloadHID","title":"bootloadHID Flashing Target"},{"location":"flashing_bootloadhid/#gui-flashing","text":"","title":"GUI Flashing"},{"location":"flashing_bootloadhid/#windows","text":"Download HIDBootFlash . Place your keyboard into reset. Ensure the configured VendorID is 16c0 and ProductID is 05df Press the Find Device button and ensure that your keyboard is found. Press the Open .hex File button and locate the .hex file you created. Press the Flash Device button and wait for the process to complete.","title":"Windows"},{"location":"flashing_bootloadhid/#command-line-flashing","text":"Place your keyboard into reset. Flash the board by typing bootloadHID -r followed by the path to your .hex file.","title":"Command Line Flashing"},{"location":"flashing_bootloadhid/#windows-manual-installation","text":"For MSYS2: 1. Download the BootloadHID firmware package from https://www.obdev.at/downloads/vusb/bootloadHID.2012-12-08.tar.gz. 2. Extract contents using a compatible tool, for example 7-Zip. 3. Add to the MSYS path by copying commandline/bootloadHID.exe from the extracted archive to your MSYS2 installation, typically C:\\msys64\\usr\\bin . For native Windows flashing, the bootloadHID.exe can be used outside of the MSYS2 environment.","title":"Windows Manual Installation"},{"location":"flashing_bootloadhid/#linux-manual-installation","text":"Install libusb development dependency: # This depends on OS - for Debian the following works sudo apt-get install libusb-dev Download the BootloadHID firmware package: wget https://www.obdev.at/downloads/vusb/bootloadHID.2012-12-08.tar.gz -O - | tar -xz -C /tmp Build the bootloadHID executable: cd /tmp/bootloadHID.2012-12-08/commandline/ make sudo cp bootloadHID /usr/local/bin","title":"Linux Manual Installation"},{"location":"flashing_bootloadhid/#macos-manual-installation","text":"Install Homebrew by typing the following: /usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\" Install the following packages: brew install --HEAD https://raw.githubusercontent.com/robertgzr/homebrew-tap/master/bootloadhid.rb","title":"MacOS Manual Installation"},{"location":"getting_started_docker/","text":"Docker Quick Start \u00b6 This project includes a Docker workflow that will allow you to build a new firmware for your keyboard very easily without major changes to your primary operating system. This also ensures that when you clone the project and perform a build, you have the exact same environment as anyone else and the QMK build infrastructure. This makes it much easier for people to help you troubleshoot any issues you encounter. Requirements \u00b6 The main prerequisite is a working docker or podman install. * Docker CE * Podman Usage \u00b6 Acquire a local copy of the QMK's repository (including submodules): git clone --recurse-submodules https://github.com/qmk/qmk_firmware.git cd qmk_firmware Run the following command to build a keymap: util/docker_build.sh <keyboard>:<keymap> # For example: util/docker_build.sh planck/rev6:default This will compile the desired keyboard/keymap and leave the resulting .hex or .bin file in the QMK directory for you to flash. If :keymap is omitted, all keymaps are used. Note that the parameter format is the same as when building with make . There is also support for building and flashing the keyboard straight from Docker by specifying the target as well: util/docker_build.sh keyboard:keymap:target # For example: util/docker_build.sh planck/rev6:default:flash You can also start the script without any parameters, in which case it will ask you to input the build parameters one by one, which you may find easier to use: util/docker_build.sh # Reads parameters as input (leave blank for all keyboards/keymaps) You can manually set which container runtime you want to use by setting the RUNTIME environment variable to it's name or path. By default docker or podman are automatically detected and docker is preferred over podman. RUNTIME = \"podman\" util/docker_build.sh keyboard:keymap:target FAQ \u00b6 Why can't I flash on Windows/macOS \u00b6 On Windows and macOS, it requires Docker Machine to be running. This is tedious to set up, so it's not recommended; use QMK Toolbox instead. Warning Docker for Windows requires Hyper-V to be enabled. This means that it cannot work on versions of Windows which don't have Hyper-V, such as Windows 7, Windows 8 and Windows 10 Home .","title":"Docker Quick Start"},{"location":"getting_started_docker/#docker-quick-start","text":"This project includes a Docker workflow that will allow you to build a new firmware for your keyboard very easily without major changes to your primary operating system. This also ensures that when you clone the project and perform a build, you have the exact same environment as anyone else and the QMK build infrastructure. This makes it much easier for people to help you troubleshoot any issues you encounter.","title":"Docker Quick Start"},{"location":"getting_started_docker/#requirements","text":"The main prerequisite is a working docker or podman install. * Docker CE * Podman","title":"Requirements"},{"location":"getting_started_docker/#usage","text":"Acquire a local copy of the QMK's repository (including submodules): git clone --recurse-submodules https://github.com/qmk/qmk_firmware.git cd qmk_firmware Run the following command to build a keymap: util/docker_build.sh <keyboard>:<keymap> # For example: util/docker_build.sh planck/rev6:default This will compile the desired keyboard/keymap and leave the resulting .hex or .bin file in the QMK directory for you to flash. If :keymap is omitted, all keymaps are used. Note that the parameter format is the same as when building with make . There is also support for building and flashing the keyboard straight from Docker by specifying the target as well: util/docker_build.sh keyboard:keymap:target # For example: util/docker_build.sh planck/rev6:default:flash You can also start the script without any parameters, in which case it will ask you to input the build parameters one by one, which you may find easier to use: util/docker_build.sh # Reads parameters as input (leave blank for all keyboards/keymaps) You can manually set which container runtime you want to use by setting the RUNTIME environment variable to it's name or path. By default docker or podman are automatically detected and docker is preferred over podman. RUNTIME = \"podman\" util/docker_build.sh keyboard:keymap:target","title":"Usage"},{"location":"getting_started_docker/#faq","text":"","title":"FAQ"},{"location":"getting_started_docker/#why-cant-i-flash-on-windowsmacos","text":"On Windows and macOS, it requires Docker Machine to be running. This is tedious to set up, so it's not recommended; use QMK Toolbox instead. Warning Docker for Windows requires Hyper-V to be enabled. This means that it cannot work on versions of Windows which don't have Hyper-V, such as Windows 7, Windows 8 and Windows 10 Home .","title":"Why can't I flash on Windows/macOS"},{"location":"getting_started_github/","text":"\u5982\u4f55\u5728QMK\u4e2d\u4f7f\u7528GitHub \u00b6 GitHub can be a little tricky to those that aren't familiar with it - this guide will walk through each step of forking, cloning, and submitting a pull request with QMK. Note \u672c\u6559\u7a0b\u5047\u8bbe\u60a8\u5df2\u5b89\u88c5GitHub\uff0c\u5e76\u4e14\u60a8\u559c\u6b22\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u4f5c\u3002 \u9996\u5148 GitHub\u4e0a\u7684QMK\u9875\u9762 , \u60a8\u80fd\u770b\u5230\u53f3\u4e0a\u65b9\u6709\u4e2a\u6309\u94ae\u5199\u7740\"Fork\": \u5982\u679c\u4f60\u662f\u67d0\u7ec4\u7ec7\u6210\u5458\uff0c\u4f60\u5c06\u9700\u8981\u9009\u62e9\u5206\u53c9\u5230\u54ea\u4e2a\u8d26\u6237\u3002\u4e00\u822c\u60c5\u51b5\u4e0b, \u4f60\u662f\u60f3\u8981\u5206\u53c9\u5230\u4f60\u7684\u79c1\u4eba\u8d26\u6237\u4e0b\u3002\u5f53\u4f60\u5b8c\u6210\u5206\u53c9 (\u6709\u65f6\u9700\u8981\u7b49\u4e00\u4f1a), \u70b9\u51fb\"Clone or Download\" \u6309\u94ae: !\u4eceGitHub\u4e0b\u8f7d](https://i.imgur.com/N1NYcSz.jpg) \u4f60\u8981\u9009\u62e9 \"HTTPS\", \u7136\u540e\u9009\u62e9\u94fe\u63a5\u590d\u5236: \u7136\u540e\uff0c\u5728\u547d\u4ee4\u884c\u8f93\u5165 git clone --recurse-submodules \uff0c\u7136\u540e\u7c98\u8d34\u4f60\u7684\u94fe\u63a5: user@computer:~$ git clone --recurse-submodules https://github.com/whoeveryouare/qmk_firmware.git Cloning into 'qmk_firmware'... remote: Enumerating objects: 9, done. remote: Counting objects: 100% (9/9), done. remote: Compressing objects: 100% (5/5), done. remote: Total 183883 (delta 5), reused 4 (delta 4), pack-reused 183874 Receiving objects: 100% (183883/183883), 132.90 MiB | 9.57 MiB/s, done. Resolving deltas: 100% (119972/119972), done. ... Submodule path 'lib/chibios': checked out '587968d6cbc2b0e1c7147540872f2a67e59ca18b' Submodule path 'lib/chibios-contrib': checked out 'ede48346eee4b8d6847c19bc01420bee76a5e486' Submodule path 'lib/googletest': checked out 'ec44c6c1675c25b9827aacd08c02433cccde7780' Submodule path 'lib/lufa': checked out 'ce10f7642b0459e409839b23cc91498945119b4d' Submodule path 'lib/ugfx': checked out '3e97b74e03c93631cdd3ddb2ce43b963fdce19b2' \u73b0\u5728\u4f60\u672c\u5730\u8ba1\u7b97\u673a\u6709QMK\u7684\u5206\u53c9\u4e86,\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u5e03\u5c40\u4e86, \u4e3a\u4f60\u7684\u952e\u76d8\u7f16\u8bd1\u5e76\u5237\u65b0\u56fa\u4ef6\u5427\u3002\u5982\u679c\u4f60\u89c9\u5f97\u4f60\u7684\u4fee\u6539\u5f88\u4e0d\u9519, \u4f60\u53ef\u4ee5\u6dfb\u52a0,\u63d0\u4ea4,\u7136\u540e\u60f3\u4f60\u7684\u5206\u53c9\u63a8\u51fa\uff08pull\uff09\u4f60\u7684\u6539\u53d8\uff0c\u50cf\u8fd9\u6837: user@computer:~$ git add . user@computer:~$ git commit -m \"adding my keymap\" [master cccb1608] adding my keymap 1 file changed, 1 insertion(+) create mode 100644 keyboards/planck/keymaps/mine/keymap.c user@computer:~$ git push Counting objects: 1, done. Delta compression using up to 4 threads. Compressing objects: 100% (1/1), done. Writing objects: 100% (1/1), 1.64 KiB | 0 bytes/s, done. Total 1 (delta 1), reused 0 (delta 0) remote: Resolving deltas: 100% (1/1), completed with 1 local objects. To https://github.com/whoeveryouare/qmk_firmware.git + 20043e64...7da94ac5 master -> master \u73b0\u5728\u4f60\u7684\u6539\u52a8\u5df2\u7ecf\u5728\u4f60GitHub\u4e0a\u7684\u5206\u652f\u4e2d\u4e86 - \u5982\u679c\u4f60\u56de\u5230\u8fd9 ( https://github.com/\u4f60\u7684GitHub\u8d26\u6237\u540d/qmk_firmware ) ,\u4f60\u53ef\u4ee5\u70b9\u51fb\u4e0b\u65b9\u6240\u793a\u6309\u94ae\u521b\u5efa \"New Pull Request\": \u73b0\u5728\u4f60\u53ef\u4ee5\u770b\u5230\u4f60\u6240\u505a\u7684\u4e00\u5207 - \u5982\u679c\u770b\u8d77\u6765\u4e0d\u9519, \u5c31\u53ef\u4ee5\u70b9\u51fb \"Create Pull Request\"\u5b9a\u7a3f\u4e86: \u63d0\u4ea4\u540e,\u6211\u4eec\u4f1a\u5f00\u8ddf\u4f60\u8bf4\u4f60\u7684\u6539\u52a8,\u8981\u6c42\u60a8\u8fdb\u884c\u66f4\u6539, \u5e76\u6700\u7ec8\u63a5\u53d7\u60a8\u7684\u66f4\u6539!\u611f\u8c22\u60a8\u4e3aQMK\u505a\u7684\u8d21\u732e :)","title":"\u5982\u4f55\u4f7f\u7528GitHub"},{"location":"getting_started_github/#qmkgithub","text":"GitHub can be a little tricky to those that aren't familiar with it - this guide will walk through each step of forking, cloning, and submitting a pull request with QMK. Note \u672c\u6559\u7a0b\u5047\u8bbe\u60a8\u5df2\u5b89\u88c5GitHub\uff0c\u5e76\u4e14\u60a8\u559c\u6b22\u4f7f\u7528\u547d\u4ee4\u884c\u5de5\u4f5c\u3002 \u9996\u5148 GitHub\u4e0a\u7684QMK\u9875\u9762 , \u60a8\u80fd\u770b\u5230\u53f3\u4e0a\u65b9\u6709\u4e2a\u6309\u94ae\u5199\u7740\"Fork\": \u5982\u679c\u4f60\u662f\u67d0\u7ec4\u7ec7\u6210\u5458\uff0c\u4f60\u5c06\u9700\u8981\u9009\u62e9\u5206\u53c9\u5230\u54ea\u4e2a\u8d26\u6237\u3002\u4e00\u822c\u60c5\u51b5\u4e0b, \u4f60\u662f\u60f3\u8981\u5206\u53c9\u5230\u4f60\u7684\u79c1\u4eba\u8d26\u6237\u4e0b\u3002\u5f53\u4f60\u5b8c\u6210\u5206\u53c9 (\u6709\u65f6\u9700\u8981\u7b49\u4e00\u4f1a), \u70b9\u51fb\"Clone or Download\" \u6309\u94ae: !\u4eceGitHub\u4e0b\u8f7d](https://i.imgur.com/N1NYcSz.jpg) \u4f60\u8981\u9009\u62e9 \"HTTPS\", \u7136\u540e\u9009\u62e9\u94fe\u63a5\u590d\u5236: \u7136\u540e\uff0c\u5728\u547d\u4ee4\u884c\u8f93\u5165 git clone --recurse-submodules \uff0c\u7136\u540e\u7c98\u8d34\u4f60\u7684\u94fe\u63a5: user@computer:~$ git clone --recurse-submodules https://github.com/whoeveryouare/qmk_firmware.git Cloning into 'qmk_firmware'... remote: Enumerating objects: 9, done. remote: Counting objects: 100% (9/9), done. remote: Compressing objects: 100% (5/5), done. remote: Total 183883 (delta 5), reused 4 (delta 4), pack-reused 183874 Receiving objects: 100% (183883/183883), 132.90 MiB | 9.57 MiB/s, done. Resolving deltas: 100% (119972/119972), done. ... Submodule path 'lib/chibios': checked out '587968d6cbc2b0e1c7147540872f2a67e59ca18b' Submodule path 'lib/chibios-contrib': checked out 'ede48346eee4b8d6847c19bc01420bee76a5e486' Submodule path 'lib/googletest': checked out 'ec44c6c1675c25b9827aacd08c02433cccde7780' Submodule path 'lib/lufa': checked out 'ce10f7642b0459e409839b23cc91498945119b4d' Submodule path 'lib/ugfx': checked out '3e97b74e03c93631cdd3ddb2ce43b963fdce19b2' \u73b0\u5728\u4f60\u672c\u5730\u8ba1\u7b97\u673a\u6709QMK\u7684\u5206\u53c9\u4e86,\u4f60\u53ef\u4ee5\u6dfb\u52a0\u4f60\u7684\u5e03\u5c40\u4e86, \u4e3a\u4f60\u7684\u952e\u76d8\u7f16\u8bd1\u5e76\u5237\u65b0\u56fa\u4ef6\u5427\u3002\u5982\u679c\u4f60\u89c9\u5f97\u4f60\u7684\u4fee\u6539\u5f88\u4e0d\u9519, \u4f60\u53ef\u4ee5\u6dfb\u52a0,\u63d0\u4ea4,\u7136\u540e\u60f3\u4f60\u7684\u5206\u53c9\u63a8\u51fa\uff08pull\uff09\u4f60\u7684\u6539\u53d8\uff0c\u50cf\u8fd9\u6837: user@computer:~$ git add . user@computer:~$ git commit -m \"adding my keymap\" [master cccb1608] adding my keymap 1 file changed, 1 insertion(+) create mode 100644 keyboards/planck/keymaps/mine/keymap.c user@computer:~$ git push Counting objects: 1, done. Delta compression using up to 4 threads. Compressing objects: 100% (1/1), done. Writing objects: 100% (1/1), 1.64 KiB | 0 bytes/s, done. Total 1 (delta 1), reused 0 (delta 0) remote: Resolving deltas: 100% (1/1), completed with 1 local objects. To https://github.com/whoeveryouare/qmk_firmware.git + 20043e64...7da94ac5 master -> master \u73b0\u5728\u4f60\u7684\u6539\u52a8\u5df2\u7ecf\u5728\u4f60GitHub\u4e0a\u7684\u5206\u652f\u4e2d\u4e86 - \u5982\u679c\u4f60\u56de\u5230\u8fd9 ( https://github.com/\u4f60\u7684GitHub\u8d26\u6237\u540d/qmk_firmware ) ,\u4f60\u53ef\u4ee5\u70b9\u51fb\u4e0b\u65b9\u6240\u793a\u6309\u94ae\u521b\u5efa \"New Pull Request\": \u73b0\u5728\u4f60\u53ef\u4ee5\u770b\u5230\u4f60\u6240\u505a\u7684\u4e00\u5207 - \u5982\u679c\u770b\u8d77\u6765\u4e0d\u9519, \u5c31\u53ef\u4ee5\u70b9\u51fb \"Create Pull Request\"\u5b9a\u7a3f\u4e86: \u63d0\u4ea4\u540e,\u6211\u4eec\u4f1a\u5f00\u8ddf\u4f60\u8bf4\u4f60\u7684\u6539\u52a8,\u8981\u6c42\u60a8\u8fdb\u884c\u66f4\u6539, \u5e76\u6700\u7ec8\u63a5\u53d7\u60a8\u7684\u66f4\u6539!\u611f\u8c22\u60a8\u4e3aQMK\u505a\u7684\u8d21\u732e :)","title":"\u5982\u4f55\u5728QMK\u4e2d\u4f7f\u7528GitHub"},{"location":"getting_started_introduction/","text":"\u4ecb\u7ecd \u00b6 \u672c\u9875\u89e3\u91ca\u4e86\u4f7f\u7528QMK\u9879\u76ee\u6240\u9700\u7684\u57fa\u672c\u4fe1\u606f\u3002\u5b83\u5047\u5b9a\u60a8\u80fd\u719f\u7ec3\u4f7f\u7528Unix shell\uff0c\u4f46\u60a8\u4e0d\u719f\u6089C\u8bed\u8a00\u4e5f\u4e0d\u719f\u6089\u4f7f\u7528make\u7f16\u8bd1\u3002 \u57fa\u672cQMK\u7ed3\u6784 \u00b6 QMK\u662f Jun Wako \u7684 tmk_keyboard \u5de5\u7a0b\u7684\u4e00\u4e2a\u5206\u53c9\u3002\u7ecf\u8fc7\u66f4\u6539\u7684TMK\u539f\u59cb\u4ee3\u7801\u653e\u5728 tmk_core \u6587\u4ef6\u5939\u4e2d\u3002 QMK\u589e\u52a0\u7684\u65b0\u4e1c\u897f\u53ef\u4ee5\u5728 quantum \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002 \u952e\u76d8\u9879\u76ee\u53ef\u4ee5\u5728 handwired \uff08\u624b\u52a8\u98de\u7ebf\uff09 \u548c keyboard \uff08PCB\u952e\u76d8\uff09\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\u627e\u5230\u3002 \u7528\u6237\u7a7a\u95f4\u7ed3\u6784 \u00b6 \u5728 users \u6587\u4ef6\u5939\u91cc\u9762\u7684\u76ee\u5f55\u662f\u6bcf\u4e2a\u7528\u6237\u7684\u76ee\u5f55\u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u9762\u653e\u7684\u662f\u7528\u6237\u4eec\u5728\u4e0d\u540c\u952e\u76d8\u90fd\u80fd\u7528\u5230\u7684\u4ee3\u7801\u3002\u8be6\u89c1 \u7528\u6237\u7a7a\u95f4\u7279\u6027 \u952e\u76d8\u9879\u76ee\u7ed3\u6784 \u00b6 \u5728 keyboards \u6587\u4ef6\u5939\u548c\u4ed6\u7684\u5b50\u6587\u4ef6\u5939 handwired \u4e2d\u5c31\u662f\u5404\u4e2a\u952e\u76d8\u7684\u9879\u76ee\u4e86\uff0c\u6bd4\u5982 qmk_firmware/keyboards/clueboard \u3002\u5185\u90e8\u7ed3\u6784\u4e0e\u5982\u4e0b: keymaps/ : \u53ef\u4ee5\u6784\u5efa\u7684\u4e0d\u540c\u5e03\u5c40 rules.mk : \u7528\u6765\u8bbe\u7f6e \"make\" \u547d\u4ee4\u9ed8\u8ba4\u9009\u9879\u7684\u6587\u4ef6\u3002\u522b\u76f4\u63a5\u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6,\u4f60\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u67d0\u4e2a\u5e03\u5c40\u7684 rules.mk . config.h : \u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4\u7f16\u8bd1\u9009\u9879\u7684\u6587\u4ef6\u3002\u522b\u76f4\u63a5\u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6, \u4f60\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u67d0\u4e2a\u5e03\u5c40\u7684 config.h . \u5e03\u5c40\u7ed3\u6784 \u00b6 \u5728\u5404\u4e2a\u5e03\u5c40\u7684\u6587\u4ef6\u5939\uff0c\u4f60\u80fd\u627e\u5230\u4ee5\u4e0b\u6587\u4ef6\u3002\u53ea\u6709 keymap.c \u662f\u5fc5\u8981\u7684, \u5982\u679c\u5176\u4ed6\u6587\u4ef6\u627e\u4e0d\u5230\u5c31\u4f1a\u76f4\u63a5\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u3002 config.h : \u914d\u7f6e\u5e03\u5c40\u7684\u9009\u9879 keymap.c : \u5e03\u5c40\u7684\u5168\u90e8\u4ee3\u7801, \u5fc5\u8981\u6587\u4ef6 rules.mk : \u4f7f\u80fd\u7684QMK\u7279\u6027 readme.md :\u4ecb\u7ecd\u4f60\u7684\u5e03\u5c40,\u544a\u8bc9\u522b\u4eba\u600e\u4e48\u4f7f\u7528\uff0c\u9644\u4e0a\u529f\u80fd\u8bf4\u660e\u3002\u8bf7\u5c06\u56fe\u7247\u4e0a\u4f20\u5230imgur\u7b49\u56fe\u5e8a\uff08\u8bd1\u8005\u6ce8\uff1aimgur\u53ef\u80fd\u5df2\u88ab\u5899\uff0c\u4e3a\u4e86\u65b9\u4fbf\u56fd\u4eba\u8bbf\u95ee\uff0c\u5efa\u8bae\u4f7f\u7528\u56fd\u5185\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7684\u56fe\u5e8a\uff09\u3002 config.h \u6587\u4ef6 \u00b6 \u6709\u4e09\u4e2a\u91cd\u8981\u7684 config.h \u4f4d\u7f6e: \u952e\u76d8 ( /keyboards/<keyboard>/config.h ) \u7528\u6237\u7a7a\u95f4 ( /users/<user>/config.h ) \u5e03\u5c40 ( /keyboards/<keyboard>/keymaps/<keymap>/config.h ) \u6784\u5efa\u7cfb\u7edf\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\u81ea\u52a8\u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u3002\u5982\u679c\u8981\u8986\u76d6\u7531\u4e0a\u4e00\u4e2a config.h \u6240\u505a\u7684\u8bbe\u7f6e\uff0c\u60a8\u9700\u8981\u9996\u5148\u4e3a\u8981\u66f4\u6539\u7684\u8bbe\u7f6e\u5305\u542b\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u3002 #pragma once \u8981\u8986\u76d6\u4e0a\u4e00\u4e2a config.h \u6240\u505a\u7684\u8bbe\u7f6e\uff0c\u4f60\u8981\u5148 #undef \u7136\u540e\u518d #define \u8fd9\u4e2a\u8bbe\u7f6e. \u6837\u677f\u4ee3\u7801\u548c\u8bbe\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a #pragma once // \u50cf\u4e0b\u9762\u90a3\u6837\u8986\u76d6\u8bbe\u7f6e\uff08MY_SETTING\u6307\u7684\u662f\u4f60\u8981\u8986\u76d6\u7684\u8bbe\u7f6e\u9879\uff09! #undef MY_SETTING #define MY_SETTING 4","title":"QMK\u7b80\u4ecb"},{"location":"getting_started_introduction/#_1","text":"\u672c\u9875\u89e3\u91ca\u4e86\u4f7f\u7528QMK\u9879\u76ee\u6240\u9700\u7684\u57fa\u672c\u4fe1\u606f\u3002\u5b83\u5047\u5b9a\u60a8\u80fd\u719f\u7ec3\u4f7f\u7528Unix shell\uff0c\u4f46\u60a8\u4e0d\u719f\u6089C\u8bed\u8a00\u4e5f\u4e0d\u719f\u6089\u4f7f\u7528make\u7f16\u8bd1\u3002","title":"\u4ecb\u7ecd"},{"location":"getting_started_introduction/#qmk","text":"QMK\u662f Jun Wako \u7684 tmk_keyboard \u5de5\u7a0b\u7684\u4e00\u4e2a\u5206\u53c9\u3002\u7ecf\u8fc7\u66f4\u6539\u7684TMK\u539f\u59cb\u4ee3\u7801\u653e\u5728 tmk_core \u6587\u4ef6\u5939\u4e2d\u3002 QMK\u589e\u52a0\u7684\u65b0\u4e1c\u897f\u53ef\u4ee5\u5728 quantum \u6587\u4ef6\u5939\u4e2d\u627e\u5230\u3002 \u952e\u76d8\u9879\u76ee\u53ef\u4ee5\u5728 handwired \uff08\u624b\u52a8\u98de\u7ebf\uff09 \u548c keyboard \uff08PCB\u952e\u76d8\uff09\u8fd9\u4e24\u4e2a\u6587\u4ef6\u5939\u627e\u5230\u3002","title":"\u57fa\u672cQMK\u7ed3\u6784"},{"location":"getting_started_introduction/#_2","text":"\u5728 users \u6587\u4ef6\u5939\u91cc\u9762\u7684\u76ee\u5f55\u662f\u6bcf\u4e2a\u7528\u6237\u7684\u76ee\u5f55\u3002\u8fd9\u4e2a\u6587\u4ef6\u5939\u91cc\u9762\u653e\u7684\u662f\u7528\u6237\u4eec\u5728\u4e0d\u540c\u952e\u76d8\u90fd\u80fd\u7528\u5230\u7684\u4ee3\u7801\u3002\u8be6\u89c1 \u7528\u6237\u7a7a\u95f4\u7279\u6027","title":"\u7528\u6237\u7a7a\u95f4\u7ed3\u6784"},{"location":"getting_started_introduction/#_3","text":"\u5728 keyboards \u6587\u4ef6\u5939\u548c\u4ed6\u7684\u5b50\u6587\u4ef6\u5939 handwired \u4e2d\u5c31\u662f\u5404\u4e2a\u952e\u76d8\u7684\u9879\u76ee\u4e86\uff0c\u6bd4\u5982 qmk_firmware/keyboards/clueboard \u3002\u5185\u90e8\u7ed3\u6784\u4e0e\u5982\u4e0b: keymaps/ : \u53ef\u4ee5\u6784\u5efa\u7684\u4e0d\u540c\u5e03\u5c40 rules.mk : \u7528\u6765\u8bbe\u7f6e \"make\" \u547d\u4ee4\u9ed8\u8ba4\u9009\u9879\u7684\u6587\u4ef6\u3002\u522b\u76f4\u63a5\u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6,\u4f60\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u67d0\u4e2a\u5e03\u5c40\u7684 rules.mk . config.h : \u7528\u4e8e\u8bbe\u7f6e\u9ed8\u8ba4\u7f16\u8bd1\u9009\u9879\u7684\u6587\u4ef6\u3002\u522b\u76f4\u63a5\u7f16\u8f91\u8fd9\u4e2a\u6587\u4ef6, \u4f60\u5e94\u8be5\u4f7f\u7528\u5177\u4f53\u67d0\u4e2a\u5e03\u5c40\u7684 config.h .","title":"\u952e\u76d8\u9879\u76ee\u7ed3\u6784"},{"location":"getting_started_introduction/#_4","text":"\u5728\u5404\u4e2a\u5e03\u5c40\u7684\u6587\u4ef6\u5939\uff0c\u4f60\u80fd\u627e\u5230\u4ee5\u4e0b\u6587\u4ef6\u3002\u53ea\u6709 keymap.c \u662f\u5fc5\u8981\u7684, \u5982\u679c\u5176\u4ed6\u6587\u4ef6\u627e\u4e0d\u5230\u5c31\u4f1a\u76f4\u63a5\u9009\u62e9\u9ed8\u8ba4\u9009\u9879\u3002 config.h : \u914d\u7f6e\u5e03\u5c40\u7684\u9009\u9879 keymap.c : \u5e03\u5c40\u7684\u5168\u90e8\u4ee3\u7801, \u5fc5\u8981\u6587\u4ef6 rules.mk : \u4f7f\u80fd\u7684QMK\u7279\u6027 readme.md :\u4ecb\u7ecd\u4f60\u7684\u5e03\u5c40,\u544a\u8bc9\u522b\u4eba\u600e\u4e48\u4f7f\u7528\uff0c\u9644\u4e0a\u529f\u80fd\u8bf4\u660e\u3002\u8bf7\u5c06\u56fe\u7247\u4e0a\u4f20\u5230imgur\u7b49\u56fe\u5e8a\uff08\u8bd1\u8005\u6ce8\uff1aimgur\u53ef\u80fd\u5df2\u88ab\u5899\uff0c\u4e3a\u4e86\u65b9\u4fbf\u56fd\u4eba\u8bbf\u95ee\uff0c\u5efa\u8bae\u4f7f\u7528\u56fd\u5185\u53ef\u4ee5\u76f4\u63a5\u8bbf\u95ee\u7684\u56fe\u5e8a\uff09\u3002","title":"\u5e03\u5c40\u7ed3\u6784"},{"location":"getting_started_introduction/#configh","text":"\u6709\u4e09\u4e2a\u91cd\u8981\u7684 config.h \u4f4d\u7f6e: \u952e\u76d8 ( /keyboards/<keyboard>/config.h ) \u7528\u6237\u7a7a\u95f4 ( /users/<user>/config.h ) \u5e03\u5c40 ( /keyboards/<keyboard>/keymaps/<keymap>/config.h ) \u6784\u5efa\u7cfb\u7edf\u6309\u7167\u4e0a\u8ff0\u987a\u5e8f\u81ea\u52a8\u83b7\u53d6\u914d\u7f6e\u6587\u4ef6\u3002\u5982\u679c\u8981\u8986\u76d6\u7531\u4e0a\u4e00\u4e2a config.h \u6240\u505a\u7684\u8bbe\u7f6e\uff0c\u60a8\u9700\u8981\u9996\u5148\u4e3a\u8981\u66f4\u6539\u7684\u8bbe\u7f6e\u5305\u542b\u4e00\u4e9b\u6837\u677f\u4ee3\u7801\u3002 #pragma once \u8981\u8986\u76d6\u4e0a\u4e00\u4e2a config.h \u6240\u505a\u7684\u8bbe\u7f6e\uff0c\u4f60\u8981\u5148 #undef \u7136\u540e\u518d #define \u8fd9\u4e2a\u8bbe\u7f6e. \u6837\u677f\u4ee3\u7801\u548c\u8bbe\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a #pragma once // \u50cf\u4e0b\u9762\u90a3\u6837\u8986\u76d6\u8bbe\u7f6e\uff08MY_SETTING\u6307\u7684\u662f\u4f60\u8981\u8986\u76d6\u7684\u8bbe\u7f6e\u9879\uff09! #undef MY_SETTING #define MY_SETTING 4","title":"config.h \u6587\u4ef6"},{"location":"getting_started_make_guide/","text":"More Detailed make Instructions \u00b6 The full syntax of the make command is <keyboard_folder>:<keymap>:<target> , where: <keyboard_folder> is the path of the keyboard, for example planck Use all to compile all keyboards Specify the path to compile a revision, for example planck/rev4 or planck/rev3 If the keyboard doesn't have any folders, it can be left out To compile the default folder, you can leave it out <keymap> is the name of the keymap, for example algernon Use all to compile all keymaps <target> will be explained in more detail below. The <target> means the following * If no target is given, then it's the same as all below * all compiles as many keyboard/revision/keymap combinations as specified. For example, make planck/rev4:default will generate a single .hex, while make planck/rev4:all will generate a hex for every keymap available to the planck. * flash , dfu , teensy , avrdude , dfu-util , or bootloadHID compile and upload the firmware to the keyboard. If the compilation fails, then nothing will be uploaded. The programmer to use depends on the keyboard. For most keyboards it's dfu , but for ChibiOS keyboards you should use dfu-util , and teensy for standard Teensys. To find out which command you should use for your keyboard, check the keyboard specific readme. Visit the Flashing Firmware guide for more details of the available bootloaders. * Note : some operating systems need privileged access for these commands to work. This means that you may need to setup udev rules to access these without root access, or to run the command with root access ( sudo make planck/rev4:default:flash ). * clean , cleans the build output folders to make sure that everything is built from scratch. Run this before normal compilation if you have some unexplainable problems. * distclean removes .hex files and .bin files. The following targets are for developers: show_path shows the path of the source and object files. dump_vars dumps the makefile variable. objs-size displays the size of individual object files. show_build_options shows the options set in 'rules.mk'. check-md5 displays the md5 checksum of the generated binary file. You can also add extra options at the end of the make command line, after the target make COLOR=false - turns off color output make SILENT=true - turns off output besides errors/warnings make VERBOSE=true - outputs all of the gcc stuff (not interesting, unless you need to debug) make VERBOSE_LD_CMD=yes - execute the ld command with the -v option. make VERBOSE_AS_CMD=yes - execute the as command with the -v option. make VERBOSE_C_CMD=<c_source_file> - add the -v option when compiling the specified C source file. make DUMP_C_MACROS=<c_source_file> - dump preprocessor macros when compiling the specified C source file. make DUMP_C_MACROS=<c_source_file> > <logfile> - dump preprocessor macros to <logfile> when compiling the specified C source file. make VERBOSE_C_INCLUDE=<c_source_file> - dumps the file names to be included when compiling the specified C source file. make VERBOSE_C_INCLUDE=<c_source_file> 2> <logfile> - dumps the file names to be included to <logfile> when compiling the specified C source file. The make command itself also has some additional options, type make --help for more information. The most useful is probably -jx , which specifies that you want to compile using more than one CPU, the x represents the number of CPUs that you want to use. Setting that can greatly reduce the compile times, especially if you are compiling many keyboards/keymaps. I usually set it to one less than the number of CPUs that I have, so that I have some left for doing other things while it's compiling. Note that not all operating systems and make versions supports that option. Here are some examples commands make all:all builds everything (all keyboard folders, all keymaps). Running just make from the root will also run this. make ergodox_infinity:algernon:clean will clean the build output of the Ergodox Infinity keyboard. make planck/rev4:default:flash COLOR=false builds and uploads the keymap without color output. rules.mk Options \u00b6 Set these variables to no to disable them, and yes to enable them. BOOTMAGIC_ENABLE This allows you to hold a key and the salt key (space by default) and have access to a various EEPROM settings that persist over power loss. It's advised you keep this disabled, as the settings are often changed by accident, and produce confusing results that makes it difficult to debug. It's one of the more common problems encountered in help sessions. MOUSEKEY_ENABLE This gives you control over cursor movements and clicks via keycodes/custom functions. EXTRAKEY_ENABLE This allows you to use the system and audio control key codes. CONSOLE_ENABLE This allows you to print messages that can be read using hid_listen . By default, all debug ( dprint ) print ( print , xprintf ), and user print ( uprint ) messages will be enabled. This will eat up a significant portion of the flash and may make the keyboard .hex file too big to program. To disable debug messages ( dprint ) and reduce the .hex file size, include #define NO_DEBUG in your config.h file. To disable print messages ( print , xprintf ) and user print messages ( uprint ) and reduce the .hex file size, include #define NO_PRINT in your config.h file. To disable print messages ( print , xprintf ) and KEEP user print messages ( uprint ), include #define USER_PRINT in your config.h file (do not also include #define NO_PRINT in this case). To see the text, open hid_listen and enjoy looking at your printed messages. NOTE: Do not include uprint messages in anything other than your keymap code. It must not be used within the QMK system framework. Otherwise, you will bloat other people's .hex files. COMMAND_ENABLE This enables magic commands, typically fired with the default magic key combo LSHIFT+RSHIFT+KEY . Magic commands include turning on debugging messages ( MAGIC+D ) or temporarily toggling NKRO ( MAGIC+N ). SLEEP_LED_ENABLE Enables your LED to breath while your computer is sleeping. Timer1 is being used here. This feature is largely unused and untested, and needs updating/abstracting. NKRO_ENABLE This allows the keyboard to tell the host OS that up to 248 keys are held down at once (default without NKRO is 6). NKRO is off by default, even if NKRO_ENABLE is set. NKRO can be forced by adding #define FORCE_NKRO to your config.h or by binding MAGIC_TOGGLE_NKRO to a key and then hitting the key. BACKLIGHT_ENABLE This enables the in-switch LED backlighting. You can specify the backlight pin by putting this in your config.h : #define BACKLIGHT_PIN B7 MIDI_ENABLE This enables MIDI sending and receiving with your keyboard. To enter MIDI send mode, you can use the keycode MI_ON , and MI_OFF to turn it off. This is a largely untested feature, but more information can be found in the quantum/quantum.c file. UNICODE_ENABLE This allows you to send Unicode characters using UC(<code point>) in your keymap. Code points up to 0x7FFF are supported. This covers characters for most modern languages, as well as symbols, but it doesn't cover emoji. UNICODEMAP_ENABLE This allows you to send Unicode characters using X(<map index>) in your keymap. You will need to maintain a mapping table in your keymap file. All possible code points (up to 0x10FFFF ) are supported. UCIS_ENABLE This allows you to send Unicode characters by inputting a mnemonic corresponding to the character you want to send. You will need to maintain a mapping table in your keymap file. All possible code points (up to 0x10FFFF ) are supported. For further details, as well as limitations, see the Unicode page . AUDIO_ENABLE This allows you output audio on the C6 pin (needs abstracting). See the audio page for more information. VARIABLE_TRACE Use this to debug changes to variable values, see the tracing variables section of the Unit Testing page for more information. API_SYSEX_ENABLE This enables using the Quantum SYSEX API to send strings (somewhere?) KEY_LOCK_ENABLE This enables key lock . SPLIT_KEYBOARD This enables split keyboard support (dual MCU like the let's split and bakingpy's boards) and includes all necessary files located at quantum/split_common SPLIT_TRANSPORT As there is no standard split communication driver for ARM-based split keyboards yet, SPLIT_TRANSPORT = custom must be used for these. It will prevent the standard split keyboard communication code (which is AVR-specific) from being included, allowing a custom implementation to be used. CUSTOM_MATRIX Lets you replace the default matrix scanning routine with your own code. For further details, see the Custom Matrix page . DEBOUNCE_TYPE Lets you replace the default key debouncing routine with an alternative one. If custom you will need to provide your own implementation. Customizing Makefile Options on a Per-Keymap Basis \u00b6 If your keymap directory has a file called rules.mk any options you set in that file will take precedence over other rules.mk options for your particular keyboard. So let's say your keyboard's rules.mk has BACKLIGHT_ENABLE = yes . You want your particular keyboard to not have the backlight, so you make a file called rules.mk and specify BACKLIGHT_ENABLE = no .","title":"\u6784\u5efa/\u7f16\u8bd1\u6307\u5357"},{"location":"getting_started_make_guide/#more-detailed-make-instructions","text":"The full syntax of the make command is <keyboard_folder>:<keymap>:<target> , where: <keyboard_folder> is the path of the keyboard, for example planck Use all to compile all keyboards Specify the path to compile a revision, for example planck/rev4 or planck/rev3 If the keyboard doesn't have any folders, it can be left out To compile the default folder, you can leave it out <keymap> is the name of the keymap, for example algernon Use all to compile all keymaps <target> will be explained in more detail below. The <target> means the following * If no target is given, then it's the same as all below * all compiles as many keyboard/revision/keymap combinations as specified. For example, make planck/rev4:default will generate a single .hex, while make planck/rev4:all will generate a hex for every keymap available to the planck. * flash , dfu , teensy , avrdude , dfu-util , or bootloadHID compile and upload the firmware to the keyboard. If the compilation fails, then nothing will be uploaded. The programmer to use depends on the keyboard. For most keyboards it's dfu , but for ChibiOS keyboards you should use dfu-util , and teensy for standard Teensys. To find out which command you should use for your keyboard, check the keyboard specific readme. Visit the Flashing Firmware guide for more details of the available bootloaders. * Note : some operating systems need privileged access for these commands to work. This means that you may need to setup udev rules to access these without root access, or to run the command with root access ( sudo make planck/rev4:default:flash ). * clean , cleans the build output folders to make sure that everything is built from scratch. Run this before normal compilation if you have some unexplainable problems. * distclean removes .hex files and .bin files. The following targets are for developers: show_path shows the path of the source and object files. dump_vars dumps the makefile variable. objs-size displays the size of individual object files. show_build_options shows the options set in 'rules.mk'. check-md5 displays the md5 checksum of the generated binary file. You can also add extra options at the end of the make command line, after the target make COLOR=false - turns off color output make SILENT=true - turns off output besides errors/warnings make VERBOSE=true - outputs all of the gcc stuff (not interesting, unless you need to debug) make VERBOSE_LD_CMD=yes - execute the ld command with the -v option. make VERBOSE_AS_CMD=yes - execute the as command with the -v option. make VERBOSE_C_CMD=<c_source_file> - add the -v option when compiling the specified C source file. make DUMP_C_MACROS=<c_source_file> - dump preprocessor macros when compiling the specified C source file. make DUMP_C_MACROS=<c_source_file> > <logfile> - dump preprocessor macros to <logfile> when compiling the specified C source file. make VERBOSE_C_INCLUDE=<c_source_file> - dumps the file names to be included when compiling the specified C source file. make VERBOSE_C_INCLUDE=<c_source_file> 2> <logfile> - dumps the file names to be included to <logfile> when compiling the specified C source file. The make command itself also has some additional options, type make --help for more information. The most useful is probably -jx , which specifies that you want to compile using more than one CPU, the x represents the number of CPUs that you want to use. Setting that can greatly reduce the compile times, especially if you are compiling many keyboards/keymaps. I usually set it to one less than the number of CPUs that I have, so that I have some left for doing other things while it's compiling. Note that not all operating systems and make versions supports that option. Here are some examples commands make all:all builds everything (all keyboard folders, all keymaps). Running just make from the root will also run this. make ergodox_infinity:algernon:clean will clean the build output of the Ergodox Infinity keyboard. make planck/rev4:default:flash COLOR=false builds and uploads the keymap without color output.","title":"More Detailed make Instructions"},{"location":"getting_started_make_guide/#rulesmk-options","text":"Set these variables to no to disable them, and yes to enable them. BOOTMAGIC_ENABLE This allows you to hold a key and the salt key (space by default) and have access to a various EEPROM settings that persist over power loss. It's advised you keep this disabled, as the settings are often changed by accident, and produce confusing results that makes it difficult to debug. It's one of the more common problems encountered in help sessions. MOUSEKEY_ENABLE This gives you control over cursor movements and clicks via keycodes/custom functions. EXTRAKEY_ENABLE This allows you to use the system and audio control key codes. CONSOLE_ENABLE This allows you to print messages that can be read using hid_listen . By default, all debug ( dprint ) print ( print , xprintf ), and user print ( uprint ) messages will be enabled. This will eat up a significant portion of the flash and may make the keyboard .hex file too big to program. To disable debug messages ( dprint ) and reduce the .hex file size, include #define NO_DEBUG in your config.h file. To disable print messages ( print , xprintf ) and user print messages ( uprint ) and reduce the .hex file size, include #define NO_PRINT in your config.h file. To disable print messages ( print , xprintf ) and KEEP user print messages ( uprint ), include #define USER_PRINT in your config.h file (do not also include #define NO_PRINT in this case). To see the text, open hid_listen and enjoy looking at your printed messages. NOTE: Do not include uprint messages in anything other than your keymap code. It must not be used within the QMK system framework. Otherwise, you will bloat other people's .hex files. COMMAND_ENABLE This enables magic commands, typically fired with the default magic key combo LSHIFT+RSHIFT+KEY . Magic commands include turning on debugging messages ( MAGIC+D ) or temporarily toggling NKRO ( MAGIC+N ). SLEEP_LED_ENABLE Enables your LED to breath while your computer is sleeping. Timer1 is being used here. This feature is largely unused and untested, and needs updating/abstracting. NKRO_ENABLE This allows the keyboard to tell the host OS that up to 248 keys are held down at once (default without NKRO is 6). NKRO is off by default, even if NKRO_ENABLE is set. NKRO can be forced by adding #define FORCE_NKRO to your config.h or by binding MAGIC_TOGGLE_NKRO to a key and then hitting the key. BACKLIGHT_ENABLE This enables the in-switch LED backlighting. You can specify the backlight pin by putting this in your config.h : #define BACKLIGHT_PIN B7 MIDI_ENABLE This enables MIDI sending and receiving with your keyboard. To enter MIDI send mode, you can use the keycode MI_ON , and MI_OFF to turn it off. This is a largely untested feature, but more information can be found in the quantum/quantum.c file. UNICODE_ENABLE This allows you to send Unicode characters using UC(<code point>) in your keymap. Code points up to 0x7FFF are supported. This covers characters for most modern languages, as well as symbols, but it doesn't cover emoji. UNICODEMAP_ENABLE This allows you to send Unicode characters using X(<map index>) in your keymap. You will need to maintain a mapping table in your keymap file. All possible code points (up to 0x10FFFF ) are supported. UCIS_ENABLE This allows you to send Unicode characters by inputting a mnemonic corresponding to the character you want to send. You will need to maintain a mapping table in your keymap file. All possible code points (up to 0x10FFFF ) are supported. For further details, as well as limitations, see the Unicode page . AUDIO_ENABLE This allows you output audio on the C6 pin (needs abstracting). See the audio page for more information. VARIABLE_TRACE Use this to debug changes to variable values, see the tracing variables section of the Unit Testing page for more information. API_SYSEX_ENABLE This enables using the Quantum SYSEX API to send strings (somewhere?) KEY_LOCK_ENABLE This enables key lock . SPLIT_KEYBOARD This enables split keyboard support (dual MCU like the let's split and bakingpy's boards) and includes all necessary files located at quantum/split_common SPLIT_TRANSPORT As there is no standard split communication driver for ARM-based split keyboards yet, SPLIT_TRANSPORT = custom must be used for these. It will prevent the standard split keyboard communication code (which is AVR-specific) from being included, allowing a custom implementation to be used. CUSTOM_MATRIX Lets you replace the default matrix scanning routine with your own code. For further details, see the Custom Matrix page . DEBOUNCE_TYPE Lets you replace the default key debouncing routine with an alternative one. If custom you will need to provide your own implementation.","title":"rules.mk Options"},{"location":"getting_started_make_guide/#customizing-makefile-options-on-a-per-keymap-basis","text":"If your keymap directory has a file called rules.mk any options you set in that file will take precedence over other rules.mk options for your particular keyboard. So let's say your keyboard's rules.mk has BACKLIGHT_ENABLE = yes . You want your particular keyboard to not have the backlight, so you make a file called rules.mk and specify BACKLIGHT_ENABLE = no .","title":"Customizing Makefile Options on a Per-Keymap Basis"},{"location":"getting_started_vagrant/","text":"Vagrant Quick Start \u00b6 This project includes a Vagrantfile that will allow you to build a new firmware for your keyboard very easily without major changes to your primary operating system. This also ensures that when you clone the project and perform a build, you have the exact same environment as anyone else using the Vagrantfile to build. This makes it much easier for people to help you troubleshoot any issues you encounter. Requirements \u00b6 Using the Vagrantfile in this repository requires you have Vagrant as well as a supported provider installed: VirtualBox (Version at least 5.0.12) Sold as 'the most accessible platform to use Vagrant' VMware Workstation and Vagrant VMware plugin The (paid) VMware plugin requires a licensed copy of VMware Workstation/Fusion Docker Other than having Vagrant, a suitable provider installed and possibly a restart of your computer afterwards, you can simple run a 'vagrant up' anywhere inside the folder where you checked out this project and it will start an environment (either a virtual machine or container) that contains all the tools required to build this project. There is a post Vagrant startup hint that will get you off on the right foot, otherwise you can also reference the build documentation below. Flashing the Firmware \u00b6 The \"easy\" way to flash the firmware is using a tool from your host OS: QMK Toolbox (recommended) Teensy Loader If you want to program via the command line you can uncomment the ['modifyvm'] lines in the Vagrantfile to enable the USB passthrough into Linux and then program using the command line tools like dfu-util/dfu-programmer or you can install the Teensy CLI version. Vagrantfile Overview \u00b6 The development environment is configured to run the QMK Docker image, qmkfm/base_container . This not only ensures predictability between systems, it also mirrors the CI environment. FAQ \u00b6 Why am I seeing issues under Virtualbox? \u00b6 Certain versions of Virtualbox 5 appear to have an incompatibility with the Virtualbox extensions installed in the boxes in this Vagrantfile. If you encounter any issues with the /vagrant mount not succeeding, please upgrade your version of Virtualbox to at least 5.0.12. Alternately, you can try running the following command: vagrant plugin install vagrant-vbguest How do I remove an existing environment? \u00b6 Finished with your environment? From anywhere inside the folder where you checked out this project, Execute: vagrant destroy What if I want to use Docker directly? \u00b6 Want to benefit from the Vagrant workflow without a virtual machine? The Vagrantfile is configured to bypass running a virtual machine, and run the container directly. Execute the following when bringing up the environment to force the use of Docker: vagrant up --provider=docker How do I access the virtual machine instead of the Docker container? \u00b6 Execute the following to bypass the vagrant user booting directly to the official qmk builder image: vagrant ssh -c 'sudo -i'","title":"vagrant\u6307\u5357"},{"location":"getting_started_vagrant/#vagrant-quick-start","text":"This project includes a Vagrantfile that will allow you to build a new firmware for your keyboard very easily without major changes to your primary operating system. This also ensures that when you clone the project and perform a build, you have the exact same environment as anyone else using the Vagrantfile to build. This makes it much easier for people to help you troubleshoot any issues you encounter.","title":"Vagrant Quick Start"},{"location":"getting_started_vagrant/#requirements","text":"Using the Vagrantfile in this repository requires you have Vagrant as well as a supported provider installed: VirtualBox (Version at least 5.0.12) Sold as 'the most accessible platform to use Vagrant' VMware Workstation and Vagrant VMware plugin The (paid) VMware plugin requires a licensed copy of VMware Workstation/Fusion Docker Other than having Vagrant, a suitable provider installed and possibly a restart of your computer afterwards, you can simple run a 'vagrant up' anywhere inside the folder where you checked out this project and it will start an environment (either a virtual machine or container) that contains all the tools required to build this project. There is a post Vagrant startup hint that will get you off on the right foot, otherwise you can also reference the build documentation below.","title":"Requirements"},{"location":"getting_started_vagrant/#flashing-the-firmware","text":"The \"easy\" way to flash the firmware is using a tool from your host OS: QMK Toolbox (recommended) Teensy Loader If you want to program via the command line you can uncomment the ['modifyvm'] lines in the Vagrantfile to enable the USB passthrough into Linux and then program using the command line tools like dfu-util/dfu-programmer or you can install the Teensy CLI version.","title":"Flashing the Firmware"},{"location":"getting_started_vagrant/#vagrantfile-overview","text":"The development environment is configured to run the QMK Docker image, qmkfm/base_container . This not only ensures predictability between systems, it also mirrors the CI environment.","title":"Vagrantfile Overview"},{"location":"getting_started_vagrant/#faq","text":"","title":"FAQ"},{"location":"getting_started_vagrant/#why-am-i-seeing-issues-under-virtualbox","text":"Certain versions of Virtualbox 5 appear to have an incompatibility with the Virtualbox extensions installed in the boxes in this Vagrantfile. If you encounter any issues with the /vagrant mount not succeeding, please upgrade your version of Virtualbox to at least 5.0.12. Alternately, you can try running the following command: vagrant plugin install vagrant-vbguest","title":"Why am I seeing issues under Virtualbox?"},{"location":"getting_started_vagrant/#how-do-i-remove-an-existing-environment","text":"Finished with your environment? From anywhere inside the folder where you checked out this project, Execute: vagrant destroy","title":"How do I remove an existing environment?"},{"location":"getting_started_vagrant/#what-if-i-want-to-use-docker-directly","text":"Want to benefit from the Vagrant workflow without a virtual machine? The Vagrantfile is configured to bypass running a virtual machine, and run the container directly. Execute the following when bringing up the environment to force the use of Docker: vagrant up --provider=docker","title":"What if I want to use Docker directly?"},{"location":"getting_started_vagrant/#how-do-i-access-the-virtual-machine-instead-of-the-docker-container","text":"Execute the following to bypass the vagrant user booting directly to the official qmk builder image: vagrant ssh -c 'sudo -i'","title":"How do I access the virtual machine instead of the Docker container?"},{"location":"hand_wire/","text":"Hand-Wiring Guide \u00b6 Parts list \u00b6 You will need: (where x is the number of keys on your planned keyboard) QMK compatible microcontroller board (Teensy, Pro-Micro, QMK Proton C etc.) x keyswitches (MX, Matias, Gateron, etc) x through hole diodes Keyboard plate and plate mount stabilisers Wire Soldering iron Rosin-cored solder Adequate ventilation/a fan Wire cutters/snippers Optional but useful: Wire strippers/a sharp knife Tweezers and/or small needle nose pliers Soldering station/Helping hands Starting the build \u00b6 There are many ways to hand wire a PCB matrix, this guide will describe the fundamentals as well as some recommended ways to go about it. As we are dealing with hand wiring, it is assumed that you already have a plate. If you are planning a completely custom layout, tools such as ai03 Plate Generator and Swillkb Plate & Case Builder can help when designing one. Start by installing the switches and stabilisers in the plate. Depending on the thickness and material this may also involve hot gluing it in place. Planning the matrix \u00b6 If you are following a pre-existing handwire guide (e.g. for the keyboards in the handwire firmware section you can skip this step, just ensure you wire the matrix as described. What you want to achieve is one leg from each switch being attached to the corresponding switches next to it (rows) and the other leg being attached to the switches above and below it (columns) and a diode to one of the legs, mosy commonly this will be the leg attached to the rows, and the diode will face away from it (Column to Row) i.e. with the wire furthest from the black line on the diode connected to the switch (as current will only travel in one direction through a diode). It is fairly simple to plan for an ortholinear keyboard (like a Planck). Image from RoastPotatoes' \"How to hand wire a Planck\" But the larger and more complicated your keyboard, the more complex the matrix. Keyboard Firmware Builder can help you plan your matrix layout (shown here with a basic fullsize ISO keyboard imported from Keyboard Layout Editor . Bear in mind that the number of rows plus the number of columns can not exceed the number of I/O pins on your controller. So the fullsize matrix shown above would be possible on a Proton C or Teensy++, but not on a regular Teensy or Pro Micro. Common Microcontroller Boards \u00b6 Board Controller # I/O Pinout Pro Micro* ATmega32u4 20 link Teensy 2.0 ATmega32u4 25 link QMK Proton C STM32F303xC 36 link 1 , 2 Teensy++ 2.0 AT90USB1286 46 link *Elite C is essentially the same as a Pro Micro with a USB-C instead of Micro-USB There are also a number of boards designed specifically for handwiring that mount directly to a small number of switches and offer pinouts for the rest. Though these are generally more expensive and may be more difficult to get hold of. Board Controller # I/O Swiss helper ATmega32u4 20 Postage board ATmega32u4 25 Postage board mini ATmega32u4 25 Wiring the matrix \u00b6 There is no one right way to do this. What you want to achieve is good connection at all of the joints planned and no unintentional shorts. Established materials and techniques include: Technique Examples Pros Cons Image Lengths of wire with stripped segments Sasha Solomon's Dactyl and Cribbit's modern hand wire Neat and tidy Some effort in stripping the wire Short lengths of wire u/xicolinguada's ortho build Easier to strip the wire More difficult to place Magnet/Enamelled wire fknraiden's custom board Can be directly soldered onto (insulation burns off with heat) Appearance? Bending the legs of the diodes for the rows Matt3o's Brownfox Fewer solder joints required Uninsulated Using rigid wiring (e.g. brass tube) u/d_stilgar's invisible hardline and u/jonasfasler's first attempt Very pretty More difficult. No physical insulation Bare wire with insulation added after (e.g. kapton tape) Matt3o's 65% on his website Easier (no wire stripping required) Not as attractive Copper tape ManuForm Dactyl Very easy Only really works when your plate/case aligns with the bottom of your switches Note that these methods can be combined. Prepare your lengths of wire before moving on to soldering. A note on split keyboards \u00b6 If you are planning a split keyboard (e.g. Dactyl) each half will require a controller and a means of communicating between them (like a TRRS or hardwired cable). Further information can be found in the QMK split keyboard documentation. Soldering \u00b6 There are a lot of soldering guides and tips available elsewhere but here are some of the most useful and relevant for hand wiring: To ensure a strong solder joint you want a good amount of contact between the solder and the two pieces of metal you are connecting. A good way of doing this (though not required) is looping around pins or twisting wires together before applying solder. If your diodes are on a packaging strip and need a bend in them (either the start of a loop or for connecting to its neighbour) this can easily done by bending it over something straight like the edge of a box, table, or ruler. This also helps keep track of the direction of the diode as all the bends will be on the same side. If your iron has temperature control, set it to 315\u00baC (600\u00baF). Once heated, tin your soldering iron - this means melting a small amount of solder on the end of the iron and then quickly wiping it off on a wet sponge or wire cleaning pad, leaving a shiny silvery coating on the end which helps keep oxidisation at bay and helps solder to flow. When you come to apply the solder, hold the soldering iron against the two surfaces for a second to heat it, then apply a small amount of solder to join the two pieces together. Heating the surfaces ensures that the solder adheres to it and that it does not cool too quickly. Don't hold the iron on the solder/joint longer than necessary. Heat will be conducted through the surfaces and can damage components (melt switch housings etc.). Also, solder contains flux, which aids in \"wetting\" . The longer heat is applied to the solder the more flux will evaporate meaning you may end up with a bad solder joint with peaks which, apart from looking bad, may also increase the risk of electrical shorts. Soldering the Diodes \u00b6 Starting at the top-left switch, place the diode (with tweezers if you have them) on the switch so that the diode itself is vertically aligned, and the black line is facing toward you. Make sure the diodes are soldered in parallel (diode outputs shouldn't connect to diode inputs). The input lead of the diode should be touching the left contact on the switch, and the bent, output end should be facing to the right and resting on the switch there, like this: Letting the diode rest, grab your solder, and touch both it and the soldering iron to the left contact at the same time - the rosin in the solder should make it easy for the solder to flow over both the diode and the keyswitch contact. The diode may move a little, and if it does, carefully position it back it place by grabbing the bent end of the diode - the other end will become hot very quickly. If you find that it's moving too much, using needle-nose pliers of some sort may help to keep the diode still when soldering. The smoke that the rosin releases is harmful, so be careful not to breath it or get it in your eyes/face. After soldering things in place, it may be helpful to blow on the joint to push the smoke away from your face, and cool the solder quicker. You should see the solder develop a matte (not shiny) surface as it solidifies. Keep in mind that it will still be very hot afterwards, and will take a couple minutes to be cool to touch. Blowing on it will accelerate this process. When the first diode is complete, the next one will need to be soldered to both the keyswitch, and the previous diode at the new elbow. That will look something like this: After completing a row, use the wire cutters to trim the excess wire from the tops of the diodes, and from the right side on the final switch. This process will need to completed for each row you have. When all of the diodes are completely soldered, it's a good idea to quickly inspect each one to ensure that your solder joints are solid and sturdy - repairing things after this is possible, but more difficult. Soldering the Columns \u00b6 You'll have some options in the next process - it's a good idea to insulate the column wires (since the diodes aren't), but if you're careful enough, you can use exposed wires for the columns - it's not recommended, though. If you're using single-cored wire, stripping the plastic off of the whole wire and feeding it back on is probably the best option, but can be difficult depending on the size and materials. You'll want to leave parts of the wire exposed where you're going to be solder it onto the keyswitch. If you're using stranded wire, it's probably easiest to just use a lot of small wires to connect each keyswitch along the column. It's possible to use one and melt through the insulation, but this isn't recommended, will produce even more harmful fumes, and can ruin your soldering iron. Before beginning to solder, it helps to have your wire pre-bent (if using single-cored), or at least have an idea of how you're going to route the column (especially if you're making a staggered board). Where you go in particular doesn't matter too much, as we'll be basing our keymap definitions on how it was wired - just make sure every key in a particular row is in a unique column, and that they're in order from left to right. If you're not using any insulation, you can try to keep the column wires elevated, and solder them near the tips of the keyswitch contacts - if the wires are sturdy enough, they won't short out to the row wiring an diodes. Wiring up the controller \u00b6 Now that the matrix itself is complete, it's time to connect what you've done to the microcontroller board. Place the microcontroller where you want it to be located, give thought to mounting and case alignment. Bear in mind that the location of the USB socket can be different from the controller by using a short male to female cable if required,. Find the pinout/documentation for your microcontroller board ( links here ) and make a note of all the digital I/O pins on it (note that on some controllers, like the teensy, analogue I/O can double as digital) as these are the pins you want to connect your wires to. Specific instructions for the Teensy 2.0 \u00b6 There are some pins on the Teensy that are special, like D6 (the LED on the chip), or some of the UART, SPI, I2C, or PWM channels, but only avoid those if you're planning something in addition to a keyboard. If you're unsure about wanting to add something later, you should have enough pins in total to avoid a couple. The pins you'll absolutely have to avoid, as with any controller, are: GND, VCC, AREF, and RST - all the others are usable and accessible in the firmware. Cut wires to the length of the distance from the a point on each column/row to the controller. You can solder anywhere along the row, as long as it's after the diode - soldering before the diode (on the keyswitch side) will cause that row not to work. Ribbon cable can be used to keep this extra tidy. You may also want to consider routing the wires beneath the exisiting columns/rows. As you solder the wires to the controller make a note of which row/column is going to which pin on the controller as we'll use this data to setup the matrix when we create the firmware. As you move along, be sure that the controller is staying in place - recutting and soldering the wires is a pain! Getting Some Basic Firmware Set Up \u00b6 From here, you should have a working keyboard once you program a firmware. Simple firmware can be created easily using the Keyboard Firmware Builder website. Recreate your layout using Keyboard Layout Editor , import it and recreate the matrix (if not already done as part of planning the matrix . Go through the rest of the tabs, assigning keys until you get to the last one where you can compile and download your firmware. The .hex file can be flashed straight onto your keyboard, and the .zip of source files can be modified for advanced functionality and compiled locally using the method described in Building Your First Firmware . The source given by Keyboard Firmware Builder is QMK, but is based on a version of QMK from early 2017. To compile the code from your .zip file in a modern version of QMK Firmware, you'll need to open the .zip and follow these instructions: Extract the kb folder to qmk_firmware/keyboards/handwired/ . Open the extracted kb folder, then proceed to the keymaps/default/ folder, and open keymap.c . Locate and delete the action_get_macro code block: const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) { ... return MACRO_NONE; } Save and close keymap.c . Flashing the Firmware \u00b6 Install QMK Toolbox . Under \"Local File\" navigate to your newly created .hex file. Under \"Microcontroller\", select the corresponding one for your controller board (common ones available here ). Plug in your keyboard and press the reset button (or short the Reset and Ground pins if there is no button) and click the \"Flash\" button in QMK toolbox. Testing Your Firmware \u00b6 Use a website such as QMK Configurator's Keyboard Tester , Keyboard Tester , or Keyboard Checker or just open a text editor and try typing - you should get the characters that you put into your keymap. Test each key, and make a note of the ones that aren't working. Here's a quick trouble-shooting guide for non-working keys: Flip the keyboard back over and short the keyswitch's contacts with a piece wire - this will eliminate the possibility of the keyswitch being bad and needing to be replaced. Check the solder points on the keyswitch - these need to be plump and whole. If you touch it with a moderate amount of force and it comes apart, it's not strong enough. Check the solder joints on the diode - if the diode is loose, part of your row may register, while the other may not. Check the solder joints on the columns - if your column wiring is loose, part or all of the column may not work. Check the solder joints on both sides of the wires going to/from the Teensy - the wires need to be fully soldered and connect to both sides. Check the <project_name>.h file for errors and incorrectly placed KC_NO s - if you're unsure where they should be, instead duplicate a k xy variable. Check to make sure you actually compiled the firmware and flashed the Teensy correctly. Unless you got error messages in the terminal, or a pop-up during flashing, you probably did everything correctly. Use a multimeter to check that the switch is actually closing when actuated (completing the circuit when pressed down). If you've done all of these things, keep in mind that sometimes you might have had multiple things affecting the keyswitch, so it doesn't hurt to test the keyswitch by shorting it out at the end. Finishing up \u00b6 Once you have confirmed that the keyboard is working, if you have used a seperate (non handwire specific) controller you will want to secure it in place. This can be done in many different ways e.g. hot glue, double sided sticky tape, 3D printed caddy, electrical tape. If you found this fullfilling you could experiment by adding additional features such as in switch LEDs , in switch RGB , RGB underglow or even an OLED display! There are a lot of possibilities inside the firmware - explore docs.qmk.fm for a full feature list, and dive into the different keyboards to see how people use all of them. You can always stop by the OLKB subreddit or QMK Discord for help! Links to Other Guides \u00b6 matt3o's step by step guide (BrownFox build) also his website and video guide Cribbit's \"Modern hand wiring guide - stronger, cleaner, easier\" Sasha Solomon's \"Building my first Keyboard\" RoastPotatoes' \"How to hand wire a Planck\" Masterzen's \"Handwired keyboard build log\" Legacy Content \u00b6 This page used to include more content. We have moved a section that used to be part of this page its own page. Everything below this point is simply a redirect so that people following old links on the web find what they're looking for. Preamble: How a Keyboard Matrix Works (and why we need diodes) \u00b6 How a Keyboard Matrix Works","title":"\u624b\u5de5\u8fde\u7ebf\u6307\u5357"},{"location":"hand_wire/#hand-wiring-guide","text":"","title":"Hand-Wiring Guide"},{"location":"hand_wire/#parts-list","text":"You will need: (where x is the number of keys on your planned keyboard) QMK compatible microcontroller board (Teensy, Pro-Micro, QMK Proton C etc.) x keyswitches (MX, Matias, Gateron, etc) x through hole diodes Keyboard plate and plate mount stabilisers Wire Soldering iron Rosin-cored solder Adequate ventilation/a fan Wire cutters/snippers Optional but useful: Wire strippers/a sharp knife Tweezers and/or small needle nose pliers Soldering station/Helping hands","title":"Parts list"},{"location":"hand_wire/#starting-the-build","text":"There are many ways to hand wire a PCB matrix, this guide will describe the fundamentals as well as some recommended ways to go about it. As we are dealing with hand wiring, it is assumed that you already have a plate. If you are planning a completely custom layout, tools such as ai03 Plate Generator and Swillkb Plate & Case Builder can help when designing one. Start by installing the switches and stabilisers in the plate. Depending on the thickness and material this may also involve hot gluing it in place.","title":"Starting the build"},{"location":"hand_wire/#planning-the-matrix","text":"If you are following a pre-existing handwire guide (e.g. for the keyboards in the handwire firmware section you can skip this step, just ensure you wire the matrix as described. What you want to achieve is one leg from each switch being attached to the corresponding switches next to it (rows) and the other leg being attached to the switches above and below it (columns) and a diode to one of the legs, mosy commonly this will be the leg attached to the rows, and the diode will face away from it (Column to Row) i.e. with the wire furthest from the black line on the diode connected to the switch (as current will only travel in one direction through a diode). It is fairly simple to plan for an ortholinear keyboard (like a Planck). Image from RoastPotatoes' \"How to hand wire a Planck\" But the larger and more complicated your keyboard, the more complex the matrix. Keyboard Firmware Builder can help you plan your matrix layout (shown here with a basic fullsize ISO keyboard imported from Keyboard Layout Editor . Bear in mind that the number of rows plus the number of columns can not exceed the number of I/O pins on your controller. So the fullsize matrix shown above would be possible on a Proton C or Teensy++, but not on a regular Teensy or Pro Micro.","title":"Planning the matrix"},{"location":"hand_wire/#common-microcontroller-boards","text":"Board Controller # I/O Pinout Pro Micro* ATmega32u4 20 link Teensy 2.0 ATmega32u4 25 link QMK Proton C STM32F303xC 36 link 1 , 2 Teensy++ 2.0 AT90USB1286 46 link *Elite C is essentially the same as a Pro Micro with a USB-C instead of Micro-USB There are also a number of boards designed specifically for handwiring that mount directly to a small number of switches and offer pinouts for the rest. Though these are generally more expensive and may be more difficult to get hold of. Board Controller # I/O Swiss helper ATmega32u4 20 Postage board ATmega32u4 25 Postage board mini ATmega32u4 25","title":"Common Microcontroller Boards"},{"location":"hand_wire/#wiring-the-matrix","text":"There is no one right way to do this. What you want to achieve is good connection at all of the joints planned and no unintentional shorts. Established materials and techniques include: Technique Examples Pros Cons Image Lengths of wire with stripped segments Sasha Solomon's Dactyl and Cribbit's modern hand wire Neat and tidy Some effort in stripping the wire Short lengths of wire u/xicolinguada's ortho build Easier to strip the wire More difficult to place Magnet/Enamelled wire fknraiden's custom board Can be directly soldered onto (insulation burns off with heat) Appearance? Bending the legs of the diodes for the rows Matt3o's Brownfox Fewer solder joints required Uninsulated Using rigid wiring (e.g. brass tube) u/d_stilgar's invisible hardline and u/jonasfasler's first attempt Very pretty More difficult. No physical insulation Bare wire with insulation added after (e.g. kapton tape) Matt3o's 65% on his website Easier (no wire stripping required) Not as attractive Copper tape ManuForm Dactyl Very easy Only really works when your plate/case aligns with the bottom of your switches Note that these methods can be combined. Prepare your lengths of wire before moving on to soldering.","title":"Wiring the matrix"},{"location":"hand_wire/#a-note-on-split-keyboards","text":"If you are planning a split keyboard (e.g. Dactyl) each half will require a controller and a means of communicating between them (like a TRRS or hardwired cable). Further information can be found in the QMK split keyboard documentation.","title":"A note on split keyboards"},{"location":"hand_wire/#soldering","text":"There are a lot of soldering guides and tips available elsewhere but here are some of the most useful and relevant for hand wiring: To ensure a strong solder joint you want a good amount of contact between the solder and the two pieces of metal you are connecting. A good way of doing this (though not required) is looping around pins or twisting wires together before applying solder. If your diodes are on a packaging strip and need a bend in them (either the start of a loop or for connecting to its neighbour) this can easily done by bending it over something straight like the edge of a box, table, or ruler. This also helps keep track of the direction of the diode as all the bends will be on the same side. If your iron has temperature control, set it to 315\u00baC (600\u00baF). Once heated, tin your soldering iron - this means melting a small amount of solder on the end of the iron and then quickly wiping it off on a wet sponge or wire cleaning pad, leaving a shiny silvery coating on the end which helps keep oxidisation at bay and helps solder to flow. When you come to apply the solder, hold the soldering iron against the two surfaces for a second to heat it, then apply a small amount of solder to join the two pieces together. Heating the surfaces ensures that the solder adheres to it and that it does not cool too quickly. Don't hold the iron on the solder/joint longer than necessary. Heat will be conducted through the surfaces and can damage components (melt switch housings etc.). Also, solder contains flux, which aids in \"wetting\" . The longer heat is applied to the solder the more flux will evaporate meaning you may end up with a bad solder joint with peaks which, apart from looking bad, may also increase the risk of electrical shorts.","title":"Soldering"},{"location":"hand_wire/#wiring-up-the-controller","text":"Now that the matrix itself is complete, it's time to connect what you've done to the microcontroller board. Place the microcontroller where you want it to be located, give thought to mounting and case alignment. Bear in mind that the location of the USB socket can be different from the controller by using a short male to female cable if required,. Find the pinout/documentation for your microcontroller board ( links here ) and make a note of all the digital I/O pins on it (note that on some controllers, like the teensy, analogue I/O can double as digital) as these are the pins you want to connect your wires to.","title":"Wiring up the controller"},{"location":"hand_wire/#specific-instructions-for-the-teensy-20","text":"There are some pins on the Teensy that are special, like D6 (the LED on the chip), or some of the UART, SPI, I2C, or PWM channels, but only avoid those if you're planning something in addition to a keyboard. If you're unsure about wanting to add something later, you should have enough pins in total to avoid a couple. The pins you'll absolutely have to avoid, as with any controller, are: GND, VCC, AREF, and RST - all the others are usable and accessible in the firmware. Cut wires to the length of the distance from the a point on each column/row to the controller. You can solder anywhere along the row, as long as it's after the diode - soldering before the diode (on the keyswitch side) will cause that row not to work. Ribbon cable can be used to keep this extra tidy. You may also want to consider routing the wires beneath the exisiting columns/rows. As you solder the wires to the controller make a note of which row/column is going to which pin on the controller as we'll use this data to setup the matrix when we create the firmware. As you move along, be sure that the controller is staying in place - recutting and soldering the wires is a pain!","title":"Specific instructions for the Teensy 2.0"},{"location":"hand_wire/#getting-some-basic-firmware-set-up","text":"From here, you should have a working keyboard once you program a firmware. Simple firmware can be created easily using the Keyboard Firmware Builder website. Recreate your layout using Keyboard Layout Editor , import it and recreate the matrix (if not already done as part of planning the matrix . Go through the rest of the tabs, assigning keys until you get to the last one where you can compile and download your firmware. The .hex file can be flashed straight onto your keyboard, and the .zip of source files can be modified for advanced functionality and compiled locally using the method described in Building Your First Firmware . The source given by Keyboard Firmware Builder is QMK, but is based on a version of QMK from early 2017. To compile the code from your .zip file in a modern version of QMK Firmware, you'll need to open the .zip and follow these instructions: Extract the kb folder to qmk_firmware/keyboards/handwired/ . Open the extracted kb folder, then proceed to the keymaps/default/ folder, and open keymap.c . Locate and delete the action_get_macro code block: const macro_t *action_get_macro(keyrecord_t *record, uint8_t id, uint8_t opt) { ... return MACRO_NONE; } Save and close keymap.c .","title":"Getting Some Basic Firmware Set Up"},{"location":"hand_wire/#flashing-the-firmware","text":"Install QMK Toolbox . Under \"Local File\" navigate to your newly created .hex file. Under \"Microcontroller\", select the corresponding one for your controller board (common ones available here ). Plug in your keyboard and press the reset button (or short the Reset and Ground pins if there is no button) and click the \"Flash\" button in QMK toolbox.","title":"Flashing the Firmware"},{"location":"hand_wire/#testing-your-firmware","text":"Use a website such as QMK Configurator's Keyboard Tester , Keyboard Tester , or Keyboard Checker or just open a text editor and try typing - you should get the characters that you put into your keymap. Test each key, and make a note of the ones that aren't working. Here's a quick trouble-shooting guide for non-working keys: Flip the keyboard back over and short the keyswitch's contacts with a piece wire - this will eliminate the possibility of the keyswitch being bad and needing to be replaced. Check the solder points on the keyswitch - these need to be plump and whole. If you touch it with a moderate amount of force and it comes apart, it's not strong enough. Check the solder joints on the diode - if the diode is loose, part of your row may register, while the other may not. Check the solder joints on the columns - if your column wiring is loose, part or all of the column may not work. Check the solder joints on both sides of the wires going to/from the Teensy - the wires need to be fully soldered and connect to both sides. Check the <project_name>.h file for errors and incorrectly placed KC_NO s - if you're unsure where they should be, instead duplicate a k xy variable. Check to make sure you actually compiled the firmware and flashed the Teensy correctly. Unless you got error messages in the terminal, or a pop-up during flashing, you probably did everything correctly. Use a multimeter to check that the switch is actually closing when actuated (completing the circuit when pressed down). If you've done all of these things, keep in mind that sometimes you might have had multiple things affecting the keyswitch, so it doesn't hurt to test the keyswitch by shorting it out at the end.","title":"Testing Your Firmware"},{"location":"hand_wire/#finishing-up","text":"Once you have confirmed that the keyboard is working, if you have used a seperate (non handwire specific) controller you will want to secure it in place. This can be done in many different ways e.g. hot glue, double sided sticky tape, 3D printed caddy, electrical tape. If you found this fullfilling you could experiment by adding additional features such as in switch LEDs , in switch RGB , RGB underglow or even an OLED display! There are a lot of possibilities inside the firmware - explore docs.qmk.fm for a full feature list, and dive into the different keyboards to see how people use all of them. You can always stop by the OLKB subreddit or QMK Discord for help!","title":"Finishing up"},{"location":"hand_wire/#links-to-other-guides","text":"matt3o's step by step guide (BrownFox build) also his website and video guide Cribbit's \"Modern hand wiring guide - stronger, cleaner, easier\" Sasha Solomon's \"Building my first Keyboard\" RoastPotatoes' \"How to hand wire a Planck\" Masterzen's \"Handwired keyboard build log\"","title":"Links to Other Guides"},{"location":"hand_wire/#legacy-content","text":"This page used to include more content. We have moved a section that used to be part of this page its own page. Everything below this point is simply a redirect so that people following old links on the web find what they're looking for.","title":"Legacy Content"},{"location":"hand_wire/#preamble-how-a-keyboard-matrix-works-and-why-we-need-diodes","text":"How a Keyboard Matrix Works","title":"Preamble: How a Keyboard Matrix Works (and why we need diodes)"},{"location":"hardware_avr/","text":"Keyboards with AVR Processors \u00b6 This page describes the support for for AVR processors in QMK. AVR processors include the atmega32u4, atmega32u2, at90usb1286, and other processors from Atmel Corporation. AVR processors are 8-bit MCUs that are designed to be easy to work with. The most common AVR processors in keyboards have on-board USB and plenty of GPIO for supporting large keyboard matrices. They are the most popular MCU for use in keyboards today. If you have not yet you should read the Keyboard Guidelines to get a sense of how keyboards fit into QMK. Adding Your AVR Keyboard to QMK \u00b6 QMK has a number of features to simplify working with AVR keyboards. For most keyboards you don't have to write a single line of code. To get started, run the util/new_keyboard.sh script: $ ./util/new_keyboard.sh Generating a new QMK keyboard directory Keyboard Name: mycoolkb Keyboard Type [avr]: Your Name [John Smith]: Copying base template files... done Copying avr template files... done Renaming keyboard files... done Replacing %KEYBOARD% with mycoolkb... done Replacing %YOUR_NAME% with John Smith... done Created a new keyboard called mycoolkb. To start working on things, cd into keyboards/mycoolkb, or open the directory in your favourite text editor. This will create all the files needed to support your new keyboard, and populate the settings with default values. Now you just need to customize it for your keyboard. readme.md \u00b6 This is where you'll describe your keyboard. Please follow the Keyboard Readme Template when writing your readme.md . You're encouraged to place an image at the top of your readme.md , please use an external service such as Imgur to host the images. <keyboard>.c \u00b6 This is where all the custom logic for your keyboard goes. Many keyboards do not need to put anything at all in here. You can learn more about writing custom logic in Custom Quantum Functions . <keyboard>.h \u00b6 This is the file you define your Layout Macro(s) in. At minimum you should have a #define LAYOUT for your keyboard that looks something like this: #define LAYOUT( \\ k00, k01, k02, \\ k10, k11 \\ ) { \\ { k00, k01, k02 }, \\ { k10, KC_NO, k11 }, \\ } The first half of the LAYOUT pre-processor macro defines the physical arrangement of keys. The second half of the macro defines the matrix the switches are connected to. This allows you to have a physical arrangement of keys that differs from the wiring matrix. Each of the k__ variables needs to be unique, and typically they follow the format k<row><col> . The physical matrix (the second half) must have a number of rows equaling MATRIX_ROWS , and each row must have exactly MATRIX_COLS elements in it. If you do not have this many physical keys you can use KC_NO to fill in the blank spots. config.h \u00b6 The config.h file is where you configure the hardware and feature set for your keyboard. There are a lot of options that can be placed in that file, too many to list there. For a complete overview of available options see the Config Options page. Hardware Configuration \u00b6 At the top of the config.h you'll find USB related settings. These control how your keyboard appears to the Operating System. If you don't have a good reason to change you should leave the VENDOR_ID as 0xFEED . For the PRODUCT_ID you should pick a number that is not yet in use. Do change the MANUFACTURER and PRODUCT lines to accurately reflect your keyboard. #define VENDOR_ID 0xFEED #define PRODUCT_ID 0x6060 #define DEVICE_VER 0x0001 #define MANUFACTURER You #define PRODUCT my_awesome_keyboard Tip Windows and macOS will display the MANUFACTURER and PRODUCT in the list of USB devices. On Linux sudo lsusb -v will show the values reported by the device. lsusb uses the values provided by the USB ID Repository . By default, it will only use MANUFACTURER and PRODUCT if the list does not contain that VENDOR_ID / PRODUCT_ID . Keyboard Matrix Configuration \u00b6 The next section of the config.h file deals with your keyboard's matrix. The first thing you should set is the matrix's size. This is usually, but not always, the same number of rows and columns as the physical key arrangement. #define MATRIX_ROWS 2 #define MATRIX_COLS 3 Once you've defined the size of your matrix you need to define which pins on your MCU are connected to rows and columns. To do so simply specify the names of those pins: #define MATRIX_ROW_PINS { D0, D5 } #define MATRIX_COL_PINS { F1, F0, B0 } #define UNUSED_PINS The number of MATRIX_ROW_PINS entries must be the same as the number you assigned to MATRIX_ROWS , and likewise for MATRIX_COL_PINS and MATRIX_COLS . You do not have to specify UNUSED_PINS , but you can if you want to document what pins are open. Finally, you can specify the direction your diodes point. This can be COL2ROW or ROW2COL . #define DIODE_DIRECTION COL2ROW Direct Pin Matrix \u00b6 To configure a keyboard where each switch is connected to a separate pin and ground instead of sharing row and column pins, use DIRECT_PINS . The mapping defines the pins of each switch in rows and columns, from left to right. Must conform to the sizes within MATRIX_ROWS and MATRIX_COLS , use NO_PIN to fill in blank spaces. Overrides the behaviour of DIODE_DIRECTION , MATRIX_ROW_PINS and MATRIX_COL_PINS . // #define MATRIX_ROW_PINS { D0, D5 } // #define MATRIX_COL_PINS { F1, F0, B0 } #define DIRECT_PINS { \\ { F1, E6, B0, B2, B3 }, \\ { F5, F0, B1, B7, D2 }, \\ { F6, F7, C7, D5, D3 }, \\ { B5, C6, B6, NO_PIN, NO_PIN } \\ } #define UNUSED_PINS /* COL2ROW, ROW2COL */ //#define DIODE_DIRECTION Backlight Configuration \u00b6 QMK supports backlighting on most GPIO pins. A select few of these can be driven by the MCU in hardware. For more details see the Backlight Documentation . #define BACKLIGHT_PIN B7 #define BACKLIGHT_LEVELS 3 #define BACKLIGHT_BREATHING #define BREATHING_PERIOD 6 Other Configuration Options \u00b6 There are a lot of features that can be configured or tuned in config.h . You should see the Config Options page for more details. rules.mk \u00b6 You use the rules.mk file to tell QMK what files to build and what features to enable. If you are building around an atmega32u4 you can largely leave these defaults alone. If you are using another MCU you may have to tweak some parameters. MCU Options \u00b6 These options tell the build system what CPU to build for. Be very careful if you change any of these settings, you can render your keyboard inoperable. MCU = atmega32u4 F_CPU = 16000000 ARCH = AVR8 F_USB = $( F_CPU ) OPT_DEFS += -DINTERRUPT_CONTROL_ENDPOINT Bootloaders \u00b6 The bootloader is a special section of your MCU that allows you to upgrade the code stored on the MCU. Think of it like a Rescue Partition for your keyboard. Teensy Bootloader Example \u00b6 BOOTLOADER = halfkay Atmel DFU Loader Example \u00b6 BOOTLOADER = atmel-dfu Pro Micro Bootloader Example \u00b6 BOOTLOADER = caterina Build Options \u00b6 There are a number of features that can be turned on or off in rules.mk . See the Config Options page for a detailed list and description.","title":"AVR\u5904\u7406\u5668"},{"location":"hardware_avr/#keyboards-with-avr-processors","text":"This page describes the support for for AVR processors in QMK. AVR processors include the atmega32u4, atmega32u2, at90usb1286, and other processors from Atmel Corporation. AVR processors are 8-bit MCUs that are designed to be easy to work with. The most common AVR processors in keyboards have on-board USB and plenty of GPIO for supporting large keyboard matrices. They are the most popular MCU for use in keyboards today. If you have not yet you should read the Keyboard Guidelines to get a sense of how keyboards fit into QMK.","title":"Keyboards with AVR Processors"},{"location":"hardware_avr/#adding-your-avr-keyboard-to-qmk","text":"QMK has a number of features to simplify working with AVR keyboards. For most keyboards you don't have to write a single line of code. To get started, run the util/new_keyboard.sh script: $ ./util/new_keyboard.sh Generating a new QMK keyboard directory Keyboard Name: mycoolkb Keyboard Type [avr]: Your Name [John Smith]: Copying base template files... done Copying avr template files... done Renaming keyboard files... done Replacing %KEYBOARD% with mycoolkb... done Replacing %YOUR_NAME% with John Smith... done Created a new keyboard called mycoolkb. To start working on things, cd into keyboards/mycoolkb, or open the directory in your favourite text editor. This will create all the files needed to support your new keyboard, and populate the settings with default values. Now you just need to customize it for your keyboard.","title":"Adding Your AVR Keyboard to QMK"},{"location":"hardware_avr/#readmemd","text":"This is where you'll describe your keyboard. Please follow the Keyboard Readme Template when writing your readme.md . You're encouraged to place an image at the top of your readme.md , please use an external service such as Imgur to host the images.","title":"readme.md"},{"location":"hardware_avr/#keyboardc","text":"This is where all the custom logic for your keyboard goes. Many keyboards do not need to put anything at all in here. You can learn more about writing custom logic in Custom Quantum Functions .","title":"&lt;keyboard&gt;.c"},{"location":"hardware_avr/#keyboardh","text":"This is the file you define your Layout Macro(s) in. At minimum you should have a #define LAYOUT for your keyboard that looks something like this: #define LAYOUT( \\ k00, k01, k02, \\ k10, k11 \\ ) { \\ { k00, k01, k02 }, \\ { k10, KC_NO, k11 }, \\ } The first half of the LAYOUT pre-processor macro defines the physical arrangement of keys. The second half of the macro defines the matrix the switches are connected to. This allows you to have a physical arrangement of keys that differs from the wiring matrix. Each of the k__ variables needs to be unique, and typically they follow the format k<row><col> . The physical matrix (the second half) must have a number of rows equaling MATRIX_ROWS , and each row must have exactly MATRIX_COLS elements in it. If you do not have this many physical keys you can use KC_NO to fill in the blank spots.","title":"&lt;keyboard&gt;.h"},{"location":"hardware_avr/#configh","text":"The config.h file is where you configure the hardware and feature set for your keyboard. There are a lot of options that can be placed in that file, too many to list there. For a complete overview of available options see the Config Options page.","title":"config.h"},{"location":"hardware_avr/#hardware-configuration","text":"At the top of the config.h you'll find USB related settings. These control how your keyboard appears to the Operating System. If you don't have a good reason to change you should leave the VENDOR_ID as 0xFEED . For the PRODUCT_ID you should pick a number that is not yet in use. Do change the MANUFACTURER and PRODUCT lines to accurately reflect your keyboard. #define VENDOR_ID 0xFEED #define PRODUCT_ID 0x6060 #define DEVICE_VER 0x0001 #define MANUFACTURER You #define PRODUCT my_awesome_keyboard Tip Windows and macOS will display the MANUFACTURER and PRODUCT in the list of USB devices. On Linux sudo lsusb -v will show the values reported by the device. lsusb uses the values provided by the USB ID Repository . By default, it will only use MANUFACTURER and PRODUCT if the list does not contain that VENDOR_ID / PRODUCT_ID .","title":"Hardware Configuration"},{"location":"hardware_avr/#keyboard-matrix-configuration","text":"The next section of the config.h file deals with your keyboard's matrix. The first thing you should set is the matrix's size. This is usually, but not always, the same number of rows and columns as the physical key arrangement. #define MATRIX_ROWS 2 #define MATRIX_COLS 3 Once you've defined the size of your matrix you need to define which pins on your MCU are connected to rows and columns. To do so simply specify the names of those pins: #define MATRIX_ROW_PINS { D0, D5 } #define MATRIX_COL_PINS { F1, F0, B0 } #define UNUSED_PINS The number of MATRIX_ROW_PINS entries must be the same as the number you assigned to MATRIX_ROWS , and likewise for MATRIX_COL_PINS and MATRIX_COLS . You do not have to specify UNUSED_PINS , but you can if you want to document what pins are open. Finally, you can specify the direction your diodes point. This can be COL2ROW or ROW2COL . #define DIODE_DIRECTION COL2ROW","title":"Keyboard Matrix Configuration"},{"location":"hardware_avr/#backlight-configuration","text":"QMK supports backlighting on most GPIO pins. A select few of these can be driven by the MCU in hardware. For more details see the Backlight Documentation . #define BACKLIGHT_PIN B7 #define BACKLIGHT_LEVELS 3 #define BACKLIGHT_BREATHING #define BREATHING_PERIOD 6","title":"Backlight Configuration"},{"location":"hardware_avr/#other-configuration-options","text":"There are a lot of features that can be configured or tuned in config.h . You should see the Config Options page for more details.","title":"Other Configuration Options"},{"location":"hardware_avr/#rulesmk","text":"You use the rules.mk file to tell QMK what files to build and what features to enable. If you are building around an atmega32u4 you can largely leave these defaults alone. If you are using another MCU you may have to tweak some parameters.","title":"rules.mk"},{"location":"hardware_avr/#mcu-options","text":"These options tell the build system what CPU to build for. Be very careful if you change any of these settings, you can render your keyboard inoperable. MCU = atmega32u4 F_CPU = 16000000 ARCH = AVR8 F_USB = $( F_CPU ) OPT_DEFS += -DINTERRUPT_CONTROL_ENDPOINT","title":"MCU Options"},{"location":"hardware_avr/#bootloaders","text":"The bootloader is a special section of your MCU that allows you to upgrade the code stored on the MCU. Think of it like a Rescue Partition for your keyboard.","title":"Bootloaders"},{"location":"hardware_avr/#build-options","text":"There are a number of features that can be turned on or off in rules.mk . See the Config Options page for a detailed list and description.","title":"Build Options"},{"location":"hardware_drivers/","text":"QMK Hardware Drivers \u00b6 QMK is used on a lot of different hardware. While support for the most common MCU's and matrix configurations is built-in there are a number of drivers that can be added to a keyboard to support additional hardware. Examples include mice and other pointing devices, i/o expanders for split keyboards, bluetooth modules, and LCD, OLED, and TFT screens. Available Drivers \u00b6 ProMicro (AVR Only) \u00b6 Support for addressing pins on the ProMicro by their Arduino name rather than their AVR name. This needs to be better documented, if you are trying to do this and reading the code doesn't help please open an issue and we can help you through the process. SSD1306 OLED Driver \u00b6 Support for SSD1306 based OLED displays. For more information see the OLED Driver Feature page. uGFX \u00b6 You can make use of uGFX within QMK to drive character and graphic LCDs, LED arrays, OLED, TFT, and other display technologies. This needs to be better documented, if you are trying to do this and reading the code doesn't help please open an issue and we can help you through the process. WS2812 \u00b6 Support for WS2811/WS2812{a,b,c} LED's. For more information see the RGB Light page. IS31FL3731 \u00b6 Support for up to 2 drivers. Each driver impliments 2 charlieplex matrices to individually address LEDs using I2C. This allows up to 144 same color LEDs or 32 RGB LEDs. For more information on how to setup the driver see the RGB Matrix page. IS31FL3733 \u00b6 Support for up to a single driver with room for expansion. Each driver can control 192 individual LEDs or 64 RGB LEDs. For more information on how to setup the driver see the RGB Matrix page. 24xx series external I2C EEPROM \u00b6 Support for an external I2C-based EEPROM instead of using the on-chip EEPROM. For more information on how to setup the driver see the EEPROM Driver page.","title":"\u9a71\u52a8"},{"location":"hardware_drivers/#qmk-hardware-drivers","text":"QMK is used on a lot of different hardware. While support for the most common MCU's and matrix configurations is built-in there are a number of drivers that can be added to a keyboard to support additional hardware. Examples include mice and other pointing devices, i/o expanders for split keyboards, bluetooth modules, and LCD, OLED, and TFT screens.","title":"QMK Hardware Drivers"},{"location":"hardware_drivers/#available-drivers","text":"","title":"Available Drivers"},{"location":"hardware_drivers/#promicro-avr-only","text":"Support for addressing pins on the ProMicro by their Arduino name rather than their AVR name. This needs to be better documented, if you are trying to do this and reading the code doesn't help please open an issue and we can help you through the process.","title":"ProMicro (AVR Only)"},{"location":"hardware_drivers/#ssd1306-oled-driver","text":"Support for SSD1306 based OLED displays. For more information see the OLED Driver Feature page.","title":"SSD1306 OLED Driver"},{"location":"hardware_drivers/#ugfx","text":"You can make use of uGFX within QMK to drive character and graphic LCDs, LED arrays, OLED, TFT, and other display technologies. This needs to be better documented, if you are trying to do this and reading the code doesn't help please open an issue and we can help you through the process.","title":"uGFX"},{"location":"hardware_drivers/#ws2812","text":"Support for WS2811/WS2812{a,b,c} LED's. For more information see the RGB Light page.","title":"WS2812"},{"location":"hardware_drivers/#is31fl3731","text":"Support for up to 2 drivers. Each driver impliments 2 charlieplex matrices to individually address LEDs using I2C. This allows up to 144 same color LEDs or 32 RGB LEDs. For more information on how to setup the driver see the RGB Matrix page.","title":"IS31FL3731"},{"location":"hardware_drivers/#is31fl3733","text":"Support for up to a single driver with room for expansion. Each driver can control 192 individual LEDs or 64 RGB LEDs. For more information on how to setup the driver see the RGB Matrix page.","title":"IS31FL3733"},{"location":"hardware_drivers/#24xx-series-external-i2c-eeprom","text":"Support for an external I2C-based EEPROM instead of using the on-chip EEPROM. For more information on how to setup the driver see the EEPROM Driver page.","title":"24xx series external I2C EEPROM"},{"location":"hardware_keyboard_guidelines/","text":"QMK Keyboard Guidelines \u00b6 Since starting, QMK has grown by leaps and bounds thanks to people like you who contribute to creating and maintaining our community keyboards. As we've grown we've discovered some patterns that work well, and ask that you conform to them to make it easier for other people to benefit from your hard work. Use QMK Lint \u00b6 We have provided a tool, qmk lint , which will let you check over your keyboard for problems. We suggest using it frequently while working on your keyboard and keymap. Example passing check: $ qmk lint -kb rominronin/katana60/rev2 \u03a8 Lint check passed! Example failing check: $ qmk lint -kb clueboard/66/rev3 \u2612 Missing keyboards/clueboard/66/rev3/readme.md \u2612 Lint check failed! Naming Your Keyboard/Project \u00b6 All keyboard names are in lower case, consisting only of letters, numbers, and underscore ( _ ). Names may not begin with an underscore. Forward slash ( / ) is used as a sub-folder separation character. The names test , keyboard , and all are reserved for make commands and may not be used as a keyboard or subfolder name. Valid Examples: 412_64 chimera_ortho clueboard/66/rev3 planck v60_type_r Sub-folders \u00b6 QMK uses sub-folders both for organization and to share code between revisions of the same keyboard. You can nest folders up to 4 levels deep: qmk_firmware/keyboards/top_folder/sub_1/sub_2/sub_3/sub_4 If a sub-folder has a rules.mk file it will be considered a compilable keyboard. It will be available in QMK Configurator and tested with make all . If you are using a folder to organize several keyboards from the same maker you should not have a rules.mk file. Example: Clueboard uses sub-folders for both purposes, organization and keyboard revisions. qmk_firmware keyboards clueboard \u2190 This is the organization folder, there's no rules.mk file 60 \u2190 This is a compilable keyboard, it has a rules.mk file 66 \u2190 This is also compilable- it uses DEFAULT_FOLDER to specify rev3 as the default revision rev1 \u2190 compilable: make clueboard/66/rev1 rev2 \u2190 compilable: make clueboard/66/rev2 rev3 \u2190 compilable: make clueboard/66/rev3 or make clueboard/66 Keyboard Folder Structure \u00b6 Your keyboard should be located in qmk_firmware/keyboards/ and the folder name should be your keyboard's name as described in the previous section. Inside this folder should be several files: readme.md info.json config.h rules.mk <keyboard_name>.c <keyboard_name>.h readme.md \u00b6 All projects need to have a readme.md file that explains what the keyboard is, who made it and where it's available. If applicable, it should also contain links to more information, such as the maker's website. Please follow the published template . info.json \u00b6 This file is used by the QMK API . It contains the information QMK Configurator needs to display a representation of your keyboard. You can also set metadata here. For more information see the reference page . config.h \u00b6 All projects need to have a config.h file that sets things like the matrix size, product name, USB VID/PID, description and other settings. In general, use this file to set essential information and defaults for your keyboard that will always work. The config.h files can also be placed in sub-folders, and the order in which they are read is as follows: keyboards/top_folder/config.h keyboards/top_folder/sub_1/config.h keyboards/top_folder/sub_1/sub_2/config.h keyboards/top_folder/sub_1/sub_2/sub_3/config.h keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/config.h users/a_user_folder/config.h keyboards/top_folder/keymaps/a_keymap/config.h keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/post_config.h keyboards/top_folder/sub_1/sub_2/sub_3/post_config.h keyboards/top_folder/sub_1/sub_2/post_config.h keyboards/top_folder/sub_1/post_config.h keyboards/top_folder/post_config.h The post_config.h file can be used for additional post-processing, depending on what is specified in the config.h file. For example, if you define the IOS_DEVICE_ENABLE macro in your keymap-level config.h file as follows, you can configure more detailed settings accordingly in the post_config.h file: keyboards/top_folder/keymaps/a_keymap/config.h #define IOS_DEVICE_ENABLE keyboards/top_folder/post_config.h #ifndef IOS_DEVICE_ENABLE // USB_MAX_POWER_CONSUMPTION value for this keyboard #define USB_MAX_POWER_CONSUMPTION 400 #else // fix iPhone and iPad power adapter issue // iOS device need lessthan 100 #define USB_MAX_POWER_CONSUMPTION 100 #endif #ifdef RGBLIGHT_ENABLE #ifndef IOS_DEVICE_ENABLE #define RGBLIGHT_LIMIT_VAL 200 #define RGBLIGHT_VAL_STEP 17 #else #define RGBLIGHT_LIMIT_VAL 35 #define RGBLIGHT_VAL_STEP 4 #endif #ifndef RGBLIGHT_HUE_STEP #define RGBLIGHT_HUE_STEP 10 #endif #ifndef RGBLIGHT_SAT_STEP #define RGBLIGHT_SAT_STEP 17 #endif #endif Warning If you define options using post_config.h as in the above example, you should not define the same options in the keyboard- or user-level config.h . rules.mk \u00b6 The presence of this file means that the folder is a keyboard target and can be used in make commands. This is where you setup the build environment for your keyboard and configure the default set of features. The rules.mk file can also be placed in a sub-folder, and its reading order is as follows: keyboards/top_folder/rules.mk keyboards/top_folder/sub_1/rules.mk keyboards/top_folder/sub_1/sub_2/rules.mk keyboards/top_folder/sub_1/sub_2/sub_3/rules.mk keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/rules.mk keyboards/top_folder/keymaps/a_keymap/rules.mk users/a_user_folder/rules.mk common_features.mk Many of the settings written in the rules.mk file are interpreted by common_features.mk , which sets the necessary source files and compiler options. Info See build_keyboard.mk and common_features.mk for more details. <keyboard_name.c> \u00b6 This is where you will write custom code for your keyboard. Typically you will write code to initialize and interface with the hardware in your keyboard. If your keyboard consists of only a key matrix with no LEDs, speakers, or other auxiliary hardware this file can be blank. The following functions are typically defined in this file: void matrix_init_kb(void) void matrix_scan_kb(void) bool process_record_kb(uint16_t keycode, keyrecord_t *record) void led_set_kb(uint8_t usb_led) <keyboard_name.h> \u00b6 This file is used to define the matrix for your keyboard. You should define at least one C macro which translates an array into a matrix representing the physical switch matrix for your keyboard. If it's possible to build your keyboard with multiple layouts you should define additional macros. If you have only a single layout you should call this macro LAYOUT . When defining multiple layouts you should have a base layout, named LAYOUT_all , that supports all possible switch positions on your matrix, even if that layout is impossible to build physically. This is the macro you should use in your default keymap. You should then have additional keymaps named default_<layout> that use your other layout macros. This will make it easier for people to use the layouts you define. Layout macro names are entirely lowercase, except for the word LAYOUT at the front. As an example, if you have a 60% PCB that supports ANSI and ISO you might define the following layouts and keymaps: Layout Name Keymap Name Description LAYOUT_all default A layout that supports both ISO and ANSI LAYOUT_ansi default_ansi An ANSI layout LAYOUT_iso default_iso An ISO layout Image/Hardware Files \u00b6 In an effort to keep the repo size down we're no longer accepting binary files of any format, with few exceptions. Hosting them elsewhere (such as https://imgur.com ) and linking them in the readme.md is preferred. Hardware files (such as plates, cases, pcb) can be contributed to the qmk.fm repo and they will be made available on qmk.fm . Downloadable files are stored in /<keyboard>/ (name follows the same format as above) which are served at https://qmk.fm/<keyboard>/ , and pages are generated from /_pages/<keyboard>/ which are served at the same location (.md files are generated into .html files through Jekyll). Check out the lets_split folder for an example. Keyboard Defaults \u00b6 Given the amount of functionality that QMK exposes it's very easy to confuse new users. When putting together the default firmware for your keyboard we recommend limiting your enabled features and options to the minimal set needed to support your hardware. Recommendations for specific features follow. Bootmagic and Command \u00b6 Bootmagic and Command are two related features that allow a user to control their keyboard in non-obvious ways. We recommend you think long and hard about if you're going to enable either feature, and how you will expose this functionality. Keep in mind that users who want this functionality can enable it in their personal keymaps without affecting all the novice users who may be using your keyboard as their first programmable board. By far the most common problem new users encounter is accidentally triggering Bootmagic while they're plugging in their keyboard. They're holding the keyboard by the bottom, unknowingly pressing in alt and spacebar, and then they find that these keys have been swapped on them. We recommend leaving this feature disabled by default, but if you do turn it on consider setting BOOTMAGIC_KEY_SALT to a key that is hard to press while plugging your keyboard in. If your keyboard does not have 2 shift keys you should provide a working default for IS_COMMAND , even when you have set COMMAND_ENABLE = no . This will give your users a default to conform to if they do enable Command. Custom Keyboard Programming \u00b6 As documented on Customizing Functionality you can define custom functions for your keyboard. Please keep in mind that your users may want to customize that behavior as well, and make it possible for them to do that. If you are providing a custom function, for example process_record_kb() , make sure that your function calls the _user() version of the call too. You should also take into account the return value of the _user() version, and only run your custom code if the user returns true . Non-Production/Handwired Projects \u00b6 We're happy to accept any project that uses QMK, including prototypes and handwired ones, but we have a separate /keyboards/handwired/ folder for them, so the main /keyboards/ folder doesn't get overcrowded. If a prototype project becomes a production project at some point in the future, we'd be happy to move it to the main /keyboards/ folder! Warnings as Errors \u00b6 When developing your keyboard, keep in mind that all warnings will be treated as errors - these small warnings can build-up and cause larger errors down the road (and keeping them is generally a bad practice). Copyright Blurb \u00b6 If you're adapting your keyboard's setup from another project, but not using the same code, be sure to update the copyright header at the top of the files to show your name, in this format: Copyright 2017 Your Name <your@email.com> If you are modifying someone else's code and have made only trivial changes you should leave their name in the copyright statement. If you have done significant work on the file you should add your name to theirs, like so: Copyright 2017 Their Name <original_author@example.com> Your Name <you@example.com> The year should be the first year the file is created. If work was done to that file in later years you can reflect that by appending the second year to the first, like so: Copyright 2015-2017 Your Name <you@example.com> License \u00b6 The core of QMK is licensed under the GNU General Public License . If you are shipping binaries for AVR processors you may choose either GPLv2 or GPLv3 . If you are shipping binaries for ARM processors you must choose GPL Version 3 to comply with the ChibiOS GPLv3 license. If your keyboard makes use of the uGFX features within QMK you must comply with the uGFX License , which requires a separate commercial license before selling a device containing uGFX. Technical Details \u00b6 If you're looking for more information on making your keyboard work with QMK, check out the hardware section !","title":"\u952e\u76d8\u6307\u5357"},{"location":"hardware_keyboard_guidelines/#qmk-keyboard-guidelines","text":"Since starting, QMK has grown by leaps and bounds thanks to people like you who contribute to creating and maintaining our community keyboards. As we've grown we've discovered some patterns that work well, and ask that you conform to them to make it easier for other people to benefit from your hard work.","title":"QMK Keyboard Guidelines"},{"location":"hardware_keyboard_guidelines/#use-qmk-lint","text":"We have provided a tool, qmk lint , which will let you check over your keyboard for problems. We suggest using it frequently while working on your keyboard and keymap. Example passing check: $ qmk lint -kb rominronin/katana60/rev2 \u03a8 Lint check passed! Example failing check: $ qmk lint -kb clueboard/66/rev3 \u2612 Missing keyboards/clueboard/66/rev3/readme.md \u2612 Lint check failed!","title":"Use QMK Lint"},{"location":"hardware_keyboard_guidelines/#naming-your-keyboardproject","text":"All keyboard names are in lower case, consisting only of letters, numbers, and underscore ( _ ). Names may not begin with an underscore. Forward slash ( / ) is used as a sub-folder separation character. The names test , keyboard , and all are reserved for make commands and may not be used as a keyboard or subfolder name. Valid Examples: 412_64 chimera_ortho clueboard/66/rev3 planck v60_type_r","title":"Naming Your Keyboard/Project"},{"location":"hardware_keyboard_guidelines/#sub-folders","text":"QMK uses sub-folders both for organization and to share code between revisions of the same keyboard. You can nest folders up to 4 levels deep: qmk_firmware/keyboards/top_folder/sub_1/sub_2/sub_3/sub_4 If a sub-folder has a rules.mk file it will be considered a compilable keyboard. It will be available in QMK Configurator and tested with make all . If you are using a folder to organize several keyboards from the same maker you should not have a rules.mk file. Example: Clueboard uses sub-folders for both purposes, organization and keyboard revisions. qmk_firmware keyboards clueboard \u2190 This is the organization folder, there's no rules.mk file 60 \u2190 This is a compilable keyboard, it has a rules.mk file 66 \u2190 This is also compilable- it uses DEFAULT_FOLDER to specify rev3 as the default revision rev1 \u2190 compilable: make clueboard/66/rev1 rev2 \u2190 compilable: make clueboard/66/rev2 rev3 \u2190 compilable: make clueboard/66/rev3 or make clueboard/66","title":"Sub-folders"},{"location":"hardware_keyboard_guidelines/#keyboard-folder-structure","text":"Your keyboard should be located in qmk_firmware/keyboards/ and the folder name should be your keyboard's name as described in the previous section. Inside this folder should be several files: readme.md info.json config.h rules.mk <keyboard_name>.c <keyboard_name>.h","title":"Keyboard Folder Structure"},{"location":"hardware_keyboard_guidelines/#readmemd","text":"All projects need to have a readme.md file that explains what the keyboard is, who made it and where it's available. If applicable, it should also contain links to more information, such as the maker's website. Please follow the published template .","title":"readme.md"},{"location":"hardware_keyboard_guidelines/#infojson","text":"This file is used by the QMK API . It contains the information QMK Configurator needs to display a representation of your keyboard. You can also set metadata here. For more information see the reference page .","title":"info.json"},{"location":"hardware_keyboard_guidelines/#configh","text":"All projects need to have a config.h file that sets things like the matrix size, product name, USB VID/PID, description and other settings. In general, use this file to set essential information and defaults for your keyboard that will always work. The config.h files can also be placed in sub-folders, and the order in which they are read is as follows: keyboards/top_folder/config.h keyboards/top_folder/sub_1/config.h keyboards/top_folder/sub_1/sub_2/config.h keyboards/top_folder/sub_1/sub_2/sub_3/config.h keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/config.h users/a_user_folder/config.h keyboards/top_folder/keymaps/a_keymap/config.h keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/post_config.h keyboards/top_folder/sub_1/sub_2/sub_3/post_config.h keyboards/top_folder/sub_1/sub_2/post_config.h keyboards/top_folder/sub_1/post_config.h keyboards/top_folder/post_config.h The post_config.h file can be used for additional post-processing, depending on what is specified in the config.h file. For example, if you define the IOS_DEVICE_ENABLE macro in your keymap-level config.h file as follows, you can configure more detailed settings accordingly in the post_config.h file: keyboards/top_folder/keymaps/a_keymap/config.h #define IOS_DEVICE_ENABLE keyboards/top_folder/post_config.h #ifndef IOS_DEVICE_ENABLE // USB_MAX_POWER_CONSUMPTION value for this keyboard #define USB_MAX_POWER_CONSUMPTION 400 #else // fix iPhone and iPad power adapter issue // iOS device need lessthan 100 #define USB_MAX_POWER_CONSUMPTION 100 #endif #ifdef RGBLIGHT_ENABLE #ifndef IOS_DEVICE_ENABLE #define RGBLIGHT_LIMIT_VAL 200 #define RGBLIGHT_VAL_STEP 17 #else #define RGBLIGHT_LIMIT_VAL 35 #define RGBLIGHT_VAL_STEP 4 #endif #ifndef RGBLIGHT_HUE_STEP #define RGBLIGHT_HUE_STEP 10 #endif #ifndef RGBLIGHT_SAT_STEP #define RGBLIGHT_SAT_STEP 17 #endif #endif Warning If you define options using post_config.h as in the above example, you should not define the same options in the keyboard- or user-level config.h .","title":"config.h"},{"location":"hardware_keyboard_guidelines/#rulesmk","text":"The presence of this file means that the folder is a keyboard target and can be used in make commands. This is where you setup the build environment for your keyboard and configure the default set of features. The rules.mk file can also be placed in a sub-folder, and its reading order is as follows: keyboards/top_folder/rules.mk keyboards/top_folder/sub_1/rules.mk keyboards/top_folder/sub_1/sub_2/rules.mk keyboards/top_folder/sub_1/sub_2/sub_3/rules.mk keyboards/top_folder/sub_1/sub_2/sub_3/sub_4/rules.mk keyboards/top_folder/keymaps/a_keymap/rules.mk users/a_user_folder/rules.mk common_features.mk Many of the settings written in the rules.mk file are interpreted by common_features.mk , which sets the necessary source files and compiler options. Info See build_keyboard.mk and common_features.mk for more details.","title":"rules.mk"},{"location":"hardware_keyboard_guidelines/#keyboard_namec","text":"This is where you will write custom code for your keyboard. Typically you will write code to initialize and interface with the hardware in your keyboard. If your keyboard consists of only a key matrix with no LEDs, speakers, or other auxiliary hardware this file can be blank. The following functions are typically defined in this file: void matrix_init_kb(void) void matrix_scan_kb(void) bool process_record_kb(uint16_t keycode, keyrecord_t *record) void led_set_kb(uint8_t usb_led)","title":"&lt;keyboard_name.c&gt;"},{"location":"hardware_keyboard_guidelines/#keyboard_nameh","text":"This file is used to define the matrix for your keyboard. You should define at least one C macro which translates an array into a matrix representing the physical switch matrix for your keyboard. If it's possible to build your keyboard with multiple layouts you should define additional macros. If you have only a single layout you should call this macro LAYOUT . When defining multiple layouts you should have a base layout, named LAYOUT_all , that supports all possible switch positions on your matrix, even if that layout is impossible to build physically. This is the macro you should use in your default keymap. You should then have additional keymaps named default_<layout> that use your other layout macros. This will make it easier for people to use the layouts you define. Layout macro names are entirely lowercase, except for the word LAYOUT at the front. As an example, if you have a 60% PCB that supports ANSI and ISO you might define the following layouts and keymaps: Layout Name Keymap Name Description LAYOUT_all default A layout that supports both ISO and ANSI LAYOUT_ansi default_ansi An ANSI layout LAYOUT_iso default_iso An ISO layout","title":"&lt;keyboard_name.h&gt;"},{"location":"hardware_keyboard_guidelines/#imagehardware-files","text":"In an effort to keep the repo size down we're no longer accepting binary files of any format, with few exceptions. Hosting them elsewhere (such as https://imgur.com ) and linking them in the readme.md is preferred. Hardware files (such as plates, cases, pcb) can be contributed to the qmk.fm repo and they will be made available on qmk.fm . Downloadable files are stored in /<keyboard>/ (name follows the same format as above) which are served at https://qmk.fm/<keyboard>/ , and pages are generated from /_pages/<keyboard>/ which are served at the same location (.md files are generated into .html files through Jekyll). Check out the lets_split folder for an example.","title":"Image/Hardware Files"},{"location":"hardware_keyboard_guidelines/#keyboard-defaults","text":"Given the amount of functionality that QMK exposes it's very easy to confuse new users. When putting together the default firmware for your keyboard we recommend limiting your enabled features and options to the minimal set needed to support your hardware. Recommendations for specific features follow.","title":"Keyboard Defaults"},{"location":"hardware_keyboard_guidelines/#bootmagic-and-command","text":"Bootmagic and Command are two related features that allow a user to control their keyboard in non-obvious ways. We recommend you think long and hard about if you're going to enable either feature, and how you will expose this functionality. Keep in mind that users who want this functionality can enable it in their personal keymaps without affecting all the novice users who may be using your keyboard as their first programmable board. By far the most common problem new users encounter is accidentally triggering Bootmagic while they're plugging in their keyboard. They're holding the keyboard by the bottom, unknowingly pressing in alt and spacebar, and then they find that these keys have been swapped on them. We recommend leaving this feature disabled by default, but if you do turn it on consider setting BOOTMAGIC_KEY_SALT to a key that is hard to press while plugging your keyboard in. If your keyboard does not have 2 shift keys you should provide a working default for IS_COMMAND , even when you have set COMMAND_ENABLE = no . This will give your users a default to conform to if they do enable Command.","title":"Bootmagic and Command"},{"location":"hardware_keyboard_guidelines/#custom-keyboard-programming","text":"As documented on Customizing Functionality you can define custom functions for your keyboard. Please keep in mind that your users may want to customize that behavior as well, and make it possible for them to do that. If you are providing a custom function, for example process_record_kb() , make sure that your function calls the _user() version of the call too. You should also take into account the return value of the _user() version, and only run your custom code if the user returns true .","title":"Custom Keyboard Programming"},{"location":"hardware_keyboard_guidelines/#non-productionhandwired-projects","text":"We're happy to accept any project that uses QMK, including prototypes and handwired ones, but we have a separate /keyboards/handwired/ folder for them, so the main /keyboards/ folder doesn't get overcrowded. If a prototype project becomes a production project at some point in the future, we'd be happy to move it to the main /keyboards/ folder!","title":"Non-Production/Handwired Projects"},{"location":"hardware_keyboard_guidelines/#warnings-as-errors","text":"When developing your keyboard, keep in mind that all warnings will be treated as errors - these small warnings can build-up and cause larger errors down the road (and keeping them is generally a bad practice).","title":"Warnings as Errors"},{"location":"hardware_keyboard_guidelines/#copyright-blurb","text":"If you're adapting your keyboard's setup from another project, but not using the same code, be sure to update the copyright header at the top of the files to show your name, in this format: Copyright 2017 Your Name <your@email.com> If you are modifying someone else's code and have made only trivial changes you should leave their name in the copyright statement. If you have done significant work on the file you should add your name to theirs, like so: Copyright 2017 Their Name <original_author@example.com> Your Name <you@example.com> The year should be the first year the file is created. If work was done to that file in later years you can reflect that by appending the second year to the first, like so: Copyright 2015-2017 Your Name <you@example.com>","title":"Copyright Blurb"},{"location":"hardware_keyboard_guidelines/#license","text":"The core of QMK is licensed under the GNU General Public License . If you are shipping binaries for AVR processors you may choose either GPLv2 or GPLv3 . If you are shipping binaries for ARM processors you must choose GPL Version 3 to comply with the ChibiOS GPLv3 license. If your keyboard makes use of the uGFX features within QMK you must comply with the uGFX License , which requires a separate commercial license before selling a device containing uGFX.","title":"License"},{"location":"hardware_keyboard_guidelines/#technical-details","text":"If you're looking for more information on making your keyboard work with QMK, check out the hardware section !","title":"Technical Details"},{"location":"how_a_matrix_works/","text":"How a Keyboard Matrix Works \u00b6 Keyboard switch matrices are arranged in rows and columns. Without a matrix circuit, each switch would require its own wire directly to the controller. When the circuit is arranged in rows and columns, if a key is pressed, a column wire makes contact with a row wire and completes a circuit. The keyboard controller detects this closed circuit and registers it as a key press. The microcontroller will be set up via the firmware to send a logical 1 to the columns, one at a time, and read from the rows, all at once - this process is called matrix scanning. The matrix is a bunch of open switches that, by default, don't allow any current to pass through - the firmware will read this as no keys being pressed. As soon as you press one key down, the logical 1 that was coming from the column the keyswitch is attached to gets passed through the switch and to the corresponding row - check out the following 2x2 example: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | row0 ---(key0)---(key1) row0 ---(key0)---(key1) | | | | row1 ---(key2)---(key3) row1 ---(key2)---(key3) The x represents that the column/row associated has a value of 1, or is HIGH. Here, we see that no keys are being pressed, so no rows get an x . For one keyswitch, keep in mind that one side of the contacts is connected to its row, and the other, its column. When we press key0 , col0 gets connected to row0 , so the values that the firmware receives for that row is 0b01 (the 0b here means that this is a bit value, meaning all of the following digits are bits - 0 or 1 - and represent the keys in that column). We'll use this notation to show when a keyswitch has been pressed, to show that the column and row are being connected: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | x row0 ---(-+-0)---(key1) row0 ---(-+-0)---(key1) | | | | row1 ---(key2)---(key3) row1 ---(key2)---(key3) We can now see that row0 has an x , so has the value of 1. As a whole, the data the firmware receives when key0 is pressed is: col0: 0b01 col1: 0b00 \u2502\u2514row0 \u2514row1 A problem arises when you start pressing more than one key at a time. Looking at our matrix again, it should become pretty obvious: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | x row0 ---(-+-0)---(-+-1) x row0 ---(-+-0)---(-+-1) | | | | x row1 ---(key2)---(-+-3) x row1 ---(key2)---(-+-3) Remember that this ^ is still connected to row1 The data we get from that is: col0: 0b11 col1: 0b11 \u2502\u2514row0 \u2514row1 Which isn't accurate, since we only have 3 keys pressed down, not all 4. This behavior is called ghosting, and only happens in odd scenarios like this, but can be much more common on a bigger keyboard. The way we can get around this is by placing a diode after the keyswitch, but before it connects to its row. A diode only allows current to pass through one way, which will protect our other columns/rows from being activated in the previous example. We'll represent a dioded matrix like this; Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 \u2502 \u2502 | \u2502 (key0) (key1) (key0) (key1) ! \u2502 ! \u2502 ! | ! \u2502 row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 | \u2502 (key2) (key3) (key2) (key3) ! ! ! ! row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In practical applications, the black line of the diode will be placed facing the row, and away from the keyswitch - the ! in this case is the diode, where the gap represents the black line. A good way to remember this is to think of this symbol: >| Now when we press the three keys, invoking what would be a ghosting scenario: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 \u2502 \u2502 \u2502 \u2502 (\u250c\u2500\u25240) (\u250c\u2500\u25241) (\u250c\u2500\u25240) (\u250c\u2500\u25241) ! \u2502 ! \u2502 ! \u2502 ! \u2502 x row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 x row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 (key2) (\u250c\u2500\u25183) (key2) (\u250c\u2500\u25183) ! ! ! ! row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 x row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Things act as they should! Which will get us the following data: col0: 0b01 col1: 0b11 \u2502\u2514row0 \u2514row1 The firmware can then use this correct data to detect what it should do, and eventually, what signals it needs to send to the OS. Further reading: - Wikipedia article - Deskthority article - Keyboard Matrix Help by Dave Dribin (2000) - How Key Matrices Works by PCBheaven (animated examples) - How keyboards work - QMK documentation","title":"How a Keyboard Matrix Works"},{"location":"how_a_matrix_works/#how-a-keyboard-matrix-works","text":"Keyboard switch matrices are arranged in rows and columns. Without a matrix circuit, each switch would require its own wire directly to the controller. When the circuit is arranged in rows and columns, if a key is pressed, a column wire makes contact with a row wire and completes a circuit. The keyboard controller detects this closed circuit and registers it as a key press. The microcontroller will be set up via the firmware to send a logical 1 to the columns, one at a time, and read from the rows, all at once - this process is called matrix scanning. The matrix is a bunch of open switches that, by default, don't allow any current to pass through - the firmware will read this as no keys being pressed. As soon as you press one key down, the logical 1 that was coming from the column the keyswitch is attached to gets passed through the switch and to the corresponding row - check out the following 2x2 example: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | row0 ---(key0)---(key1) row0 ---(key0)---(key1) | | | | row1 ---(key2)---(key3) row1 ---(key2)---(key3) The x represents that the column/row associated has a value of 1, or is HIGH. Here, we see that no keys are being pressed, so no rows get an x . For one keyswitch, keep in mind that one side of the contacts is connected to its row, and the other, its column. When we press key0 , col0 gets connected to row0 , so the values that the firmware receives for that row is 0b01 (the 0b here means that this is a bit value, meaning all of the following digits are bits - 0 or 1 - and represent the keys in that column). We'll use this notation to show when a keyswitch has been pressed, to show that the column and row are being connected: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | x row0 ---(-+-0)---(key1) row0 ---(-+-0)---(key1) | | | | row1 ---(key2)---(key3) row1 ---(key2)---(key3) We can now see that row0 has an x , so has the value of 1. As a whole, the data the firmware receives when key0 is pressed is: col0: 0b01 col1: 0b00 \u2502\u2514row0 \u2514row1 A problem arises when you start pressing more than one key at a time. Looking at our matrix again, it should become pretty obvious: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 | | | | x row0 ---(-+-0)---(-+-1) x row0 ---(-+-0)---(-+-1) | | | | x row1 ---(key2)---(-+-3) x row1 ---(key2)---(-+-3) Remember that this ^ is still connected to row1 The data we get from that is: col0: 0b11 col1: 0b11 \u2502\u2514row0 \u2514row1 Which isn't accurate, since we only have 3 keys pressed down, not all 4. This behavior is called ghosting, and only happens in odd scenarios like this, but can be much more common on a bigger keyboard. The way we can get around this is by placing a diode after the keyswitch, but before it connects to its row. A diode only allows current to pass through one way, which will protect our other columns/rows from being activated in the previous example. We'll represent a dioded matrix like this; Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 \u2502 \u2502 | \u2502 (key0) (key1) (key0) (key1) ! \u2502 ! \u2502 ! | ! \u2502 row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 | \u2502 (key2) (key3) (key2) (key3) ! ! ! ! row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 In practical applications, the black line of the diode will be placed facing the row, and away from the keyswitch - the ! in this case is the diode, where the gap represents the black line. A good way to remember this is to think of this symbol: >| Now when we press the three keys, invoking what would be a ghosting scenario: Column 0 being scanned Column 1 being scanned x x col0 col1 col0 col1 \u2502 \u2502 \u2502 \u2502 (\u250c\u2500\u25240) (\u250c\u2500\u25241) (\u250c\u2500\u25240) (\u250c\u2500\u25241) ! \u2502 ! \u2502 ! \u2502 ! \u2502 x row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 x row0 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502 \u2502 \u2502 \u2502 \u2502 (key2) (\u250c\u2500\u25183) (key2) (\u250c\u2500\u25183) ! ! ! ! row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 x row1 \u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Things act as they should! Which will get us the following data: col0: 0b01 col1: 0b11 \u2502\u2514row0 \u2514row1 The firmware can then use this correct data to detect what it should do, and eventually, what signals it needs to send to the OS. Further reading: - Wikipedia article - Deskthority article - Keyboard Matrix Help by Dave Dribin (2000) - How Key Matrices Works by PCBheaven (animated examples) - How keyboards work - QMK documentation","title":"How a Keyboard Matrix Works"},{"location":"how_keyboards_work/","text":"How Keys Are Registered, and Interpreted by Computers \u00b6 In this file, you can will learn the concepts of how keyboards work over USB, and you'll be able to better understand what you can expect from changing your firmware directly. Schematic View \u00b6 Whenever you type on 1 particular key, here is the chain of actions taking place: +------+ +-----+ +----------+ +----------+ +----+ | User |-------->| Key |------>| Firmware |----->| USB wire |---->| OS | +------+ +-----+ +----------+ +----------+ +----+ This scheme is a very simple view of what's going on, and more details follow in the next sections. 1. You Press a Key \u00b6 Whenever you press a key, the firmware of your keyboard can register this event. It can register when the key is pressed, held and released. This usually happens with a periodic scan of key presses. This speed often is limited by the mechanical key response time, the protocol to transfer those key presses (here USB HID), and by the software it is used in. 2. What the Firmware Sends \u00b6 The HID specification tells what a keyboard can actually send through USB to have a chance to be properly recognised. This includes a pre-defined list of scancodes which are simple numbers from 0x00 to 0xE7 . The firmware assigns a scancode to each key of the keyboard. The firmware does not send actual letters or characters, but only scancodes. Thus, by modifying the firmware, you can only modify what scancode is sent over USB for a given key. 3. What the Event Input/Kernel Does \u00b6 The scancode is mapped to a keycode dependent on the keyboard 60-keyboard.hwdb at Master . Without this mapping, the operating system will not receive a valid keycode and will be unable to do anything useful with that key press. 4. What the Operating System Does \u00b6 Once the keycode reaches the operating system, a piece of software has to have it match an actual character thanks to a keyboard layout. For example, if your layout is set to QWERTY, a sample of the matching table is as follows: keycode character 0x04 a/A 0x05 b/B 0x06 c/C ... ... 0x1C y/Y 0x1D z/Z ... ... Back to the Firmware \u00b6 As the layout is generally fixed (unless you create your own), the firmware can actually call a keycode by its layout name directly to ease things for you. This is exactly what is done here with KC_A actually representing 0x04 in QWERTY. The full list can be found in keycodes . List of Characters You Can Send \u00b6 Putting aside shortcuts, having a limited set of keycodes mapped to a limited layout means that the list of characters you can assign to a given key are only the ones present in the layout . For example, this means that if you have a QWERTY US layout, and you want to assign one key to produce \u20ac (euro currency symbol), you are unable to do so, because the QWERTY US layout does not have such mapping. You could fix that by using a QWERTY UK layout, or a QWERTY US International. You may wonder why a keyboard layout containing all of Unicode is not devised then? The limited number of keycodes available through USB simply disallows such a thing. How to (Maybe) Enter Unicode Characters \u00b6 You can have the firmware send sequences of keys to use the software Unicode Input Method of the target operating system, thus effectively entering characters independently of the layout defined in the OS. Yet, it does come with multiple disadvantages: Tied to a specific OS at a time (need recompilation when changing OS); Within a given OS, does not work in all software; Limited to a subset of Unicode on some systems.","title":"\u952e\u76d8\u5de5\u4f5c\u539f\u7406"},{"location":"how_keyboards_work/#how-keys-are-registered-and-interpreted-by-computers","text":"In this file, you can will learn the concepts of how keyboards work over USB, and you'll be able to better understand what you can expect from changing your firmware directly.","title":"How Keys Are Registered, and Interpreted by Computers"},{"location":"how_keyboards_work/#schematic-view","text":"Whenever you type on 1 particular key, here is the chain of actions taking place: +------+ +-----+ +----------+ +----------+ +----+ | User |-------->| Key |------>| Firmware |----->| USB wire |---->| OS | +------+ +-----+ +----------+ +----------+ +----+ This scheme is a very simple view of what's going on, and more details follow in the next sections.","title":"Schematic View"},{"location":"how_keyboards_work/#1-you-press-a-key","text":"Whenever you press a key, the firmware of your keyboard can register this event. It can register when the key is pressed, held and released. This usually happens with a periodic scan of key presses. This speed often is limited by the mechanical key response time, the protocol to transfer those key presses (here USB HID), and by the software it is used in.","title":"1. You Press a Key"},{"location":"how_keyboards_work/#2-what-the-firmware-sends","text":"The HID specification tells what a keyboard can actually send through USB to have a chance to be properly recognised. This includes a pre-defined list of scancodes which are simple numbers from 0x00 to 0xE7 . The firmware assigns a scancode to each key of the keyboard. The firmware does not send actual letters or characters, but only scancodes. Thus, by modifying the firmware, you can only modify what scancode is sent over USB for a given key.","title":"2. What the Firmware Sends"},{"location":"how_keyboards_work/#3-what-the-event-inputkernel-does","text":"The scancode is mapped to a keycode dependent on the keyboard 60-keyboard.hwdb at Master . Without this mapping, the operating system will not receive a valid keycode and will be unable to do anything useful with that key press.","title":"3. What the Event Input/Kernel Does"},{"location":"how_keyboards_work/#4-what-the-operating-system-does","text":"Once the keycode reaches the operating system, a piece of software has to have it match an actual character thanks to a keyboard layout. For example, if your layout is set to QWERTY, a sample of the matching table is as follows: keycode character 0x04 a/A 0x05 b/B 0x06 c/C ... ... 0x1C y/Y 0x1D z/Z ... ...","title":"4. What the Operating System Does"},{"location":"how_keyboards_work/#back-to-the-firmware","text":"As the layout is generally fixed (unless you create your own), the firmware can actually call a keycode by its layout name directly to ease things for you. This is exactly what is done here with KC_A actually representing 0x04 in QWERTY. The full list can be found in keycodes .","title":"Back to the Firmware"},{"location":"how_keyboards_work/#list-of-characters-you-can-send","text":"Putting aside shortcuts, having a limited set of keycodes mapped to a limited layout means that the list of characters you can assign to a given key are only the ones present in the layout . For example, this means that if you have a QWERTY US layout, and you want to assign one key to produce \u20ac (euro currency symbol), you are unable to do so, because the QWERTY US layout does not have such mapping. You could fix that by using a QWERTY UK layout, or a QWERTY US International. You may wonder why a keyboard layout containing all of Unicode is not devised then? The limited number of keycodes available through USB simply disallows such a thing.","title":"List of Characters You Can Send"},{"location":"how_keyboards_work/#how-to-maybe-enter-unicode-characters","text":"You can have the firmware send sequences of keys to use the software Unicode Input Method of the target operating system, thus effectively entering characters independently of the layout defined in the OS. Yet, it does come with multiple disadvantages: Tied to a specific OS at a time (need recompilation when changing OS); Within a given OS, does not work in all software; Limited to a subset of Unicode on some systems.","title":"How to (Maybe) Enter Unicode Characters"},{"location":"i2c_driver/","text":"I2C Master Driver {: id=i }2c-master-driver \u00b6 The I2C Master drivers used in QMK have a set of common functions to allow portability between MCUs. I2C Addressing {: id=note-on-i }2c-addresses \u00b6 All of the addresses expected by this driver should be pushed to the upper 7 bits of the address byte. Setting the lower bit (indicating read/write) will be done by the respective functions. Almost all I2C addresses listed on datasheets and the internet will be represented as 7 bits occupying the lower 7 bits and will need to be shifted to the left (more significant) by one bit. This is easy to do via the bitwise shift operator << 1 . You can either do this on each call to the functions below, or once in your definition of the address. For example, if your device has an address of 0x18 : #define MY_I2C_ADDRESS (0x18 << 1) See https://www.robot-electronics.co.uk/i2c-tutorial for more information about I2C addressing and other technical details. AVR Configuration \u00b6 The following defines can be used to configure the I2C master driver: config.h Override Description Default F_SCL Clock frequency in Hz 400000 No further setup is required - just connect the SDA and SCL pins of your I2C devices to the matching pins on the MCU: MCU SCL SDA ATmega16/32U4 D0 D1 AT90USB64/128 D0 D1 ATmega32A C0 C1 ATmega328/P C5 C4 Info The ATmega16/32U2 does not possess I2C functionality, and so cannot use this driver. ChibiOS/ARM Configuration \u00b6 You'll need to determine which pins can be used for I2C -- a an example, STM32 parts generally have multiple I2C peripherals, labeled I2C1, I2C2, I2C3 etc. To enable I2C, modify your board's halconf.h to enable I2C: #define HAL_USE_I2C TRUE Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_I2C_USE_I2C2 #define STM32_I2C_USE_I2C2 TRUE mcuconf.h Setting Description Default STM32_I2C_BUSY_TIMEOUT Time in milliseconds until the I2C command is aborted if no response is received 50 STM32_I2C_XXX_IRQ_PRIORITY Interrupt priority for hardware driver XXX (THIS IS AN EXPERT SETTING) 10 STM32_I2C_USE_DMA Enable/Disable the ability of the MCU to offload the data transfer to the DMA unit TRUE STM32_I2C_XXX_DMA_PRIORITY Priority of DMA unit for hardware driver XXX (THIS IS AN EXPERT SETTING) 1 Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h Overrride Description Default I2C_DRIVER I2C peripheral to use - I2C1 -> I2CD1 , I2C2 -> I2CD2 etc. I2CD1 I2C1_BANK (deprecated) The bank of pins ( GPIOA , GPIOB , GPIOC ), superseded by I2C1_SCL_BANK / I2C1_SDA_BANK GPIOB I2C1_SCL_BANK The bank of pins ( GPIOA , GPIOB , GPIOC ) to use for SCL GPIOB I2C1_SCL The pin number for SCL (0-15) 6 I2C1_SCL_PAL_MODE The alternate function mode for SCL 4 I2C1_SDA_BANK The bank of pins ( GPIOA , GPIOB , GPIOC ) to use for SDA GPIOB I2C1_SDA The pin number for SDA (0-15) 7 I2C1_SDA_PAL_MODE The alternate function mode for SDA 4 The following configuration values depend on the specific MCU in use. I2Cv1 {: id=i }2cv1 \u00b6 STM32F1xx STM32F2xx STM32F4xx STM32L0xx STM32L1xx See this page for the I2Cv1 configuration structure. config.h Override Default I2C1_OPMODE OPMODE_I2C I2C1_CLOCK_SPEED 100000 I2C1_DUTY_CYCLE STD_DUTY_CYCLE I2Cv2 {: id=i }2cv2 \u00b6 STM32F0xx STM32F3xx STM32F7xx STM32L4xx See this page for the I2Cv2 configuration structure. config.h Override Default I2C1_TIMINGR_PRESC 0U I2C1_TIMINGR_SCLDEL 7U I2C1_TIMINGR_SDADEL 0U I2C1_TIMINGR_SCLH 38U I2C1_TIMINGR_SCLL 129U Functions \u00b6 void i2c_init(void) \u00b6 Initialize the I2C driver. This function must be called only once, before any of the below functions can be called. This function is weakly defined, meaning it can be overridden if necessary for your particular use case: void i2c_init ( void ) { setPinInput ( B6 ); // Try releasing special pins for a short time setPinInput ( B7 ); wait_ms ( 10 ); // Wait for the release to happen palSetPadMode ( GPIOB , 6 , PAL_MODE_ALTERNATE ( 4 ) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP ); // Set B6 to I2C function palSetPadMode ( GPIOB , 7 , PAL_MODE_ALTERNATE ( 4 ) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP ); // Set B7 to I2C function } i2c_status_t i2c_start(uint8_t address, uint16_t timeout) \u00b6 Start an I2C transaction. Arguments \u00b6 uint8_t address The 7-bit I2C address of the device (ie. without the read/write bit - this will be set automatically). uint16_t timeout The time in milliseconds to wait for a response from the target device. Return Value \u00b6 I2C_STATUS_TIMEOUT if the timeout period elapses, I2C_STATUS_ERROR if some other error occurs, otherwise I2C_STATUS_SUCCESS . i2c_status_t i2c_transmit(uint8_t address, uint8_t *data, uint16_t length, uint16_t timeout) \u00b6 Send multiple bytes to the selected I2C device. Arguments \u00b6 uint8_t address The 7-bit I2C address of the device. uint8_t *data A pointer to the data to transmit. uint16_t length The number of bytes to write. Take care not to overrun the length of data . uint16_t timeout The time in milliseconds to wait for a response from the target device. Return Value \u00b6 I2C_STATUS_TIMEOUT if the timeout period elapses, I2C_STATUS_ERROR if some other error occurs, otherwise I2C_STATUS_SUCCESS . i2c_status_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length, uint16_t timeout) \u00b6 Receive multiple bytes from the selected SPI device. Arguments \u00b6 uint8_t address The 7-bit I2C address of the device. uint8_t *data A pointer to the buffer to read into. uint16_t length The number of bytes to read. Take care not to overrun the length of data . uint16_t timeout The time in milliseconds to wait for a response from the target device. Return Value \u00b6 I2C_STATUS_TIMEOUT if the timeout period elapses, I2C_STATUS_ERROR if some other error occurs, otherwise I2C_STATUS_SUCCESS . i2c_status_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout) \u00b6 Writes to a register on the I2C device. Arguments \u00b6 uint8_t devaddr The 7-bit I2C address of the device. uint8_t regaddr The register address to write to. uint8_t *data A pointer to the data to transmit. uint16_t length The number of bytes to write. Take care not to overrun the length of data . uint16_t timeout The time in milliseconds to wait for a response from the target device. Return Value \u00b6 I2C_STATUS_TIMEOUT if the timeout period elapses, I2C_STATUS_ERROR if some other error occurs, otherwise I2C_STATUS_SUCCESS . i2c_status_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout) \u00b6 Reads from a register on the I2C device. Arguments \u00b6 uint8_t devaddr The 7-bit I2C address of the device. uint8_t regaddr The register address to read from. uint16_t length The number of bytes to read. Take care not to overrun the length of data . uint16_t timeout The time in milliseconds to wait for a response from the target device. Return Value \u00b6 I2C_STATUS_TIMEOUT if the timeout period elapses, I2C_STATUS_ERROR if some other error occurs, otherwise I2C_STATUS_SUCCESS . i2c_status_t i2c_stop(void) \u00b6 Stop the current I2C transaction.","title":"I2C\u8bbe\u5907"},{"location":"i2c_driver/#i2c-master-driver-idi-2c-master-driver","text":"The I2C Master drivers used in QMK have a set of common functions to allow portability between MCUs.","title":"I2C Master Driver {: id=i }2c-master-driver"},{"location":"i2c_driver/#i2c-addressing-idnote-on-i-2c-addresses","text":"All of the addresses expected by this driver should be pushed to the upper 7 bits of the address byte. Setting the lower bit (indicating read/write) will be done by the respective functions. Almost all I2C addresses listed on datasheets and the internet will be represented as 7 bits occupying the lower 7 bits and will need to be shifted to the left (more significant) by one bit. This is easy to do via the bitwise shift operator << 1 . You can either do this on each call to the functions below, or once in your definition of the address. For example, if your device has an address of 0x18 : #define MY_I2C_ADDRESS (0x18 << 1) See https://www.robot-electronics.co.uk/i2c-tutorial for more information about I2C addressing and other technical details.","title":"I2C Addressing {: id=note-on-i }2c-addresses"},{"location":"i2c_driver/#avr-configuration","text":"The following defines can be used to configure the I2C master driver: config.h Override Description Default F_SCL Clock frequency in Hz 400000 No further setup is required - just connect the SDA and SCL pins of your I2C devices to the matching pins on the MCU: MCU SCL SDA ATmega16/32U4 D0 D1 AT90USB64/128 D0 D1 ATmega32A C0 C1 ATmega328/P C5 C4 Info The ATmega16/32U2 does not possess I2C functionality, and so cannot use this driver.","title":"AVR Configuration"},{"location":"i2c_driver/#arm-configuration","text":"You'll need to determine which pins can be used for I2C -- a an example, STM32 parts generally have multiple I2C peripherals, labeled I2C1, I2C2, I2C3 etc. To enable I2C, modify your board's halconf.h to enable I2C: #define HAL_USE_I2C TRUE Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_I2C_USE_I2C2 #define STM32_I2C_USE_I2C2 TRUE mcuconf.h Setting Description Default STM32_I2C_BUSY_TIMEOUT Time in milliseconds until the I2C command is aborted if no response is received 50 STM32_I2C_XXX_IRQ_PRIORITY Interrupt priority for hardware driver XXX (THIS IS AN EXPERT SETTING) 10 STM32_I2C_USE_DMA Enable/Disable the ability of the MCU to offload the data transfer to the DMA unit TRUE STM32_I2C_XXX_DMA_PRIORITY Priority of DMA unit for hardware driver XXX (THIS IS AN EXPERT SETTING) 1 Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h Overrride Description Default I2C_DRIVER I2C peripheral to use - I2C1 -> I2CD1 , I2C2 -> I2CD2 etc. I2CD1 I2C1_BANK (deprecated) The bank of pins ( GPIOA , GPIOB , GPIOC ), superseded by I2C1_SCL_BANK / I2C1_SDA_BANK GPIOB I2C1_SCL_BANK The bank of pins ( GPIOA , GPIOB , GPIOC ) to use for SCL GPIOB I2C1_SCL The pin number for SCL (0-15) 6 I2C1_SCL_PAL_MODE The alternate function mode for SCL 4 I2C1_SDA_BANK The bank of pins ( GPIOA , GPIOB , GPIOC ) to use for SDA GPIOB I2C1_SDA The pin number for SDA (0-15) 7 I2C1_SDA_PAL_MODE The alternate function mode for SDA 4 The following configuration values depend on the specific MCU in use.","title":"ChibiOS/ARM Configuration"},{"location":"i2c_driver/#i2cv1-idi-2cv1","text":"STM32F1xx STM32F2xx STM32F4xx STM32L0xx STM32L1xx See this page for the I2Cv1 configuration structure. config.h Override Default I2C1_OPMODE OPMODE_I2C I2C1_CLOCK_SPEED 100000 I2C1_DUTY_CYCLE STD_DUTY_CYCLE","title":"I2Cv1 {: id=i }2cv1"},{"location":"i2c_driver/#i2cv2-idi-2cv2","text":"STM32F0xx STM32F3xx STM32F7xx STM32L4xx See this page for the I2Cv2 configuration structure. config.h Override Default I2C1_TIMINGR_PRESC 0U I2C1_TIMINGR_SCLDEL 7U I2C1_TIMINGR_SDADEL 0U I2C1_TIMINGR_SCLH 38U I2C1_TIMINGR_SCLL 129U","title":"I2Cv2 {: id=i }2cv2"},{"location":"i2c_driver/#functions","text":"","title":"Functions"},{"location":"i2c_driver/#void-i2c_initvoid","text":"Initialize the I2C driver. This function must be called only once, before any of the below functions can be called. This function is weakly defined, meaning it can be overridden if necessary for your particular use case: void i2c_init ( void ) { setPinInput ( B6 ); // Try releasing special pins for a short time setPinInput ( B7 ); wait_ms ( 10 ); // Wait for the release to happen palSetPadMode ( GPIOB , 6 , PAL_MODE_ALTERNATE ( 4 ) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP ); // Set B6 to I2C function palSetPadMode ( GPIOB , 7 , PAL_MODE_ALTERNATE ( 4 ) | PAL_STM32_OTYPE_OPENDRAIN | PAL_STM32_PUPDR_PULLUP ); // Set B7 to I2C function }","title":"void i2c_init(void)"},{"location":"i2c_driver/#i2c_status_t-i2c_startuint8_t-address-uint16_t-timeout","text":"Start an I2C transaction.","title":"i2c_status_t i2c_start(uint8_t address, uint16_t timeout)"},{"location":"i2c_driver/#i2c_status_t-i2c_transmituint8_t-address-uint8_t-data-uint16_t-length-uint16_t-timeout","text":"Send multiple bytes to the selected I2C device.","title":"i2c_status_t i2c_transmit(uint8_t address, uint8_t *data, uint16_t length, uint16_t timeout)"},{"location":"i2c_driver/#i2c_status_t-i2c_receiveuint8_t-address-uint8_t-data-uint16_t-length-uint16_t-timeout","text":"Receive multiple bytes from the selected SPI device.","title":"i2c_status_t i2c_receive(uint8_t address, uint8_t* data, uint16_t length, uint16_t timeout)"},{"location":"i2c_driver/#i2c_status_t-i2c_writereguint8_t-devaddr-uint8_t-regaddr-uint8_t-data-uint16_t-length-uint16_t-timeout","text":"Writes to a register on the I2C device.","title":"i2c_status_t i2c_writeReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout)"},{"location":"i2c_driver/#i2c_status_t-i2c_readreguint8_t-devaddr-uint8_t-regaddr-uint8_t-data-uint16_t-length-uint16_t-timeout","text":"Reads from a register on the I2C device.","title":"i2c_status_t i2c_readReg(uint8_t devaddr, uint8_t regaddr, uint8_t* data, uint16_t length, uint16_t timeout)"},{"location":"i2c_driver/#i2c_status_t-i2c_stopvoid","text":"Stop the current I2C transaction.","title":"i2c_status_t i2c_stop(void)"},{"location":"internals_defines/","text":"group defines \u00b6 Summary \u00b6 Members Descriptions define SYSEX_BEGIN define SYSEX_END define MIDI_STATUSMASK define MIDI_CHANMASK define MIDI_CC define MIDI_NOTEON define MIDI_NOTEOFF define MIDI_AFTERTOUCH define MIDI_PITCHBEND define MIDI_PROGCHANGE define MIDI_CHANPRESSURE define MIDI_CLOCK define MIDI_TICK define MIDI_START define MIDI_CONTINUE define MIDI_STOP define MIDI_ACTIVESENSE define MIDI_RESET define MIDI_TC_QUARTERFRAME define MIDI_SONGPOSITION define MIDI_SONGSELECT define MIDI_TUNEREQUEST define SYSEX_EDUMANUFID Members \u00b6 define SYSEX_BEGIN \u00b6 define SYSEX_END \u00b6 define MIDI_STATUSMASK \u00b6 define MIDI_CHANMASK \u00b6 define MIDI_CC \u00b6 define MIDI_NOTEON \u00b6 define MIDI_NOTEOFF \u00b6 define MIDI_AFTERTOUCH \u00b6 define MIDI_PITCHBEND \u00b6 define MIDI_PROGCHANGE \u00b6 define MIDI_CHANPRESSURE \u00b6 define MIDI_CLOCK \u00b6 define MIDI_TICK \u00b6 define MIDI_START \u00b6 define MIDI_CONTINUE \u00b6 define MIDI_STOP \u00b6 define MIDI_ACTIVESENSE \u00b6 define MIDI_RESET \u00b6 define MIDI_TC_QUARTERFRAME \u00b6 define MIDI_SONGPOSITION \u00b6 define MIDI_SONGSELECT \u00b6 define MIDI_TUNEREQUEST \u00b6 define SYSEX_EDUMANUFID \u00b6","title":"\u5b9a\u4e49"},{"location":"internals_defines/#group__defines","text":"","title":"group defines"},{"location":"internals_defines/#summary","text":"Members Descriptions define SYSEX_BEGIN define SYSEX_END define MIDI_STATUSMASK define MIDI_CHANMASK define MIDI_CC define MIDI_NOTEON define MIDI_NOTEOFF define MIDI_AFTERTOUCH define MIDI_PITCHBEND define MIDI_PROGCHANGE define MIDI_CHANPRESSURE define MIDI_CLOCK define MIDI_TICK define MIDI_START define MIDI_CONTINUE define MIDI_STOP define MIDI_ACTIVESENSE define MIDI_RESET define MIDI_TC_QUARTERFRAME define MIDI_SONGPOSITION define MIDI_SONGSELECT define MIDI_TUNEREQUEST define SYSEX_EDUMANUFID","title":"Summary"},{"location":"internals_defines/#members","text":"","title":"Members"},{"location":"internals_gpio_control/","text":"GPIO Control \u00b6 QMK has a GPIO control abstraction layer which is microcontroller agnostic. This is done to allow easy access to pin control across different platforms. Functions \u00b6 The following functions can provide basic control of GPIOs and are found in quantum/quantum.h . Function Description Old AVR Examples Old ChibiOS/ARM Examples setPinInput(pin) Set pin as input with high impedance (High-Z) DDRB &= ~(1<<2) palSetLineMode(pin, PAL_MODE_INPUT) setPinInputHigh(pin) Set pin as input with builtin pull-up resistor DDRB &= ~(1<<2); PORTB \\|= (1<<2) palSetLineMode(pin, PAL_MODE_INPUT_PULLUP) setPinInputLow(pin) Set pin as input with builtin pull-down resistor N/A (Not supported on AVR) palSetLineMode(pin, PAL_MODE_INPUT_PULLDOWN) setPinOutput(pin) Set pin as output DDRB \\|= (1<<2) palSetLineMode(pin, PAL_MODE_OUTPUT_PUSHPULL) writePinHigh(pin) Set pin level as high, assuming it is an output PORTB \\|= (1<<2) palSetLine(pin) writePinLow(pin) Set pin level as low, assuming it is an output PORTB &= ~(1<<2) palClearLine(pin) writePin(pin, level) Set pin level, assuming it is an output (level) ? PORTB \\|= (1<<2) : PORTB &= ~(1<<2) (level) ? palSetLine(pin) : palClearLine(pin) readPin(pin) Returns the level of the pin _SFR_IO8(pin >> 4) & _BV(pin & 0xF) palReadLine(pin) togglePin(pin) Invert pin level, assuming it is an output PORTB ^= (1<<2) palToggleLine(pin) Advanced Settings \u00b6 Each microcontroller can have multiple advanced settings regarding its GPIO. This abstraction layer does not limit the use of architecture-specific functions. Advanced users should consult the datasheet of their desired device and include any needed libraries. For AVR, the standard avr/io.h library is used; for STM32, the ChibiOS PAL library is used. Atomic Operation \u00b6 The above functions are not always guaranteed to work atomically. Therefore, if you want to prevent interruptions in the middle of operations when using multiple combinations of the above functions, use the following ATOMIC_BLOCK_FORCEON macro. eg. void some_function () { // some process ATOMIC_BLOCK_FORCEON { // Atomic Processing } // some process } ATOMIC_BLOCK_FORCEON forces interrupts to be disabled before the block is executed, without regard to whether they are enabled or disabled. Then, after the block is executed, the interrupt is enabled. Note that ATOMIC_BLOCK_FORCEON can therefore be used if you know that interrupts are enabled before the execution of the block, or if you know that it is OK to enable interrupts at the completion of the block.","title":"GPIO\u63a7\u5236"},{"location":"internals_gpio_control/#gpio-control","text":"QMK has a GPIO control abstraction layer which is microcontroller agnostic. This is done to allow easy access to pin control across different platforms.","title":"GPIO Control"},{"location":"internals_gpio_control/#functions","text":"The following functions can provide basic control of GPIOs and are found in quantum/quantum.h . Function Description Old AVR Examples Old ChibiOS/ARM Examples setPinInput(pin) Set pin as input with high impedance (High-Z) DDRB &= ~(1<<2) palSetLineMode(pin, PAL_MODE_INPUT) setPinInputHigh(pin) Set pin as input with builtin pull-up resistor DDRB &= ~(1<<2); PORTB \\|= (1<<2) palSetLineMode(pin, PAL_MODE_INPUT_PULLUP) setPinInputLow(pin) Set pin as input with builtin pull-down resistor N/A (Not supported on AVR) palSetLineMode(pin, PAL_MODE_INPUT_PULLDOWN) setPinOutput(pin) Set pin as output DDRB \\|= (1<<2) palSetLineMode(pin, PAL_MODE_OUTPUT_PUSHPULL) writePinHigh(pin) Set pin level as high, assuming it is an output PORTB \\|= (1<<2) palSetLine(pin) writePinLow(pin) Set pin level as low, assuming it is an output PORTB &= ~(1<<2) palClearLine(pin) writePin(pin, level) Set pin level, assuming it is an output (level) ? PORTB \\|= (1<<2) : PORTB &= ~(1<<2) (level) ? palSetLine(pin) : palClearLine(pin) readPin(pin) Returns the level of the pin _SFR_IO8(pin >> 4) & _BV(pin & 0xF) palReadLine(pin) togglePin(pin) Invert pin level, assuming it is an output PORTB ^= (1<<2) palToggleLine(pin)","title":"Functions"},{"location":"internals_gpio_control/#advanced-settings","text":"Each microcontroller can have multiple advanced settings regarding its GPIO. This abstraction layer does not limit the use of architecture-specific functions. Advanced users should consult the datasheet of their desired device and include any needed libraries. For AVR, the standard avr/io.h library is used; for STM32, the ChibiOS PAL library is used.","title":"Advanced Settings"},{"location":"internals_gpio_control/#atomic-operation","text":"The above functions are not always guaranteed to work atomically. Therefore, if you want to prevent interruptions in the middle of operations when using multiple combinations of the above functions, use the following ATOMIC_BLOCK_FORCEON macro. eg. void some_function () { // some process ATOMIC_BLOCK_FORCEON { // Atomic Processing } // some process } ATOMIC_BLOCK_FORCEON forces interrupts to be disabled before the block is executed, without regard to whether they are enabled or disabled. Then, after the block is executed, the interrupt is enabled. Note that ATOMIC_BLOCK_FORCEON can therefore be used if you know that interrupts are enabled before the execution of the block, or if you know that it is OK to enable interrupts at the completion of the block.","title":"Atomic Operation"},{"location":"internals_input_callback_reg/","text":"group input_callback_reg \u00b6 These are the functions you use to register your input callbacks. The functions are called when the appropriate midi message is matched on the associated device's input. Summary \u00b6 Members Descriptions public void midi_register_cc_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a control change message (cc) callback. public void midi_register_noteon_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a note on callback. public void midi_register_noteoff_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a note off callback. public void midi_register_aftertouch_callback ( MidiDevice * device,midi_three_byte_func_t func) Register an after touch callback. public void midi_register_pitchbend_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a pitch bend callback. public void midi_register_songposition_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a song position callback. public void midi_register_progchange_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a program change callback. public void midi_register_chanpressure_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a channel pressure callback. public void midi_register_songselect_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a song select callback. public void midi_register_tc_quarterframe_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a tc quarter frame callback. public void midi_register_realtime_callback ( MidiDevice * device,midi_one_byte_func_t func) Register a realtime callback. public void midi_register_tunerequest_callback ( MidiDevice * device,midi_one_byte_func_t func) Register a tune request callback. public void midi_register_sysex_callback ( MidiDevice * device,midi_sysex_func_t func) Register a sysex callback. public void midi_register_fallthrough_callback ( MidiDevice * device,midi_var_byte_func_t func) Register fall through callback. public void midi_register_catchall_callback ( MidiDevice * device,midi_var_byte_func_t func) Register a catch all callback. Members \u00b6 public void midi_register_cc_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register a control change message (cc) callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_noteon_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register a note on callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_noteoff_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register a note off callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_aftertouch_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register an after touch callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_pitchbend_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register a pitch bend callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_songposition_callback ( MidiDevice * device,midi_three_byte_func_t func) \u00b6 Register a song position callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_progchange_callback ( MidiDevice * device,midi_two_byte_func_t func) \u00b6 Register a program change callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_chanpressure_callback ( MidiDevice * device,midi_two_byte_func_t func) \u00b6 Register a channel pressure callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_songselect_callback ( MidiDevice * device,midi_two_byte_func_t func) \u00b6 Register a song select callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_tc_quarterframe_callback ( MidiDevice * device,midi_two_byte_func_t func) \u00b6 Register a tc quarter frame callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_realtime_callback ( MidiDevice * device,midi_one_byte_func_t func) \u00b6 Register a realtime callback. The callback will be called for all of the real time message types. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_tunerequest_callback ( MidiDevice * device,midi_one_byte_func_t func) \u00b6 Register a tune request callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_sysex_callback ( MidiDevice * device,midi_sysex_func_t func) \u00b6 Register a sysex callback. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_fallthrough_callback ( MidiDevice * device,midi_var_byte_func_t func) \u00b6 Register fall through callback. This is only called if a more specific callback is not matched and called. For instance, if you don't register a note on callback but you get a note on message the fall through callback will be called, if it is registered. Parameters \u00b6 device the device associate with func the callback function to register public void midi_register_catchall_callback ( MidiDevice * device,midi_var_byte_func_t func) \u00b6 Register a catch all callback. If registered, the catch all callback is called for every message that is matched, even if a more specific or the fallthrough callback is registered. Parameters \u00b6 device the device associate with func the callback function to register","title":"\u8f93\u5165\u56de\u8c03\u5bc4\u5b58\u5668"},{"location":"internals_input_callback_reg/#group__input__callback__reg","text":"These are the functions you use to register your input callbacks. The functions are called when the appropriate midi message is matched on the associated device's input.","title":"group input_callback_reg"},{"location":"internals_input_callback_reg/#summary","text":"Members Descriptions public void midi_register_cc_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a control change message (cc) callback. public void midi_register_noteon_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a note on callback. public void midi_register_noteoff_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a note off callback. public void midi_register_aftertouch_callback ( MidiDevice * device,midi_three_byte_func_t func) Register an after touch callback. public void midi_register_pitchbend_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a pitch bend callback. public void midi_register_songposition_callback ( MidiDevice * device,midi_three_byte_func_t func) Register a song position callback. public void midi_register_progchange_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a program change callback. public void midi_register_chanpressure_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a channel pressure callback. public void midi_register_songselect_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a song select callback. public void midi_register_tc_quarterframe_callback ( MidiDevice * device,midi_two_byte_func_t func) Register a tc quarter frame callback. public void midi_register_realtime_callback ( MidiDevice * device,midi_one_byte_func_t func) Register a realtime callback. public void midi_register_tunerequest_callback ( MidiDevice * device,midi_one_byte_func_t func) Register a tune request callback. public void midi_register_sysex_callback ( MidiDevice * device,midi_sysex_func_t func) Register a sysex callback. public void midi_register_fallthrough_callback ( MidiDevice * device,midi_var_byte_func_t func) Register fall through callback. public void midi_register_catchall_callback ( MidiDevice * device,midi_var_byte_func_t func) Register a catch all callback.","title":"Summary"},{"location":"internals_input_callback_reg/#members","text":"","title":"Members"},{"location":"internals_midi_device/","text":"group midi_device \u00b6 You use the functions when you are implementing your own midi device. You set a send function to actually send bytes via your device, this method is called when you call a send function with this device, for instance midi_send_cc You use the midi_device_input to process input data from the device and pass it through the device's associated callbacks. You use the midi_device_set_pre_input_process_func if you want to have a function called at the beginning of the device's process function, generally to poll for input and pass that into midi_device_input Summary \u00b6 Members Descriptions define MIDI_INPUT_QUEUE_LENGTH enum input_state_t public void midi_device_input ( MidiDevice * device,uint8_t cnt,uint8_t * input) Process input bytes. This function parses bytes and calls the appropriate callbacks associated with the given device. You use this function if you are creating a custom device and you want to have midi input. public void midi_device_set_send_func ( MidiDevice * device,midi_var_byte_func_t send_func) Set the callback function that will be used for sending output data bytes. This is only used if you're creating a custom device. You'll most likely want the callback function to disable interrupts so that you can call the various midi send functions without worrying about locking. public void midi_device_set_pre_input_process_func ( MidiDevice * device,midi_no_byte_func_t pre_process_func) Set a callback which is called at the beginning of the midi_device_process call. This can be used to poll for input data and send the data through the midi_device_input function. You'll probably only use this if you're creating a custom device. struct _midi_device This structure represents the input and output functions and processing data for a midi device. Members \u00b6 define MIDI_INPUT_QUEUE_LENGTH \u00b6 enum input_state_t \u00b6 Values Descriptions IDLE ONE_BYTE_MESSAGE TWO_BYTE_MESSAGE THREE_BYTE_MESSAGE SYSEX_MESSAGE public void midi_device_input ( MidiDevice * device,uint8_t cnt,uint8_t * input) \u00b6 Process input bytes. This function parses bytes and calls the appropriate callbacks associated with the given device. You use this function if you are creating a custom device and you want to have midi input. Parameters \u00b6 device the midi device to associate the input with cnt the number of bytes you are processing input the bytes to process public void midi_device_set_send_func ( MidiDevice * device,midi_var_byte_func_t send_func) \u00b6 Set the callback function that will be used for sending output data bytes. This is only used if you're creating a custom device. You'll most likely want the callback function to disable interrupts so that you can call the various midi send functions without worrying about locking. Parameters \u00b6 device the midi device to associate this callback with send_func the callback function that will do the sending public void midi_device_set_pre_input_process_func ( MidiDevice * device,midi_no_byte_func_t pre_process_func) \u00b6 Set a callback which is called at the beginning of the midi_device_process call. This can be used to poll for input data and send the data through the midi_device_input function. You'll probably only use this if you're creating a custom device. Parameters \u00b6 device the midi device to associate this callback with midi_no_byte_func_t the actual callback function struct _midi_device \u00b6 This structure represents the input and output functions and processing data for a midi device. A device can represent an actual physical device [serial port, usb port] or something virtual. You should not need to modify this structure directly. Summary \u00b6 Members Descriptions public midi_var_byte_func_t send_func public midi_three_byte_func_t input_cc_callback public midi_three_byte_func_t input_noteon_callback public midi_three_byte_func_t input_noteoff_callback public midi_three_byte_func_t input_aftertouch_callback public midi_three_byte_func_t input_pitchbend_callback public midi_three_byte_func_t input_songposition_callback public midi_two_byte_func_t input_progchange_callback public midi_two_byte_func_t input_chanpressure_callback public midi_two_byte_func_t input_songselect_callback public midi_two_byte_func_t input_tc_quarterframe_callback public midi_one_byte_func_t input_realtime_callback public midi_one_byte_func_t input_tunerequest_callback public midi_sysex_func_t input_sysex_callback public midi_var_byte_func_t input_fallthrough_callback public midi_var_byte_func_t input_catchall_callback public midi_no_byte_func_t pre_input_process_callback public uint8_t input_buffer public input_state_t input_state public uint16_t input_count public uint8_t input_queue_data public byteQueue_t input_queue Members \u00b6 public midi_var_byte_func_t send_func \u00b6 public midi_three_byte_func_t input_cc_callback \u00b6 public midi_three_byte_func_t input_noteon_callback \u00b6 public midi_three_byte_func_t input_noteoff_callback \u00b6 public midi_three_byte_func_t input_aftertouch_callback \u00b6 public midi_three_byte_func_t input_pitchbend_callback \u00b6 public midi_three_byte_func_t input_songposition_callback \u00b6 public midi_two_byte_func_t input_progchange_callback \u00b6 public midi_two_byte_func_t input_chanpressure_callback \u00b6 public midi_two_byte_func_t input_songselect_callback \u00b6 public midi_two_byte_func_t input_tc_quarterframe_callback \u00b6 public midi_one_byte_func_t input_realtime_callback \u00b6 public midi_one_byte_func_t input_tunerequest_callback \u00b6 public midi_sysex_func_t input_sysex_callback \u00b6 public midi_var_byte_func_t input_fallthrough_callback \u00b6 public midi_var_byte_func_t input_catchall_callback \u00b6 public midi_no_byte_func_t pre_input_process_callback \u00b6 public uint8_t input_buffer \u00b6 public input_state_t input_state \u00b6 public uint16_t input_count \u00b6 public uint8_t input_queue_data \u00b6 public byteQueue_t input_queue \u00b6","title":"Midi\u8bbe\u5907"},{"location":"internals_midi_device/#group__midi__device","text":"You use the functions when you are implementing your own midi device. You set a send function to actually send bytes via your device, this method is called when you call a send function with this device, for instance midi_send_cc You use the midi_device_input to process input data from the device and pass it through the device's associated callbacks. You use the midi_device_set_pre_input_process_func if you want to have a function called at the beginning of the device's process function, generally to poll for input and pass that into midi_device_input","title":"group midi_device"},{"location":"internals_midi_device/#summary","text":"Members Descriptions define MIDI_INPUT_QUEUE_LENGTH enum input_state_t public void midi_device_input ( MidiDevice * device,uint8_t cnt,uint8_t * input) Process input bytes. This function parses bytes and calls the appropriate callbacks associated with the given device. You use this function if you are creating a custom device and you want to have midi input. public void midi_device_set_send_func ( MidiDevice * device,midi_var_byte_func_t send_func) Set the callback function that will be used for sending output data bytes. This is only used if you're creating a custom device. You'll most likely want the callback function to disable interrupts so that you can call the various midi send functions without worrying about locking. public void midi_device_set_pre_input_process_func ( MidiDevice * device,midi_no_byte_func_t pre_process_func) Set a callback which is called at the beginning of the midi_device_process call. This can be used to poll for input data and send the data through the midi_device_input function. You'll probably only use this if you're creating a custom device. struct _midi_device This structure represents the input and output functions and processing data for a midi device.","title":"Summary"},{"location":"internals_midi_device/#members","text":"","title":"Members"},{"location":"internals_midi_device/#struct__midi__device","text":"This structure represents the input and output functions and processing data for a midi device. A device can represent an actual physical device [serial port, usb port] or something virtual. You should not need to modify this structure directly.","title":"struct _midi_device"},{"location":"internals_midi_device/#summary_1","text":"Members Descriptions public midi_var_byte_func_t send_func public midi_three_byte_func_t input_cc_callback public midi_three_byte_func_t input_noteon_callback public midi_three_byte_func_t input_noteoff_callback public midi_three_byte_func_t input_aftertouch_callback public midi_three_byte_func_t input_pitchbend_callback public midi_three_byte_func_t input_songposition_callback public midi_two_byte_func_t input_progchange_callback public midi_two_byte_func_t input_chanpressure_callback public midi_two_byte_func_t input_songselect_callback public midi_two_byte_func_t input_tc_quarterframe_callback public midi_one_byte_func_t input_realtime_callback public midi_one_byte_func_t input_tunerequest_callback public midi_sysex_func_t input_sysex_callback public midi_var_byte_func_t input_fallthrough_callback public midi_var_byte_func_t input_catchall_callback public midi_no_byte_func_t pre_input_process_callback public uint8_t input_buffer public input_state_t input_state public uint16_t input_count public uint8_t input_queue_data public byteQueue_t input_queue","title":"Summary"},{"location":"internals_midi_device/#members_1","text":"","title":"Members"},{"location":"internals_midi_device_setup_process/","text":"group midi_device_setup_process \u00b6 These are method that you must use to initialize and run a device. Summary \u00b6 Members Descriptions public void midi_device_init ( MidiDevice * device) Initialize a device. public void midi_device_process ( MidiDevice * device) Process input data. Members \u00b6 public void midi_device_init ( MidiDevice * device) \u00b6 Initialize a device. You must call this before using the device in question. Parameters \u00b6 device the device to initialize public void midi_device_process ( MidiDevice * device) \u00b6 Process input data. This method drives the input processing, you must call this method frequently if you expect to have your input callbacks called. Parameters \u00b6 device the device to process","title":"Midi\u8bbe\u5907\u914d\u7f6e\u8fc7\u7a0b"},{"location":"internals_midi_device_setup_process/#group__midi__device__setup__process","text":"These are method that you must use to initialize and run a device.","title":"group midi_device_setup_process"},{"location":"internals_midi_device_setup_process/#summary","text":"Members Descriptions public void midi_device_init ( MidiDevice * device) Initialize a device. public void midi_device_process ( MidiDevice * device) Process input data.","title":"Summary"},{"location":"internals_midi_device_setup_process/#members","text":"","title":"Members"},{"location":"internals_midi_util/","text":"group midi_util \u00b6 Summary \u00b6 Members Descriptions enum midi_packet_length_t An enumeration of the possible packet length values. public bool midi_is_statusbyte (uint8_t theByte) Test to see if the byte given is a status byte. public bool midi_is_realtime (uint8_t theByte) Test to see if the byte given is a realtime message. public midi_packet_length_t midi_packet_length (uint8_t status) Find the length of the packet associated with the status byte given. Members \u00b6 enum midi_packet_length_t \u00b6 Values Descriptions UNDEFINED ONE TWO THREE An enumeration of the possible packet length values. public bool midi_is_statusbyte (uint8_t theByte) \u00b6 Test to see if the byte given is a status byte. Parameters \u00b6 theByte the byte to test Returns \u00b6 true if the byte given is a midi status byte public bool midi_is_realtime (uint8_t theByte) \u00b6 Test to see if the byte given is a realtime message. Parameters \u00b6 theByte the byte to test Returns \u00b6 true if it is a realtime message, false otherwise public midi_packet_length_t midi_packet_length (uint8_t status) \u00b6 Find the length of the packet associated with the status byte given. Parameters \u00b6 status the status byte Returns \u00b6 the length of the packet, will return UNDEFINED if the byte is not a status byte or if it is a sysex status byte","title":"Midi\u5de5\u5177\u5e93"},{"location":"internals_midi_util/#group__midi__util","text":"","title":"group midi_util"},{"location":"internals_midi_util/#summary","text":"Members Descriptions enum midi_packet_length_t An enumeration of the possible packet length values. public bool midi_is_statusbyte (uint8_t theByte) Test to see if the byte given is a status byte. public bool midi_is_realtime (uint8_t theByte) Test to see if the byte given is a realtime message. public midi_packet_length_t midi_packet_length (uint8_t status) Find the length of the packet associated with the status byte given.","title":"Summary"},{"location":"internals_midi_util/#members","text":"","title":"Members"},{"location":"internals_send_functions/","text":"group send_functions \u00b6 These are the functions you use to send midi data through a device. Summary \u00b6 Members Descriptions public void midi_send_cc ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t val) Send a control change message (cc) via the given device. public void midi_send_noteon ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) Send a note on message via the given device. public void midi_send_noteoff ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) Send a note off message via the given device. public void midi_send_aftertouch ( MidiDevice * device,uint8_t chan,uint8_t note_num,uint8_t amt) Send an after touch message via the given device. public void midi_send_pitchbend ( MidiDevice * device,uint8_t chan,int16_t amt) Send a pitch bend message via the given device. public void midi_send_programchange ( MidiDevice * device,uint8_t chan,uint8_t num) Send a program change message via the given device. public void midi_send_channelpressure ( MidiDevice * device,uint8_t chan,uint8_t amt) Send a channel pressure message via the given device. public void midi_send_clock ( MidiDevice * device) Send a clock message via the given device. public void midi_send_tick ( MidiDevice * device) Send a tick message via the given device. public void midi_send_start ( MidiDevice * device) Send a start message via the given device. public void midi_send_continue ( MidiDevice * device) Send a continue message via the given device. public void midi_send_stop ( MidiDevice * device) Send a stop message via the given device. public void midi_send_activesense ( MidiDevice * device) Send an active sense message via the given device. public void midi_send_reset ( MidiDevice * device) Send a reset message via the given device. public void midi_send_tcquarterframe ( MidiDevice * device,uint8_t time) Send a tc quarter frame message via the given device. public void midi_send_songposition ( MidiDevice * device,uint16_t pos) Send a song position message via the given device. public void midi_send_songselect ( MidiDevice * device,uint8_t song) Send a song select message via the given device. public void midi_send_tunerequest ( MidiDevice * device) Send a tune request message via the given device. public void midi_send_byte ( MidiDevice * device,uint8_t b) Send a byte via the given device. public void midi_send_data ( MidiDevice * device,uint16_t count,uint8_t byte0,uint8_t byte1,uint8_t byte2) Send up to 3 bytes of data. public void midi_send_array ( MidiDevice * device,uint16_t count,uint8_t * array) Send an array of formatted midi data. Members \u00b6 public void midi_send_cc ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t val) \u00b6 Send a control change message (cc) via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 num the cc num val the value of that cc num public void midi_send_noteon ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) \u00b6 Send a note on message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 num the note number vel the note velocity public void midi_send_noteoff ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) \u00b6 Send a note off message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 num the note number vel the note velocity public void midi_send_aftertouch ( MidiDevice * device,uint8_t chan,uint8_t note_num,uint8_t amt) \u00b6 Send an after touch message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 note_num the note number amt the after touch amount public void midi_send_pitchbend ( MidiDevice * device,uint8_t chan,int16_t amt) \u00b6 Send a pitch bend message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 amt the bend amount range: -8192..8191, 0 means no bend public void midi_send_programchange ( MidiDevice * device,uint8_t chan,uint8_t num) \u00b6 Send a program change message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 num the program to change to public void midi_send_channelpressure ( MidiDevice * device,uint8_t chan,uint8_t amt) \u00b6 Send a channel pressure message via the given device. Parameters \u00b6 device the device to use for sending chan the channel to send on, 0-15 amt the amount of channel pressure public void midi_send_clock ( MidiDevice * device) \u00b6 Send a clock message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_tick ( MidiDevice * device) \u00b6 Send a tick message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_start ( MidiDevice * device) \u00b6 Send a start message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_continue ( MidiDevice * device) \u00b6 Send a continue message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_stop ( MidiDevice * device) \u00b6 Send a stop message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_activesense ( MidiDevice * device) \u00b6 Send an active sense message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_reset ( MidiDevice * device) \u00b6 Send a reset message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_tcquarterframe ( MidiDevice * device,uint8_t time) \u00b6 Send a tc quarter frame message via the given device. Parameters \u00b6 device the device to use for sending time the time of this quarter frame, range 0..16383 public void midi_send_songposition ( MidiDevice * device,uint16_t pos) \u00b6 Send a song position message via the given device. Parameters \u00b6 device the device to use for sending pos the song position public void midi_send_songselect ( MidiDevice * device,uint8_t song) \u00b6 Send a song select message via the given device. Parameters \u00b6 device the device to use for sending song the song to select public void midi_send_tunerequest ( MidiDevice * device) \u00b6 Send a tune request message via the given device. Parameters \u00b6 device the device to use for sending public void midi_send_byte ( MidiDevice * device,uint8_t b) \u00b6 Send a byte via the given device. This is a generic method for sending data via the given midi device. This would be useful for sending sysex data or messages that are not implemented in this API, if there are any. Please contact the author if you find some so we can add them. Parameters \u00b6 device the device to use for sending b the byte to send public void midi_send_data ( MidiDevice * device,uint16_t count,uint8_t byte0,uint8_t byte1,uint8_t byte2) \u00b6 Send up to 3 bytes of data. % 4 is applied to count so that you can use this to pass sysex through Parameters \u00b6 device the device to use for sending count the count of bytes to send, %4 is applied byte0 the first byte byte1 the second byte, ignored if cnt % 4 != 2 byte2 the third byte, ignored if cnt % 4 != 3 public void midi_send_array ( MidiDevice * device,uint16_t count,uint8_t * array) \u00b6 Send an array of formatted midi data. Can be used for sysex. Parameters \u00b6 device the device to use for sending count the count of bytes to send array the array of bytes","title":"\u53d1\u9001\u51fd\u6570"},{"location":"internals_send_functions/#group__send__functions","text":"These are the functions you use to send midi data through a device.","title":"group send_functions"},{"location":"internals_send_functions/#summary","text":"Members Descriptions public void midi_send_cc ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t val) Send a control change message (cc) via the given device. public void midi_send_noteon ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) Send a note on message via the given device. public void midi_send_noteoff ( MidiDevice * device,uint8_t chan,uint8_t num,uint8_t vel) Send a note off message via the given device. public void midi_send_aftertouch ( MidiDevice * device,uint8_t chan,uint8_t note_num,uint8_t amt) Send an after touch message via the given device. public void midi_send_pitchbend ( MidiDevice * device,uint8_t chan,int16_t amt) Send a pitch bend message via the given device. public void midi_send_programchange ( MidiDevice * device,uint8_t chan,uint8_t num) Send a program change message via the given device. public void midi_send_channelpressure ( MidiDevice * device,uint8_t chan,uint8_t amt) Send a channel pressure message via the given device. public void midi_send_clock ( MidiDevice * device) Send a clock message via the given device. public void midi_send_tick ( MidiDevice * device) Send a tick message via the given device. public void midi_send_start ( MidiDevice * device) Send a start message via the given device. public void midi_send_continue ( MidiDevice * device) Send a continue message via the given device. public void midi_send_stop ( MidiDevice * device) Send a stop message via the given device. public void midi_send_activesense ( MidiDevice * device) Send an active sense message via the given device. public void midi_send_reset ( MidiDevice * device) Send a reset message via the given device. public void midi_send_tcquarterframe ( MidiDevice * device,uint8_t time) Send a tc quarter frame message via the given device. public void midi_send_songposition ( MidiDevice * device,uint16_t pos) Send a song position message via the given device. public void midi_send_songselect ( MidiDevice * device,uint8_t song) Send a song select message via the given device. public void midi_send_tunerequest ( MidiDevice * device) Send a tune request message via the given device. public void midi_send_byte ( MidiDevice * device,uint8_t b) Send a byte via the given device. public void midi_send_data ( MidiDevice * device,uint16_t count,uint8_t byte0,uint8_t byte1,uint8_t byte2) Send up to 3 bytes of data. public void midi_send_array ( MidiDevice * device,uint16_t count,uint8_t * array) Send an array of formatted midi data.","title":"Summary"},{"location":"internals_send_functions/#members","text":"","title":"Members"},{"location":"internals_sysex_tools/","text":"group sysex_tools \u00b6 Summary \u00b6 Members Descriptions public uint16_t sysex_encoded_length (uint16_t decoded_length) Compute the length of a message after it is encoded. public uint16_t sysex_decoded_length (uint16_t encoded_length) Compute the length of a message after it is decoded. public uint16_t sysex_encode (uint8_t * encoded,const uint8_t * source,uint16_t length) Encode data so that it can be transmitted safely in a sysex message. public uint16_t sysex_decode (uint8_t * decoded,const uint8_t * source,uint16_t length) Decode encoded data. Members \u00b6 public uint16_t sysex_encoded_length (uint16_t decoded_length) \u00b6 Compute the length of a message after it is encoded. Parameters \u00b6 decoded_length The length, in bytes, of the message to encode. Returns \u00b6 The length, in bytes, of the message after encodeing. public uint16_t sysex_decoded_length (uint16_t encoded_length) \u00b6 Compute the length of a message after it is decoded. Parameters \u00b6 encoded_length The length, in bytes, of the encoded message. Returns \u00b6 The length, in bytes, of the message after it is decoded. public uint16_t sysex_encode (uint8_t * encoded,const uint8_t * source,uint16_t length) \u00b6 Encode data so that it can be transmitted safely in a sysex message. Parameters \u00b6 encoded The output data buffer, must be at least sysex_encoded_length(length) bytes long. source The input buffer of data to be encoded. length The number of bytes from the input buffer to encode. Returns \u00b6 number of bytes encoded. public uint16_t sysex_decode (uint8_t * decoded,const uint8_t * source,uint16_t length) \u00b6 Decode encoded data. Parameters \u00b6 decoded The output data buffer, must be at least sysex_decoded_length(length) bytes long. source The input buffer of data to be decoded. length The number of bytes from the input buffer to decode. Returns \u00b6 number of bytes decoded.","title":"Sysex\u5de5\u5177"},{"location":"internals_sysex_tools/#group__sysex__tools","text":"","title":"group sysex_tools"},{"location":"internals_sysex_tools/#summary","text":"Members Descriptions public uint16_t sysex_encoded_length (uint16_t decoded_length) Compute the length of a message after it is encoded. public uint16_t sysex_decoded_length (uint16_t encoded_length) Compute the length of a message after it is decoded. public uint16_t sysex_encode (uint8_t * encoded,const uint8_t * source,uint16_t length) Encode data so that it can be transmitted safely in a sysex message. public uint16_t sysex_decode (uint8_t * decoded,const uint8_t * source,uint16_t length) Decode encoded data.","title":"Summary"},{"location":"internals_sysex_tools/#members","text":"","title":"Members"},{"location":"isp_flashing_guide/","text":"ISP Flashing Guide \u00b6 ISP flashing (also known as ICSP flashing) is the process of programming a microcontroller directly. This allows you to replace the bootloader, or change the \"fuses\" on the controller, which control a number of hardware- and software-related functions, such as the speed of the controller, how it boots, and other options. The main use of ISP flashing for QMK is flashing or replacing the bootloader on your AVR-based controller (Pro Micros, or V-USB chips). Info This is only for programming AVR based boards, such as the Pro Micro or other ATmega controllers. It is not for Arm controllers, such as the Proton C. Dealing with Corrupted Bootloaders \u00b6 If you're having trouble flashing/erasing your board, and running into cryptic error messages like any of the following for a DFU based controller: libusb: warning [darwin_transfer_status] transfer error: timed out dfu.c:844: -ETIMEDOUT: Transfer timed out, NAK 0xffffffc4 (-60) atmel.c:1627: atmel_flash: flash data dfu_download failed. atmel.c:1629: Expected message length of 1072, got -60. atmel.c:1434: Error flashing the block: err -2. ERROR Memory write error, use debug for more info. commands.c:360: Error writing memory data. (err -4) dfu.c:844: -EPIPE: a) Babble detect or b) Endpoint stalled 0xffffffe0 (-32) Device is write protected. dfu.c:252: dfu_clear_status( 0x7fff4fc2ea80 ) atmel.c:1434: Error flashing the block: err -2. ERROR Memory write error, use debug for more info. commands.c:360: Error writing memory data. (err -4) Or, if you see this sort of message for a Pro Micro based controller: avrdude: butterfly_recv(): programmer is not responding avrdude: butterfly_recv(): programmer is not responding avrdude: verification error, first mismatch at byte 0x002a 0x2b != 0x75 avrdude: verification error; content mismatch avrdude: verification error; content mismatch You're likely going to need to ISP flash your board/device to get it working again. Hardware Needed \u00b6 You'll need one of the following to actually perform the ISP flashing (followed by the protocol they use): SparkFun PocketAVR - (USB Tiny) USBtinyISP AVR Programmer Kit - (USB Tiny) USBasp - (usbasp) Teensy 2.0 - (avrisp) Pro Micro - (avrisp) Bus Pirate - (buspirate) There are other devices that can be used to ISP flash, but these are the main ones. Also, all product links are to the official versions. You can source them elsewhere. You'll also need something to wire your \"ISP Programmer\" to the device that you're programming. Some PCBs may have ISP headers that you can use directly, but this often isn't the case, so you'll likely need to solder to the controller itself or to different switches or other components. The ISP Firmware \u00b6 The Teensy and Pro Micro controllers will need you to flash the ISP firmware to the controllers before you can use them as an ISP programmer. The rest of the hardware should come preprogrammed. So, for these controllers, download the correct hex file, and flash it first. Teensy 2.0: util/teensy_2.0_ISP_B0.hex ( B0 ) Pro Micro: util/pro_micro_ISP_B6_10.hex ( 10/B6 ) Once you've flashed your controller, you won't need this hex file anymore. Software Needed \u00b6 The QMK Toolbox can be used for most (all) of this. However, you can grab the Teensy Loader to flash your Teensy 2.0 board, if you are using that. Or you can use avrdude (installed as part of qmk_install.sh ), or AVRDUDESS (for Windows) to flash the Pro Micro, and the ISP flashing. Wiring \u00b6 This is pretty straight-forward - we'll be connecting like-things to like-things in the following manner. SparkFun Pocket AVR \u00b6 PocketAVR RST <-> Keyboard RESET PocketAVR SCLK <-> Keyboard B1 (SCLK) PocketAVR MOSI <-> Keyboard B2 (MOSI) PocketAVR MISO <-> Keyboard B3 (MISO) PocketAVR VCC <-> Keyboard VCC PocketAVR GND <-> Keyboard GND USBasp \u00b6 USBasp RST <-> Keyboard RESET USBasp SCLK <-> Keyboard B1 (SCLK) USBasp MOSI <-> Keyboard B2 (MOSI) USBasp MISO <-> Keyboard B3 (MISO) USBasp VCC <-> Keyboard VCC USBasp GND <-> Keyboard GND Teensy 2.0 \u00b6 Teensy B0 <-> Keyboard RESET Teensy B1 <-> Keyboard B1 (SCLK) Teensy B2 <-> Keyboard B2 (MOSI) Teensy B3 <-> Keyboard B3 (MISO) Teensy VCC <-> Keyboard VCC Teensy GND <-> Keyboard GND Note The B0 pin on the Teensy is wired to the RESET/RST pin on the keyboard's controller. DO NOT wire the RESET pin on the Teensy to the RESET on the keyboard. Pro Micro \u00b6 Pro Micro 10 (B6) <-> Keyboard RESET Pro Micro 15 (B1) <-> Keyboard B1 (SCLK) Pro Micro 16 (B2) <-> Keyboard B2 (MOSI) Pro Micro 14 (B3) <-> Keyboard B3 (MISO) Pro Micro VCC <-> Keyboard VCC Pro Micro GND <-> Keyboard GND Note The 10/B6 pin on the Pro Micro is wired to the RESET/RST pin on the keyboard's controller. DO NOT wire the RESET pin on the Pro Micro to the RESET on the keyboard. Flashing Your Keyboard \u00b6 After you have your ISP programmer set up, and wired to your keyboard, it's time to flash your keyboard. The Bootloader File \u00b6 The simplest and quickest way to get things back to normal is to flash only a bootloader to the keyboard. Once this is done, you can connect the keyboard normally and flash the keyboard like you normally would. You can find the stock bootloaders in the util/ folder . Be sure to flash the correct bootloader for your chip: Atmel DFU ATmega16U4 ATmega32U4 AT90USB64 AT90USB128 Caterina Pro Micro (5V/16MHz) Pro Micro (3.3V/8MHz) BootloadHID (PS2AVRGB) ATmega32A If you're not sure what your board uses, look in the rules.mk file for the keyboard in QMK. The MCU and BOOTLOADER lines will have the value you need. It may differ between different versions of the board. Production Techniques \u00b6 If you'd like to flash both the bootloader and the regular firmware at the same time, there are two options to do so. Manually, or with the :production target when compiling. To do this manually: Open the original firmware .hex file in a text editor Remove the last line (which should be :00000001FF - this is an EOF message) Copy the entire bootloader's contents onto a new line (with no empty lines between) and paste it at the end of the original file Save it as a new file by naming it <keyboard>_<keymap>_production.hex Tip It's possible to use other bootloaders here in the same way, but you need a bootloader , otherwise you'll have to use ISP again to write new firmware to your keyboard. Create QMK DFU Bootloader and Production images \u00b6 You can create the firmware, the QMK DFU Bootloader and the production firmware images for the board using the :production target when compiling. Once this is done, you'll see three files: * <keyboard>_<keymap>.hex * <keyboard>_<keymap>_bootloader.hex * <keyboard>_<keymap>_production.hex The QMK DFU bootloader has only really been tested on atmega32u4 controllers (such as the AVR based Planck boards, and the Pro Micro), and hasn't been tested on other controllers. However, it will definitely not work on V-USB controllers, such as the atmega32a or atmega328p . You can flash either the bootloader or the production firmware file. The production firmware file will take a lot longer to flash, since it's flashing a lot more data. Note You should stay with the same bootloader. If you're using DFU already, switching to QMK DFU is fine. But flashing QMK DFU onto a Pro Micro, for instance, has additional steps needed. Flashing Your Bootloader/Production File \u00b6 Make sure your keyboard is unplugged from any device, and plug in your ISP Programmer. If you want to change bootloader types, You'll need to use the command line. QMK Toolbox \u00b6 AVRISP device connected or USB Tiny device connected will show up in yellow Select the correct bootloader/production .hex file with the Open dialog (spaces can't be in the path) Be sure the correct Microcontroller option for the keyboard you're flashing (not the ISP programmer) is selected Hit Flash Wait, as nothing will output for a while, especially with production files If the verification and fuse checks are ok, you're done! Your board may restart automatically, otherwise, unplug your Teensy and plug in your keyboard - you can leave your Teensy wired to your keyboard while testing things, but it's recommended that you desolder it/remove the wiring once you're sure everything works. Command Line \u00b6 Open a terminal ( cmd on Windows, for instance) and navigate to your where your modified .hex file is. We'll pretend this file is called main.hex , and that your Teensy 2.0 is on the COM3 port - if you're unsure, you can open your Device Manager, and look for Ports > USB Serial Device . Use that COM port here. You can confirm it's the right port with: avrdude -c avrisp -P COM3 -p atmega32u4 and you should get something like the following output: avrdude: AVR device initialized and ready to accept instructions Reading | ################################################## | 100% 0.02s avrdude: Device signature = 0x1e9587 avrdude: safemode: Fuses OK avrdude done. Thank you. Since our keyboard uses an atmega32u4 (common), that is the chip we'll specify. This is the full command: avrdude -c avrisp -P COM3 -p atmega32u4 -U flash:w:main.hex:i If your board uses an atmega32a (e.g. on a jj40), the command is this (the extra code at the end sets the fuses correctly): avrdude -c avrisp -P COM3 -p atmega32 -U flash:w:main.hex:i -U hfuse:w:0xD0:m -U lfuse:w:0x0F:m You should see a couple of progress bars, then you should see: avrdude: verifying ... avrdude: 32768 bytes of flash verified avrdude: safemode: Fuses OK avrdude done. Thank you. Which means everything should be ok! Your board may restart automatically, otherwise, unplug your Teensy and plug in your keyboard - you can leave your Teensy wired to your keyboard while testing things, but it's recommended that you desolder it/remove the wiring once you're sure everything works. If you're using a SparkFun PocketAVR Programmer, or another USB Tiny based ISP programmer, you will want to use something like this: avrdude -c usbtiny -P usb -p atmega32u4 Advanced: Changing Fuses \u00b6 If you're switching bootloaders, such as flashing QMK DFU on a Pro Micro, you will need to change the fuses, in additional to flashing the bootloader hex file. This is because caterina (the Pro Micro bootloader) and dfu handle the startup routines differently, and that behavior is controlled by the fuses. Tip This is one area that it is very important to be careful, as changing fuses is one of the ways that you can permanently brick your controller. For this, we are assuming the 5V 16MHz versions of the atmega32u4 (such as the 5V Pro Micro). For DFU on the atmega32u4 , these are the fuse settings that you want: Fuse Setting Low 0x5E High 0xD9 or 0x99 Extended 0xC3 The High fuse can be 0xD9 or 0x99. The difference is that 0xD9 disables JTAG, which QMK Firmware disables via software as well, while 0x99 doesn't disable JTAG. To set this add -U lfuse:w:0x5E:m -U hfuse:w:0xD9:m -U efuse:w:0xC3:m to your command. So the final command should look something like: avrdude -c avrisp -P COM3 -p atmega32u4 -U flash:w:main.hex:i -U lfuse:w:0x5E:m -U hfuse:w:0xD9:m -U efuse:w:0xC3:m For Caterina on the atmega32u4 , these are the fuse settings that you want: Fuse Setting Low 0xFF High 0xD8 Extended 0xCB To set this add -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xCB:m to your command. So the final command should look something like: avrdude -c avrisp -P COM3 -p atmega32u4 -U flash:w:main.hex:i -U lfuse:w:0xFF:m -U hfuse:w:0xD8:m -U efuse:w:0xCB:m If you are using a different controller or want different configuration, you can use this AVR Fuse Calculator to find a better value for you. Help \u00b6 If you have any questions/problems, feel free to open an issue !","title":"ISP\u5237\u65b0\u6307\u5357"},{"location":"isp_flashing_guide/#isp-flashing-guide","text":"ISP flashing (also known as ICSP flashing) is the process of programming a microcontroller directly. This allows you to replace the bootloader, or change the \"fuses\" on the controller, which control a number of hardware- and software-related functions, such as the speed of the controller, how it boots, and other options. The main use of ISP flashing for QMK is flashing or replacing the bootloader on your AVR-based controller (Pro Micros, or V-USB chips). Info This is only for programming AVR based boards, such as the Pro Micro or other ATmega controllers. It is not for Arm controllers, such as the Proton C.","title":"ISP Flashing Guide"},{"location":"isp_flashing_guide/#dealing-with-corrupted-bootloaders","text":"If you're having trouble flashing/erasing your board, and running into cryptic error messages like any of the following for a DFU based controller: libusb: warning [darwin_transfer_status] transfer error: timed out dfu.c:844: -ETIMEDOUT: Transfer timed out, NAK 0xffffffc4 (-60) atmel.c:1627: atmel_flash: flash data dfu_download failed. atmel.c:1629: Expected message length of 1072, got -60. atmel.c:1434: Error flashing the block: err -2. ERROR Memory write error, use debug for more info. commands.c:360: Error writing memory data. (err -4) dfu.c:844: -EPIPE: a) Babble detect or b) Endpoint stalled 0xffffffe0 (-32) Device is write protected. dfu.c:252: dfu_clear_status( 0x7fff4fc2ea80 ) atmel.c:1434: Error flashing the block: err -2. ERROR Memory write error, use debug for more info. commands.c:360: Error writing memory data. (err -4) Or, if you see this sort of message for a Pro Micro based controller: avrdude: butterfly_recv(): programmer is not responding avrdude: butterfly_recv(): programmer is not responding avrdude: verification error, first mismatch at byte 0x002a 0x2b != 0x75 avrdude: verification error; content mismatch avrdude: verification error; content mismatch You're likely going to need to ISP flash your board/device to get it working again.","title":"Dealing with Corrupted Bootloaders"},{"location":"isp_flashing_guide/#hardware-needed","text":"You'll need one of the following to actually perform the ISP flashing (followed by the protocol they use): SparkFun PocketAVR - (USB Tiny) USBtinyISP AVR Programmer Kit - (USB Tiny) USBasp - (usbasp) Teensy 2.0 - (avrisp) Pro Micro - (avrisp) Bus Pirate - (buspirate) There are other devices that can be used to ISP flash, but these are the main ones. Also, all product links are to the official versions. You can source them elsewhere. You'll also need something to wire your \"ISP Programmer\" to the device that you're programming. Some PCBs may have ISP headers that you can use directly, but this often isn't the case, so you'll likely need to solder to the controller itself or to different switches or other components.","title":"Hardware Needed"},{"location":"isp_flashing_guide/#the-isp-firmware","text":"The Teensy and Pro Micro controllers will need you to flash the ISP firmware to the controllers before you can use them as an ISP programmer. The rest of the hardware should come preprogrammed. So, for these controllers, download the correct hex file, and flash it first. Teensy 2.0: util/teensy_2.0_ISP_B0.hex ( B0 ) Pro Micro: util/pro_micro_ISP_B6_10.hex ( 10/B6 ) Once you've flashed your controller, you won't need this hex file anymore.","title":"The ISP Firmware"},{"location":"isp_flashing_guide/#software-needed","text":"The QMK Toolbox can be used for most (all) of this. However, you can grab the Teensy Loader to flash your Teensy 2.0 board, if you are using that. Or you can use avrdude (installed as part of qmk_install.sh ), or AVRDUDESS (for Windows) to flash the Pro Micro, and the ISP flashing.","title":"Software Needed"},{"location":"isp_flashing_guide/#wiring","text":"This is pretty straight-forward - we'll be connecting like-things to like-things in the following manner.","title":"Wiring"},{"location":"isp_flashing_guide/#sparkfun-pocket-avr","text":"PocketAVR RST <-> Keyboard RESET PocketAVR SCLK <-> Keyboard B1 (SCLK) PocketAVR MOSI <-> Keyboard B2 (MOSI) PocketAVR MISO <-> Keyboard B3 (MISO) PocketAVR VCC <-> Keyboard VCC PocketAVR GND <-> Keyboard GND","title":"SparkFun Pocket AVR"},{"location":"isp_flashing_guide/#usbasp","text":"USBasp RST <-> Keyboard RESET USBasp SCLK <-> Keyboard B1 (SCLK) USBasp MOSI <-> Keyboard B2 (MOSI) USBasp MISO <-> Keyboard B3 (MISO) USBasp VCC <-> Keyboard VCC USBasp GND <-> Keyboard GND","title":"USBasp"},{"location":"isp_flashing_guide/#teensy-20","text":"Teensy B0 <-> Keyboard RESET Teensy B1 <-> Keyboard B1 (SCLK) Teensy B2 <-> Keyboard B2 (MOSI) Teensy B3 <-> Keyboard B3 (MISO) Teensy VCC <-> Keyboard VCC Teensy GND <-> Keyboard GND Note The B0 pin on the Teensy is wired to the RESET/RST pin on the keyboard's controller. DO NOT wire the RESET pin on the Teensy to the RESET on the keyboard.","title":"Teensy 2.0"},{"location":"isp_flashing_guide/#pro-micro","text":"Pro Micro 10 (B6) <-> Keyboard RESET Pro Micro 15 (B1) <-> Keyboard B1 (SCLK) Pro Micro 16 (B2) <-> Keyboard B2 (MOSI) Pro Micro 14 (B3) <-> Keyboard B3 (MISO) Pro Micro VCC <-> Keyboard VCC Pro Micro GND <-> Keyboard GND Note The 10/B6 pin on the Pro Micro is wired to the RESET/RST pin on the keyboard's controller. DO NOT wire the RESET pin on the Pro Micro to the RESET on the keyboard.","title":"Pro Micro"},{"location":"isp_flashing_guide/#flashing-your-keyboard","text":"After you have your ISP programmer set up, and wired to your keyboard, it's time to flash your keyboard.","title":"Flashing Your Keyboard"},{"location":"isp_flashing_guide/#the-bootloader-file","text":"The simplest and quickest way to get things back to normal is to flash only a bootloader to the keyboard. Once this is done, you can connect the keyboard normally and flash the keyboard like you normally would. You can find the stock bootloaders in the util/ folder . Be sure to flash the correct bootloader for your chip: Atmel DFU ATmega16U4 ATmega32U4 AT90USB64 AT90USB128 Caterina Pro Micro (5V/16MHz) Pro Micro (3.3V/8MHz) BootloadHID (PS2AVRGB) ATmega32A If you're not sure what your board uses, look in the rules.mk file for the keyboard in QMK. The MCU and BOOTLOADER lines will have the value you need. It may differ between different versions of the board.","title":"The Bootloader File"},{"location":"isp_flashing_guide/#production-techniques","text":"If you'd like to flash both the bootloader and the regular firmware at the same time, there are two options to do so. Manually, or with the :production target when compiling. To do this manually: Open the original firmware .hex file in a text editor Remove the last line (which should be :00000001FF - this is an EOF message) Copy the entire bootloader's contents onto a new line (with no empty lines between) and paste it at the end of the original file Save it as a new file by naming it <keyboard>_<keymap>_production.hex Tip It's possible to use other bootloaders here in the same way, but you need a bootloader , otherwise you'll have to use ISP again to write new firmware to your keyboard.","title":"Production Techniques"},{"location":"isp_flashing_guide/#flashing-your-bootloaderproduction-file","text":"Make sure your keyboard is unplugged from any device, and plug in your ISP Programmer. If you want to change bootloader types, You'll need to use the command line.","title":"Flashing Your Bootloader/Production File"},{"location":"isp_flashing_guide/#qmk-toolbox","text":"AVRISP device connected or USB Tiny device connected will show up in yellow Select the correct bootloader/production .hex file with the Open dialog (spaces can't be in the path) Be sure the correct Microcontroller option for the keyboard you're flashing (not the ISP programmer) is selected Hit Flash Wait, as nothing will output for a while, especially with production files If the verification and fuse checks are ok, you're done! Your board may restart automatically, otherwise, unplug your Teensy and plug in your keyboard - you can leave your Teensy wired to your keyboard while testing things, but it's recommended that you desolder it/remove the wiring once you're sure everything works.","title":"QMK Toolbox"},{"location":"isp_flashing_guide/#command-line","text":"Open a terminal ( cmd on Windows, for instance) and navigate to your where your modified .hex file is. We'll pretend this file is called main.hex , and that your Teensy 2.0 is on the COM3 port - if you're unsure, you can open your Device Manager, and look for Ports > USB Serial Device . Use that COM port here. You can confirm it's the right port with: avrdude -c avrisp -P COM3 -p atmega32u4 and you should get something like the following output: avrdude: AVR device initialized and ready to accept instructions Reading | ################################################## | 100% 0.02s avrdude: Device signature = 0x1e9587 avrdude: safemode: Fuses OK avrdude done. Thank you. Since our keyboard uses an atmega32u4 (common), that is the chip we'll specify. This is the full command: avrdude -c avrisp -P COM3 -p atmega32u4 -U flash:w:main.hex:i If your board uses an atmega32a (e.g. on a jj40), the command is this (the extra code at the end sets the fuses correctly): avrdude -c avrisp -P COM3 -p atmega32 -U flash:w:main.hex:i -U hfuse:w:0xD0:m -U lfuse:w:0x0F:m You should see a couple of progress bars, then you should see: avrdude: verifying ... avrdude: 32768 bytes of flash verified avrdude: safemode: Fuses OK avrdude done. Thank you. Which means everything should be ok! Your board may restart automatically, otherwise, unplug your Teensy and plug in your keyboard - you can leave your Teensy wired to your keyboard while testing things, but it's recommended that you desolder it/remove the wiring once you're sure everything works. If you're using a SparkFun PocketAVR Programmer, or another USB Tiny based ISP programmer, you will want to use something like this: avrdude -c usbtiny -P usb -p atmega32u4","title":"Command Line"},{"location":"isp_flashing_guide/#help","text":"If you have any questions/problems, feel free to open an issue !","title":"Help"},{"location":"keycodes/","text":"Keycodes Overview \u00b6 When defining a keymap each key needs a valid key definition. This page documents the symbols that correspond to keycodes that are available to you in QMK. This is a reference only. Each group of keys links to the page documenting their functionality in more detail. Basic Keycodes \u00b6 See also: Basic Keycodes Key Aliases Description Windows macOS Linux 1 KC_NO XXXXXXX Ignore this key (NOOP) N/A N/A N/A KC_TRANSPARENT KC_TRNS , _______ Use the next lowest non-transparent key N/A N/A N/A KC_A a and A \u2714 \u2714 \u2714 KC_B b and B \u2714 \u2714 \u2714 KC_C c and C \u2714 \u2714 \u2714 KC_D d and D \u2714 \u2714 \u2714 KC_E e and E \u2714 \u2714 \u2714 KC_F f and F \u2714 \u2714 \u2714 KC_G g and G \u2714 \u2714 \u2714 KC_H h and H \u2714 \u2714 \u2714 KC_I i and I \u2714 \u2714 \u2714 KC_J j and J \u2714 \u2714 \u2714 KC_K k and K \u2714 \u2714 \u2714 KC_L l and L \u2714 \u2714 \u2714 KC_M m and M \u2714 \u2714 \u2714 KC_N n and N \u2714 \u2714 \u2714 KC_O o and O \u2714 \u2714 \u2714 KC_P p and P \u2714 \u2714 \u2714 KC_Q q and Q \u2714 \u2714 \u2714 KC_R r and R \u2714 \u2714 \u2714 KC_S s and S \u2714 \u2714 \u2714 KC_T t and T \u2714 \u2714 \u2714 KC_U u and U \u2714 \u2714 \u2714 KC_V v and V \u2714 \u2714 \u2714 KC_W w and W \u2714 \u2714 \u2714 KC_X x and X \u2714 \u2714 \u2714 KC_Y y and Y \u2714 \u2714 \u2714 KC_Z z and Z \u2714 \u2714 \u2714 KC_1 1 and ! \u2714 \u2714 \u2714 KC_2 2 and @ \u2714 \u2714 \u2714 KC_3 3 and # \u2714 \u2714 \u2714 KC_4 4 and $ \u2714 \u2714 \u2714 KC_5 5 and % \u2714 \u2714 \u2714 KC_6 6 and ^ \u2714 \u2714 \u2714 KC_7 7 and & \u2714 \u2714 \u2714 KC_8 8 and * \u2714 \u2714 \u2714 KC_9 9 and ( \u2714 \u2714 \u2714 KC_0 0 and ) \u2714 \u2714 \u2714 KC_ENTER KC_ENT Return (Enter) \u2714 \u2714 \u2714 KC_ESCAPE KC_ESC Escape \u2714 \u2714 \u2714 KC_BSPACE KC_BSPC Delete (Backspace) \u2714 \u2714 \u2714 KC_TAB Tab \u2714 \u2714 \u2714 KC_SPACE KC_SPC Spacebar \u2714 \u2714 \u2714 KC_MINUS KC_MINS - and _ \u2714 \u2714 \u2714 KC_EQUAL KC_EQL = and + \u2714 \u2714 \u2714 KC_LBRACKET KC_LBRC [ and { \u2714 \u2714 \u2714 KC_RBRACKET KC_RBRC ] and } \u2714 \u2714 \u2714 KC_BSLASH KC_BSLS \\ and \\| \u2714 \u2714 \u2714 KC_NONUS_HASH KC_NUHS Non-US # and ~ \u2714 \u2714 \u2714 KC_SCOLON KC_SCLN ; and : \u2714 \u2714 \u2714 KC_QUOTE KC_QUOT ' and \" \u2714 \u2714 \u2714 KC_GRAVE KC_GRV , KC_ZKHK ` and ~ , JIS Zenkaku/Hankaku \u2714 \u2714 \u2714 KC_COMMA KC_COMM , and < \u2714 \u2714 \u2714 KC_DOT . and > \u2714 \u2714 \u2714 KC_SLASH KC_SLSH / and ? \u2714 \u2714 \u2714 KC_CAPSLOCK KC_CLCK , KC_CAPS Caps Lock \u2714 \u2714 \u2714 KC_F1 F1 \u2714 \u2714 \u2714 KC_F2 F2 \u2714 \u2714 \u2714 KC_F3 F3 \u2714 \u2714 \u2714 KC_F4 F4 \u2714 \u2714 \u2714 KC_F5 F5 \u2714 \u2714 \u2714 KC_F6 F6 \u2714 \u2714 \u2714 KC_F7 F7 \u2714 \u2714 \u2714 KC_F8 F8 \u2714 \u2714 \u2714 KC_F9 F9 \u2714 \u2714 \u2714 KC_F10 F10 \u2714 \u2714 \u2714 KC_F11 F11 \u2714 \u2714 \u2714 KC_F12 F12 \u2714 \u2714 \u2714 KC_PSCREEN KC_PSCR Print Screen \u2714 \u2714 2 \u2714 KC_SCROLLLOCK KC_SLCK , KC_BRMD Scroll Lock, Brightness Down (macOS) \u2714 \u2714 2 \u2714 KC_PAUSE KC_PAUS , KC_BRK , KC_BRMU Pause, Brightness Up (macOS) \u2714 \u2714 2 \u2714 KC_INSERT KC_INS Insert \u2714 \u2714 KC_HOME Home \u2714 \u2714 \u2714 KC_PGUP Page Up \u2714 \u2714 \u2714 KC_DELETE KC_DEL Forward Delete \u2714 \u2714 \u2714 KC_END End \u2714 \u2714 \u2714 KC_PGDOWN KC_PGDN Page Down \u2714 \u2714 \u2714 KC_RIGHT KC_RGHT Right Arrow \u2714 \u2714 \u2714 KC_LEFT Left Arrow \u2714 \u2714 \u2714 KC_DOWN Down Arrow \u2714 \u2714 \u2714 KC_UP Up Arrow \u2714 \u2714 \u2714 KC_NUMLOCK KC_NLCK Keypad Num Lock and Clear \u2714 \u2714 \u2714 KC_KP_SLASH KC_PSLS Keypad / \u2714 \u2714 \u2714 KC_KP_ASTERISK KC_PAST Keypad * \u2714 \u2714 \u2714 KC_KP_MINUS KC_PMNS Keypad - \u2714 \u2714 \u2714 KC_KP_PLUS KC_PPLS Keypad + \u2714 \u2714 \u2714 KC_KP_ENTER KC_PENT Keypad Enter \u2714 \u2714 \u2714 KC_KP_1 KC_P1 Keypad 1 and End \u2714 \u2714 \u2714 KC_KP_2 KC_P2 Keypad 2 and Down Arrow \u2714 \u2714 \u2714 KC_KP_3 KC_P3 Keypad 3 and Page Down \u2714 \u2714 \u2714 KC_KP_4 KC_P4 Keypad 4 and Left Arrow \u2714 \u2714 \u2714 KC_KP_5 KC_P5 Keypad 5 \u2714 \u2714 \u2714 KC_KP_6 KC_P6 Keypad 6 and Right Arrow \u2714 \u2714 \u2714 KC_KP_7 KC_P7 Keypad 7 and Home \u2714 \u2714 \u2714 KC_KP_8 KC_P8 Keypad 8 and Up Arrow \u2714 \u2714 \u2714 KC_KP_9 KC_P9 Keypad 9 and Page Up \u2714 \u2714 \u2714 KC_KP_0 KC_P0 Keypad 0 and Insert \u2714 \u2714 \u2714 KC_KP_DOT KC_PDOT Keypad . and Delete \u2714 \u2714 \u2714 KC_NONUS_BSLASH KC_NUBS Non-US \\ and \\| \u2714 \u2714 \u2714 KC_APPLICATION KC_APP Application (Windows Context Menu Key) \u2714 \u2714 KC_POWER System Power \u2714 3 \u2714 KC_KP_EQUAL KC_PEQL Keypad = \u2714 \u2714 \u2714 KC_F13 F13 \u2714 \u2714 \u2714 KC_F14 F14 \u2714 \u2714 \u2714 KC_F15 F15 \u2714 \u2714 \u2714 KC_F16 F16 \u2714 \u2714 \u2714 KC_F17 F17 \u2714 \u2714 \u2714 KC_F18 F18 \u2714 \u2714 \u2714 KC_F19 F19 \u2714 \u2714 \u2714 KC_F20 F20 \u2714 \u2714 KC_F21 F21 \u2714 \u2714 KC_F22 F22 \u2714 \u2714 KC_F23 F23 \u2714 \u2714 KC_F24 F24 \u2714 \u2714 KC_EXECUTE KC_EXEC Execute \u2714 KC_HELP Help \u2714 KC_MENU Menu \u2714 KC_SELECT KC_SLCT Select \u2714 KC_STOP Stop \u2714 KC_AGAIN KC_AGIN Again \u2714 KC_UNDO Undo \u2714 KC_CUT Cut \u2714 KC_COPY Copy \u2714 KC_PASTE KC_PSTE Paste \u2714 KC_FIND Find \u2714 KC__MUTE Mute \u2714 \u2714 KC__VOLUP Volume Up \u2714 \u2714 KC__VOLDOWN Volume Down \u2714 \u2714 KC_LOCKING_CAPS KC_LCAP Locking Caps Lock \u2714 \u2714 KC_LOCKING_NUM KC_LNUM Locking Num Lock \u2714 \u2714 KC_LOCKING_SCROLL KC_LSCR Locking Scroll Lock \u2714 \u2714 KC_KP_COMMA KC_PCMM Keypad , \u2714 KC_KP_EQUAL_AS400 Keypad = on AS/400 keyboards KC_INT1 KC_RO JIS \\ and _ \u2714 \u2714 KC_INT2 KC_KANA JIS Katakana/Hiragana \u2714 \u2714 KC_INT3 KC_JYEN JIS \u00a5 and \\| \u2714 \u2714 KC_INT4 KC_HENK JIS Henkan \u2714 \u2714 KC_INT5 KC_MHEN JIS Muhenkan \u2714 \u2714 KC_INT6 JIS Numpad , \u2714 KC_INT7 International 7 KC_INT8 International 8 KC_INT9 International 9 KC_LANG1 KC_HAEN Hangul/English \u2714 KC_LANG2 KC_HANJ Hanja \u2714 KC_LANG3 JIS Katakana \u2714 KC_LANG4 JIS Hiragana \u2714 KC_LANG5 JIS Zenkaku/Hankaku \u2714 KC_LANG6 Language 6 KC_LANG7 Language 7 KC_LANG8 Language 8 KC_LANG9 Language 9 KC_ALT_ERASE KC_ERAS Alternate Erase KC_SYSREQ SysReq/Attention KC_CANCEL Cancel KC_CLEAR KC_CLR Clear \u2714 KC_PRIOR Prior KC_RETURN Return KC_SEPARATOR Separator KC_OUT Out KC_OPER Oper KC_CLEAR_AGAIN Clear/Again KC_CRSEL CrSel/Props KC_EXSEL ExSel KC_LCTRL KC_LCTL Left Control \u2714 \u2714 \u2714 KC_LSHIFT KC_LSFT Left Shift \u2714 \u2714 \u2714 KC_LALT KC_LOPT Left Alt (Option) \u2714 \u2714 \u2714 KC_LGUI KC_LCMD , KC_LWIN Left GUI (Windows/Command/Meta key) \u2714 \u2714 \u2714 KC_RCTRL KC_RCTL Right Control \u2714 \u2714 \u2714 KC_RSHIFT KC_RSFT Right Shift \u2714 \u2714 \u2714 KC_RALT KC_ROPT , KC_ALGR Right Alt (Option/AltGr) \u2714 \u2714 \u2714 KC_RGUI KC_RCMD , KC_RWIN Right GUI (Windows/Command/Meta key) \u2714 \u2714 \u2714 KC_SYSTEM_POWER KC_PWR System Power Down \u2714 \u2714 3 \u2714 KC_SYSTEM_SLEEP KC_SLEP System Sleep \u2714 \u2714 3 \u2714 KC_SYSTEM_WAKE KC_WAKE System Wake \u2714 3 \u2714 KC_AUDIO_MUTE KC_MUTE Mute \u2714 \u2714 \u2714 KC_AUDIO_VOL_UP KC_VOLU Volume Up \u2714 \u2714 4 \u2714 KC_AUDIO_VOL_DOWN KC_VOLD Volume Down \u2714 \u2714 4 \u2714 KC_MEDIA_NEXT_TRACK KC_MNXT Next Track \u2714 \u2714 5 \u2714 KC_MEDIA_PREV_TRACK KC_MPRV Previous Track \u2714 \u2714 5 \u2714 KC_MEDIA_STOP KC_MSTP Stop Track \u2714 \u2714 KC_MEDIA_PLAY_PAUSE KC_MPLY Play/Pause Track \u2714 \u2714 \u2714 KC_MEDIA_SELECT KC_MSEL Launch Media Player \u2714 \u2714 KC_MEDIA_EJECT KC_EJCT Eject \u2714 \u2714 KC_MAIL Launch Mail \u2714 \u2714 KC_CALCULATOR KC_CALC Launch Calculator \u2714 \u2714 KC_MY_COMPUTER KC_MYCM Launch My Computer \u2714 \u2714 KC_WWW_SEARCH KC_WSCH Browser Search \u2714 \u2714 KC_WWW_HOME KC_WHOM Browser Home \u2714 \u2714 KC_WWW_BACK KC_WBAK Browser Back \u2714 \u2714 KC_WWW_FORWARD KC_WFWD Browser Forward \u2714 \u2714 KC_WWW_STOP KC_WSTP Browser Stop \u2714 \u2714 KC_WWW_REFRESH KC_WREF Browser Refresh \u2714 \u2714 KC_WWW_FAVORITES KC_WFAV Browser Favorites \u2714 \u2714 KC_MEDIA_FAST_FORWARD KC_MFFD Next Track \u2714 \u2714 5 \u2714 KC_MEDIA_REWIND KC_MRWD Previous Track \u2714 6 \u2714 5 \u2714 KC_BRIGHTNESS_UP KC_BRIU Brightness Up \u2714 \u2714 \u2714 KC_BRIGHTNESS_DOWN KC_BRID Brightness Down \u2714 \u2714 \u2714 1. The Linux kernel HID driver recognizes nearly all keycodes , but the default bindings depend on the DE/WM. 2. Treated as F13-F15. 3. Must be held for about three seconds, and will display a prompt instead. 4. Holding Shift+Option allows for finer control of volume level. 5. Skips the entire track in iTunes when tapped, seeks within the current track when held. 6. WMP does not recognize the Rewind key, but both alter playback speed in VLC. Quantum Keycodes \u00b6 See also: Quantum Keycodes Key Aliases Description RESET Put the keyboard into bootloader mode for flashing DEBUG Toggle debug mode EEPROM_RESET EEP_RST Reinitializes the keyboard's EEPROM (persistent memory) Audio Keys \u00b6 See also: Audio Key Aliases Description AU_ON Turns on Audio Feature AU_OFF Turns off Audio Feature AU_TOG Toggles Audio state CLICKY_TOGGLE CK_TOGG Toggles Audio clicky mode CLICKY_UP CK_UP Increases frequency of the clicks CLICKY_DOWN CK_DOWN Decreases frequency of the clicks CLICKY_RESET CK_RST Resets frequency to default MU_ON Turns on Music Mode MU_OFF Turns off Music Mode MU_TOG Toggles Music Mode MU_MOD Cycles through the music modes Backlighting \u00b6 See also: Backlighting Key Description BL_TOGG Turn the backlight on or off BL_STEP Cycle through backlight levels BL_ON Set the backlight to max brightness BL_OFF Turn the backlight off BL_INC Increase the backlight level BL_DEC Decrease the backlight level BL_BRTG Toggle backlight breathing Bootmagic \u00b6 See also: Bootmagic Key Aliases Description MAGIC_SWAP_CONTROL_CAPSLOCK CL_SWAP Swap Caps Lock and Left Control MAGIC_UNSWAP_CONTROL_CAPSLOCK CL_NORM Unswap Caps Lock and Left Control MAGIC_CAPSLOCK_TO_CONTROL CL_CTRL Treat Caps Lock as Control MAGIC_UNCAPSLOCK_TO_CONTROL CL_CAPS Stop treating Caps Lock as Control MAGIC_SWAP_LCTL_LGUI LCG_SWP Swap Left Control and GUI MAGIC_UNSWAP_LCTL_LGUI LCG_NRM Unswap Left Control and GUI MAGIC_SWAP_RCTL_RGUI RCG_SWP Swap Right Control and GUI MAGIC_UNSWAP_RCTL_RGUI RCG_NRM Unswap Right Control and GUI MAGIC_SWAP_CTL_GUI CG_SWAP Swap Control and GUI on both sides MAGIC_UNSWAP_CTL_GUI CG_NORM Unswap Control and GUI on both sides MAGIC_TOGGLE_CTL_GUI CG_TOGG Toggle Control and GUI swap on both sides MAGIC_SWAP_LALT_LGUI LAG_SWP Swap Left Alt and GUI MAGIC_UNSWAP_LALT_LGUI LAG_NRM Unswap Left Alt and GUI MAGIC_SWAP_RALT_RGUI RAG_SWP Swap Right Alt and GUI MAGIC_UNSWAP_RALT_RGUI RAG_NRM Unswap Right Alt and GUI MAGIC_SWAP_ALT_GUI AG_SWAP Swap Alt and GUI on both sides MAGIC_UNSWAP_ALT_GUI AG_NORM Unswap Alt and GUI on both sides MAGIC_TOGGLE_ALT_GUI AG_TOGG Toggle Alt and GUI swap on both sides MAGIC_NO_GUI GUI_OFF Disable the GUI keys MAGIC_UNNO_GUI GUI_ON Enable the GUI keys MAGIC_SWAP_GRAVE_ESC GE_SWAP Swap ` and Escape MAGIC_UNSWAP_GRAVE_ESC GE_NORM Unswap ` and Escape MAGIC_SWAP_BACKSLASH_BACKSPACE BS_SWAP Swap \\ and Backspace MAGIC_UNSWAP_BACKSLASH_BACKSPACE BS_NORM Unswap \\ and Backspace MAGIC_HOST_NKRO NK_ON Enable N-key rollover MAGIC_UNHOST_NKRO NK_OFF Disable N-key rollover MAGIC_TOGGLE_NKRO NK_TOGG Toggle N-key rollover MAGIC_EE_HANDS_LEFT EH_LEFT Set the master half of a split keyboard as the left hand (for EE_HANDS ) MAGIC_EE_HANDS_RIGHT EH_RGHT Set the master half of a split keyboard as the right hand (for EE_HANDS ) Bluetooth \u00b6 See also: Bluetooth Key Description OUT_AUTO Automatically switch between USB and Bluetooth OUT_USB USB only OUT_BT Bluetooth only Dynamic Macros \u00b6 See also: Dynamic Macros Key Aliases Description DYN_REC_START1 DM_REC1 Start recording Macro 1 DYN_REC_START2 DM_REC2 Start recording Macro 2 DYN_MACRO_PLAY1 DM_PLY1 Replay Macro 1 DYN_MACRO_PLAY2 DM_PLY2 Replay Macro 2 DYN_REC_STOP DM_RSTP Finish the macro that is currently being recorded. Grave Escape \u00b6 See also: Grave Escape Key Aliases Description GRAVE_ESC KC_GESC Escape when pressed, ` when Shift or GUI are held Key Lock \u00b6 See also: Key Lock Key Description KC_LOCK Hold down the next key pressed, until the key is pressed again Layer Switching \u00b6 See also: Layer Switching Key Description DF(layer) Set the base (default) layer MO(layer) Momentarily turn on layer when pressed (requires KC_TRNS on destination layer) OSL(layer) Momentarily activates layer until a key is pressed. See One Shot Keys for details. LM(layer, mod) Momentarily turn on layer (like MO) with mod active as well. Where mod is a mods_bit. Mods can be viewed here . Example Implementation: LM(LAYER_1, MOD_LALT) LT(layer, kc) Turn on layer when held, kc when tapped TG(layer) Toggle layer on or off TO(layer) Turns on layer and turns off all other layers, except the default layer TT(layer) Normally acts like MO unless it's tapped multiple times, which toggles layer on Leader Key \u00b6 See also: Leader Key Key Description KC_LEAD Begins a leader sequence MIDI \u00b6 See also: MIDI Key Aliases Description MI_ON Turn MIDI on MI_OFF Turn MIDI off MI_TOG Toggle MIDI enabled MI_C C octave 0 MI_Cs MI_Db C\u266f/D\u266d octave 0 MI_D D octave 0 MI_Ds MI_Eb D\u266f/E\u266d octave 0 MI_E E octave 0 MI_F F octave 0 MI_Fs MI_Gb F\u266f/G\u266d octave 0 MI_G G octave 0 MI_Gs MI_Gs G\u266f/A\u266d octave 0 MI_A A octave 0 MI_As MI_Bb A\u266f/B\u266d octave 0 MI_B B octave 0 MI_C_1 C octave 1 MI_Cs_1 MI_Db_1 C\u266f/D\u266d octave 1 MI_D_1 D octave 1 MI_Ds_1 MI_Eb_1 D\u266f/E\u266d octave 1 MI_E_1 E octave 1 MI_F_1 F octave 1 MI_Fs_1 MI_Gb_1 F\u266f/G\u266d octave 1 MI_G_1 G octave 1 MI_Gs_1 MI_Ab_1 G\u266f/A\u266d octave 1 MI_A_1 A octave 1 MI_As_1 MI_Bb_1 A\u266f/B\u266d octave 1 MI_B_1 B octave 1 MI_C_2 C octave 2 MI_Cs_2 MI_Db_2 C\u266f/D\u266d octave 2 MI_D_2 D octave 2 MI_Ds_2 MI_Eb_2 D\u266f/E\u266d octave 2 MI_E_2 E octave 2 MI_F_2 F octave 2 MI_Fs_2 MI_Gb_2 F\u266f/G\u266d octave 2 MI_G_2 G octave 2 MI_Gs_2 MI_Ab_2 G\u266f/A\u266d octave 2 MI_A_2 A octave 2 MI_As_2 MI_Bb_2 A\u266f/B\u266d octave 2 MI_B_2 B octave 2 MI_C_3 C octave 3 MI_Cs_3 MI_Db_3 C\u266f/D\u266d octave 3 MI_D_3 D octave 3 MI_Ds_3 MI_Eb_3 D\u266f/E\u266d octave 3 MI_E_3 E octave 3 MI_F_3 F octave 3 MI_Fs_3 MI_Gb_3 F\u266f/G\u266d octave 3 MI_G_3 G octave 3 MI_Gs_3 MI_Ab_3 G\u266f/A\u266d octave 3 MI_A_3 A octave 3 MI_As_3 MI_Bb_3 A\u266f/B\u266d octave 3 MI_B_3 B octave 3 MI_C_4 C octave 4 MI_Cs_4 MI_Db_4 C\u266f/D\u266d octave 4 MI_D_4 D octave 4 MI_Ds_4 MI_Eb_4 D\u266f/E\u266d octave 4 MI_E_4 E octave 4 MI_F_4 F octave 4 MI_Fs_4 MI_Gb_4 F\u266f/G\u266d octave 4 MI_G_4 G octave 4 MI_Gs_4 MI_Ab_4 G\u266f/A\u266d octave 4 MI_A_4 A octave 4 MI_As_4 MI_Bb_4 A\u266f/B\u266d octave 4 MI_B_4 B octave 4 MI_C_5 C octave 5 MI_Cs_5 MI_Db_5 C\u266f/D\u266d octave 5 MI_D_5 D octave 5 MI_Ds_5 MI_Eb_5 D\u266f/E\u266d octave 5 MI_E_5 E octave 5 MI_F_5 F octave 5 MI_Fs_5 MI_Gb_5 F\u266f/G\u266d octave 5 MI_G_5 G octave 5 MI_Gs_5 MI_Ab_5 G\u266f/A\u266d octave 5 MI_A_5 A octave 5 MI_As_5 MI_Bb_5 A\u266f/B\u266d octave 5 MI_B_5 B octave 5 MI_OCT_N2 Set octave to -2 MI_OCT_N1 Set octave to -1 MI_OCT_0 Set octave to 0 MI_OCT_1 Set octave to 1 MI_OCT_2 Set octave to 2 MI_OCT_3 Set octave to 3 MI_OCT_4 Set octave to 4 MI_OCT_5 Set octave to 5 MI_OCT_6 Set octave to 6 MI_OCT_7 Set octave to 7 MI_OCTD Move down an octave MI_OCTU Move up an octave MI_TRNS_N6 Set transposition to -6 semitones MI_TRNS_N5 Set transposition to -5 semitones MI_TRNS_N4 Set transposition to -4 semitones MI_TRNS_N3 Set transposition to -3 semitones MI_TRNS_N2 Set transposition to -2 semitones MI_TRNS_N1 Set transposition to -1 semitone MI_TRNS_0 No transposition MI_TRNS_1 Set transposition to +1 semitone MI_TRNS_2 Set transposition to +2 semitones MI_TRNS_3 Set transposition to +3 semitones MI_TRNS_4 Set transposition to +4 semitones MI_TRNS_5 Set transposition to +5 semitones MI_TRNS_6 Set transposition to +6 semitones MI_TRNSD Decrease transposition MI_TRNSU Increase transposition MI_VEL_0 Set velocity to 0 MI_VEL_1 Set velocity to 12 MI_VEL_2 Set velocity to 25 MI_VEL_3 Set velocity to 38 MI_VEL_4 Set velocity to 51 MI_VEL_5 Set velocity to 64 MI_VEL_6 Set velocity to 76 MI_VEL_7 Set velocity to 89 MI_VEL_8 Set velocity to 102 MI_VEL_9 Set velocity to 114 MI_VEL_10 Set velocity to 127 MI_VELD Decrease velocity MI_VELU Increase velocity MI_CH1 Set channel to 1 MI_CH2 Set channel to 2 MI_CH3 Set channel to 3 MI_CH4 Set channel to 4 MI_CH5 Set channel to 5 MI_CH6 Set channel to 6 MI_CH7 Set channel to 7 MI_CH8 Set channel to 8 MI_CH9 Set channel to 9 MI_CH10 Set channel to 10 MI_CH11 Set channel to 11 MI_CH12 Set channel to 12 MI_CH13 Set channel to 13 MI_CH14 Set channel to 14 MI_CH15 Set channel to 15 MI_CH16 Set channel to 16 MI_CHD Decrease channel MI_CHU Increase channel MI_ALLOFF Stop all notes MI_SUS Sustain MI_PORT Portmento MI_SOST Sostenuto MI_SOFT Soft Pedal MI_LEG Legato MI_MOD Modulation MI_MODSD Decrease modulation speed MI_MODSU Increase modulation speed MI_BENDD Bend pitch down MI_BENDU Bend pitch up Mouse Keys \u00b6 See also: Mouse Keys Key Aliases Description KC_MS_UP KC_MS_U Mouse Cursor Up KC_MS_DOWN KC_MS_D Mouse Cursor Down KC_MS_LEFT KC_MS_L Mouse Cursor Left KC_MS_RIGHT KC_MS_R Mouse Cursor Right KC_MS_BTN1 KC_BTN1 Mouse Button 1 KC_MS_BTN2 KC_BTN2 Mouse Button 2 KC_MS_BTN3 KC_BTN3 Mouse Button 3 KC_MS_BTN4 KC_BTN4 Mouse Button 4 KC_MS_BTN5 KC_BTN5 Mouse Button 5 KC_MS_WH_UP KC_WH_U Mouse Wheel Up KC_MS_WH_DOWN KC_WH_D Mouse Wheel Down KC_MS_WH_LEFT KC_WH_L Mouse Wheel Left KC_MS_WH_RIGHT KC_WH_R Mouse Wheel Right KC_MS_ACCEL0 KC_ACL0 Set mouse acceleration to 0 KC_MS_ACCEL1 KC_ACL1 Set mouse acceleration to 1 KC_MS_ACCEL2 KC_ACL2 Set mouse acceleration to 2 Modifiers \u00b6 See also: Modifier Keys Key Aliases Description LCTL(kc) C(kc) Hold Left Control and press kc LSFT(kc) S(kc) Hold Left Shift and press kc LALT(kc) A(kc) , LOPT(kc) Hold Left Alt and press kc LGUI(kc) G(kc) , LCMD(kc) , LWIN(kc) Hold Left GUI and press kc RCTL(kc) Hold Right Control and press kc RSFT(kc) Hold Right Shift and press kc RALT(kc) ROPT(kc) , ALGR(kc) Hold Right Alt (AltGr) and press kc RGUI(kc) RCMD(kc) , LWIN(kc) Hold Right GUI and press kc LSG(kc) SGUI(kc) , SCMD(kc) , SWIN(kc) Hold Left Shift and Left GUI and press kc LAG(kc) Hold Left Alt and Left GUI and press kc RSG(kc) Hold Right Shift and Right GUI and press kc RAG(kc) Hold Right Alt and Right GUI and press kc LCA(kc) Hold Left Control and Alt and press kc LSA(kc) Hold Left Shift and Left Alt and press kc RSA(kc) SAGR(kc) Hold Right Shift and Right Alt (AltGr) and press kc RCS(kc) Hold Right Control and Right Shift and press kc LCAG(kc) Hold Left Control, Alt and GUI and press kc MEH(kc) Hold Left Control, Shift and Alt and press kc HYPR(kc) Hold Left Control, Shift, Alt and GUI and press kc KC_MEH Left Control, Shift and Alt KC_HYPR Left Control, Shift, Alt and GUI Mod-Tap Keys \u00b6 See also: Mod-Tap Key Aliases Description MT(mod, kc) mod when held, kc when tapped LCTL_T(kc) CTL_T(kc) Left Control when held, kc when tapped LSFT_T(kc) SFT_T(kc) Left Shift when held, kc when tapped LALT_T(kc) LOPT_T(kc) , ALT_T(kc) , OPT_T(kc) Left Alt when held, kc when tapped LGUI_T(kc) LCMD_T(kc) , LWIN_T(kc) , GUI_T(kc) , CMD_T(kc) , WIN_T(kc) Left GUI when held, kc when tapped RCTL_T(kc) Right Control when held, kc when tapped RSFT_T(kc) Right Shift when held, kc when tapped RALT_T(kc) ROPT_T(kc) , ALGR_T(kc) Right Alt (AltGr) when held, kc when tapped RGUI_T(kc) RCMD_T(kc) , RWIN_T(kc) Right GUI when held, kc when tapped LSG_T(kc) SGUI_T(kc) , SCMD_T(kc) , SWIN_T(kc) Left Shift and GUI when held, kc when tapped LAG_T(kc) Left Alt and GUI when held, kc when tapped RSG_T(kc) Right Shift and GUI when held, kc when tapped RAG_T(kc) Right Alt and GUI when held, kc when tapped LCA_T(kc) Left Control and Alt when held, kc when tapped LSA_T(kc) Left Shift and Left Alt when held, kc when tapped RSA_T(kc) SAGR_T(kc) Right Shift and Right Alt (AltGr) when held, kc when tapped RCS_T(kc) Right Control and Right Shift when held, kc when tapped LCAG_T(kc) Left Control, Alt and GUI when held, kc when tapped RCAG_T(kc) Right Control, Alt and GUI when held, kc when tapped C_S_T(kc) Left Control and Shift when held, kc when tapped MEH_T(kc) Left Control, Shift and Alt when held, kc when tapped HYPR_T(kc) ALL_T(kc) Left Control, Shift, Alt and GUI when held, kc when tapped - more info here RGB Lighting \u00b6 See also: RGB Lighting Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Rainbow animation mode RGB_MODE_SWIRL RGB_M_SW Swirl animation mode RGB_MODE_SNAKE RGB_M_SN Snake animation mode RGB_MODE_KNIGHT RGB_M_K \"Knight Rider\" animation mode RGB_MODE_XMAS RGB_M_X Christmas animation mode RGB_MODE_GRADIENT RGB_M_G Static gradient animation mode RGB_MODE_RGBTEST RGB_M_T Red,Green,Blue test animation mode RGB Matrix Lighting \u00b6 See also: RGB Matrix Lighting Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_SPI Increase effect speed (does not support eeprom yet), decrease speed when Shift is held RGB_SPD Decrease effect speed (does not support eeprom yet), increase speed when Shift is held Thermal Printer \u00b6 See also: Thermal Printer Key Description PRINT_ON Start printing everything the user types PRINT_OFF Stop printing everything the user types US ANSI Shifted Symbols \u00b6 See also: US ANSI Shifted Symbols Key Aliases Description KC_TILDE KC_TILD ~ KC_EXCLAIM KC_EXLM ! KC_AT @ KC_HASH # KC_DOLLAR KC_DLR $ KC_PERCENT KC_PERC % KC_CIRCUMFLEX KC_CIRC ^ KC_AMPERSAND KC_AMPR & KC_ASTERISK KC_ASTR * KC_LEFT_PAREN KC_LPRN ( KC_RIGHT_PAREN KC_RPRN ) KC_UNDERSCORE KC_UNDS _ KC_PLUS + KC_LEFT_CURLY_BRACE KC_LCBR { KC_RIGHT_CURLY_BRACE KC_RCBR } KC_PIPE \\| KC_COLON KC_COLN : KC_DOUBLE_QUOTE KC_DQUO , KC_DQT \" KC_LEFT_ANGLE_BRACKET KC_LABK , KC_LT < KC_RIGHT_ANGLE_BRACKET KC_RABK , KC_GT > KC_QUESTION KC_QUES ? One Shot Keys \u00b6 See also: One Shot Keys Key Description OSM(mod) Hold mod for one keypress OSL(layer) Switch to layer for one keypress OS_ON Turns One Shot keys on OS_OFF Turns One Shot keys off OS_TOGG Toggles One Shot keys status Space Cadet \u00b6 See also: Space Cadet Key Description KC_LCPO Left Control when held, ( when tapped KC_RCPC Right Control when held, ) when tapped KC_LSPO Left Shift when held, ( when tapped KC_RSPC Right Shift when held, ) when tapped KC_LAPO Left Alt when held, ( when tapped KC_RAPC Right Alt when held, ) when tapped KC_SFTENT Right Shift when held, Enter when tapped Swap Hands \u00b6 See also: Swap Hands Key Description SH_T(key) Sends key with a tap; momentary swap when held. SW_ON Turns on swapping and leaves it on. SW_OFF Turn off swapping and leaves it off. Good for returning to a known state. SH_MON Swaps hands when pressed, returns to normal when released (momentary). SH_MOFF Momentarily turns off swap. SH_TG Toggles swap on and off with every key press. SH_TT Toggles with a tap; momentary when held. SH_OS One shot swap hands: toggle while pressed or until next key press. Unicode Support \u00b6 See also: Unicode Support Key Aliases Description UC(c) Send Unicode code point c X(i) Send Unicode code point at index i in unicode_map XP(i, j) Send Unicode code point at index i , or j if Shift/Caps is on UNICODE_MODE_FORWARD UC_MOD Cycle through selected input modes UNICODE_MODE_REVERSE UC_RMOD Cycle through selected input modes in reverse UNICODE_MODE_MAC UC_M_MA Switch to macOS input UNICODE_MODE_LNX UC_M_LN Switch to Linux input UNICODE_MODE_WIN UC_M_WI Switch to Windows input UNICODE_MODE_BSD UC_M_BS Switch to BSD input (not implemented) UNICODE_MODE_WINC UC_M_WC Switch to Windows input using WinCompose","title":"\u952e\u7801"},{"location":"keycodes/#keycodes-overview","text":"When defining a keymap each key needs a valid key definition. This page documents the symbols that correspond to keycodes that are available to you in QMK. This is a reference only. Each group of keys links to the page documenting their functionality in more detail.","title":"Keycodes Overview"},{"location":"keycodes/#basic-keycodes","text":"See also: Basic Keycodes Key Aliases Description Windows macOS Linux 1 KC_NO XXXXXXX Ignore this key (NOOP) N/A N/A N/A KC_TRANSPARENT KC_TRNS , _______ Use the next lowest non-transparent key N/A N/A N/A KC_A a and A \u2714 \u2714 \u2714 KC_B b and B \u2714 \u2714 \u2714 KC_C c and C \u2714 \u2714 \u2714 KC_D d and D \u2714 \u2714 \u2714 KC_E e and E \u2714 \u2714 \u2714 KC_F f and F \u2714 \u2714 \u2714 KC_G g and G \u2714 \u2714 \u2714 KC_H h and H \u2714 \u2714 \u2714 KC_I i and I \u2714 \u2714 \u2714 KC_J j and J \u2714 \u2714 \u2714 KC_K k and K \u2714 \u2714 \u2714 KC_L l and L \u2714 \u2714 \u2714 KC_M m and M \u2714 \u2714 \u2714 KC_N n and N \u2714 \u2714 \u2714 KC_O o and O \u2714 \u2714 \u2714 KC_P p and P \u2714 \u2714 \u2714 KC_Q q and Q \u2714 \u2714 \u2714 KC_R r and R \u2714 \u2714 \u2714 KC_S s and S \u2714 \u2714 \u2714 KC_T t and T \u2714 \u2714 \u2714 KC_U u and U \u2714 \u2714 \u2714 KC_V v and V \u2714 \u2714 \u2714 KC_W w and W \u2714 \u2714 \u2714 KC_X x and X \u2714 \u2714 \u2714 KC_Y y and Y \u2714 \u2714 \u2714 KC_Z z and Z \u2714 \u2714 \u2714 KC_1 1 and ! \u2714 \u2714 \u2714 KC_2 2 and @ \u2714 \u2714 \u2714 KC_3 3 and # \u2714 \u2714 \u2714 KC_4 4 and $ \u2714 \u2714 \u2714 KC_5 5 and % \u2714 \u2714 \u2714 KC_6 6 and ^ \u2714 \u2714 \u2714 KC_7 7 and & \u2714 \u2714 \u2714 KC_8 8 and * \u2714 \u2714 \u2714 KC_9 9 and ( \u2714 \u2714 \u2714 KC_0 0 and ) \u2714 \u2714 \u2714 KC_ENTER KC_ENT Return (Enter) \u2714 \u2714 \u2714 KC_ESCAPE KC_ESC Escape \u2714 \u2714 \u2714 KC_BSPACE KC_BSPC Delete (Backspace) \u2714 \u2714 \u2714 KC_TAB Tab \u2714 \u2714 \u2714 KC_SPACE KC_SPC Spacebar \u2714 \u2714 \u2714 KC_MINUS KC_MINS - and _ \u2714 \u2714 \u2714 KC_EQUAL KC_EQL = and + \u2714 \u2714 \u2714 KC_LBRACKET KC_LBRC [ and { \u2714 \u2714 \u2714 KC_RBRACKET KC_RBRC ] and } \u2714 \u2714 \u2714 KC_BSLASH KC_BSLS \\ and \\| \u2714 \u2714 \u2714 KC_NONUS_HASH KC_NUHS Non-US # and ~ \u2714 \u2714 \u2714 KC_SCOLON KC_SCLN ; and : \u2714 \u2714 \u2714 KC_QUOTE KC_QUOT ' and \" \u2714 \u2714 \u2714 KC_GRAVE KC_GRV , KC_ZKHK ` and ~ , JIS Zenkaku/Hankaku \u2714 \u2714 \u2714 KC_COMMA KC_COMM , and < \u2714 \u2714 \u2714 KC_DOT . and > \u2714 \u2714 \u2714 KC_SLASH KC_SLSH / and ? \u2714 \u2714 \u2714 KC_CAPSLOCK KC_CLCK , KC_CAPS Caps Lock \u2714 \u2714 \u2714 KC_F1 F1 \u2714 \u2714 \u2714 KC_F2 F2 \u2714 \u2714 \u2714 KC_F3 F3 \u2714 \u2714 \u2714 KC_F4 F4 \u2714 \u2714 \u2714 KC_F5 F5 \u2714 \u2714 \u2714 KC_F6 F6 \u2714 \u2714 \u2714 KC_F7 F7 \u2714 \u2714 \u2714 KC_F8 F8 \u2714 \u2714 \u2714 KC_F9 F9 \u2714 \u2714 \u2714 KC_F10 F10 \u2714 \u2714 \u2714 KC_F11 F11 \u2714 \u2714 \u2714 KC_F12 F12 \u2714 \u2714 \u2714 KC_PSCREEN KC_PSCR Print Screen \u2714 \u2714 2 \u2714 KC_SCROLLLOCK KC_SLCK , KC_BRMD Scroll Lock, Brightness Down (macOS) \u2714 \u2714 2 \u2714 KC_PAUSE KC_PAUS , KC_BRK , KC_BRMU Pause, Brightness Up (macOS) \u2714 \u2714 2 \u2714 KC_INSERT KC_INS Insert \u2714 \u2714 KC_HOME Home \u2714 \u2714 \u2714 KC_PGUP Page Up \u2714 \u2714 \u2714 KC_DELETE KC_DEL Forward Delete \u2714 \u2714 \u2714 KC_END End \u2714 \u2714 \u2714 KC_PGDOWN KC_PGDN Page Down \u2714 \u2714 \u2714 KC_RIGHT KC_RGHT Right Arrow \u2714 \u2714 \u2714 KC_LEFT Left Arrow \u2714 \u2714 \u2714 KC_DOWN Down Arrow \u2714 \u2714 \u2714 KC_UP Up Arrow \u2714 \u2714 \u2714 KC_NUMLOCK KC_NLCK Keypad Num Lock and Clear \u2714 \u2714 \u2714 KC_KP_SLASH KC_PSLS Keypad / \u2714 \u2714 \u2714 KC_KP_ASTERISK KC_PAST Keypad * \u2714 \u2714 \u2714 KC_KP_MINUS KC_PMNS Keypad - \u2714 \u2714 \u2714 KC_KP_PLUS KC_PPLS Keypad + \u2714 \u2714 \u2714 KC_KP_ENTER KC_PENT Keypad Enter \u2714 \u2714 \u2714 KC_KP_1 KC_P1 Keypad 1 and End \u2714 \u2714 \u2714 KC_KP_2 KC_P2 Keypad 2 and Down Arrow \u2714 \u2714 \u2714 KC_KP_3 KC_P3 Keypad 3 and Page Down \u2714 \u2714 \u2714 KC_KP_4 KC_P4 Keypad 4 and Left Arrow \u2714 \u2714 \u2714 KC_KP_5 KC_P5 Keypad 5 \u2714 \u2714 \u2714 KC_KP_6 KC_P6 Keypad 6 and Right Arrow \u2714 \u2714 \u2714 KC_KP_7 KC_P7 Keypad 7 and Home \u2714 \u2714 \u2714 KC_KP_8 KC_P8 Keypad 8 and Up Arrow \u2714 \u2714 \u2714 KC_KP_9 KC_P9 Keypad 9 and Page Up \u2714 \u2714 \u2714 KC_KP_0 KC_P0 Keypad 0 and Insert \u2714 \u2714 \u2714 KC_KP_DOT KC_PDOT Keypad . and Delete \u2714 \u2714 \u2714 KC_NONUS_BSLASH KC_NUBS Non-US \\ and \\| \u2714 \u2714 \u2714 KC_APPLICATION KC_APP Application (Windows Context Menu Key) \u2714 \u2714 KC_POWER System Power \u2714 3 \u2714 KC_KP_EQUAL KC_PEQL Keypad = \u2714 \u2714 \u2714 KC_F13 F13 \u2714 \u2714 \u2714 KC_F14 F14 \u2714 \u2714 \u2714 KC_F15 F15 \u2714 \u2714 \u2714 KC_F16 F16 \u2714 \u2714 \u2714 KC_F17 F17 \u2714 \u2714 \u2714 KC_F18 F18 \u2714 \u2714 \u2714 KC_F19 F19 \u2714 \u2714 \u2714 KC_F20 F20 \u2714 \u2714 KC_F21 F21 \u2714 \u2714 KC_F22 F22 \u2714 \u2714 KC_F23 F23 \u2714 \u2714 KC_F24 F24 \u2714 \u2714 KC_EXECUTE KC_EXEC Execute \u2714 KC_HELP Help \u2714 KC_MENU Menu \u2714 KC_SELECT KC_SLCT Select \u2714 KC_STOP Stop \u2714 KC_AGAIN KC_AGIN Again \u2714 KC_UNDO Undo \u2714 KC_CUT Cut \u2714 KC_COPY Copy \u2714 KC_PASTE KC_PSTE Paste \u2714 KC_FIND Find \u2714 KC__MUTE Mute \u2714 \u2714 KC__VOLUP Volume Up \u2714 \u2714 KC__VOLDOWN Volume Down \u2714 \u2714 KC_LOCKING_CAPS KC_LCAP Locking Caps Lock \u2714 \u2714 KC_LOCKING_NUM KC_LNUM Locking Num Lock \u2714 \u2714 KC_LOCKING_SCROLL KC_LSCR Locking Scroll Lock \u2714 \u2714 KC_KP_COMMA KC_PCMM Keypad , \u2714 KC_KP_EQUAL_AS400 Keypad = on AS/400 keyboards KC_INT1 KC_RO JIS \\ and _ \u2714 \u2714 KC_INT2 KC_KANA JIS Katakana/Hiragana \u2714 \u2714 KC_INT3 KC_JYEN JIS \u00a5 and \\| \u2714 \u2714 KC_INT4 KC_HENK JIS Henkan \u2714 \u2714 KC_INT5 KC_MHEN JIS Muhenkan \u2714 \u2714 KC_INT6 JIS Numpad , \u2714 KC_INT7 International 7 KC_INT8 International 8 KC_INT9 International 9 KC_LANG1 KC_HAEN Hangul/English \u2714 KC_LANG2 KC_HANJ Hanja \u2714 KC_LANG3 JIS Katakana \u2714 KC_LANG4 JIS Hiragana \u2714 KC_LANG5 JIS Zenkaku/Hankaku \u2714 KC_LANG6 Language 6 KC_LANG7 Language 7 KC_LANG8 Language 8 KC_LANG9 Language 9 KC_ALT_ERASE KC_ERAS Alternate Erase KC_SYSREQ SysReq/Attention KC_CANCEL Cancel KC_CLEAR KC_CLR Clear \u2714 KC_PRIOR Prior KC_RETURN Return KC_SEPARATOR Separator KC_OUT Out KC_OPER Oper KC_CLEAR_AGAIN Clear/Again KC_CRSEL CrSel/Props KC_EXSEL ExSel KC_LCTRL KC_LCTL Left Control \u2714 \u2714 \u2714 KC_LSHIFT KC_LSFT Left Shift \u2714 \u2714 \u2714 KC_LALT KC_LOPT Left Alt (Option) \u2714 \u2714 \u2714 KC_LGUI KC_LCMD , KC_LWIN Left GUI (Windows/Command/Meta key) \u2714 \u2714 \u2714 KC_RCTRL KC_RCTL Right Control \u2714 \u2714 \u2714 KC_RSHIFT KC_RSFT Right Shift \u2714 \u2714 \u2714 KC_RALT KC_ROPT , KC_ALGR Right Alt (Option/AltGr) \u2714 \u2714 \u2714 KC_RGUI KC_RCMD , KC_RWIN Right GUI (Windows/Command/Meta key) \u2714 \u2714 \u2714 KC_SYSTEM_POWER KC_PWR System Power Down \u2714 \u2714 3 \u2714 KC_SYSTEM_SLEEP KC_SLEP System Sleep \u2714 \u2714 3 \u2714 KC_SYSTEM_WAKE KC_WAKE System Wake \u2714 3 \u2714 KC_AUDIO_MUTE KC_MUTE Mute \u2714 \u2714 \u2714 KC_AUDIO_VOL_UP KC_VOLU Volume Up \u2714 \u2714 4 \u2714 KC_AUDIO_VOL_DOWN KC_VOLD Volume Down \u2714 \u2714 4 \u2714 KC_MEDIA_NEXT_TRACK KC_MNXT Next Track \u2714 \u2714 5 \u2714 KC_MEDIA_PREV_TRACK KC_MPRV Previous Track \u2714 \u2714 5 \u2714 KC_MEDIA_STOP KC_MSTP Stop Track \u2714 \u2714 KC_MEDIA_PLAY_PAUSE KC_MPLY Play/Pause Track \u2714 \u2714 \u2714 KC_MEDIA_SELECT KC_MSEL Launch Media Player \u2714 \u2714 KC_MEDIA_EJECT KC_EJCT Eject \u2714 \u2714 KC_MAIL Launch Mail \u2714 \u2714 KC_CALCULATOR KC_CALC Launch Calculator \u2714 \u2714 KC_MY_COMPUTER KC_MYCM Launch My Computer \u2714 \u2714 KC_WWW_SEARCH KC_WSCH Browser Search \u2714 \u2714 KC_WWW_HOME KC_WHOM Browser Home \u2714 \u2714 KC_WWW_BACK KC_WBAK Browser Back \u2714 \u2714 KC_WWW_FORWARD KC_WFWD Browser Forward \u2714 \u2714 KC_WWW_STOP KC_WSTP Browser Stop \u2714 \u2714 KC_WWW_REFRESH KC_WREF Browser Refresh \u2714 \u2714 KC_WWW_FAVORITES KC_WFAV Browser Favorites \u2714 \u2714 KC_MEDIA_FAST_FORWARD KC_MFFD Next Track \u2714 \u2714 5 \u2714 KC_MEDIA_REWIND KC_MRWD Previous Track \u2714 6 \u2714 5 \u2714 KC_BRIGHTNESS_UP KC_BRIU Brightness Up \u2714 \u2714 \u2714 KC_BRIGHTNESS_DOWN KC_BRID Brightness Down \u2714 \u2714 \u2714 1. The Linux kernel HID driver recognizes nearly all keycodes , but the default bindings depend on the DE/WM. 2. Treated as F13-F15. 3. Must be held for about three seconds, and will display a prompt instead. 4. Holding Shift+Option allows for finer control of volume level. 5. Skips the entire track in iTunes when tapped, seeks within the current track when held. 6. WMP does not recognize the Rewind key, but both alter playback speed in VLC.","title":"Basic Keycodes"},{"location":"keycodes/#quantum-keycodes","text":"See also: Quantum Keycodes Key Aliases Description RESET Put the keyboard into bootloader mode for flashing DEBUG Toggle debug mode EEPROM_RESET EEP_RST Reinitializes the keyboard's EEPROM (persistent memory)","title":"Quantum Keycodes"},{"location":"keycodes/#audio-keys","text":"See also: Audio Key Aliases Description AU_ON Turns on Audio Feature AU_OFF Turns off Audio Feature AU_TOG Toggles Audio state CLICKY_TOGGLE CK_TOGG Toggles Audio clicky mode CLICKY_UP CK_UP Increases frequency of the clicks CLICKY_DOWN CK_DOWN Decreases frequency of the clicks CLICKY_RESET CK_RST Resets frequency to default MU_ON Turns on Music Mode MU_OFF Turns off Music Mode MU_TOG Toggles Music Mode MU_MOD Cycles through the music modes","title":"Audio Keys"},{"location":"keycodes/#backlighting","text":"See also: Backlighting Key Description BL_TOGG Turn the backlight on or off BL_STEP Cycle through backlight levels BL_ON Set the backlight to max brightness BL_OFF Turn the backlight off BL_INC Increase the backlight level BL_DEC Decrease the backlight level BL_BRTG Toggle backlight breathing","title":"Backlighting"},{"location":"keycodes/#bootmagic","text":"See also: Bootmagic Key Aliases Description MAGIC_SWAP_CONTROL_CAPSLOCK CL_SWAP Swap Caps Lock and Left Control MAGIC_UNSWAP_CONTROL_CAPSLOCK CL_NORM Unswap Caps Lock and Left Control MAGIC_CAPSLOCK_TO_CONTROL CL_CTRL Treat Caps Lock as Control MAGIC_UNCAPSLOCK_TO_CONTROL CL_CAPS Stop treating Caps Lock as Control MAGIC_SWAP_LCTL_LGUI LCG_SWP Swap Left Control and GUI MAGIC_UNSWAP_LCTL_LGUI LCG_NRM Unswap Left Control and GUI MAGIC_SWAP_RCTL_RGUI RCG_SWP Swap Right Control and GUI MAGIC_UNSWAP_RCTL_RGUI RCG_NRM Unswap Right Control and GUI MAGIC_SWAP_CTL_GUI CG_SWAP Swap Control and GUI on both sides MAGIC_UNSWAP_CTL_GUI CG_NORM Unswap Control and GUI on both sides MAGIC_TOGGLE_CTL_GUI CG_TOGG Toggle Control and GUI swap on both sides MAGIC_SWAP_LALT_LGUI LAG_SWP Swap Left Alt and GUI MAGIC_UNSWAP_LALT_LGUI LAG_NRM Unswap Left Alt and GUI MAGIC_SWAP_RALT_RGUI RAG_SWP Swap Right Alt and GUI MAGIC_UNSWAP_RALT_RGUI RAG_NRM Unswap Right Alt and GUI MAGIC_SWAP_ALT_GUI AG_SWAP Swap Alt and GUI on both sides MAGIC_UNSWAP_ALT_GUI AG_NORM Unswap Alt and GUI on both sides MAGIC_TOGGLE_ALT_GUI AG_TOGG Toggle Alt and GUI swap on both sides MAGIC_NO_GUI GUI_OFF Disable the GUI keys MAGIC_UNNO_GUI GUI_ON Enable the GUI keys MAGIC_SWAP_GRAVE_ESC GE_SWAP Swap ` and Escape MAGIC_UNSWAP_GRAVE_ESC GE_NORM Unswap ` and Escape MAGIC_SWAP_BACKSLASH_BACKSPACE BS_SWAP Swap \\ and Backspace MAGIC_UNSWAP_BACKSLASH_BACKSPACE BS_NORM Unswap \\ and Backspace MAGIC_HOST_NKRO NK_ON Enable N-key rollover MAGIC_UNHOST_NKRO NK_OFF Disable N-key rollover MAGIC_TOGGLE_NKRO NK_TOGG Toggle N-key rollover MAGIC_EE_HANDS_LEFT EH_LEFT Set the master half of a split keyboard as the left hand (for EE_HANDS ) MAGIC_EE_HANDS_RIGHT EH_RGHT Set the master half of a split keyboard as the right hand (for EE_HANDS )","title":"Bootmagic"},{"location":"keycodes/#bluetooth","text":"See also: Bluetooth Key Description OUT_AUTO Automatically switch between USB and Bluetooth OUT_USB USB only OUT_BT Bluetooth only","title":"Bluetooth"},{"location":"keycodes/#dynamic-macros","text":"See also: Dynamic Macros Key Aliases Description DYN_REC_START1 DM_REC1 Start recording Macro 1 DYN_REC_START2 DM_REC2 Start recording Macro 2 DYN_MACRO_PLAY1 DM_PLY1 Replay Macro 1 DYN_MACRO_PLAY2 DM_PLY2 Replay Macro 2 DYN_REC_STOP DM_RSTP Finish the macro that is currently being recorded.","title":"Dynamic Macros"},{"location":"keycodes/#grave-escape","text":"See also: Grave Escape Key Aliases Description GRAVE_ESC KC_GESC Escape when pressed, ` when Shift or GUI are held","title":"Grave Escape"},{"location":"keycodes/#key-lock","text":"See also: Key Lock Key Description KC_LOCK Hold down the next key pressed, until the key is pressed again","title":"Key Lock"},{"location":"keycodes/#layer-switching","text":"See also: Layer Switching Key Description DF(layer) Set the base (default) layer MO(layer) Momentarily turn on layer when pressed (requires KC_TRNS on destination layer) OSL(layer) Momentarily activates layer until a key is pressed. See One Shot Keys for details. LM(layer, mod) Momentarily turn on layer (like MO) with mod active as well. Where mod is a mods_bit. Mods can be viewed here . Example Implementation: LM(LAYER_1, MOD_LALT) LT(layer, kc) Turn on layer when held, kc when tapped TG(layer) Toggle layer on or off TO(layer) Turns on layer and turns off all other layers, except the default layer TT(layer) Normally acts like MO unless it's tapped multiple times, which toggles layer on","title":"Layer Switching"},{"location":"keycodes/#leader-key","text":"See also: Leader Key Key Description KC_LEAD Begins a leader sequence","title":"Leader Key"},{"location":"keycodes/#midi","text":"See also: MIDI Key Aliases Description MI_ON Turn MIDI on MI_OFF Turn MIDI off MI_TOG Toggle MIDI enabled MI_C C octave 0 MI_Cs MI_Db C\u266f/D\u266d octave 0 MI_D D octave 0 MI_Ds MI_Eb D\u266f/E\u266d octave 0 MI_E E octave 0 MI_F F octave 0 MI_Fs MI_Gb F\u266f/G\u266d octave 0 MI_G G octave 0 MI_Gs MI_Gs G\u266f/A\u266d octave 0 MI_A A octave 0 MI_As MI_Bb A\u266f/B\u266d octave 0 MI_B B octave 0 MI_C_1 C octave 1 MI_Cs_1 MI_Db_1 C\u266f/D\u266d octave 1 MI_D_1 D octave 1 MI_Ds_1 MI_Eb_1 D\u266f/E\u266d octave 1 MI_E_1 E octave 1 MI_F_1 F octave 1 MI_Fs_1 MI_Gb_1 F\u266f/G\u266d octave 1 MI_G_1 G octave 1 MI_Gs_1 MI_Ab_1 G\u266f/A\u266d octave 1 MI_A_1 A octave 1 MI_As_1 MI_Bb_1 A\u266f/B\u266d octave 1 MI_B_1 B octave 1 MI_C_2 C octave 2 MI_Cs_2 MI_Db_2 C\u266f/D\u266d octave 2 MI_D_2 D octave 2 MI_Ds_2 MI_Eb_2 D\u266f/E\u266d octave 2 MI_E_2 E octave 2 MI_F_2 F octave 2 MI_Fs_2 MI_Gb_2 F\u266f/G\u266d octave 2 MI_G_2 G octave 2 MI_Gs_2 MI_Ab_2 G\u266f/A\u266d octave 2 MI_A_2 A octave 2 MI_As_2 MI_Bb_2 A\u266f/B\u266d octave 2 MI_B_2 B octave 2 MI_C_3 C octave 3 MI_Cs_3 MI_Db_3 C\u266f/D\u266d octave 3 MI_D_3 D octave 3 MI_Ds_3 MI_Eb_3 D\u266f/E\u266d octave 3 MI_E_3 E octave 3 MI_F_3 F octave 3 MI_Fs_3 MI_Gb_3 F\u266f/G\u266d octave 3 MI_G_3 G octave 3 MI_Gs_3 MI_Ab_3 G\u266f/A\u266d octave 3 MI_A_3 A octave 3 MI_As_3 MI_Bb_3 A\u266f/B\u266d octave 3 MI_B_3 B octave 3 MI_C_4 C octave 4 MI_Cs_4 MI_Db_4 C\u266f/D\u266d octave 4 MI_D_4 D octave 4 MI_Ds_4 MI_Eb_4 D\u266f/E\u266d octave 4 MI_E_4 E octave 4 MI_F_4 F octave 4 MI_Fs_4 MI_Gb_4 F\u266f/G\u266d octave 4 MI_G_4 G octave 4 MI_Gs_4 MI_Ab_4 G\u266f/A\u266d octave 4 MI_A_4 A octave 4 MI_As_4 MI_Bb_4 A\u266f/B\u266d octave 4 MI_B_4 B octave 4 MI_C_5 C octave 5 MI_Cs_5 MI_Db_5 C\u266f/D\u266d octave 5 MI_D_5 D octave 5 MI_Ds_5 MI_Eb_5 D\u266f/E\u266d octave 5 MI_E_5 E octave 5 MI_F_5 F octave 5 MI_Fs_5 MI_Gb_5 F\u266f/G\u266d octave 5 MI_G_5 G octave 5 MI_Gs_5 MI_Ab_5 G\u266f/A\u266d octave 5 MI_A_5 A octave 5 MI_As_5 MI_Bb_5 A\u266f/B\u266d octave 5 MI_B_5 B octave 5 MI_OCT_N2 Set octave to -2 MI_OCT_N1 Set octave to -1 MI_OCT_0 Set octave to 0 MI_OCT_1 Set octave to 1 MI_OCT_2 Set octave to 2 MI_OCT_3 Set octave to 3 MI_OCT_4 Set octave to 4 MI_OCT_5 Set octave to 5 MI_OCT_6 Set octave to 6 MI_OCT_7 Set octave to 7 MI_OCTD Move down an octave MI_OCTU Move up an octave MI_TRNS_N6 Set transposition to -6 semitones MI_TRNS_N5 Set transposition to -5 semitones MI_TRNS_N4 Set transposition to -4 semitones MI_TRNS_N3 Set transposition to -3 semitones MI_TRNS_N2 Set transposition to -2 semitones MI_TRNS_N1 Set transposition to -1 semitone MI_TRNS_0 No transposition MI_TRNS_1 Set transposition to +1 semitone MI_TRNS_2 Set transposition to +2 semitones MI_TRNS_3 Set transposition to +3 semitones MI_TRNS_4 Set transposition to +4 semitones MI_TRNS_5 Set transposition to +5 semitones MI_TRNS_6 Set transposition to +6 semitones MI_TRNSD Decrease transposition MI_TRNSU Increase transposition MI_VEL_0 Set velocity to 0 MI_VEL_1 Set velocity to 12 MI_VEL_2 Set velocity to 25 MI_VEL_3 Set velocity to 38 MI_VEL_4 Set velocity to 51 MI_VEL_5 Set velocity to 64 MI_VEL_6 Set velocity to 76 MI_VEL_7 Set velocity to 89 MI_VEL_8 Set velocity to 102 MI_VEL_9 Set velocity to 114 MI_VEL_10 Set velocity to 127 MI_VELD Decrease velocity MI_VELU Increase velocity MI_CH1 Set channel to 1 MI_CH2 Set channel to 2 MI_CH3 Set channel to 3 MI_CH4 Set channel to 4 MI_CH5 Set channel to 5 MI_CH6 Set channel to 6 MI_CH7 Set channel to 7 MI_CH8 Set channel to 8 MI_CH9 Set channel to 9 MI_CH10 Set channel to 10 MI_CH11 Set channel to 11 MI_CH12 Set channel to 12 MI_CH13 Set channel to 13 MI_CH14 Set channel to 14 MI_CH15 Set channel to 15 MI_CH16 Set channel to 16 MI_CHD Decrease channel MI_CHU Increase channel MI_ALLOFF Stop all notes MI_SUS Sustain MI_PORT Portmento MI_SOST Sostenuto MI_SOFT Soft Pedal MI_LEG Legato MI_MOD Modulation MI_MODSD Decrease modulation speed MI_MODSU Increase modulation speed MI_BENDD Bend pitch down MI_BENDU Bend pitch up","title":"MIDI"},{"location":"keycodes/#mouse-keys","text":"See also: Mouse Keys Key Aliases Description KC_MS_UP KC_MS_U Mouse Cursor Up KC_MS_DOWN KC_MS_D Mouse Cursor Down KC_MS_LEFT KC_MS_L Mouse Cursor Left KC_MS_RIGHT KC_MS_R Mouse Cursor Right KC_MS_BTN1 KC_BTN1 Mouse Button 1 KC_MS_BTN2 KC_BTN2 Mouse Button 2 KC_MS_BTN3 KC_BTN3 Mouse Button 3 KC_MS_BTN4 KC_BTN4 Mouse Button 4 KC_MS_BTN5 KC_BTN5 Mouse Button 5 KC_MS_WH_UP KC_WH_U Mouse Wheel Up KC_MS_WH_DOWN KC_WH_D Mouse Wheel Down KC_MS_WH_LEFT KC_WH_L Mouse Wheel Left KC_MS_WH_RIGHT KC_WH_R Mouse Wheel Right KC_MS_ACCEL0 KC_ACL0 Set mouse acceleration to 0 KC_MS_ACCEL1 KC_ACL1 Set mouse acceleration to 1 KC_MS_ACCEL2 KC_ACL2 Set mouse acceleration to 2","title":"Mouse Keys"},{"location":"keycodes/#modifiers","text":"See also: Modifier Keys Key Aliases Description LCTL(kc) C(kc) Hold Left Control and press kc LSFT(kc) S(kc) Hold Left Shift and press kc LALT(kc) A(kc) , LOPT(kc) Hold Left Alt and press kc LGUI(kc) G(kc) , LCMD(kc) , LWIN(kc) Hold Left GUI and press kc RCTL(kc) Hold Right Control and press kc RSFT(kc) Hold Right Shift and press kc RALT(kc) ROPT(kc) , ALGR(kc) Hold Right Alt (AltGr) and press kc RGUI(kc) RCMD(kc) , LWIN(kc) Hold Right GUI and press kc LSG(kc) SGUI(kc) , SCMD(kc) , SWIN(kc) Hold Left Shift and Left GUI and press kc LAG(kc) Hold Left Alt and Left GUI and press kc RSG(kc) Hold Right Shift and Right GUI and press kc RAG(kc) Hold Right Alt and Right GUI and press kc LCA(kc) Hold Left Control and Alt and press kc LSA(kc) Hold Left Shift and Left Alt and press kc RSA(kc) SAGR(kc) Hold Right Shift and Right Alt (AltGr) and press kc RCS(kc) Hold Right Control and Right Shift and press kc LCAG(kc) Hold Left Control, Alt and GUI and press kc MEH(kc) Hold Left Control, Shift and Alt and press kc HYPR(kc) Hold Left Control, Shift, Alt and GUI and press kc KC_MEH Left Control, Shift and Alt KC_HYPR Left Control, Shift, Alt and GUI","title":"Modifiers"},{"location":"keycodes/#mod-tap-keys","text":"See also: Mod-Tap Key Aliases Description MT(mod, kc) mod when held, kc when tapped LCTL_T(kc) CTL_T(kc) Left Control when held, kc when tapped LSFT_T(kc) SFT_T(kc) Left Shift when held, kc when tapped LALT_T(kc) LOPT_T(kc) , ALT_T(kc) , OPT_T(kc) Left Alt when held, kc when tapped LGUI_T(kc) LCMD_T(kc) , LWIN_T(kc) , GUI_T(kc) , CMD_T(kc) , WIN_T(kc) Left GUI when held, kc when tapped RCTL_T(kc) Right Control when held, kc when tapped RSFT_T(kc) Right Shift when held, kc when tapped RALT_T(kc) ROPT_T(kc) , ALGR_T(kc) Right Alt (AltGr) when held, kc when tapped RGUI_T(kc) RCMD_T(kc) , RWIN_T(kc) Right GUI when held, kc when tapped LSG_T(kc) SGUI_T(kc) , SCMD_T(kc) , SWIN_T(kc) Left Shift and GUI when held, kc when tapped LAG_T(kc) Left Alt and GUI when held, kc when tapped RSG_T(kc) Right Shift and GUI when held, kc when tapped RAG_T(kc) Right Alt and GUI when held, kc when tapped LCA_T(kc) Left Control and Alt when held, kc when tapped LSA_T(kc) Left Shift and Left Alt when held, kc when tapped RSA_T(kc) SAGR_T(kc) Right Shift and Right Alt (AltGr) when held, kc when tapped RCS_T(kc) Right Control and Right Shift when held, kc when tapped LCAG_T(kc) Left Control, Alt and GUI when held, kc when tapped RCAG_T(kc) Right Control, Alt and GUI when held, kc when tapped C_S_T(kc) Left Control and Shift when held, kc when tapped MEH_T(kc) Left Control, Shift and Alt when held, kc when tapped HYPR_T(kc) ALL_T(kc) Left Control, Shift, Alt and GUI when held, kc when tapped - more info here","title":"Mod-Tap Keys"},{"location":"keycodes/#rgb-lighting","text":"See also: RGB Lighting Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_MODE_PLAIN RGB_M_P Static (no animation) mode RGB_MODE_BREATHE RGB_M_B Breathing animation mode RGB_MODE_RAINBOW RGB_M_R Rainbow animation mode RGB_MODE_SWIRL RGB_M_SW Swirl animation mode RGB_MODE_SNAKE RGB_M_SN Snake animation mode RGB_MODE_KNIGHT RGB_M_K \"Knight Rider\" animation mode RGB_MODE_XMAS RGB_M_X Christmas animation mode RGB_MODE_GRADIENT RGB_M_G Static gradient animation mode RGB_MODE_RGBTEST RGB_M_T Red,Green,Blue test animation mode","title":"RGB Lighting"},{"location":"keycodes/#rgb-matrix-lighting","text":"See also: RGB Matrix Lighting Key Aliases Description RGB_TOG Toggle RGB lighting on or off RGB_MODE_FORWARD RGB_MOD Cycle through modes, reverse direction when Shift is held RGB_MODE_REVERSE RGB_RMOD Cycle through modes in reverse, forward direction when Shift is held RGB_HUI Increase hue, decrease hue when Shift is held RGB_HUD Decrease hue, increase hue when Shift is held RGB_SAI Increase saturation, decrease saturation when Shift is held RGB_SAD Decrease saturation, increase saturation when Shift is held RGB_VAI Increase value (brightness), decrease value when Shift is held RGB_VAD Decrease value (brightness), increase value when Shift is held RGB_SPI Increase effect speed (does not support eeprom yet), decrease speed when Shift is held RGB_SPD Decrease effect speed (does not support eeprom yet), increase speed when Shift is held","title":"RGB Matrix Lighting"},{"location":"keycodes/#thermal-printer","text":"See also: Thermal Printer Key Description PRINT_ON Start printing everything the user types PRINT_OFF Stop printing everything the user types","title":"Thermal Printer"},{"location":"keycodes/#us-ansi-shifted-symbols","text":"See also: US ANSI Shifted Symbols Key Aliases Description KC_TILDE KC_TILD ~ KC_EXCLAIM KC_EXLM ! KC_AT @ KC_HASH # KC_DOLLAR KC_DLR $ KC_PERCENT KC_PERC % KC_CIRCUMFLEX KC_CIRC ^ KC_AMPERSAND KC_AMPR & KC_ASTERISK KC_ASTR * KC_LEFT_PAREN KC_LPRN ( KC_RIGHT_PAREN KC_RPRN ) KC_UNDERSCORE KC_UNDS _ KC_PLUS + KC_LEFT_CURLY_BRACE KC_LCBR { KC_RIGHT_CURLY_BRACE KC_RCBR } KC_PIPE \\| KC_COLON KC_COLN : KC_DOUBLE_QUOTE KC_DQUO , KC_DQT \" KC_LEFT_ANGLE_BRACKET KC_LABK , KC_LT < KC_RIGHT_ANGLE_BRACKET KC_RABK , KC_GT > KC_QUESTION KC_QUES ?","title":"US ANSI Shifted Symbols"},{"location":"keycodes/#one-shot-keys","text":"See also: One Shot Keys Key Description OSM(mod) Hold mod for one keypress OSL(layer) Switch to layer for one keypress OS_ON Turns One Shot keys on OS_OFF Turns One Shot keys off OS_TOGG Toggles One Shot keys status","title":"One Shot Keys"},{"location":"keycodes/#space-cadet","text":"See also: Space Cadet Key Description KC_LCPO Left Control when held, ( when tapped KC_RCPC Right Control when held, ) when tapped KC_LSPO Left Shift when held, ( when tapped KC_RSPC Right Shift when held, ) when tapped KC_LAPO Left Alt when held, ( when tapped KC_RAPC Right Alt when held, ) when tapped KC_SFTENT Right Shift when held, Enter when tapped","title":"Space Cadet"},{"location":"keycodes/#swap-hands","text":"See also: Swap Hands Key Description SH_T(key) Sends key with a tap; momentary swap when held. SW_ON Turns on swapping and leaves it on. SW_OFF Turn off swapping and leaves it off. Good for returning to a known state. SH_MON Swaps hands when pressed, returns to normal when released (momentary). SH_MOFF Momentarily turns off swap. SH_TG Toggles swap on and off with every key press. SH_TT Toggles with a tap; momentary when held. SH_OS One shot swap hands: toggle while pressed or until next key press.","title":"Swap Hands"},{"location":"keycodes/#unicode-support","text":"See also: Unicode Support Key Aliases Description UC(c) Send Unicode code point c X(i) Send Unicode code point at index i in unicode_map XP(i, j) Send Unicode code point at index i , or j if Shift/Caps is on UNICODE_MODE_FORWARD UC_MOD Cycle through selected input modes UNICODE_MODE_REVERSE UC_RMOD Cycle through selected input modes in reverse UNICODE_MODE_MAC UC_M_MA Switch to macOS input UNICODE_MODE_LNX UC_M_LN Switch to Linux input UNICODE_MODE_WIN UC_M_WI Switch to Windows input UNICODE_MODE_BSD UC_M_BS Switch to BSD input (not implemented) UNICODE_MODE_WINC UC_M_WC Switch to Windows input using WinCompose","title":"Unicode Support"},{"location":"keycodes_basic/","text":"Basic Keycodes \u00b6 The basic set of keycodes are based on the HID Keyboard/Keypad Usage Page (0x07) with the exception of KC_NO , KC_TRNS and keycodes in the 0xA5-DF range. See below for more details. Letters and Numbers \u00b6 Key Description KC_A a and A KC_B b and B KC_C c and C KC_D d and D KC_E e and E KC_F f and F KC_G g and G KC_H h and H KC_I i and I KC_J j and J KC_K k and K KC_L l and L KC_M m and M KC_N n and N KC_O o and O KC_P p and P KC_Q q and Q KC_R r and R KC_S s and S KC_T t and T KC_U u and U KC_V v and V KC_W w and W KC_X x and X KC_Y y and Y KC_Z z and Z KC_1 1 and ! KC_2 2 and @ KC_3 3 and # KC_4 4 and $ KC_5 5 and % KC_6 6 and ^ KC_7 7 and & KC_8 8 and * KC_9 9 and ( KC_0 0 and ) F Keys \u00b6 Key Description KC_F1 F1 KC_F2 F2 KC_F3 F3 KC_F4 F4 KC_F5 F5 KC_F6 F6 KC_F7 F7 KC_F8 F8 KC_F9 F9 KC_F10 F10 KC_F11 F11 KC_F12 F12 KC_F13 F13 KC_F14 F14 KC_F15 F15 KC_F16 F16 KC_F17 F17 KC_F18 F18 KC_F19 F19 KC_F20 F20 KC_F21 F21 KC_F22 F22 KC_F23 F23 KC_F24 F24 Punctuation \u00b6 Key Aliases Description KC_ENTER KC_ENT Return (Enter) KC_ESCAPE KC_ESC Escape KC_BSPACE KC_BSPC Delete (Backspace) KC_TAB Tab KC_SPACE KC_SPC Spacebar KC_MINUS KC_MINS - and _ KC_EQUAL KC_EQL = and + KC_LBRACKET KC_LBRC [ and { KC_RBRACKET KC_RBRC ] and } KC_BSLASH KC_BSLS \\ and \\| KC_NONUS_HASH KC_NUHS Non-US # and ~ KC_SCOLON KC_SCLN ; and : KC_QUOTE KC_QUOT ' and \" KC_GRAVE KC_GRV , KC_ZKHK ` and ~ , JIS Zenkaku/Hankaku KC_COMMA KC_COMM , and < KC_DOT . and > KC_SLASH KC_SLSH / and ? KC_NONUS_BSLASH KC_NUBS Non-US \\ and \\| Lock Keys \u00b6 Key Aliases Description KC_CAPSLOCK KC_CLCK , KC_CAPS Caps Lock KC_SCROLLLOCK KC_SLCK , KC_BRMD Scroll Lock, Brightness Down (macOS) KC_NUMLOCK KC_NLCK Keypad Num Lock and Clear KC_LOCKING_CAPS KC_LCAP Locking Caps Lock KC_LOCKING_NUM KC_LNUM Locking Num Lock KC_LOCKING_SCROLL KC_LSCR Locking Scroll Lock Modifiers \u00b6 Key Aliases Description KC_LCTRL KC_LCTL Left Control KC_LSHIFT KC_LSFT Left Shift KC_LALT KC_LOPT Left Alt (Option) KC_LGUI KC_LCMD , KC_LWIN Left GUI (Windows/Command/Meta key) KC_RCTRL KC_RCTL Right Control KC_RSHIFT KC_RSFT Right Shift KC_RALT KC_ROPT , KC_ALGR Right Alt (Option/AltGr) KC_RGUI KC_RCMD , KC_RWIN Right GUI (Windows/Command/Meta key) International \u00b6 Key Aliases Description KC_INT1 KC_RO JIS \\ and _ KC_INT2 KC_KANA JIS Katakana/Hiragana KC_INT3 KC_JYEN JIS \u00a5 and \\| KC_INT4 KC_HENK JIS Henkan KC_INT5 KC_MHEN JIS Muhenkan KC_INT6 JIS Numpad , KC_INT7 International 7 KC_INT8 International 8 KC_INT9 International 9 KC_LANG1 KC_HAEN Hangul/English KC_LANG2 KC_HANJ Hanja KC_LANG3 JIS Katakana KC_LANG4 JIS Hiragana KC_LANG5 JIS Zenkaku/Hankaku KC_LANG6 Language 6 KC_LANG7 Language 7 KC_LANG8 Language 8 KC_LANG9 Language 9 Commands \u00b6 Key Aliases Description KC_PSCREEN KC_PSCR Print Screen KC_PAUSE KC_PAUS , KC_BRK , KC_BRMU Pause, Brightness Up (macOS) KC_INSERT KC_INS Insert KC_HOME Home KC_PGUP Page Up KC_DELETE KC_DEL Forward Delete KC_END End KC_PGDOWN KC_PGDN Page Down KC_RIGHT KC_RGHT Right Arrow KC_LEFT Left Arrow KC_DOWN Down Arrow KC_UP Up Arrow KC_APPLICATION KC_APP Application (Windows Context Menu Key) KC_POWER System Power KC_EXECUTE KC_EXEC Execute KC_HELP Help KC_MENU Menu KC_SELECT KC_SLCT Select KC_STOP Stop KC_AGAIN KC_AGIN Again KC_UNDO Undo KC_CUT Cut KC_COPY Copy KC_PASTE KC_PSTE Paste KC_FIND Find KC__MUTE Mute KC__VOLUP Volume Up KC__VOLDOWN Volume Down KC_ALT_ERASE KC_ERAS Alternate Erase KC_SYSREQ SysReq/Attention KC_CANCEL Cancel KC_CLEAR KC_CLR Clear KC_PRIOR Prior KC_RETURN Return KC_SEPARATOR Separator KC_OUT Out KC_OPER Oper KC_CLEAR_AGAIN Clear/Again KC_CRSEL CrSel/Props KC_EXSEL ExSel Media Keys \u00b6 These keycodes are not part of the Keyboard/Keypad usage page. The SYSTEM_ keycodes are found in the Generic Desktop page, and the rest are located in the Consumer page. Tip Some of these keycodes may behave differently depending on the OS. For example, on macOS, the keycodes KC_MEDIA_FAST_FORWARD , KC_MEDIA_REWIND , KC_MEDIA_NEXT_TRACK and KC_MEDIA_PREV_TRACK skip within the current track when held, but skip the entire track when tapped. Key Aliases Description KC_SYSTEM_POWER KC_PWR System Power Down KC_SYSTEM_SLEEP KC_SLEP System Sleep KC_SYSTEM_WAKE KC_WAKE System Wake KC_AUDIO_MUTE KC_MUTE Mute KC_AUDIO_VOL_UP KC_VOLU Volume Up KC_AUDIO_VOL_DOWN KC_VOLD Volume Down KC_MEDIA_NEXT_TRACK KC_MNXT Next Track KC_MEDIA_PREV_TRACK KC_MPRV Previous Track KC_MEDIA_STOP KC_MSTP Stop Track KC_MEDIA_PLAY_PAUSE KC_MPLY Play/Pause Track KC_MEDIA_SELECT KC_MSEL Launch Media Player KC_MEDIA_EJECT KC_EJCT Eject KC_MAIL Launch Mail KC_CALCULATOR KC_CALC Launch Calculator KC_MY_COMPUTER KC_MYCM Launch My Computer KC_WWW_SEARCH KC_WSCH Browser Search KC_WWW_HOME KC_WHOM Browser Home KC_WWW_BACK KC_WBAK Browser Back KC_WWW_FORWARD KC_WFWD Browser Forward KC_WWW_STOP KC_WSTP Browser Stop KC_WWW_REFRESH KC_WREF Browser Refresh KC_WWW_FAVORITES KC_WFAV Browser Favorites KC_MEDIA_FAST_FORWARD KC_MFFD Next Track KC_MEDIA_REWIND KC_MRWD Previous Track KC_BRIGHTNESS_UP KC_BRIU Brightness Up KC_BRIGHTNESS_DOWN KC_BRID Brightness Down Number Pad \u00b6 Key Aliases Description KC_KP_SLASH KC_PSLS Keypad / KC_KP_ASTERISK KC_PAST Keypad * KC_KP_MINUS KC_PMNS Keypad - KC_KP_PLUS KC_PPLS Keypad + KC_KP_ENTER KC_PENT Keypad Enter KC_KP_1 KC_P1 Keypad 1 and End KC_KP_2 KC_P2 Keypad 2 and Down Arrow KC_KP_3 KC_P3 Keypad 3 and Page Down KC_KP_4 KC_P4 Keypad 4 and Left Arrow KC_KP_5 KC_P5 Keypad 5 KC_KP_6 KC_P6 Keypad 6 and Right Arrow KC_KP_7 KC_P7 Keypad 7 and Home KC_KP_8 KC_P8 Keypad 8 and Up Arrow KC_KP_9 KC_P9 Keypad 9 and Page Up KC_KP_0 KC_P0 Keypad 0 and Insert KC_KP_DOT KC_PDOT Keypad . and Delete KC_KP_EQUAL KC_PEQL Keypad = KC_KP_COMMA KC_PCMM Keypad , KC_KP_EQUAL_AS400 Keypad = on AS/400 keyboards Special Keys \u00b6 In addition to these, keycodes in the range of 0xA5-DF are reserved for internal use. Key Aliases Description KC_NO XXXXXXX Ignore this key (NOOP) KC_TRANSPARENT KC_TRNS , _______ Use the next lowest non-transparent key","title":"\u57fa\u672c\u952e\u7801"},{"location":"keycodes_basic/#basic-keycodes","text":"The basic set of keycodes are based on the HID Keyboard/Keypad Usage Page (0x07) with the exception of KC_NO , KC_TRNS and keycodes in the 0xA5-DF range. See below for more details.","title":"Basic Keycodes"},{"location":"keycodes_basic/#letters-and-numbers","text":"Key Description KC_A a and A KC_B b and B KC_C c and C KC_D d and D KC_E e and E KC_F f and F KC_G g and G KC_H h and H KC_I i and I KC_J j and J KC_K k and K KC_L l and L KC_M m and M KC_N n and N KC_O o and O KC_P p and P KC_Q q and Q KC_R r and R KC_S s and S KC_T t and T KC_U u and U KC_V v and V KC_W w and W KC_X x and X KC_Y y and Y KC_Z z and Z KC_1 1 and ! KC_2 2 and @ KC_3 3 and # KC_4 4 and $ KC_5 5 and % KC_6 6 and ^ KC_7 7 and & KC_8 8 and * KC_9 9 and ( KC_0 0 and )","title":"Letters and Numbers"},{"location":"keycodes_basic/#f-keys","text":"Key Description KC_F1 F1 KC_F2 F2 KC_F3 F3 KC_F4 F4 KC_F5 F5 KC_F6 F6 KC_F7 F7 KC_F8 F8 KC_F9 F9 KC_F10 F10 KC_F11 F11 KC_F12 F12 KC_F13 F13 KC_F14 F14 KC_F15 F15 KC_F16 F16 KC_F17 F17 KC_F18 F18 KC_F19 F19 KC_F20 F20 KC_F21 F21 KC_F22 F22 KC_F23 F23 KC_F24 F24","title":"F Keys"},{"location":"keycodes_basic/#punctuation","text":"Key Aliases Description KC_ENTER KC_ENT Return (Enter) KC_ESCAPE KC_ESC Escape KC_BSPACE KC_BSPC Delete (Backspace) KC_TAB Tab KC_SPACE KC_SPC Spacebar KC_MINUS KC_MINS - and _ KC_EQUAL KC_EQL = and + KC_LBRACKET KC_LBRC [ and { KC_RBRACKET KC_RBRC ] and } KC_BSLASH KC_BSLS \\ and \\| KC_NONUS_HASH KC_NUHS Non-US # and ~ KC_SCOLON KC_SCLN ; and : KC_QUOTE KC_QUOT ' and \" KC_GRAVE KC_GRV , KC_ZKHK ` and ~ , JIS Zenkaku/Hankaku KC_COMMA KC_COMM , and < KC_DOT . and > KC_SLASH KC_SLSH / and ? KC_NONUS_BSLASH KC_NUBS Non-US \\ and \\|","title":"Punctuation"},{"location":"keycodes_basic/#lock-keys","text":"Key Aliases Description KC_CAPSLOCK KC_CLCK , KC_CAPS Caps Lock KC_SCROLLLOCK KC_SLCK , KC_BRMD Scroll Lock, Brightness Down (macOS) KC_NUMLOCK KC_NLCK Keypad Num Lock and Clear KC_LOCKING_CAPS KC_LCAP Locking Caps Lock KC_LOCKING_NUM KC_LNUM Locking Num Lock KC_LOCKING_SCROLL KC_LSCR Locking Scroll Lock","title":"Lock Keys"},{"location":"keycodes_basic/#modifiers","text":"Key Aliases Description KC_LCTRL KC_LCTL Left Control KC_LSHIFT KC_LSFT Left Shift KC_LALT KC_LOPT Left Alt (Option) KC_LGUI KC_LCMD , KC_LWIN Left GUI (Windows/Command/Meta key) KC_RCTRL KC_RCTL Right Control KC_RSHIFT KC_RSFT Right Shift KC_RALT KC_ROPT , KC_ALGR Right Alt (Option/AltGr) KC_RGUI KC_RCMD , KC_RWIN Right GUI (Windows/Command/Meta key)","title":"Modifiers"},{"location":"keycodes_basic/#international","text":"Key Aliases Description KC_INT1 KC_RO JIS \\ and _ KC_INT2 KC_KANA JIS Katakana/Hiragana KC_INT3 KC_JYEN JIS \u00a5 and \\| KC_INT4 KC_HENK JIS Henkan KC_INT5 KC_MHEN JIS Muhenkan KC_INT6 JIS Numpad , KC_INT7 International 7 KC_INT8 International 8 KC_INT9 International 9 KC_LANG1 KC_HAEN Hangul/English KC_LANG2 KC_HANJ Hanja KC_LANG3 JIS Katakana KC_LANG4 JIS Hiragana KC_LANG5 JIS Zenkaku/Hankaku KC_LANG6 Language 6 KC_LANG7 Language 7 KC_LANG8 Language 8 KC_LANG9 Language 9","title":"International"},{"location":"keycodes_basic/#commands","text":"Key Aliases Description KC_PSCREEN KC_PSCR Print Screen KC_PAUSE KC_PAUS , KC_BRK , KC_BRMU Pause, Brightness Up (macOS) KC_INSERT KC_INS Insert KC_HOME Home KC_PGUP Page Up KC_DELETE KC_DEL Forward Delete KC_END End KC_PGDOWN KC_PGDN Page Down KC_RIGHT KC_RGHT Right Arrow KC_LEFT Left Arrow KC_DOWN Down Arrow KC_UP Up Arrow KC_APPLICATION KC_APP Application (Windows Context Menu Key) KC_POWER System Power KC_EXECUTE KC_EXEC Execute KC_HELP Help KC_MENU Menu KC_SELECT KC_SLCT Select KC_STOP Stop KC_AGAIN KC_AGIN Again KC_UNDO Undo KC_CUT Cut KC_COPY Copy KC_PASTE KC_PSTE Paste KC_FIND Find KC__MUTE Mute KC__VOLUP Volume Up KC__VOLDOWN Volume Down KC_ALT_ERASE KC_ERAS Alternate Erase KC_SYSREQ SysReq/Attention KC_CANCEL Cancel KC_CLEAR KC_CLR Clear KC_PRIOR Prior KC_RETURN Return KC_SEPARATOR Separator KC_OUT Out KC_OPER Oper KC_CLEAR_AGAIN Clear/Again KC_CRSEL CrSel/Props KC_EXSEL ExSel","title":"Commands"},{"location":"keycodes_basic/#media-keys","text":"These keycodes are not part of the Keyboard/Keypad usage page. The SYSTEM_ keycodes are found in the Generic Desktop page, and the rest are located in the Consumer page. Tip Some of these keycodes may behave differently depending on the OS. For example, on macOS, the keycodes KC_MEDIA_FAST_FORWARD , KC_MEDIA_REWIND , KC_MEDIA_NEXT_TRACK and KC_MEDIA_PREV_TRACK skip within the current track when held, but skip the entire track when tapped. Key Aliases Description KC_SYSTEM_POWER KC_PWR System Power Down KC_SYSTEM_SLEEP KC_SLEP System Sleep KC_SYSTEM_WAKE KC_WAKE System Wake KC_AUDIO_MUTE KC_MUTE Mute KC_AUDIO_VOL_UP KC_VOLU Volume Up KC_AUDIO_VOL_DOWN KC_VOLD Volume Down KC_MEDIA_NEXT_TRACK KC_MNXT Next Track KC_MEDIA_PREV_TRACK KC_MPRV Previous Track KC_MEDIA_STOP KC_MSTP Stop Track KC_MEDIA_PLAY_PAUSE KC_MPLY Play/Pause Track KC_MEDIA_SELECT KC_MSEL Launch Media Player KC_MEDIA_EJECT KC_EJCT Eject KC_MAIL Launch Mail KC_CALCULATOR KC_CALC Launch Calculator KC_MY_COMPUTER KC_MYCM Launch My Computer KC_WWW_SEARCH KC_WSCH Browser Search KC_WWW_HOME KC_WHOM Browser Home KC_WWW_BACK KC_WBAK Browser Back KC_WWW_FORWARD KC_WFWD Browser Forward KC_WWW_STOP KC_WSTP Browser Stop KC_WWW_REFRESH KC_WREF Browser Refresh KC_WWW_FAVORITES KC_WFAV Browser Favorites KC_MEDIA_FAST_FORWARD KC_MFFD Next Track KC_MEDIA_REWIND KC_MRWD Previous Track KC_BRIGHTNESS_UP KC_BRIU Brightness Up KC_BRIGHTNESS_DOWN KC_BRID Brightness Down","title":"Media Keys"},{"location":"keycodes_basic/#number-pad","text":"Key Aliases Description KC_KP_SLASH KC_PSLS Keypad / KC_KP_ASTERISK KC_PAST Keypad * KC_KP_MINUS KC_PMNS Keypad - KC_KP_PLUS KC_PPLS Keypad + KC_KP_ENTER KC_PENT Keypad Enter KC_KP_1 KC_P1 Keypad 1 and End KC_KP_2 KC_P2 Keypad 2 and Down Arrow KC_KP_3 KC_P3 Keypad 3 and Page Down KC_KP_4 KC_P4 Keypad 4 and Left Arrow KC_KP_5 KC_P5 Keypad 5 KC_KP_6 KC_P6 Keypad 6 and Right Arrow KC_KP_7 KC_P7 Keypad 7 and Home KC_KP_8 KC_P8 Keypad 8 and Up Arrow KC_KP_9 KC_P9 Keypad 9 and Page Up KC_KP_0 KC_P0 Keypad 0 and Insert KC_KP_DOT KC_PDOT Keypad . and Delete KC_KP_EQUAL KC_PEQL Keypad = KC_KP_COMMA KC_PCMM Keypad , KC_KP_EQUAL_AS400 Keypad = on AS/400 keyboards","title":"Number Pad"},{"location":"keycodes_basic/#special-keys","text":"In addition to these, keycodes in the range of 0xA5-DF are reserved for internal use. Key Aliases Description KC_NO XXXXXXX Ignore this key (NOOP) KC_TRANSPARENT KC_TRNS , _______ Use the next lowest non-transparent key","title":"Special Keys"},{"location":"keycodes_us_ansi_shifted/","text":"US ANSI Shifted Symbols \u00b6 These keycodes correspond to characters that are \"shifted\" on a standard US ANSI keyboard. They do not have keycodes of their own but are simply shortcuts for LSFT(kc) , and as such send a Left Shift with the unshifted keycode, not the symbol itself. Caveats \u00b6 Unfortunately, these keycodes cannot be used in Mod-Taps or Layer-Taps, since any modifiers specified in the keycode are ignored. Additionally, you may run into issues when using Remote Desktop Connection on Windows. Because these codes send shift very fast, Remote Desktop may miss the codes. To fix this, open Remote Desktop Connection, click on \"Show Options\", open the the \"Local Resources\" tab. In the keyboard section, change the drop down to \"On this Computer\". This will fix the issue, and allow the characters to work correctly. Keycodes \u00b6 Key Aliases Description KC_TILDE KC_TILD ~ KC_EXCLAIM KC_EXLM ! KC_AT @ KC_HASH # KC_DOLLAR KC_DLR $ KC_PERCENT KC_PERC % KC_CIRCUMFLEX KC_CIRC ^ KC_AMPERSAND KC_AMPR & KC_ASTERISK KC_ASTR * KC_LEFT_PAREN KC_LPRN ( KC_RIGHT_PAREN KC_RPRN ) KC_UNDERSCORE KC_UNDS _ KC_PLUS + KC_LEFT_CURLY_BRACE KC_LCBR { KC_RIGHT_CURLY_BRACE KC_RCBR } KC_PIPE \\| KC_COLON KC_COLN : KC_DOUBLE_QUOTE KC_DQUO , KC_DQT \" KC_LEFT_ANGLE_BRACKET KC_LABK , KC_LT < KC_RIGHT_ANGLE_BRACKET KC_RABK , KC_GT > KC_QUESTION KC_QUES ?","title":"US ANSI\u63a7\u5236\u7801"},{"location":"keycodes_us_ansi_shifted/#us-ansi-shifted-symbols","text":"These keycodes correspond to characters that are \"shifted\" on a standard US ANSI keyboard. They do not have keycodes of their own but are simply shortcuts for LSFT(kc) , and as such send a Left Shift with the unshifted keycode, not the symbol itself.","title":"US ANSI Shifted Symbols"},{"location":"keycodes_us_ansi_shifted/#caveats","text":"Unfortunately, these keycodes cannot be used in Mod-Taps or Layer-Taps, since any modifiers specified in the keycode are ignored. Additionally, you may run into issues when using Remote Desktop Connection on Windows. Because these codes send shift very fast, Remote Desktop may miss the codes. To fix this, open Remote Desktop Connection, click on \"Show Options\", open the the \"Local Resources\" tab. In the keyboard section, change the drop down to \"On this Computer\". This will fix the issue, and allow the characters to work correctly.","title":"Caveats"},{"location":"keycodes_us_ansi_shifted/#keycodes","text":"Key Aliases Description KC_TILDE KC_TILD ~ KC_EXCLAIM KC_EXLM ! KC_AT @ KC_HASH # KC_DOLLAR KC_DLR $ KC_PERCENT KC_PERC % KC_CIRCUMFLEX KC_CIRC ^ KC_AMPERSAND KC_AMPR & KC_ASTERISK KC_ASTR * KC_LEFT_PAREN KC_LPRN ( KC_RIGHT_PAREN KC_RPRN ) KC_UNDERSCORE KC_UNDS _ KC_PLUS + KC_LEFT_CURLY_BRACE KC_LCBR { KC_RIGHT_CURLY_BRACE KC_RCBR } KC_PIPE \\| KC_COLON KC_COLN : KC_DOUBLE_QUOTE KC_DQUO , KC_DQT \" KC_LEFT_ANGLE_BRACKET KC_LABK , KC_LT < KC_RIGHT_ANGLE_BRACKET KC_RABK , KC_GT > KC_QUESTION KC_QUES ?","title":"Keycodes"},{"location":"keymap/","text":"Keymap Overview \u00b6 QMK keymaps are defined inside a C source file. The data structure is an array of arrays. The outer array is a list of layer arrays while the inner layer array is a list of keys. Most keyboards define a LAYOUT() macro to help you create this array of arrays. Keymap and Layers \u00b6 In QMK, const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] holds multiple layers of keymap information in 16 bit data holding the action code . You can define 32 layers at most. For trivial key definitions, the higher 8 bits of the action code are all 0 and the lower 8 bits holds the USB HID usage code generated by the key as keycode . Respective layers can be validated simultaneously. Layers are indexed with 0 to 31 and higher layer has precedence. Keymap: 32 Layers Layer: action code matrix ----------------- --------------------- stack of layers array_of_action_code[row][column] ____________ precedence _______________________ / / | high / ESC / F1 / F2 / F3 .... 31 /___________// | /-----/-----/-----/----- 30 /___________// | / TAB / Q / W / E .... 29 /___________/ | /-----/-----/-----/----- : _:_:_:_:_:__ | : /LCtrl/ A / S / D .... : / : : : : : / | : / : : : : 2 /___________// | 2 `-------------------------- 1 /___________// | 1 `-------------------------- 0 /___________/ V low 0 `-------------------------- Sometimes, the action code stored in keymap may be referred as keycode in some documents due to the TMK history. Keymap Layer Status \u00b6 The state of the Keymap layer is determined by two 32 bit parameters: default_layer_state indicates a base keymap layer (0-31) which is always valid and to be referred (the default layer). layer_state has current on/off status of each layer in its bits. Keymap layer '0' is usually the default_layer , with other layers initially off after booting up the firmware, although this can configured differently in config.h . It is useful to change default_layer when you completely switch a key layout, for example, if you want to switch to Colemak instead of Qwerty. Initial state of Keymap Change base layout ----------------------- ------------------ 31 31 30 30 29 29 : : : : ____________ 2 ____________ 2 / / 1 / / ,->1 /___________/ ,->0 /___________/ | 0 | | `--- default_layer = 0 `--- default_layer = 1 layer_state = 0x00000001 layer_state = 0x00000002 On the other hand, you can change layer_state to overlay the base layer with other layers for features such as navigation keys, function keys (F1-F12), media keys, and/or special actions. Overlay feature layer --------------------- bit|status ____________ ---+------ 31 / / 31 | 0 30 /___________// -----> 30 | 1 29 /___________/ -----> 29 | 1 : : | : : ____________ : | : 2 / / 2 | 0 ,->1 /___________/ -----> 1 | 1 | 0 0 | 0 | + `--- default_layer = 1 | layer_state = 0x60000002 <-' Layer Precedence and Transparency \u00b6 Note that higher layers have higher priority within the stack of layers . The firmware works its way down from the highest active layers to look up keycodes. Once the firmware locates a keycode other than KC_TRNS (transparent) on an active layer, it stops searching, and lower layers aren't referenced. ____________ / / <--- Higher layer / KC_TRNS // /___________// <--- Lower layer (KC_A) /___________/ In the above scenario, the non-transparent keys on the higher layer would be usable, but whenever `KC_TRNS` (or equivalent) is defined, the keycode (`KC_A`) on the lower level would be used. Note: Valid ways to denote transparency on a given layer: * KC_TRANSPARENT * KC_TRNS (alias) * _______ (alias) These keycodes allow the processing to fall through to lower layers in search of a non-transparent keycode to process. Anatomy of a keymap.c \u00b6 For this example we will walk through an older version of the default Clueboard 66% keymap . You'll find it helpful to open that file in another browser window so you can look at everything in context. There are 3 main sections of a keymap.c file you'll want to concern yourself with: The Definitions The Layer/Keymap Datastructure Custom Functions , if any Definitions \u00b6 At the top of the file you'll find this: #include QMK_KEYBOARD_H // Helpful defines #define GRAVE_MODS (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT)) /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * You can use _______ in place for KC_TRNS (transparent) * * Or you can use XXXXXXX for KC_NO (NOOP) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // Each layer gets a name for readability. // The underscores don't mean anything - you can // have a layer called STUFF or any other name. // Layer names don't all need to be of the same // length, and you can also skip them entirely // and just use numbers. #define _BL 0 #define _FL 1 #define _CL 2 These are some handy definitions we can use when building our keymap and our custom function. The GRAVE_MODS definition will be used later in our custom function, and the following _BL , _FL , and _CL defines make it easier to refer to each of our layers. Note: You may also find some older keymap files may also have a define(s) for _______ and/or XXXXXXX . These can be used in place for KC_TRNS and KC_NO respectively, making it easier to see what keys a layer is overriding. These definitions are now unecessary, as they are included by default. Layers and Keymaps \u00b6 The main part of this file is the keymaps[] definition. This is where you list your layers and the contents of those layers. This part of the file begins with this definition: const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { After this you'll find a list of LAYOUT() macros. A LAYOUT() is simply a list of keys to define a single layer. Typically you'll have one or more \"base layers\" (such as QWERTY, Dvorak, or Colemak) and then you'll layer on top of that one or more \"function\" layers. Due to the way layers are processed you can't overlay a \"lower\" layer on top of a \"higher\" layer. keymaps[][MATRIX_ROWS][MATRIX_COLS] in QMK holds the 16 bit action code (sometimes referred as the quantum keycode) in it. For the keycode representing typical keys, its high byte is 0 and its low byte is the USB HID usage ID for keyboard. TMK from which QMK was forked uses const uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] instead and holds the 8 bit keycode. Some keycode values are reserved to induce execution of certain action codes via the fn_actions[] array. Base Layer \u00b6 Here is an example of the Clueboard's base layer: /* Keymap _BL: Base Layer (Default Layer) */ [_BL] = LAYOUT( F(0), KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7, KC_8, KC_9, KC_0, KC_MINS, KC_EQL, KC_GRV, KC_BSPC, KC_PGUP, \\ KC_TAB, KC_Q, KC_W, KC_E, KC_R, KC_T, KC_Y, KC_U, KC_I, KC_O, KC_P, KC_LBRC, KC_RBRC, KC_BSLS, KC_PGDN, \\ KC_CAPS, KC_A, KC_S, KC_D, KC_F, KC_G, KC_H, KC_J, KC_K, KC_L, KC_SCLN, KC_QUOT, KC_NUHS, KC_ENT, \\ KC_LSFT, KC_NUBS, KC_Z, KC_X, KC_C, KC_V, KC_B, KC_N, KC_M, KC_COMM, KC_DOT, KC_SLSH, KC_RO, KC_RSFT, KC_UP, \\ KC_LCTL, KC_LGUI, KC_LALT, KC_MHEN, KC_SPC,KC_SPC, KC_HENK, KC_RALT, KC_RCTL, MO(_FL), KC_LEFT, KC_DOWN, KC_RGHT), Some interesting things to note about this: From a C source point of view it's only a single array, but we have embedded whitespace to more easily visualize where each key is on the physical device. Plain keyboard scancodes are prefixed with KC_, while \"special\" keys are not. The upper left key activates custom function 0 ( F(0) ) The \"Fn\" key is defined with MO(_FL) , which moves to the _FL layer while that key is being held down. Function Overlay Layer \u00b6 Our function layer is, from a code point of view, no different from the base layer. Conceptually, however, you will build that layer as an overlay, not a replacement. For many people this distinction does not matter, but as you build more complicated layering setups it matters more and more. [_FL] = LAYOUT( KC_GRV, KC_F1, KC_F2, KC_F3, KC_F4, KC_F5, KC_F6, KC_F7, KC_F8, KC_F9, KC_F10, KC_F11, KC_F12, _______, KC_DEL, BL_STEP, \\ _______, _______, _______,_______,_______,_______,_______,_______,KC_PSCR,KC_SLCK, KC_PAUS, _______, _______, _______, _______, \\ _______, _______, MO(_CL),_______,_______,_______,_______,_______,_______,_______, _______, _______, _______, _______, \\ _______, _______, _______,_______,_______,_______,_______,_______,_______,_______, _______, _______, _______, _______, KC_PGUP, \\ _______, _______, _______, _______, _______,_______, _______, _______, _______, MO(_FL), KC_HOME, KC_PGDN, KC_END), Some interesting things to note: We have used our _______ definition to turn KC_TRNS into _______ . This makes it easier to spot the keys that have changed on this layer. While in this layer if you press one of the _______ keys it will activate the key in the next lowest active layer. Nitty Gritty Details \u00b6 This should have given you a basic overview for creating your own keymap. For more details see the following resources: Keycodes Keymap FAQ We are actively working to improve these docs. If you have suggestions for how they could be made better please file an issue !","title":"\u5e03\u5c40\u6982\u8ff0"},{"location":"keymap/#keymap-overview","text":"QMK keymaps are defined inside a C source file. The data structure is an array of arrays. The outer array is a list of layer arrays while the inner layer array is a list of keys. Most keyboards define a LAYOUT() macro to help you create this array of arrays.","title":"Keymap Overview"},{"location":"keymap/#keymap-and-layers","text":"In QMK, const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] holds multiple layers of keymap information in 16 bit data holding the action code . You can define 32 layers at most. For trivial key definitions, the higher 8 bits of the action code are all 0 and the lower 8 bits holds the USB HID usage code generated by the key as keycode . Respective layers can be validated simultaneously. Layers are indexed with 0 to 31 and higher layer has precedence. Keymap: 32 Layers Layer: action code matrix ----------------- --------------------- stack of layers array_of_action_code[row][column] ____________ precedence _______________________ / / | high / ESC / F1 / F2 / F3 .... 31 /___________// | /-----/-----/-----/----- 30 /___________// | / TAB / Q / W / E .... 29 /___________/ | /-----/-----/-----/----- : _:_:_:_:_:__ | : /LCtrl/ A / S / D .... : / : : : : : / | : / : : : : 2 /___________// | 2 `-------------------------- 1 /___________// | 1 `-------------------------- 0 /___________/ V low 0 `-------------------------- Sometimes, the action code stored in keymap may be referred as keycode in some documents due to the TMK history.","title":"Keymap and Layers"},{"location":"keymap/#keymap-layer-status","text":"The state of the Keymap layer is determined by two 32 bit parameters: default_layer_state indicates a base keymap layer (0-31) which is always valid and to be referred (the default layer). layer_state has current on/off status of each layer in its bits. Keymap layer '0' is usually the default_layer , with other layers initially off after booting up the firmware, although this can configured differently in config.h . It is useful to change default_layer when you completely switch a key layout, for example, if you want to switch to Colemak instead of Qwerty. Initial state of Keymap Change base layout ----------------------- ------------------ 31 31 30 30 29 29 : : : : ____________ 2 ____________ 2 / / 1 / / ,->1 /___________/ ,->0 /___________/ | 0 | | `--- default_layer = 0 `--- default_layer = 1 layer_state = 0x00000001 layer_state = 0x00000002 On the other hand, you can change layer_state to overlay the base layer with other layers for features such as navigation keys, function keys (F1-F12), media keys, and/or special actions. Overlay feature layer --------------------- bit|status ____________ ---+------ 31 / / 31 | 0 30 /___________// -----> 30 | 1 29 /___________/ -----> 29 | 1 : : | : : ____________ : | : 2 / / 2 | 0 ,->1 /___________/ -----> 1 | 1 | 0 0 | 0 | + `--- default_layer = 1 | layer_state = 0x60000002 <-'","title":"Keymap Layer Status"},{"location":"keymap/#layer-precedence-and-transparency","text":"Note that higher layers have higher priority within the stack of layers . The firmware works its way down from the highest active layers to look up keycodes. Once the firmware locates a keycode other than KC_TRNS (transparent) on an active layer, it stops searching, and lower layers aren't referenced. ____________ / / <--- Higher layer / KC_TRNS // /___________// <--- Lower layer (KC_A) /___________/ In the above scenario, the non-transparent keys on the higher layer would be usable, but whenever `KC_TRNS` (or equivalent) is defined, the keycode (`KC_A`) on the lower level would be used. Note: Valid ways to denote transparency on a given layer: * KC_TRANSPARENT * KC_TRNS (alias) * _______ (alias) These keycodes allow the processing to fall through to lower layers in search of a non-transparent keycode to process.","title":"Layer Precedence and Transparency"},{"location":"keymap/#anatomy-of-a-keymapc","text":"For this example we will walk through an older version of the default Clueboard 66% keymap . You'll find it helpful to open that file in another browser window so you can look at everything in context. There are 3 main sections of a keymap.c file you'll want to concern yourself with: The Definitions The Layer/Keymap Datastructure Custom Functions , if any","title":"Anatomy of a keymap.c"},{"location":"keymap/#definitions","text":"At the top of the file you'll find this: #include QMK_KEYBOARD_H // Helpful defines #define GRAVE_MODS (MOD_BIT(KC_LSHIFT)|MOD_BIT(KC_RSHIFT)|MOD_BIT(KC_LGUI)|MOD_BIT(KC_RGUI)|MOD_BIT(KC_LALT)|MOD_BIT(KC_RALT)) /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * You can use _______ in place for KC_TRNS (transparent) * * Or you can use XXXXXXX for KC_NO (NOOP) * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ // Each layer gets a name for readability. // The underscores don't mean anything - you can // have a layer called STUFF or any other name. // Layer names don't all need to be of the same // length, and you can also skip them entirely // and just use numbers. #define _BL 0 #define _FL 1 #define _CL 2 These are some handy definitions we can use when building our keymap and our custom function. The GRAVE_MODS definition will be used later in our custom function, and the following _BL , _FL , and _CL defines make it easier to refer to each of our layers. Note: You may also find some older keymap files may also have a define(s) for _______ and/or XXXXXXX . These can be used in place for KC_TRNS and KC_NO respectively, making it easier to see what keys a layer is overriding. These definitions are now unecessary, as they are included by default.","title":"Definitions"},{"location":"keymap/#layers-and-keymaps","text":"The main part of this file is the keymaps[] definition. This is where you list your layers and the contents of those layers. This part of the file begins with this definition: const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { After this you'll find a list of LAYOUT() macros. A LAYOUT() is simply a list of keys to define a single layer. Typically you'll have one or more \"base layers\" (such as QWERTY, Dvorak, or Colemak) and then you'll layer on top of that one or more \"function\" layers. Due to the way layers are processed you can't overlay a \"lower\" layer on top of a \"higher\" layer. keymaps[][MATRIX_ROWS][MATRIX_COLS] in QMK holds the 16 bit action code (sometimes referred as the quantum keycode) in it. For the keycode representing typical keys, its high byte is 0 and its low byte is the USB HID usage ID for keyboard. TMK from which QMK was forked uses const uint8_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] instead and holds the 8 bit keycode. Some keycode values are reserved to induce execution of certain action codes via the fn_actions[] array.","title":"Layers and Keymaps"},{"location":"keymap/#nitty-gritty-details","text":"This should have given you a basic overview for creating your own keymap. For more details see the following resources: Keycodes Keymap FAQ We are actively working to improve these docs. If you have suggestions for how they could be made better please file an issue !","title":"Nitty Gritty Details"},{"location":"mod_tap/","text":"Mod-Tap \u00b6 The Mod-Tap key MT(mod, kc) acts like a modifier when held, and a regular keycode when tapped. In other words, you can have a key that sends Escape when you tap it, but functions as a Control or Shift key when you hold it down. The modifiers this keycode and OSM() accept are prefixed with MOD_ , not KC_ : Modifier Description MOD_LCTL Left Control MOD_LSFT Left Shift MOD_LALT Left Alt MOD_LGUI Left GUI (Windows/Command/Meta key) MOD_RCTL Right Control MOD_RSFT Right Shift MOD_RALT Right Alt (AltGr) MOD_RGUI Right GUI (Windows/Command/Meta key) MOD_HYPR Hyper (Left Control, Shift, Alt and GUI) MOD_MEH Meh (Left Control, Shift, and Alt) You can combine these by ORing them together like so: MT ( MOD_LCTL | MOD_LSFT , KC_ESC ) This key would activate Left Control and Left Shift when held, and send Escape when tapped. For convenience, QMK includes some Mod-Tap shortcuts to make common combinations more compact in your keymap: Key Aliases Description LCTL_T(kc) CTL_T(kc) Left Control when held, kc when tapped LSFT_T(kc) SFT_T(kc) Left Shift when held, kc when tapped LALT_T(kc) LOPT_T(kc) , ALT_T(kc) , OPT_T(kc) Left Alt when held, kc when tapped LGUI_T(kc) LCMD_T(kc) , LWIN_T(kc) , GUI_T(kc) , CMD_T(kc) , WIN_T(kc) Left GUI when held, kc when tapped RCTL_T(kc) Right Control when held, kc when tapped RSFT_T(kc) Right Shift when held, kc when tapped RALT_T(kc) ROPT_T(kc) , ALGR_T(kc) Right Alt when held, kc when tapped RGUI_T(kc) RCMD_T(kc) , RWIN_T(kc) Right GUI when held, kc when tapped LSG_T(kc) SGUI_T(kc) , SCMD_T(kc) , SWIN_T(kc) Left Shift and GUI when held, kc when tapped LAG_T(kc) Left Alt and GUI when held, kc when tapped RSG_T(kc) Right Shift and GUI when held, kc when tapped RAG_T(kc) Right Alt and GUI when held, kc when tapped LCA_T(kc) Left Control and Alt when held, kc when tapped LSA_T(kc) Left Shift and Alt when held, kc when tapped RSA_T(kc) SAGR_T(kc) Right Shift and Right Alt (AltGr) when held, kc when tapped RCS_T(kc) Right Control and Right Shift when held, kc when tapped LCAG_T(kc) Left Control, Alt and GUI when held, kc when tapped RCAG_T(kc) Right Control, Alt and GUI when held, kc when tapped C_S_T(kc) Left Control and Shift when held, kc when tapped MEH_T(kc) Left Control, Shift and Alt when held, kc when tapped HYPR_T(kc) ALL_T(kc) Left Control, Shift, Alt and GUI when held, kc when tapped - more info here Caveats \u00b6 Currently, the kc argument of MT() is limited to the Basic Keycode set , meaning you can't use keycodes like LCTL() , KC_TILD , or anything greater than 0xFF . This is because QMK uses 16-bit keycodes, of which 3 bits are used for the function identifier, 1 bit for selecting right or left mods, and 4 bits to tell which mods are used, leaving only 8 bits for the keycode. Additionally, if at least one right-handed modifier is specified in a Mod-Tap, it will cause all modifiers specified to become right-handed, so it is not possible to mix and match the two - for example, Left Control and Right Shift would become Right Control and Right Shift. Expanding this would be complicated, at best. Moving to a 32-bit keycode would solve a lot of this, but would double the amount of space that the keymap matrix uses. And it could potentially cause issues, too. If you need to apply modifiers to your tapped keycode, Tap Dance can be used to accomplish this. You may also run into issues when using Remote Desktop Connection on Windows. Because these keycodes send key events faster than a human, Remote Desktop could miss them. To fix this, open Remote Desktop Connection, click on \"Show Options\", open the the \"Local Resources\" tab, and in the keyboard section, change the drop down to \"On this Computer\". This will fix the issue, and allow the characters to work correctly. It can also be mitigated by increasing TAP_CODE_DELAY . Other Resources \u00b6 See the Tap-Hold Configuration Options for additional flags that tweak Mod-Tap behavior.","title":"Mod-Tap"},{"location":"mod_tap/#mod-tap","text":"The Mod-Tap key MT(mod, kc) acts like a modifier when held, and a regular keycode when tapped. In other words, you can have a key that sends Escape when you tap it, but functions as a Control or Shift key when you hold it down. The modifiers this keycode and OSM() accept are prefixed with MOD_ , not KC_ : Modifier Description MOD_LCTL Left Control MOD_LSFT Left Shift MOD_LALT Left Alt MOD_LGUI Left GUI (Windows/Command/Meta key) MOD_RCTL Right Control MOD_RSFT Right Shift MOD_RALT Right Alt (AltGr) MOD_RGUI Right GUI (Windows/Command/Meta key) MOD_HYPR Hyper (Left Control, Shift, Alt and GUI) MOD_MEH Meh (Left Control, Shift, and Alt) You can combine these by ORing them together like so: MT ( MOD_LCTL | MOD_LSFT , KC_ESC ) This key would activate Left Control and Left Shift when held, and send Escape when tapped. For convenience, QMK includes some Mod-Tap shortcuts to make common combinations more compact in your keymap: Key Aliases Description LCTL_T(kc) CTL_T(kc) Left Control when held, kc when tapped LSFT_T(kc) SFT_T(kc) Left Shift when held, kc when tapped LALT_T(kc) LOPT_T(kc) , ALT_T(kc) , OPT_T(kc) Left Alt when held, kc when tapped LGUI_T(kc) LCMD_T(kc) , LWIN_T(kc) , GUI_T(kc) , CMD_T(kc) , WIN_T(kc) Left GUI when held, kc when tapped RCTL_T(kc) Right Control when held, kc when tapped RSFT_T(kc) Right Shift when held, kc when tapped RALT_T(kc) ROPT_T(kc) , ALGR_T(kc) Right Alt when held, kc when tapped RGUI_T(kc) RCMD_T(kc) , RWIN_T(kc) Right GUI when held, kc when tapped LSG_T(kc) SGUI_T(kc) , SCMD_T(kc) , SWIN_T(kc) Left Shift and GUI when held, kc when tapped LAG_T(kc) Left Alt and GUI when held, kc when tapped RSG_T(kc) Right Shift and GUI when held, kc when tapped RAG_T(kc) Right Alt and GUI when held, kc when tapped LCA_T(kc) Left Control and Alt when held, kc when tapped LSA_T(kc) Left Shift and Alt when held, kc when tapped RSA_T(kc) SAGR_T(kc) Right Shift and Right Alt (AltGr) when held, kc when tapped RCS_T(kc) Right Control and Right Shift when held, kc when tapped LCAG_T(kc) Left Control, Alt and GUI when held, kc when tapped RCAG_T(kc) Right Control, Alt and GUI when held, kc when tapped C_S_T(kc) Left Control and Shift when held, kc when tapped MEH_T(kc) Left Control, Shift and Alt when held, kc when tapped HYPR_T(kc) ALL_T(kc) Left Control, Shift, Alt and GUI when held, kc when tapped - more info here","title":"Mod-Tap"},{"location":"mod_tap/#caveats","text":"Currently, the kc argument of MT() is limited to the Basic Keycode set , meaning you can't use keycodes like LCTL() , KC_TILD , or anything greater than 0xFF . This is because QMK uses 16-bit keycodes, of which 3 bits are used for the function identifier, 1 bit for selecting right or left mods, and 4 bits to tell which mods are used, leaving only 8 bits for the keycode. Additionally, if at least one right-handed modifier is specified in a Mod-Tap, it will cause all modifiers specified to become right-handed, so it is not possible to mix and match the two - for example, Left Control and Right Shift would become Right Control and Right Shift. Expanding this would be complicated, at best. Moving to a 32-bit keycode would solve a lot of this, but would double the amount of space that the keymap matrix uses. And it could potentially cause issues, too. If you need to apply modifiers to your tapped keycode, Tap Dance can be used to accomplish this. You may also run into issues when using Remote Desktop Connection on Windows. Because these keycodes send key events faster than a human, Remote Desktop could miss them. To fix this, open Remote Desktop Connection, click on \"Show Options\", open the the \"Local Resources\" tab, and in the keyboard section, change the drop down to \"On this Computer\". This will fix the issue, and allow the characters to work correctly. It can also be mitigated by increasing TAP_CODE_DELAY .","title":"Caveats"},{"location":"mod_tap/#other-resources","text":"See the Tap-Hold Configuration Options for additional flags that tweak Mod-Tap behavior.","title":"Other Resources"},{"location":"one_shot_keys/","text":"One Shot Keys \u00b6 One shot keys are keys that remain active until the next key is pressed, and then are released. This allows you to type keyboard combinations without pressing more than one key at a time. These keys are usually called \"Sticky keys\" or \"Dead keys\". For example, if you define a key as OSM(MOD_LSFT) , you can type a capital A character by first pressing and releasing shift, and then pressing and releasing A. Your computer will see the shift key being held the moment shift is pressed, and it will see the shift key being released immediately after A is released. One shot keys also work as normal modifiers. If you hold down a one shot key and type other keys, your one shot will be released immediately after you let go of the key. Additionally, hitting keys five times in a short period will lock that key. This applies for both One Shot Modifiers and One Shot Layers, and is controlled by the ONESHOT_TAP_TOGGLE define. You can control the behavior of one shot keys by defining these in config.h : #define ONESHOT_TAP_TOGGLE 5 /* Tapping this number of times holds the key until tapped once again. */ #define ONESHOT_TIMEOUT 5000 /* Time (in ms) before the one shot key is released */ OSM(mod) - Momentarily hold down mod . You must use the MOD_* keycodes as shown in Mod Tap , not the KC_* codes. OSL(layer) - momentary switch to layer . OS_ON - Turns on One Shot keys. OS_OFF - Turns off One Shot keys. OSM act as regular mod keys, OSL act like MO . OS_TOGG - Toggles the one shot key status. Sometimes, you want to activate a one-shot key as part of a macro or tap dance routine. For one shot layers, you need to call set_oneshot_layer(LAYER, ONESHOT_START) on key down, and clear_oneshot_layer_state(ONESHOT_PRESSED) on key up. If you want to cancel the oneshot, call reset_oneshot_layer() . For one shot mods, you need to call set_oneshot_mods(MOD_BIT(KC_*)) to set it, or clear_oneshot_mods() to cancel it. Tip If you're having issues with OSM translating over Remote Desktop Connection, this can be fixed by opening the settings, going to the \"Local Resources\" tap, and in the keyboard section, change the drop down to \"On this Computer\". This will fix the issue and allow OSM to function properly over Remote Desktop. Callbacks \u00b6 When you'd like to perform custom logic when pressing a one shot key, there are several callbacks you can choose to implement. You could indicate changes in one shot keys by flashing an LED or making a sound, for example. There is a callback for OSM(mod) . It is called whenever the state of any one shot modifier key is changed: when it toggles on, but also when it is toggled off. You can use it like this: void oneshot_mods_changed_user ( uint8_t mods ) { if ( mods & MOD_MASK_SHIFT ) { println ( \"Oneshot mods SHIFT\" ); } if ( mods & MOD_MASK_CTRL ) { println ( \"Oneshot mods CTRL\" ); } if ( mods & MOD_MASK_ALT ) { println ( \"Oneshot mods ALT\" ); } if ( mods & MOD_MASK_GUI ) { println ( \"Oneshot mods GUI\" ); } if ( ! mods ) { println ( \"Oneshot mods off\" ); } } The mods argument contains the active mods after the change, so it reflects the current state. When you use One Shot Tap Toggle (by adding #define ONESHOT_TAP_TOGGLE 2 in your config.h file), you may lock a modifier key by pressing it the specified amount of times. There's a callback for that, too: void oneshot_locked_mods_changed_user ( uint8_t mods ) { if ( mods & MOD_MASK_SHIFT ) { println ( \"Oneshot locked mods SHIFT\" ); } if ( mods & MOD_MASK_CTRL ) { println ( \"Oneshot locked mods CTRL\" ); } if ( mods & MOD_MASK_ALT ) { println ( \"Oneshot locked mods ALT\" ); } if ( mods & MOD_MASK_GUI ) { println ( \"Oneshot locked mods GUI\" ); } if ( ! mods ) { println ( \"Oneshot locked mods off\" ); } } Last, there is also a callback for the OSL(layer) one shot key: void oneshot_layer_changed_user ( uint8_t layer ) { if ( layer == 1 ) { println ( \"Oneshot layer 1 on\" ); } if ( ! layer ) { println ( \"Oneshot layer off\" ); } } If any one shot layer is switched off, layer will be zero. When you're looking to do something on any layer change instead of one shot layer changes, layer_state_set_user is a better callback to use. If you are making your own keyboard, there are also _kb equivalent functions: void oneshot_locked_mods_changed_kb ( uint8_t mods ); void oneshot_mods_changed_kb ( uint8_t mods ); void oneshot_layer_changed_kb ( uint8_t layer ); As with any callback, be sure to call the _user variant to allow for further customizability.","title":"\u4e00\u952e\u529f\u80fd"},{"location":"one_shot_keys/#one-shot-keys","text":"One shot keys are keys that remain active until the next key is pressed, and then are released. This allows you to type keyboard combinations without pressing more than one key at a time. These keys are usually called \"Sticky keys\" or \"Dead keys\". For example, if you define a key as OSM(MOD_LSFT) , you can type a capital A character by first pressing and releasing shift, and then pressing and releasing A. Your computer will see the shift key being held the moment shift is pressed, and it will see the shift key being released immediately after A is released. One shot keys also work as normal modifiers. If you hold down a one shot key and type other keys, your one shot will be released immediately after you let go of the key. Additionally, hitting keys five times in a short period will lock that key. This applies for both One Shot Modifiers and One Shot Layers, and is controlled by the ONESHOT_TAP_TOGGLE define. You can control the behavior of one shot keys by defining these in config.h : #define ONESHOT_TAP_TOGGLE 5 /* Tapping this number of times holds the key until tapped once again. */ #define ONESHOT_TIMEOUT 5000 /* Time (in ms) before the one shot key is released */ OSM(mod) - Momentarily hold down mod . You must use the MOD_* keycodes as shown in Mod Tap , not the KC_* codes. OSL(layer) - momentary switch to layer . OS_ON - Turns on One Shot keys. OS_OFF - Turns off One Shot keys. OSM act as regular mod keys, OSL act like MO . OS_TOGG - Toggles the one shot key status. Sometimes, you want to activate a one-shot key as part of a macro or tap dance routine. For one shot layers, you need to call set_oneshot_layer(LAYER, ONESHOT_START) on key down, and clear_oneshot_layer_state(ONESHOT_PRESSED) on key up. If you want to cancel the oneshot, call reset_oneshot_layer() . For one shot mods, you need to call set_oneshot_mods(MOD_BIT(KC_*)) to set it, or clear_oneshot_mods() to cancel it. Tip If you're having issues with OSM translating over Remote Desktop Connection, this can be fixed by opening the settings, going to the \"Local Resources\" tap, and in the keyboard section, change the drop down to \"On this Computer\". This will fix the issue and allow OSM to function properly over Remote Desktop.","title":"One Shot Keys"},{"location":"one_shot_keys/#callbacks","text":"When you'd like to perform custom logic when pressing a one shot key, there are several callbacks you can choose to implement. You could indicate changes in one shot keys by flashing an LED or making a sound, for example. There is a callback for OSM(mod) . It is called whenever the state of any one shot modifier key is changed: when it toggles on, but also when it is toggled off. You can use it like this: void oneshot_mods_changed_user ( uint8_t mods ) { if ( mods & MOD_MASK_SHIFT ) { println ( \"Oneshot mods SHIFT\" ); } if ( mods & MOD_MASK_CTRL ) { println ( \"Oneshot mods CTRL\" ); } if ( mods & MOD_MASK_ALT ) { println ( \"Oneshot mods ALT\" ); } if ( mods & MOD_MASK_GUI ) { println ( \"Oneshot mods GUI\" ); } if ( ! mods ) { println ( \"Oneshot mods off\" ); } } The mods argument contains the active mods after the change, so it reflects the current state. When you use One Shot Tap Toggle (by adding #define ONESHOT_TAP_TOGGLE 2 in your config.h file), you may lock a modifier key by pressing it the specified amount of times. There's a callback for that, too: void oneshot_locked_mods_changed_user ( uint8_t mods ) { if ( mods & MOD_MASK_SHIFT ) { println ( \"Oneshot locked mods SHIFT\" ); } if ( mods & MOD_MASK_CTRL ) { println ( \"Oneshot locked mods CTRL\" ); } if ( mods & MOD_MASK_ALT ) { println ( \"Oneshot locked mods ALT\" ); } if ( mods & MOD_MASK_GUI ) { println ( \"Oneshot locked mods GUI\" ); } if ( ! mods ) { println ( \"Oneshot locked mods off\" ); } } Last, there is also a callback for the OSL(layer) one shot key: void oneshot_layer_changed_user ( uint8_t layer ) { if ( layer == 1 ) { println ( \"Oneshot layer 1 on\" ); } if ( ! layer ) { println ( \"Oneshot layer off\" ); } } If any one shot layer is switched off, layer will be zero. When you're looking to do something on any layer change instead of one shot layer changes, layer_state_set_user is a better callback to use. If you are making your own keyboard, there are also _kb equivalent functions: void oneshot_locked_mods_changed_kb ( uint8_t mods ); void oneshot_mods_changed_kb ( uint8_t mods ); void oneshot_layer_changed_kb ( uint8_t layer ); As with any callback, be sure to call the _user variant to allow for further customizability.","title":"Callbacks"},{"location":"other_eclipse/","text":"Setting up Eclipse for QMK Development \u00b6 Eclipse is an open-source Integrated Development Environment (IDE) widely used for Java development, but with an extensible plugin system that allows to customize it for other languages and usages. Using an IDE such as Eclipse provides many advantages over a plain text editor, such as: * intelligent code completion * convenient navigation in the code * refactoring tools * build automation (no need for the command-line) * a GUI for GIT * static code analysis * many other tools such as debugging, code formatting, showing call hierarchies etc. The purpose of the is page is to document how to set-up Eclipse for developing AVR software, and working on the QMK code base. Note that this set-up has been tested on Ubuntu 16.04 only for the moment. Prerequisites \u00b6 Build Environment \u00b6 Before starting, you must have followed the Getting Started section of the Tutorial. In particular, you must have been able to build the firmware with the qmk compile command . Java \u00b6 Eclipse is a Java application, so you will need to install Java 8 or more recent to be able to run it. You may choose between the JRE or the JDK, the latter being useful if you intend to do Java development. Install Eclipse and Its Plugins \u00b6 Eclipse comes in several flavours depending on the target usage that you will have. There is no package comprising the AVR stack, so we will need to start from Eclipse CDT (C/C++ Development Tooling) and install the necessary plugins. Download and Install Eclipse CDT \u00b6 If you already have Eclipse CDT on your system, you can skip this step. However it is advised to keep it up-to-date for better support. If you have another Eclipse package installed, it is normally possible to install the CDT plugin over it . However it is probably better to reinstall it from scratch to keep it light and avoid the clutter of tools that you don't need for the projects you will be working on. Installation is very simple: follow the 5 Steps to Install Eclipse , and choose Eclipse IDE for C/C++ Developers at Step 3. Alternatively, you can also directly download Eclipse IDE for C/C++ Developers ( direct link to current version ) and extract the package to the location of your choice (this creates an eclipse folder). First Launch \u00b6 When installation is complete, click the Launch button. (If you extracted the package manually, open the Eclipse installation folder and double-click the eclipse executable) When you are prompted with the Workspace Selector, select a directory that will hold Eclipse metadata and usually your projects. Do not select the qmk_firmware directory , this will be the project directory. Select the parent folder instead, or another (preferably empty) folder of your choice (the default is fine if you do not use it yet). Once started, click the Workbench button at the top right to switch to the workbench view (there is a also checkbox at the bottom to skip the welcome screen at startup). Install the Necessary Plugins \u00b6 Note: you do not need to restart Eclipse after installing each plugin. Simply restart once all plugins are installed. The AVR Plugin \u00b6 This is the most important plugin as it will allow Eclipse to understand AVR C code. Follow the instructions for using the update site , and agree with the security warning for unsigned content. ANSI Escape in Console \u00b6 This plugin is necessary to properly display the colored build output generated by the QMK makefile. Open Help > Eclipse Marketplace\u2026 Search for ANSI Escape in Console Click the Install button of the plugin Follow the instructions and agree again with the security warning for unsigned content. Once both plugins are installed, restart Eclipse as prompted. Configure Eclipse for QMK \u00b6 Importing the Project \u00b6 Click File > New > Makefile Project with Existing Code On the next screen: * Select the directory where you cloned the repository as Existing Code Location ; * (Optional) Give a different name to the project\u00b9, e.g. QMK or Quantum ; * Select the AVR-GCC Toolchain ; * Keep the rest as-is and click Finish The project will now be loaded and indexed. Its files can be browsed easily through the Project Explorer on the left. \u00b9 There might be issues for importing the project with a custom name. If it does not work properly, try leaving the default project name (i.e. the name of the directory, probably qmk_firmware ). Build Your Keyboard \u00b6 We will now change the default make target of the the project from all to the specific keyboard and keymap combination we are working on, e.g. kinesis/kint36:stapelberg . This way, project-wide actions like cleaning and building the project will complete quickly, instead of taking a long time or outright locking up Eclipse. Focus an editor tab within the project Open the Project > Properties window, then select the C/C++ Build list entry and switch to the Behavior tab. Change the default Make build target text fields for all enabled builds from all to e.g. kinesis/kint41:stapelberg . Verify your setup works by selecting Project > Clean... .","title":"\u4f7f\u7528Eclipse\u5f00\u53d1QMK"},{"location":"other_eclipse/#setting-up-eclipse-for-qmk-development","text":"Eclipse is an open-source Integrated Development Environment (IDE) widely used for Java development, but with an extensible plugin system that allows to customize it for other languages and usages. Using an IDE such as Eclipse provides many advantages over a plain text editor, such as: * intelligent code completion * convenient navigation in the code * refactoring tools * build automation (no need for the command-line) * a GUI for GIT * static code analysis * many other tools such as debugging, code formatting, showing call hierarchies etc. The purpose of the is page is to document how to set-up Eclipse for developing AVR software, and working on the QMK code base. Note that this set-up has been tested on Ubuntu 16.04 only for the moment.","title":"Setting up Eclipse for QMK Development"},{"location":"other_eclipse/#prerequisites","text":"","title":"Prerequisites"},{"location":"other_eclipse/#build-environment","text":"Before starting, you must have followed the Getting Started section of the Tutorial. In particular, you must have been able to build the firmware with the qmk compile command .","title":"Build Environment"},{"location":"other_eclipse/#java","text":"Eclipse is a Java application, so you will need to install Java 8 or more recent to be able to run it. You may choose between the JRE or the JDK, the latter being useful if you intend to do Java development.","title":"Java"},{"location":"other_eclipse/#install-eclipse-and-its-plugins","text":"Eclipse comes in several flavours depending on the target usage that you will have. There is no package comprising the AVR stack, so we will need to start from Eclipse CDT (C/C++ Development Tooling) and install the necessary plugins.","title":"Install Eclipse and Its Plugins"},{"location":"other_eclipse/#download-and-install-eclipse-cdt","text":"If you already have Eclipse CDT on your system, you can skip this step. However it is advised to keep it up-to-date for better support. If you have another Eclipse package installed, it is normally possible to install the CDT plugin over it . However it is probably better to reinstall it from scratch to keep it light and avoid the clutter of tools that you don't need for the projects you will be working on. Installation is very simple: follow the 5 Steps to Install Eclipse , and choose Eclipse IDE for C/C++ Developers at Step 3. Alternatively, you can also directly download Eclipse IDE for C/C++ Developers ( direct link to current version ) and extract the package to the location of your choice (this creates an eclipse folder).","title":"Download and Install Eclipse CDT"},{"location":"other_eclipse/#first-launch","text":"When installation is complete, click the Launch button. (If you extracted the package manually, open the Eclipse installation folder and double-click the eclipse executable) When you are prompted with the Workspace Selector, select a directory that will hold Eclipse metadata and usually your projects. Do not select the qmk_firmware directory , this will be the project directory. Select the parent folder instead, or another (preferably empty) folder of your choice (the default is fine if you do not use it yet). Once started, click the Workbench button at the top right to switch to the workbench view (there is a also checkbox at the bottom to skip the welcome screen at startup).","title":"First Launch"},{"location":"other_eclipse/#install-the-necessary-plugins","text":"Note: you do not need to restart Eclipse after installing each plugin. Simply restart once all plugins are installed.","title":"Install the Necessary Plugins"},{"location":"other_eclipse/#the-avr-plugin","text":"This is the most important plugin as it will allow Eclipse to understand AVR C code. Follow the instructions for using the update site , and agree with the security warning for unsigned content.","title":"The AVR Plugin"},{"location":"other_eclipse/#ansi-escape-in-console","text":"This plugin is necessary to properly display the colored build output generated by the QMK makefile. Open Help > Eclipse Marketplace\u2026 Search for ANSI Escape in Console Click the Install button of the plugin Follow the instructions and agree again with the security warning for unsigned content. Once both plugins are installed, restart Eclipse as prompted.","title":"ANSI Escape in Console"},{"location":"other_eclipse/#configure-eclipse-for-qmk","text":"","title":"Configure Eclipse for QMK"},{"location":"other_eclipse/#importing-the-project","text":"Click File > New > Makefile Project with Existing Code On the next screen: * Select the directory where you cloned the repository as Existing Code Location ; * (Optional) Give a different name to the project\u00b9, e.g. QMK or Quantum ; * Select the AVR-GCC Toolchain ; * Keep the rest as-is and click Finish The project will now be loaded and indexed. Its files can be browsed easily through the Project Explorer on the left. \u00b9 There might be issues for importing the project with a custom name. If it does not work properly, try leaving the default project name (i.e. the name of the directory, probably qmk_firmware ).","title":"Importing the Project"},{"location":"other_eclipse/#build-your-keyboard","text":"We will now change the default make target of the the project from all to the specific keyboard and keymap combination we are working on, e.g. kinesis/kint36:stapelberg . This way, project-wide actions like cleaning and building the project will complete quickly, instead of taking a long time or outright locking up Eclipse. Focus an editor tab within the project Open the Project > Properties window, then select the C/C++ Build list entry and switch to the Behavior tab. Change the default Make build target text fields for all enabled builds from all to e.g. kinesis/kint41:stapelberg . Verify your setup works by selecting Project > Clean... .","title":"Build Your Keyboard"},{"location":"other_vscode/","text":"Setting up Visual Studio Code for QMK Development \u00b6 Visual Studio Code (VS Code) is an open-source code editor that supports many different programming languages. Using a full-featured editor such as VS Code provides many advantages over a plain text editor, such as: intelligent code completion convenient navigation in the code refactoring tools build automation (no need for the command-line) a graphical front end for GIT many other tools such as debugging, code formatting, showing call hierarchies etc. The purpose of this page is to document how to set up VS Code for developing QMK Firmware. This guide covers how to configure everything needed on Windows and Ubuntu 18.04 Set up VS Code \u00b6 Before starting, you will want to make sure that you have all of the build tools set up, and QMK Firmware cloned. Head to the the Newbs Getting Started Guide to get things set up, if you haven't already. Windows \u00b6 Prerequisites \u00b6 Git for Windows (This link will prompt to save/run the installer) Disable all of the options but Git LFS (Large File Support) and Check daily for Git for Windows updates . Set the default editor to Use Visual Studio Code as Git's default editor Select the Use Git from Git Bash only option, since that's the option that you should use here. For the Choosing HTTPS transport backend , either option should be fine. Select the Checkout as-is, commit Unix-style line endings option. QMK Firmware uses Unix style commits. For the extra options, leave the default options as is. This software is needed for Git support in VS Code. It may be possible to not include this, but it is much simpler to just use this. Git Credential Manager for Windows (Optional) This software provides better support for Git by providing secure storage for git credentials, MFA and personal access token generation. This isn't strictly needed, but we would recommend it. Installing VS Code \u00b6 Head to VS Code and download the installer Run the installer This part is super simple. However, there is some configuration that we need to do to ensure things are configured correctly. Configuring VS Code \u00b6 First, we need to set up IntelliSense. This isn't strictly required, but it will make your life a LOT easier. To do this, we need to create the .vscode/c_cpp_properties.json file in the QMK Firmware folder, You can do this all manually, but I've done most of the work already. Grab this file and save it. You may need to edit this file, if you didn't install MSYS2 to the default location, or are using WSL/LxSS. Once you have saved this file, you will need to reload VS Code, if it was already running. Note You should see an extensions.json and settings.json file in the .vscode folder, as well. Now, we will set up the MSYS2 window to show up in VSCode as the integrated terminal. This has a number of advantages. Mostly, you can control+click on errors and jump to those files. This makes debugging much easier. It's also nice, in that you don't have to jump to another window. Click File > Preferences > > Settings Click on the {} button, in the top right to open the settings.json file. Set the file's content to: ```json { \"terminal.integrated.profiles.windows\": { \"QMK_MSYS\": { \"path\": \"C:/QMK_MSYS/usr/bin/bash.exe\", \"env\": { \"MSYSTEM\": \"MINGW64\", \"CHERE_INVOKING\": \"1\" }, \"args\": [\"--login\"] } }, \"terminal.integrated.cursorStyle\": \"line\" } ``` If there are settings here already, then just add everything between the first and last curly brackets and separate the existing settings with a comma from the newly added ones. Tip If you installed MSYS2 to a different folder, then you'll need to change the path for terminal.integrated.shell.windows to the correct path for your system. Hit Ctrl- ` (Grave) to bring up the terminal or go to View > Terminal (command workbench.action.terminal.toggleTerminal ). A new terminal will be opened if there isn\u2018t one already. This should start the terminal in the workspace's folder (so the qmk_firmware folder), and then you can compile your keyboard. Every other Operating System \u00b6 Head to VS Code and download the installer Run the installer That's it No, really, that's it. The paths needed are already included when installing the packages, and it is much better about detecting the current workspace files and parsing them for IntelliSense. Plugins \u00b6 There are a number of extensions that you may want to install: Git Extension Pack - This installs a bunch of Git related tools that may make using Git with QMK Firmware easier. EditorConfig for VS Code - [Optional] - Helps to keep the code to the QMK Coding Conventions. Bracket Pair Colorizer 2 - [Optional] - This color codes the brackets in your code, to make it easier to reference nested code. GitHub Markdown Preview - [Optional] - Makes the markdown preview in VS Code more like GitHub's. VS Live Share Extension Pack - [Optional] - This extension allows somebody else to access your workspace (or you to access somebody else's workspace) and help out. This is great if you're having issues and need some help from somebody. VIM Keymap - [Optional] - For those that prefer VIM style keybindings. There are other options for this, too. Travis CI Status - [Optional] - This shows the current Travis CI status, if you have it set up. Restart once you've installed any extensions Configure VS Code for QMK \u00b6 Click File > Open Folder Open the QMK Firmware folder that you cloned from GitHub. Click File > Save Workspace As... And now you're ready to code QMK Firmware in VS Code","title":"\u4f7f\u7528VSCode\u5f00\u53d1QMK"},{"location":"other_vscode/#setting-up-visual-studio-code-for-qmk-development","text":"Visual Studio Code (VS Code) is an open-source code editor that supports many different programming languages. Using a full-featured editor such as VS Code provides many advantages over a plain text editor, such as: intelligent code completion convenient navigation in the code refactoring tools build automation (no need for the command-line) a graphical front end for GIT many other tools such as debugging, code formatting, showing call hierarchies etc. The purpose of this page is to document how to set up VS Code for developing QMK Firmware. This guide covers how to configure everything needed on Windows and Ubuntu 18.04","title":"Setting up Visual Studio Code for QMK Development"},{"location":"other_vscode/#set-up-vs-code","text":"Before starting, you will want to make sure that you have all of the build tools set up, and QMK Firmware cloned. Head to the the Newbs Getting Started Guide to get things set up, if you haven't already.","title":"Set up VS Code"},{"location":"other_vscode/#windows","text":"","title":"Windows"},{"location":"other_vscode/#prerequisites","text":"Git for Windows (This link will prompt to save/run the installer) Disable all of the options but Git LFS (Large File Support) and Check daily for Git for Windows updates . Set the default editor to Use Visual Studio Code as Git's default editor Select the Use Git from Git Bash only option, since that's the option that you should use here. For the Choosing HTTPS transport backend , either option should be fine. Select the Checkout as-is, commit Unix-style line endings option. QMK Firmware uses Unix style commits. For the extra options, leave the default options as is. This software is needed for Git support in VS Code. It may be possible to not include this, but it is much simpler to just use this. Git Credential Manager for Windows (Optional) This software provides better support for Git by providing secure storage for git credentials, MFA and personal access token generation. This isn't strictly needed, but we would recommend it.","title":"Prerequisites"},{"location":"other_vscode/#installing-vs-code","text":"Head to VS Code and download the installer Run the installer This part is super simple. However, there is some configuration that we need to do to ensure things are configured correctly.","title":"Installing VS Code"},{"location":"other_vscode/#configuring-vs-code","text":"First, we need to set up IntelliSense. This isn't strictly required, but it will make your life a LOT easier. To do this, we need to create the .vscode/c_cpp_properties.json file in the QMK Firmware folder, You can do this all manually, but I've done most of the work already. Grab this file and save it. You may need to edit this file, if you didn't install MSYS2 to the default location, or are using WSL/LxSS. Once you have saved this file, you will need to reload VS Code, if it was already running. Note You should see an extensions.json and settings.json file in the .vscode folder, as well. Now, we will set up the MSYS2 window to show up in VSCode as the integrated terminal. This has a number of advantages. Mostly, you can control+click on errors and jump to those files. This makes debugging much easier. It's also nice, in that you don't have to jump to another window. Click File > Preferences > > Settings Click on the {} button, in the top right to open the settings.json file. Set the file's content to: ```json { \"terminal.integrated.profiles.windows\": { \"QMK_MSYS\": { \"path\": \"C:/QMK_MSYS/usr/bin/bash.exe\", \"env\": { \"MSYSTEM\": \"MINGW64\", \"CHERE_INVOKING\": \"1\" }, \"args\": [\"--login\"] } }, \"terminal.integrated.cursorStyle\": \"line\" } ``` If there are settings here already, then just add everything between the first and last curly brackets and separate the existing settings with a comma from the newly added ones. Tip If you installed MSYS2 to a different folder, then you'll need to change the path for terminal.integrated.shell.windows to the correct path for your system. Hit Ctrl- ` (Grave) to bring up the terminal or go to View > Terminal (command workbench.action.terminal.toggleTerminal ). A new terminal will be opened if there isn\u2018t one already. This should start the terminal in the workspace's folder (so the qmk_firmware folder), and then you can compile your keyboard.","title":"Configuring VS Code"},{"location":"other_vscode/#every-other-operating-system","text":"Head to VS Code and download the installer Run the installer That's it No, really, that's it. The paths needed are already included when installing the packages, and it is much better about detecting the current workspace files and parsing them for IntelliSense.","title":"Every other Operating System"},{"location":"other_vscode/#plugins","text":"There are a number of extensions that you may want to install: Git Extension Pack - This installs a bunch of Git related tools that may make using Git with QMK Firmware easier. EditorConfig for VS Code - [Optional] - Helps to keep the code to the QMK Coding Conventions. Bracket Pair Colorizer 2 - [Optional] - This color codes the brackets in your code, to make it easier to reference nested code. GitHub Markdown Preview - [Optional] - Makes the markdown preview in VS Code more like GitHub's. VS Live Share Extension Pack - [Optional] - This extension allows somebody else to access your workspace (or you to access somebody else's workspace) and help out. This is great if you're having issues and need some help from somebody. VIM Keymap - [Optional] - For those that prefer VIM style keybindings. There are other options for this, too. Travis CI Status - [Optional] - This shows the current Travis CI status, if you have it set up. Restart once you've installed any extensions","title":"Plugins"},{"location":"other_vscode/#configure-vs-code-for-qmk","text":"Click File > Open Folder Open the QMK Firmware folder that you cloned from GitHub. Click File > Save Workspace As... And now you're ready to code QMK Firmware in VS Code","title":"Configure VS Code for QMK"},{"location":"platformdev_chibios_earlyinit/","text":"Arm/ChibiOS Early Initialization \u00b6 This page describes a part of QMK that is a somewhat advanced concept, and is only relevant to keyboard designers. QMK uses ChibiOS as the underlying layer to support a multitude of Arm-based devices. Each ChibiOS-supported keyboard has a low-level board definition which is responsible for initializing hardware peripherals such as the clocks, and GPIOs. Older QMK revisions required duplication of these board definitions inside your keyboard's directory in order to override such early initialization points; this is now abstracted into the following APIs, and allows usage of the board definitions supplied with ChibiOS itself. Check <qmk_firmware>/lib/chibios/os/hal/boards for the list of official definitions. If your keyboard needs extra initialization at a very early stage, consider providing keyboard-level overrides of the following APIs instead of duplicating the board definitions: early_hardware_init_pre() \u00b6 The function early_hardware_init_pre is the earliest possible code that can be executed by a keyboard firmware. This is intended as a replacement for the ChibiOS board definition's __early_init function, and is the equivalent of executing at the start of the function. This is executed before RAM gets cleared, and before clocks or GPIOs are configured; for example, ChibiOS delays are not likely to work at this point. After executing this function, RAM on the MCU may be zero'ed. Assigning values to variables during execution of this function may be overwritten. As such, if you wish to override this API consider limiting use to writing to low-level registers. The default implementation of this function can be configured to jump to bootloader if a RESET key was pressed: config.h override Description Default #define EARLY_INIT_PERFORM_BOOTLOADER_JUMP Whether or not bootloader is to be executed during the early initialisation code of QMK. FALSE #define STM32_BOOTLOADER_ADDRESS Relevant for single-bank STM32 MCUs, signifies the memory address to jump to bootloader. Consult AN2606 for the System Memory address for your MCU. This value should be of the format 0x11111111 . <none> #define STM32_BOOTLOADER_DUAL_BANK Relevant for dual-bank STM32 MCUs, signifies that a GPIO is to be toggled in order to enter bootloader mode. FALSE #define STM32_BOOTLOADER_DUAL_BANK_GPIO Relevant for dual-bank STM32 MCUs, the pin to toggle when attempting to enter bootloader mode, e.g. B8 <none> #define STM32_BOOTLOADER_DUAL_BANK_POLARITY Relevant for dual-bank STM32 MCUs, the value to set the pin to in order to trigger charging of the RC circuit. e.g. 0 or 1 . 0 #define STM32_BOOTLOADER_DUAL_BANK_DELAY Relevant for dual-bank STM32 MCUs, an arbitrary measurement of time to delay before resetting the MCU. Increasing number increases the delay. 100000 Kinetis MCUs have no configurable options. Alternatively, to implement your own version of this function, in your keyboard's source files: void early_hardware_init_pre ( void ) { // do things with registers } early_hardware_init_post() \u00b6 The function early_hardware_init_post is the next earliest possible code that can be executed by a keyboard firmware. This is executed after RAM has been cleared, and clocks and GPIOs are configured. This is intended as a replacement for the ChibiOS board definition's __early_init function, and is the equivalent of executing at the end of the function. Much like early_hardware_init_pre , ChibiOS has not yet been initialized either, so the same restrictions on delays and timing apply. If you wish to override this API, consider limiting functionality to register writes, variable initialization, and GPIO toggling. The default implementation of this function is to do nothing. To implement your own version of this function, in your keyboard's source files: void early_hardware_init_post ( void ) { // toggle GPIO pins and write to variables } board_init() \u00b6 The function board_init is executed directly after the ChibiOS initialization routines have completed. At this stage, all normal low-level functionality should be available for use (including timers and delays), with the restriction that USB is not yet connected. This is intended as a replacement for the ChibiOS board definition's boardInit function. The default implementation of this function is to do nothing. To implement your own version of this function, in your keyboard's source files: void board_init ( void ) { // initialize anything that requires ChibiOS }","title":"Arm/ChibiOS Early Initialization {: id=chibios-early-init }"},{"location":"platformdev_chibios_earlyinit/#chibios-early-init","text":"This page describes a part of QMK that is a somewhat advanced concept, and is only relevant to keyboard designers. QMK uses ChibiOS as the underlying layer to support a multitude of Arm-based devices. Each ChibiOS-supported keyboard has a low-level board definition which is responsible for initializing hardware peripherals such as the clocks, and GPIOs. Older QMK revisions required duplication of these board definitions inside your keyboard's directory in order to override such early initialization points; this is now abstracted into the following APIs, and allows usage of the board definitions supplied with ChibiOS itself. Check <qmk_firmware>/lib/chibios/os/hal/boards for the list of official definitions. If your keyboard needs extra initialization at a very early stage, consider providing keyboard-level overrides of the following APIs instead of duplicating the board definitions:","title":"Arm/ChibiOS Early Initialization"},{"location":"platformdev_chibios_earlyinit/#early-hardware-init-pre","text":"The function early_hardware_init_pre is the earliest possible code that can be executed by a keyboard firmware. This is intended as a replacement for the ChibiOS board definition's __early_init function, and is the equivalent of executing at the start of the function. This is executed before RAM gets cleared, and before clocks or GPIOs are configured; for example, ChibiOS delays are not likely to work at this point. After executing this function, RAM on the MCU may be zero'ed. Assigning values to variables during execution of this function may be overwritten. As such, if you wish to override this API consider limiting use to writing to low-level registers. The default implementation of this function can be configured to jump to bootloader if a RESET key was pressed: config.h override Description Default #define EARLY_INIT_PERFORM_BOOTLOADER_JUMP Whether or not bootloader is to be executed during the early initialisation code of QMK. FALSE #define STM32_BOOTLOADER_ADDRESS Relevant for single-bank STM32 MCUs, signifies the memory address to jump to bootloader. Consult AN2606 for the System Memory address for your MCU. This value should be of the format 0x11111111 . <none> #define STM32_BOOTLOADER_DUAL_BANK Relevant for dual-bank STM32 MCUs, signifies that a GPIO is to be toggled in order to enter bootloader mode. FALSE #define STM32_BOOTLOADER_DUAL_BANK_GPIO Relevant for dual-bank STM32 MCUs, the pin to toggle when attempting to enter bootloader mode, e.g. B8 <none> #define STM32_BOOTLOADER_DUAL_BANK_POLARITY Relevant for dual-bank STM32 MCUs, the value to set the pin to in order to trigger charging of the RC circuit. e.g. 0 or 1 . 0 #define STM32_BOOTLOADER_DUAL_BANK_DELAY Relevant for dual-bank STM32 MCUs, an arbitrary measurement of time to delay before resetting the MCU. Increasing number increases the delay. 100000 Kinetis MCUs have no configurable options. Alternatively, to implement your own version of this function, in your keyboard's source files: void early_hardware_init_pre ( void ) { // do things with registers }","title":"early_hardware_init_pre()"},{"location":"platformdev_chibios_earlyinit/#early-hardware-init-post","text":"The function early_hardware_init_post is the next earliest possible code that can be executed by a keyboard firmware. This is executed after RAM has been cleared, and clocks and GPIOs are configured. This is intended as a replacement for the ChibiOS board definition's __early_init function, and is the equivalent of executing at the end of the function. Much like early_hardware_init_pre , ChibiOS has not yet been initialized either, so the same restrictions on delays and timing apply. If you wish to override this API, consider limiting functionality to register writes, variable initialization, and GPIO toggling. The default implementation of this function is to do nothing. To implement your own version of this function, in your keyboard's source files: void early_hardware_init_post ( void ) { // toggle GPIO pins and write to variables }","title":"early_hardware_init_post()"},{"location":"platformdev_chibios_earlyinit/#board-init","text":"The function board_init is executed directly after the ChibiOS initialization routines have completed. At this stage, all normal low-level functionality should be available for use (including timers and delays), with the restriction that USB is not yet connected. This is intended as a replacement for the ChibiOS board definition's boardInit function. The default implementation of this function is to do nothing. To implement your own version of this function, in your keyboard's source files: void board_init ( void ) { // initialize anything that requires ChibiOS }","title":"board_init()"},{"location":"platformdev_selecting_arm_mcu/","text":"Choosing an Arm MCU \u00b6 This page outlines the selection criteria to ensure compatibility with Arm/ChibiOS. QMK uses the Hardware Abstraction Layer of ChibiOS in order to run on Arm devices. ChibiOS in general is best supported on STM32 devices, both in the perspective of base MCU support, as well as on-MCU peripheral support. As an extension to the core ChibiOS MCU support, QMK also utilises ChibiOS-Contrib (which includes the Kinetis MCU support layer, as an example), but it does not provide as great a level of peripheral support or general testing for supported devices. Adding support for new MCU families must go through ChibiOS or ChibiOS-Contrib -- QMK does not have the bandwidth, resources, nor the inclination to maintain long-term MCU support for your board of choice. To be clear: this also includes commercial boards -- unless agreed upon by all parties, QMK will not take over maintenance of a bespoke MCU support package. Even if MCU support is upstreamed into ChibiOS/ChibiOS-Contrib, QMK reserves the right to deprecate and/or remove keyboards utilising support packages that aren't kept up to date with upstream ChibiOS itself. Selecting an already-supported MCU \u00b6 STM32 families \u00b6 As outlined earlier, STM32 is the preferred option to ensure greatest compatibility with the subsystems already implemented in QMK. Not all subsystems are compatible yet, but for the most widely-used support is already present. The simplest solution to determine if an STM32 MCU is compatible is to navigate to the list of supported STM32 ports in QMK's ChibiOS fork . Inside this directory, each of the supported STM32 families will be listed, and inside each family a file called stm32_registry.h will be present. Scanning through these files will show #define s such as the following, which can be used to determine if ChibiOS supports a particular MCU: #if defined(STM32F303xC) || defined(__DOXYGEN__) The example shows that STM32F303xC devices are supported by ChibiOS. The next step is to ensure that USB is supported on those devices by ChibiOS -- you can confirm this by checking inside the same section guarded by the #define above, specifically for the following to be TRUE : #define STM32_HAS_USB TRUE or one of the following being TRUE : #define STM32_HAS_OTG1 TRUE #define STM32_HAS_OTG2 TRUE For the most part, this is the bare minimum to be able to have a high confidence that QMK will be able to run on your MCU. After that, it's all up to configuration. Non-STM32 families \u00b6 ChibiOS does have support for a handful of non-STM32 devices, and the list can be found in QMK's ChibiOS fork and ChibiOS-Contrib fork . Non-STM32 support is likely out of date, and only supports ancient MCUs -- whilst it might be possible to use these, it's not recommended. Do note that there are sometimes licensing restrictions with respect to redistribution. As an example, binaries built for nRF5 are not able to be redistributed via QMK Configurator, due to the licensing of their board support package. Adding support for a new STM32 MCU (for an existing family) {: id=add-new-stm }32-mcu \u00b6 Usually, one can \"masquerade\" as an existing MCU of the same family, especially if the only difference is RAM or Flash size. As an example, some MCUs within the same family are virtually identical, with the exception of adding a cryptographic peripheral -- STM32L072 vs. STM32L082 for instance. Given the unlikely use of the cryptographic peripheral, L082 chips can actually run as if they're an L072, and can be targeted accordingly. Adding proper support for new MCUs within an existing STM32 family should ideally be upstreamed to ChibiOS. In general, this will require modifications of the stm32_registry.h file, providing correct responses for the same #define s provided for the other MCUs in that family. Adding support for a new STM32 Family {: id=add-new-stm }32-family \u00b6 If this is a requirement, this needs to go through upstream ChibiOS before QMK would consider accepting boards targeting the new family. More information for porting should be sought by approaching ChibiOS directly, rather than through QMK. Adding support for a new MCU Family \u00b6 As stated earlier, in order for a new MCU family to be supported by QMK, it needs to be upstreamed into ChibiOS-Contrib before QMK will consider accepting boards using it. The same principle applies for development -- you're best approaching the ChibiOS-Contrib maintainers to get a bit more of an idea on what's involved with upstreaming your contribution.","title":"Choosing an Arm MCU {: id=choose-arm-mcu }"},{"location":"platformdev_selecting_arm_mcu/#choose-arm-mcu","text":"This page outlines the selection criteria to ensure compatibility with Arm/ChibiOS. QMK uses the Hardware Abstraction Layer of ChibiOS in order to run on Arm devices. ChibiOS in general is best supported on STM32 devices, both in the perspective of base MCU support, as well as on-MCU peripheral support. As an extension to the core ChibiOS MCU support, QMK also utilises ChibiOS-Contrib (which includes the Kinetis MCU support layer, as an example), but it does not provide as great a level of peripheral support or general testing for supported devices. Adding support for new MCU families must go through ChibiOS or ChibiOS-Contrib -- QMK does not have the bandwidth, resources, nor the inclination to maintain long-term MCU support for your board of choice. To be clear: this also includes commercial boards -- unless agreed upon by all parties, QMK will not take over maintenance of a bespoke MCU support package. Even if MCU support is upstreamed into ChibiOS/ChibiOS-Contrib, QMK reserves the right to deprecate and/or remove keyboards utilising support packages that aren't kept up to date with upstream ChibiOS itself.","title":"Choosing an Arm MCU"},{"location":"platformdev_selecting_arm_mcu/#selecting-already-supported-mcu","text":"","title":"Selecting an already-supported MCU"},{"location":"platformdev_selecting_arm_mcu/#stm32-families","text":"As outlined earlier, STM32 is the preferred option to ensure greatest compatibility with the subsystems already implemented in QMK. Not all subsystems are compatible yet, but for the most widely-used support is already present. The simplest solution to determine if an STM32 MCU is compatible is to navigate to the list of supported STM32 ports in QMK's ChibiOS fork . Inside this directory, each of the supported STM32 families will be listed, and inside each family a file called stm32_registry.h will be present. Scanning through these files will show #define s such as the following, which can be used to determine if ChibiOS supports a particular MCU: #if defined(STM32F303xC) || defined(__DOXYGEN__) The example shows that STM32F303xC devices are supported by ChibiOS. The next step is to ensure that USB is supported on those devices by ChibiOS -- you can confirm this by checking inside the same section guarded by the #define above, specifically for the following to be TRUE : #define STM32_HAS_USB TRUE or one of the following being TRUE : #define STM32_HAS_OTG1 TRUE #define STM32_HAS_OTG2 TRUE For the most part, this is the bare minimum to be able to have a high confidence that QMK will be able to run on your MCU. After that, it's all up to configuration.","title":"STM32 families"},{"location":"platformdev_selecting_arm_mcu/#non-stm32-families","text":"ChibiOS does have support for a handful of non-STM32 devices, and the list can be found in QMK's ChibiOS fork and ChibiOS-Contrib fork . Non-STM32 support is likely out of date, and only supports ancient MCUs -- whilst it might be possible to use these, it's not recommended. Do note that there are sometimes licensing restrictions with respect to redistribution. As an example, binaries built for nRF5 are not able to be redistributed via QMK Configurator, due to the licensing of their board support package.","title":"Non-STM32 families"},{"location":"platformdev_selecting_arm_mcu/#adding-support-for-a-new-stm32-mcu-for-an-existing-family-idadd-new-stm-32-mcu","text":"Usually, one can \"masquerade\" as an existing MCU of the same family, especially if the only difference is RAM or Flash size. As an example, some MCUs within the same family are virtually identical, with the exception of adding a cryptographic peripheral -- STM32L072 vs. STM32L082 for instance. Given the unlikely use of the cryptographic peripheral, L082 chips can actually run as if they're an L072, and can be targeted accordingly. Adding proper support for new MCUs within an existing STM32 family should ideally be upstreamed to ChibiOS. In general, this will require modifications of the stm32_registry.h file, providing correct responses for the same #define s provided for the other MCUs in that family.","title":"Adding support for a new STM32 MCU (for an existing family) {: id=add-new-stm }32-mcu"},{"location":"platformdev_selecting_arm_mcu/#adding-support-for-a-new-stm32-family-idadd-new-stm-32-family","text":"If this is a requirement, this needs to go through upstream ChibiOS before QMK would consider accepting boards targeting the new family. More information for porting should be sought by approaching ChibiOS directly, rather than through QMK.","title":"Adding support for a new STM32 Family {: id=add-new-stm }32-family"},{"location":"platformdev_selecting_arm_mcu/#add-new-mcu-family","text":"As stated earlier, in order for a new MCU family to be supported by QMK, it needs to be upstreamed into ChibiOS-Contrib before QMK will consider accepting boards using it. The same principle applies for development -- you're best approaching the ChibiOS-Contrib maintainers to get a bit more of an idea on what's involved with upstreaming your contribution.","title":"Adding support for a new MCU Family"},{"location":"pr_checklist/","text":"PR checklists \u00b6 This is a non-exhaustive checklist of what the QMK Collaborators will be checking when reviewing submitted PRs. If there are any inconsistencies with these recommendations, you're best off creating an issue against this document, or getting in touch with a QMK Collaborator on Discord . General PRs \u00b6 PR should be submitted using a non- master branch on the source repository this does not mean you target a different branch for your PR, rather that you're not working out of your own master branch if submitter does use their own master branch, they'll be given a link to the \"how to git\" page after merging -- (end of this document will contain the contents of the message) newly-added directories and filenames must be lowercase this rule may be relaxed if upstream sources originally had uppercase characters (e.g. ChibiOS, or imported files from other repositories etc.) if there is enough justification (i.e. consistency with existing core files etc.) this can be relaxed a board designer naming their keyboard with uppercase letters is not enough justification valid license headers on all *.c and *.h source files GPL2/GPL3 recommended for consistency other licenses are permitted, however they must be GPL-compatible and must allow for redistribution. Using a different license will almost certainly delay a PR getting merged. QMK Codebase \"best practices\" followed this is not an exhaustive list, and will likely get amended as time goes by #pragma once instead of #ifndef include guards in header files no \"old-school\" GPIO/I2C/SPI functions used -- must use QMK abstractions unless justifiable (and laziness is not valid justification) timing abstractions should be followed too: wait_ms() instead of _delay_ms() (remove #include <util/delay.h> too) timer_read() and timer_read32() etc. -- see timer.h for the timing APIs if you think a new abstraction is useful, you're encouraged to: prototype it in your own keyboard until it's feature-complete discuss it with QMK Collaborators on Discord refactor it as a separate core change remove your specific copy in your board rebase and fix all merge conflicts before opening the PR (in case you need help or advice, reach out to QMK Collaborators on Discord) Keymap PRs \u00b6 #include QMK_KEYBOARD_H preferred to including specific board files prefer layer enum s to #define s require custom keycode enum s to #define s, first entry must have = SAFE_RANGE terminating backslash ( \\ ) in lines of LAYOUT macro parameters is superfluous some care with spacing (e.g., alignment on commas or first char of keycodes) makes for a much nicer-looking keymap Keyboard PRs \u00b6 Closed PRs (for inspiration, previous sets of review comments will help you eliminate ping-pong of your own reviews): https://github.com/qmk/qmk_firmware/pulls?q=is%3Apr+is%3Aclosed+label%3Akeyboard info.json valid URL valid maintainer displays correctly in Configurator (press Ctrl+Shift+I to preview local file, turn on fast input to verify ordering) readme.md standard template should be present flash command has :flash at end valid hardware availability link (unless handwired) -- private groupbuys are okay, but one-off prototypes will be questioned. If open-source, a link to files should be provided. clear instructions on how to reset the board into bootloader mode a picture about the keyboard and preferably about the PCB, too rules.mk removed MIDI_ENABLE , FAUXCLICKY_ENABLE and HD44780_ENABLE modified # Enable Bluetooth with the Adafruit EZ-Key HID -> # Enable Bluetooth no (-/+size) comments related to enabling features remove the list of alternate bootloaders if one has been specified no re-definitions of the default MCU parameters if same value, when compared to the equivalent MCU in mcu_selection.mk keyboard config.h don't repeat MANUFACTURER in the PRODUCT value no #define DESCRIPTION no Magic Key Options, MIDI Options or HD44780 configuration user preference configurable #define s need to be moved to keymap config.h \" DEBOUNCE \" instead of \" DEBOUNCING_DELAY \" bare minimum required code for a board to boot into QMK should be present initialisation code for the matrix and critical devices mirroring existing functionality of a commercial board (like custom keycodes and special animations etc.) should be handled through non- default keymaps Vial-related files or changes will not be accepted, as they are not used by QMK firmware (no Vial-specific core code has been submitted or merged) keyboard.c empty xxxx_xxxx_kb() or other weak-defined default implemented functions removed commented-out functions removed too matrix_init_board() etc. migrated to keyboard_pre_init_kb() , see: keyboard_pre_init* prefer CUSTOM_MATRIX = lite if custom matrix used, allows for standard debounce, see custom matrix 'lite' prefer LED indicator Configuration Options to custom led_update_*() implementations where possible keyboard.h #include \"quantum.h\" appears at the top LAYOUT macros should use standard definitions if applicable use the Community Layout macro names where they apply (preferred above LAYOUT / LAYOUT_all ) keymap config.h no duplication of rules.mk or config.h from keyboard keymaps/default/keymap.c QMKBEST / QMKURL removed (sheesh) if using MO(_LOWER) and MO(_RAISE) keycodes or equivalent, and the keymap has an adjust layer when holding both keys -- if the keymap has no \"direct-to-adjust\" keycode (such as MO(_ADJUST) ) then you should prefer to write... layer_state_t layer_state_set_user(layer_state_t state) { return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST); } ...instead of manually handling layer_on() , update_tri_layer() inside the keymap's process_record_user() . default (and via) keymaps should be \"pristine\" bare minimum to be used as a \"clean slate\" for another user to develop their own user-specific keymap standard layouts preferred in these keymaps, if possible default keymap should not enable VIA -- the VIA integration documentation requires a keymap called via submitters can have a personal (or bells-and-whistles) keymap showcasing capabilities in the same PR but it shouldn't be embedded in the 'default' keymap submitters can also have a \"manufacturer-matching\" keymap that mirrors existing functionality of the commercial product, if porting an existing board Do not include VIA json files in the PR. These do not belong in the QMK repository as they are not used by QMK firmware -- they belong in the VIA Keyboard Repo Also, specific to ChibiOS: - strong preference to using existing ChibiOS board definitions. - a lot of the time, an equivalent Nucleo board can be used with a different flash size or slightly different model in the same family - example: For an STM32L082KZ, given the similarity to an STM32L073RZ, you can use BOARD = ST_NUCLEO64_L073RZ in rules.mk - QMK is migrating to not having custom board definitions if at all possible, due to the ongoing maintenance burden when upgrading ChibiOS - if a board definition is unavoidable, board.c must have a standard __early_init() (as per normal ChibiOS board defs) and an empty boardInit() : - see Arm/ChibiOS early initialization - __early_init() should be replaced by either early_hardware_init_pre() or early_hardware_init_post() as appropriate - boardInit() should be migrated to board_init() Core PRs \u00b6 must now target develop branch, which will subsequently be merged back to master on the breaking changes timeline other notes TBD core is a lot more subjective given the breadth of posted changes Notes \u00b6 For when people use their own master branch, post this after merge: For future reference, we recommend against committing to your `master` branch as you've done here, because pull requests from modified `master` branches can make it more difficult to keep your QMK fork updated. It is highly recommended for QMK development \u2013 regardless of what is being done or where \u2013 to keep your master updated, but **NEVER** commit to it. Instead, do all your changes in a branch (branches are basically free in Git) and issue PRs from your branches when you're developing. There are instructions on how to keep your fork updated here: [**Best Practices: Your Fork's Master: Update Often, Commit Never**](https://docs.qmk.fm/#/tutorial_git_using_your_master_branch) [Fixing Your Branch](https://docs.qmk.fm/#/tutorial_git_resynchronize_a_branch) will walk you through fixing up your `master` branch moving forward. If you need any help with this just ask. Thanks for contributing! Review Process \u00b6 In general, we want to see two (or more) approvals that are meaningful (e.g. that have inspected code) before a PR will be considered for merge. These reviews are not limited to collaborators -- any community member willing to put in the time is welcomed (and encouraged). The only difference is that your checkmark won't be green, and that's fine! Additionally, PR reviews are something that is done in our free time. We are not paid nor compensated for the time we spend reviewing, as it is a labor of love. As such, this means that it can take time for us to get to your Pull Request. Things like family, or life can get in the way of us getting to PRs, and burnout is a serious concern. The QMK firmware repository averages 200 PRs opened and 200 PRs merged every month, so please have patience.","title":"PR checklists"},{"location":"pr_checklist/#pr-checklists","text":"This is a non-exhaustive checklist of what the QMK Collaborators will be checking when reviewing submitted PRs. If there are any inconsistencies with these recommendations, you're best off creating an issue against this document, or getting in touch with a QMK Collaborator on Discord .","title":"PR checklists"},{"location":"pr_checklist/#general-prs","text":"PR should be submitted using a non- master branch on the source repository this does not mean you target a different branch for your PR, rather that you're not working out of your own master branch if submitter does use their own master branch, they'll be given a link to the \"how to git\" page after merging -- (end of this document will contain the contents of the message) newly-added directories and filenames must be lowercase this rule may be relaxed if upstream sources originally had uppercase characters (e.g. ChibiOS, or imported files from other repositories etc.) if there is enough justification (i.e. consistency with existing core files etc.) this can be relaxed a board designer naming their keyboard with uppercase letters is not enough justification valid license headers on all *.c and *.h source files GPL2/GPL3 recommended for consistency other licenses are permitted, however they must be GPL-compatible and must allow for redistribution. Using a different license will almost certainly delay a PR getting merged. QMK Codebase \"best practices\" followed this is not an exhaustive list, and will likely get amended as time goes by #pragma once instead of #ifndef include guards in header files no \"old-school\" GPIO/I2C/SPI functions used -- must use QMK abstractions unless justifiable (and laziness is not valid justification) timing abstractions should be followed too: wait_ms() instead of _delay_ms() (remove #include <util/delay.h> too) timer_read() and timer_read32() etc. -- see timer.h for the timing APIs if you think a new abstraction is useful, you're encouraged to: prototype it in your own keyboard until it's feature-complete discuss it with QMK Collaborators on Discord refactor it as a separate core change remove your specific copy in your board rebase and fix all merge conflicts before opening the PR (in case you need help or advice, reach out to QMK Collaborators on Discord)","title":"General PRs"},{"location":"pr_checklist/#keymap-prs","text":"#include QMK_KEYBOARD_H preferred to including specific board files prefer layer enum s to #define s require custom keycode enum s to #define s, first entry must have = SAFE_RANGE terminating backslash ( \\ ) in lines of LAYOUT macro parameters is superfluous some care with spacing (e.g., alignment on commas or first char of keycodes) makes for a much nicer-looking keymap","title":"Keymap PRs"},{"location":"pr_checklist/#keyboard-prs","text":"Closed PRs (for inspiration, previous sets of review comments will help you eliminate ping-pong of your own reviews): https://github.com/qmk/qmk_firmware/pulls?q=is%3Apr+is%3Aclosed+label%3Akeyboard info.json valid URL valid maintainer displays correctly in Configurator (press Ctrl+Shift+I to preview local file, turn on fast input to verify ordering) readme.md standard template should be present flash command has :flash at end valid hardware availability link (unless handwired) -- private groupbuys are okay, but one-off prototypes will be questioned. If open-source, a link to files should be provided. clear instructions on how to reset the board into bootloader mode a picture about the keyboard and preferably about the PCB, too rules.mk removed MIDI_ENABLE , FAUXCLICKY_ENABLE and HD44780_ENABLE modified # Enable Bluetooth with the Adafruit EZ-Key HID -> # Enable Bluetooth no (-/+size) comments related to enabling features remove the list of alternate bootloaders if one has been specified no re-definitions of the default MCU parameters if same value, when compared to the equivalent MCU in mcu_selection.mk keyboard config.h don't repeat MANUFACTURER in the PRODUCT value no #define DESCRIPTION no Magic Key Options, MIDI Options or HD44780 configuration user preference configurable #define s need to be moved to keymap config.h \" DEBOUNCE \" instead of \" DEBOUNCING_DELAY \" bare minimum required code for a board to boot into QMK should be present initialisation code for the matrix and critical devices mirroring existing functionality of a commercial board (like custom keycodes and special animations etc.) should be handled through non- default keymaps Vial-related files or changes will not be accepted, as they are not used by QMK firmware (no Vial-specific core code has been submitted or merged) keyboard.c empty xxxx_xxxx_kb() or other weak-defined default implemented functions removed commented-out functions removed too matrix_init_board() etc. migrated to keyboard_pre_init_kb() , see: keyboard_pre_init* prefer CUSTOM_MATRIX = lite if custom matrix used, allows for standard debounce, see custom matrix 'lite' prefer LED indicator Configuration Options to custom led_update_*() implementations where possible keyboard.h #include \"quantum.h\" appears at the top LAYOUT macros should use standard definitions if applicable use the Community Layout macro names where they apply (preferred above LAYOUT / LAYOUT_all ) keymap config.h no duplication of rules.mk or config.h from keyboard keymaps/default/keymap.c QMKBEST / QMKURL removed (sheesh) if using MO(_LOWER) and MO(_RAISE) keycodes or equivalent, and the keymap has an adjust layer when holding both keys -- if the keymap has no \"direct-to-adjust\" keycode (such as MO(_ADJUST) ) then you should prefer to write... layer_state_t layer_state_set_user(layer_state_t state) { return update_tri_layer_state(state, _LOWER, _RAISE, _ADJUST); } ...instead of manually handling layer_on() , update_tri_layer() inside the keymap's process_record_user() . default (and via) keymaps should be \"pristine\" bare minimum to be used as a \"clean slate\" for another user to develop their own user-specific keymap standard layouts preferred in these keymaps, if possible default keymap should not enable VIA -- the VIA integration documentation requires a keymap called via submitters can have a personal (or bells-and-whistles) keymap showcasing capabilities in the same PR but it shouldn't be embedded in the 'default' keymap submitters can also have a \"manufacturer-matching\" keymap that mirrors existing functionality of the commercial product, if porting an existing board Do not include VIA json files in the PR. These do not belong in the QMK repository as they are not used by QMK firmware -- they belong in the VIA Keyboard Repo Also, specific to ChibiOS: - strong preference to using existing ChibiOS board definitions. - a lot of the time, an equivalent Nucleo board can be used with a different flash size or slightly different model in the same family - example: For an STM32L082KZ, given the similarity to an STM32L073RZ, you can use BOARD = ST_NUCLEO64_L073RZ in rules.mk - QMK is migrating to not having custom board definitions if at all possible, due to the ongoing maintenance burden when upgrading ChibiOS - if a board definition is unavoidable, board.c must have a standard __early_init() (as per normal ChibiOS board defs) and an empty boardInit() : - see Arm/ChibiOS early initialization - __early_init() should be replaced by either early_hardware_init_pre() or early_hardware_init_post() as appropriate - boardInit() should be migrated to board_init()","title":"Keyboard PRs"},{"location":"pr_checklist/#core-prs","text":"must now target develop branch, which will subsequently be merged back to master on the breaking changes timeline other notes TBD core is a lot more subjective given the breadth of posted changes","title":"Core PRs"},{"location":"pr_checklist/#notes","text":"For when people use their own master branch, post this after merge: For future reference, we recommend against committing to your `master` branch as you've done here, because pull requests from modified `master` branches can make it more difficult to keep your QMK fork updated. It is highly recommended for QMK development \u2013 regardless of what is being done or where \u2013 to keep your master updated, but **NEVER** commit to it. Instead, do all your changes in a branch (branches are basically free in Git) and issue PRs from your branches when you're developing. There are instructions on how to keep your fork updated here: [**Best Practices: Your Fork's Master: Update Often, Commit Never**](https://docs.qmk.fm/#/tutorial_git_using_your_master_branch) [Fixing Your Branch](https://docs.qmk.fm/#/tutorial_git_resynchronize_a_branch) will walk you through fixing up your `master` branch moving forward. If you need any help with this just ask. Thanks for contributing!","title":"Notes"},{"location":"pr_checklist/#review-process","text":"In general, we want to see two (or more) approvals that are meaningful (e.g. that have inspected code) before a PR will be considered for merge. These reviews are not limited to collaborators -- any community member willing to put in the time is welcomed (and encouraged). The only difference is that your checkmark won't be green, and that's fine! Additionally, PR reviews are something that is done in our free time. We are not paid nor compensated for the time we spend reviewing, as it is a labor of love. As such, this means that it can take time for us to get to your Pull Request. Things like family, or life can get in the way of us getting to PRs, and burnout is a serious concern. The QMK firmware repository averages 200 PRs opened and 200 PRs merged every month, so please have patience.","title":"Review Process"},{"location":"proton_c_conversion/","text":"Converting a board to use the Proton C \u00b6 Since the Proton C is a drop-in replacement for a Pro Micro we've made it easy to use. This page documents a handy automated process for converting keyboards, as well as documenting the manual process if you'd like to make use of Proton C features that aren't available on Pro Micros. Automatic Conversion \u00b6 If a board currently supported in QMK uses a Pro Micro (or compatible board) and you want to use the Proton C, you can generate the firmware by appending CONVERT_TO_PROTON_C=yes (or CTPC=yes ) to your make argument, like this: make 40percentclub/mf68:default CTPC=yes You can add the same argument to your keymap's rules.mk , which will accomplish the same thing. This exposes the CONVERT_TO_PROTON_C flag that you can use in your code with #ifdef s, like this: #ifdef CONVERT_TO_PROTON_C // Proton C code #else // Pro Micro code #endif If you get errors about PORTB/DDRB , etc not being defined, so you'll need to convert the keyboard's code to use the GPIO Controls that will work for both ARM and AVR. This shouldn't affect the AVR builds at all. The Proton C only has one on-board LED (C13), and by default, the TXLED (D5) is mapped to it. If you want the RXLED (B0) mapped to it instead, add this like to your config.h : #define CONVERT_TO_PROTON_C_RXLED Feature Conversion \u00b6 These are defaults based on what has been implemented for ARM boards. Feature Notes Audio Enabled RGB Lighting Disabled Backlight Forces task driven PWM until ARM can provide automatic configuration USB Host (e.g. USB-USB converter) Not supported (USB host code is AVR specific and is not currently supported on ARM) Split keyboards Partial - heavily dependent on enabled features Manual Conversion \u00b6 To use the Proton C natively, without having to specify CTPC=yes , you need to change the MCU line in rules.mk : MCU = STM32F303 BOARD = QMK_PROTON_C Remove these variables if they exist: BOOTLOADER EXTRA_FLAGS Finally convert all pin assignments in config.h to the stm32 equivalents. Pro Micro Left Proton C Left Proton C Right Pro Micro Right D3 A9 5v RAW (5v) D2 A10 GND GND GND GND FLASH RESET GND GND 3.3v VCC 1 D1 B7 A2 F4 D0 B6 A1 F5 D4 B5 A0 F6 C6 B4 B8 F7 D7 B3 B13 B1 E6 B2 B14 B3 B4 B1 B15 B2 B5 B0 B9 B6 B0 (RX LED) C13 2 C13 2 D5 (TX LED) You can also make use of several new pins on the extended portion of the Proton C: Left Right A4 3 B10 A5 4 B11 A6 B12 A7 A14 5 (SWCLK) A8 A13 5 (SWDIO) A15 RESET 6 Notes: On a Pro Micro VCC can be 3.3v or 5v. A Proton C only has one onboard LED, not two like a Pro Micro. The Pro Micro has an RX LED on D5 and a TX LED on B0 . A4 is shared with the speaker. A5 is shared with the speaker. A13 and A14 are used for hardware debugging (SWD). You can also use them for GPIO, but should use them last. Short RESET to 3.3v (pull high) to reboot the MCU. This does not enter bootloader mode like a Pro Micro, it only resets the MCU.","title":"Proton C\u8f6c\u6362"},{"location":"proton_c_conversion/#converting-a-board-to-use-the-proton-c","text":"Since the Proton C is a drop-in replacement for a Pro Micro we've made it easy to use. This page documents a handy automated process for converting keyboards, as well as documenting the manual process if you'd like to make use of Proton C features that aren't available on Pro Micros.","title":"Converting a board to use the Proton C"},{"location":"proton_c_conversion/#automatic-conversion","text":"If a board currently supported in QMK uses a Pro Micro (or compatible board) and you want to use the Proton C, you can generate the firmware by appending CONVERT_TO_PROTON_C=yes (or CTPC=yes ) to your make argument, like this: make 40percentclub/mf68:default CTPC=yes You can add the same argument to your keymap's rules.mk , which will accomplish the same thing. This exposes the CONVERT_TO_PROTON_C flag that you can use in your code with #ifdef s, like this: #ifdef CONVERT_TO_PROTON_C // Proton C code #else // Pro Micro code #endif If you get errors about PORTB/DDRB , etc not being defined, so you'll need to convert the keyboard's code to use the GPIO Controls that will work for both ARM and AVR. This shouldn't affect the AVR builds at all. The Proton C only has one on-board LED (C13), and by default, the TXLED (D5) is mapped to it. If you want the RXLED (B0) mapped to it instead, add this like to your config.h : #define CONVERT_TO_PROTON_C_RXLED","title":"Automatic Conversion"},{"location":"proton_c_conversion/#feature-conversion","text":"These are defaults based on what has been implemented for ARM boards. Feature Notes Audio Enabled RGB Lighting Disabled Backlight Forces task driven PWM until ARM can provide automatic configuration USB Host (e.g. USB-USB converter) Not supported (USB host code is AVR specific and is not currently supported on ARM) Split keyboards Partial - heavily dependent on enabled features","title":"Feature Conversion"},{"location":"proton_c_conversion/#manual-conversion","text":"To use the Proton C natively, without having to specify CTPC=yes , you need to change the MCU line in rules.mk : MCU = STM32F303 BOARD = QMK_PROTON_C Remove these variables if they exist: BOOTLOADER EXTRA_FLAGS Finally convert all pin assignments in config.h to the stm32 equivalents. Pro Micro Left Proton C Left Proton C Right Pro Micro Right D3 A9 5v RAW (5v) D2 A10 GND GND GND GND FLASH RESET GND GND 3.3v VCC 1 D1 B7 A2 F4 D0 B6 A1 F5 D4 B5 A0 F6 C6 B4 B8 F7 D7 B3 B13 B1 E6 B2 B14 B3 B4 B1 B15 B2 B5 B0 B9 B6 B0 (RX LED) C13 2 C13 2 D5 (TX LED) You can also make use of several new pins on the extended portion of the Proton C: Left Right A4 3 B10 A5 4 B11 A6 B12 A7 A14 5 (SWCLK) A8 A13 5 (SWDIO) A15 RESET 6 Notes: On a Pro Micro VCC can be 3.3v or 5v. A Proton C only has one onboard LED, not two like a Pro Micro. The Pro Micro has an RX LED on D5 and a TX LED on B0 . A4 is shared with the speaker. A5 is shared with the speaker. A13 and A14 are used for hardware debugging (SWD). You can also use them for GPIO, but should use them last. Short RESET to 3.3v (pull high) to reboot the MCU. This does not enter bootloader mode like a Pro Micro, it only resets the MCU.","title":"Manual Conversion"},{"location":"quantum_keycodes/","text":"Quantum Keycodes \u00b6 Quantum keycodes allow for easier customization of your keymap than the basic ones provide, without having to define custom actions. All keycodes within quantum are numbers between 0x0000 and 0xFFFF . Within your keymap.c it may look like you have functions and other special cases, but ultimately the C preprocessor will translate those into a single 4 byte integer. QMK has reserved 0x0000 through 0x00FF for standard keycodes. These are keycodes such as KC_A , KC_1 , and KC_LCTL , which are basic keys defined in the USB HID specification. On this page we have documented keycodes between 0x00FF and 0xFFFF which are used to implement advanced quantum features. If you define your own custom keycodes they will be put into this range as well. QMK Keycodes \u00b6 Key Aliases Description RESET Put the keyboard into bootloader mode for flashing DEBUG Toggle debug mode EEPROM_RESET EEP_RST Reinitializes the keyboard's EEPROM (persistent memory)","title":"\u91cf\u5b50\u952e\u7801"},{"location":"quantum_keycodes/#quantum-keycodes","text":"Quantum keycodes allow for easier customization of your keymap than the basic ones provide, without having to define custom actions. All keycodes within quantum are numbers between 0x0000 and 0xFFFF . Within your keymap.c it may look like you have functions and other special cases, but ultimately the C preprocessor will translate those into a single 4 byte integer. QMK has reserved 0x0000 through 0x00FF for standard keycodes. These are keycodes such as KC_A , KC_1 , and KC_LCTL , which are basic keys defined in the USB HID specification. On this page we have documented keycodes between 0x00FF and 0xFFFF which are used to implement advanced quantum features. If you define your own custom keycodes they will be put into this range as well.","title":"Quantum Keycodes"},{"location":"quantum_keycodes/#qmk-keycodes","text":"Key Aliases Description RESET Put the keyboard into bootloader mode for flashing DEBUG Toggle debug mode EEPROM_RESET EEP_RST Reinitializes the keyboard's EEPROM (persistent memory)","title":"QMK Keycodes"},{"location":"ref_functions/","text":"List of Useful Core Functions To Make Your Keyboard Better \u00b6 There are a lot of hidden functions in QMK that are incredible useful, or may add a bit of functionality that you've been wanting. Functions that are specific to certain features are not included here, as those will be on their respective feature page. (OLKB) Tri Layers \u00b6 There are actually separate functions that you can use there, depending on what you're after. update_tri_layer(x, y, z) \u00b6 The first is the update_tri_layer(x, y, z) function. This function check to see if layers x and y are both on. If they are both on, then it turns on layer z . Otherwise, if both x and y are not both on (either only one is, or neither is), then it turns off layer z . This function is useful if you want to create specific keys that have this functionality, but other layer keycodes won't do this. Example \u00b6 bool process_record_user ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LOWER : if ( record -> event . pressed ) { layer_on ( _LOWER ); update_tri_layer ( _LOWER , _RAISE , _ADJUST ); } else { layer_off ( _LOWER ); update_tri_layer ( _LOWER , _RAISE , _ADJUST ); } return false ; case RAISE : if ( record -> event . pressed ) { layer_on ( _RAISE ); update_tri_layer ( _LOWER , _RAISE , _ADJUST ); } else { layer_off ( _RAISE ); update_tri_layer ( _LOWER , _RAISE , _ADJUST ); } return false ; } return true ; } update_tri_layer_state(state, x, y, z) \u00b6 The other function is update_tri_layer_state(state, x, y, z) . This function is meant to be called from the layer_state_set_* functions . This means that any time that you use a keycode to change the layer, this will be checked. So you could use LT(layer, kc) to change the layer and it will trigger the same layer check. There are a couple of caveats to this method: 1. You cannot access the z layer without having x and y layers on, since if you try to activate just layer z , it will run this code and turn off layer z before you could use it. 2. Because layers are processed from the highest number z should be a higher layer than x and y or you may not be able to access it. Example \u00b6 layer_state_t layer_state_set_user ( layer_state_t state ) { return update_tri_layer_state ( state , _LOWER , _RAISE , _ADJUST ); } Alternatively, you don't have to immediately \"return\" the value. This is useful if you want to add multiple tri layers, or if you want to add additional effects. layer_state_t layer_state_set_user ( layer_state_t state ) { state = update_tri_layer_state ( state , _LOWER , _RAISE , _ADJUST ); state = update_tri_layer_state ( state , _RAISE , _SYMB , _SPECIAL ); return state ; } Setting the Persistent Default Layer \u00b6 Do you want to set the default layer, so that it's retained even after you unplug the board? If so, this is the function for you. To use this, you would use set_single_persistent_default_layer(layer) . If you have a name defined for your layer, you can use that instead (such as _QWERTY, _DVORAK or _COLEMAK). This will set the default layer, update the persistent settings, and play a tune if you have Audio enabled on your board, and the default layer sounds set. To configure the default layer sounds, you would want to define this in your config.h file, like this: #define DEFAULT_LAYER_SONGS { SONG(QWERTY_SOUND), \\ SONG(COLEMAK_SOUND), \\ SONG(DVORAK_SOUND) \\ } Tip There are a large number of predefined songs in quantum/audio/song_list.h that you can use. Reseting the keyboard \u00b6 There is the RESET quantum keycode that you can use. But if you want to reset the board as part of a macro, rather than hitting a key separately, you can do that. And to do so, add reset_keyboard() to your function or macro, and this will reset to bootloader. Wiping the EEPROM (Persistent Storage) \u00b6 If you're having issues with Audio, RGB Underglow, backlighting or keys acting weird, then you can reset the EEPROM (persistent setting storage). To force an EEPROM reset, use the EEP_RST keycode or Bootmagic functionality. If neither of those are an option, then you can use a custom macro to do so. To wipe the EEPROM, run eeconfig_init() from your function or macro to reset most of the settings to default. Tap random key \u00b6 If you want to send a random character to the host computer, you can use the tap_random_base64() function. This pseudorandomly selects a number between 0 and 63, and then sends a key press based on that selection. (0\u201325 is A \u2013 Z , 26\u201351 is a \u2013 z , 52\u201361 is 0 \u2013 9 , 62 is + and 63 is / ). Note Needless to say, but this is not a cryptographically secure method of generating random Base64 keys or passwords. Software Timers \u00b6 It's possible to start timers and read values for time-specific events. Here's an example: static uint16_t key_timer ; key_timer = timer_read (); if ( timer_elapsed ( key_timer ) < 100 ) { // do something if less than 100ms have passed } else { // do something if 100ms or more have passed }","title":"\u5b9e\u7528\u51fd\u6570"},{"location":"ref_functions/#list-of-useful-core-functions-to-make-your-keyboard-better","text":"There are a lot of hidden functions in QMK that are incredible useful, or may add a bit of functionality that you've been wanting. Functions that are specific to certain features are not included here, as those will be on their respective feature page.","title":"List of Useful Core Functions To Make Your Keyboard Better"},{"location":"ref_functions/#olkb-tri-layers","text":"There are actually separate functions that you can use there, depending on what you're after.","title":"(OLKB) Tri Layers"},{"location":"ref_functions/#update_tri_layerx-y-z","text":"The first is the update_tri_layer(x, y, z) function. This function check to see if layers x and y are both on. If they are both on, then it turns on layer z . Otherwise, if both x and y are not both on (either only one is, or neither is), then it turns off layer z . This function is useful if you want to create specific keys that have this functionality, but other layer keycodes won't do this.","title":"update_tri_layer(x, y, z)"},{"location":"ref_functions/#update_tri_layer_statestate-x-y-z","text":"The other function is update_tri_layer_state(state, x, y, z) . This function is meant to be called from the layer_state_set_* functions . This means that any time that you use a keycode to change the layer, this will be checked. So you could use LT(layer, kc) to change the layer and it will trigger the same layer check. There are a couple of caveats to this method: 1. You cannot access the z layer without having x and y layers on, since if you try to activate just layer z , it will run this code and turn off layer z before you could use it. 2. Because layers are processed from the highest number z should be a higher layer than x and y or you may not be able to access it.","title":"update_tri_layer_state(state, x, y, z)"},{"location":"ref_functions/#setting-the-persistent-default-layer","text":"Do you want to set the default layer, so that it's retained even after you unplug the board? If so, this is the function for you. To use this, you would use set_single_persistent_default_layer(layer) . If you have a name defined for your layer, you can use that instead (such as _QWERTY, _DVORAK or _COLEMAK). This will set the default layer, update the persistent settings, and play a tune if you have Audio enabled on your board, and the default layer sounds set. To configure the default layer sounds, you would want to define this in your config.h file, like this: #define DEFAULT_LAYER_SONGS { SONG(QWERTY_SOUND), \\ SONG(COLEMAK_SOUND), \\ SONG(DVORAK_SOUND) \\ } Tip There are a large number of predefined songs in quantum/audio/song_list.h that you can use.","title":"Setting the Persistent Default Layer"},{"location":"ref_functions/#reseting-the-keyboard","text":"There is the RESET quantum keycode that you can use. But if you want to reset the board as part of a macro, rather than hitting a key separately, you can do that. And to do so, add reset_keyboard() to your function or macro, and this will reset to bootloader.","title":"Reseting the keyboard"},{"location":"ref_functions/#wiping-the-eeprom-persistent-storage","text":"If you're having issues with Audio, RGB Underglow, backlighting or keys acting weird, then you can reset the EEPROM (persistent setting storage). To force an EEPROM reset, use the EEP_RST keycode or Bootmagic functionality. If neither of those are an option, then you can use a custom macro to do so. To wipe the EEPROM, run eeconfig_init() from your function or macro to reset most of the settings to default.","title":"Wiping the EEPROM (Persistent Storage)"},{"location":"ref_functions/#tap-random-key","text":"If you want to send a random character to the host computer, you can use the tap_random_base64() function. This pseudorandomly selects a number between 0 and 63, and then sends a key press based on that selection. (0\u201325 is A \u2013 Z , 26\u201351 is a \u2013 z , 52\u201361 is 0 \u2013 9 , 62 is + and 63 is / ). Note Needless to say, but this is not a cryptographically secure method of generating random Base64 keys or passwords.","title":"Tap random key"},{"location":"ref_functions/#software-timers","text":"It's possible to start timers and read values for time-specific events. Here's an example: static uint16_t key_timer ; key_timer = timer_read (); if ( timer_elapsed ( key_timer ) < 100 ) { // do something if less than 100ms have passed } else { // do something if 100ms or more have passed }","title":"Software Timers"},{"location":"reference_configurator_support/","text":"Supporting Your Keyboard in QMK Configurator \u00b6 This page covers how to properly support keyboards in the QMK Configurator . How the Configurator Understands Keyboards \u00b6 To understand how the Configurator understands keyboards, first one must understand layout macros. For this exercise, we're going to imagine a 17-key numpad PCB, which we're going to call numpad . |---------------| |NLk| / | * | - | |---+---+---+---| |7 |8 |9 | + | |---+---+---| | |4 |5 |6 | | |---+---+---+---| |1 |2 |3 |Ent| |-------+---| | |0 | . | | |---------------| Tip For more on layout macros, see Understanding QMK: Matrix Scanning and Understanding QMK: Matrix to Physical Layout Map . The Configurator's API reads the keyboard's .h file from qmk_firmware/keyboards/<keyboard>/<keyboard>.h . For our numpad, this file would be qmk_firmware/keyboards/numpad/numpad.h : #pragma once #define LAYOUT( \\ k00, k01, k02, k03, \\ k10, k11, k12, k13, \\ k20, k21, k22, \\ k30, k31, k32, k33, \\ k40, k42 \\ ) { \\ { k00, k01, k02, k03 }, \\ { k10, k11, k12, k13 }, \\ { k20, k21, k22, KC_NO }, \\ { k30, k31, k32, k33 }, \\ { k40, KC_NO, k42, KC_NO } \\ } QMK uses KC_NO to designate places in the switch matrix where there is no switch. Sometimes, XXX , ___ or ____ are used as shorthand to make this section easier to read if it needs to be debugged. This is usually defined near the beginning of the .h file: #pragma once #define XXX KC_NO #define LAYOUT( \\ k00, k01, k02, k03, \\ k10, k11, k12, k13, \\ k20, k21, k22, \\ k30, k31, k32, k33, \\ k40, k42 \\ ) { \\ { k00, k01, k02, k03 }, \\ { k10, k11, k12, k13 }, \\ { k20, k21, k22, XXX }, \\ { k30, k31, k32, k33 }, \\ { k40, XXX, k42, XXX } \\ } Note This usage differs from that of keymap macros, which almost always use XXXXXXX (seven capital X's) for KC_NO and _______ (seven underscores) for KC_TRNS . Note To prevent user confusion, using KC_NO is preferred. The layout macro tells the Configurator that our keyboard has 17 keys, arranged in five rows of four columns each. Our switch positions are named k<row><column> , counting from 0. The names themselves actually don't matter, as long as they match between the top section, which receives the keycodes from the keymap, and the bottom half which designates where each key is in the matrix. To display our keyboard in a way that resembles the physical keyboard, we need to build a JSON file that tells the Configurator how to tie the physical locations and sizes of our keys to our switch matrix. Building the JSON file \u00b6 To build the JSON file, the easiest way is to build the layout in Keyboard Layout Editor (\"KLE\"), from which we'll feed the Raw Data into a QMK tool that converts this data into a JSON the Configurator will read and use. Since KLE opens by default with a numpad layout, we're just going to remove the Getting Started instructions, and use what's left. Once the layout is as desired, move to the Raw Data tab in KLE, and copy the contents: [\"Num Lock\",\"/\",\"*\",\"-\"], [\"7\\nHome\",\"8\\n\u2191\",\"9\\nPgUp\",{h:2},\"+\"], [\"4\\n\u2190\",\"5\",\"6\\n\u2192\"], [\"1\\nEnd\",\"2\\n\u2193\",\"3\\nPgDn\",{h:2},\"Enter\"], [{w:2},\"0\\nIns\",\".\\nDel\"] To convert this data into our JSON, go to the QMK KLE-JSON Converter , paste the Raw Data into the Input field, and click the Convert button. After a moment, our JSON data will appear in the Output field. Copy the contents to a new text document, and name the document info.json , saving it in the same folder that contains numpad.h . Use the keyboard_name object to set the name of the keyboard. For instruction purposes, we will put each key's object on its own line. This is only to make the file more human-readable, and does not affect the Configurator's functionality. { \"keyboard_name\" : \"Numpad\" , \"url\" : \"\" , \"maintainer\" : \"qmk\" , \"tags\" : { \"form_factor\" : \"numpad\" }, \"width\" : 4 , \"height\" : 5 , \"layouts\" : { \"LAYOUT\" : { \"layout\" : [ { \"label\" : \"Num Lock\" , \"x\" : 0 , \"y\" : 0 }, { \"label\" : \"/\" , \"x\" : 1 , \"y\" : 0 }, { \"label\" : \"*\" , \"x\" : 2 , \"y\" : 0 }, { \"label\" : \"-\" , \"x\" : 3 , \"y\" : 0 }, { \"label\" : \"7\" , \"x\" : 0 , \"y\" : 1 }, { \"label\" : \"8\" , \"x\" : 1 , \"y\" : 1 }, { \"label\" : \"9\" , \"x\" : 2 , \"y\" : 1 }, { \"label\" : \"+\" , \"x\" : 3 , \"y\" : 1 , \"h\" : 2 }, { \"label\" : \"4\" , \"x\" : 0 , \"y\" : 2 }, { \"label\" : \"5\" , \"x\" : 1 , \"y\" : 2 }, { \"label\" : \"6\" , \"x\" : 2 , \"y\" : 2 }, { \"label\" : \"1\" , \"x\" : 0 , \"y\" : 3 }, { \"label\" : \"2\" , \"x\" : 1 , \"y\" : 3 }, { \"label\" : \"3\" , \"x\" : 2 , \"y\" : 3 }, { \"label\" : \"Enter\" , \"x\" : 3 , \"y\" : 3 , \"h\" : 2 }, { \"label\" : \"0\" , \"x\" : 0 , \"y\" : 4 , \"w\" : 2 }, { \"label\" : \".\" , \"x\" : 2 , \"y\" : 4 } ] } } } The layouts object contains the data that represents the physical layout of the keyboard. It has an object LAYOUT , which needs to match the name of our layout macro from numpad.h . The LAYOUT object itself has an object named layout , which contains one JSON object for each physical key on our keyboard, formatted as follows: The name of the key. Not displayed in the Configurator. | | The key's X-axis location, in key units from the | | keyboard's left edge. | | | | The key's Y-axis location, in key units from | | | the keyboard's top (rear-facing) edge. \u2193 \u2193 \u2193 {\"label\":\"Num Lock\", \"x\":0, \"y\":0}, Some objects will also have \"w\" and \"h\" keys, which represent a key's width and height, respectively. Info For more on the info.json files, see info.json Format . How the Configurator Programs Keys \u00b6 The Configurator's API uses the layout macro and the JSON file we've given it to create a visual representation of the keyboard that has each visual object tied to a specific key, in sequence: key in layout macro JSON object used k00 {\"label\":\"Num Lock\", \"x\":0, \"y\":0} k01 {\"label\":\"/\", \"x\":1, \"y\":0} k02 {\"label\":\"*\", \"x\":2, \"y\":0} k03 {\"label\":\"-\", \"x\":3, \"y\":0} k10 {\"label\":\"7\", \"x\":0, \"y\":1} k11 {\"label\":\"8\", \"x\":1, \"y\":1} k12 {\"label\":\"9\", \"x\":2, \"y\":1} k13 {\"label\":\"+\", \"x\":3, \"y\":1, \"h\":2} k20 {\"label\":\"4\", \"x\":0, \"y\":2} k21 {\"label\":\"5\", \"x\":1, \"y\":2} k22 {\"label\":\"6\", \"x\":2, \"y\":2} k30 {\"label\":\"1\", \"x\":0, \"y\":3} k31 {\"label\":\"2\", \"x\":1, \"y\":3} k32 {\"label\":\"3\", \"x\":2, \"y\":3} k33 {\"label\":\"Enter\", \"x\":3, \"y\":3, \"h\":2} k40 {\"label\":\"0\", \"x\":0, \"y\":4, \"w\":2} k42 {\"label\":\".\", \"x\":2, \"y\":4} When a user selects the top-left key in the Configurator, and assigns Num Lock to it, the Configurator builds a keymap file with KC_NLCK as the first key, and so on as the keymap is built. The label keys are not used; they are only for the user's reference in identifying specific keys when debugging the info.json file. Issues and Hazards \u00b6 Currently, the Configurator does not support key rotation or non-rectangular key shapes like ISO Enter. Additionally, keys that are vertically-offset from their \"row\" \u2014 the arrow keys on 1800-layouts like the TKC1800 being a prominent example \u2014 confuse the KLE-to-JSON Converter, if not adjusted for by the contributor of the info.json file. Workarounds \u00b6 Non-rectangular keys \u00b6 For ISO Enter keys, QMK custom is to display it as a rectangular key, 1.25u wide and 2u high, aligned so its right edge is aligned with the right edge of the alphanumeric key block. A 60% keyboard in standard ISO layout, as rendered by QMK Configurator. Vertically-offset keys \u00b6 For vertically-offset keys, place them in KLE as if they were not offset, then edit the Y-values as needed in the converted JSON file An 1800-layout keyboard as rendered in Keyboard Layout Editor, without the vertical offset applied to the arrow keys. A Unix diff file, showing the changes needed to vertically-offset the arrow keys in our keyboard's JSON file.","title":"\u914d\u7f6e\u5668\u652f\u6301"},{"location":"reference_configurator_support/#supporting-your-keyboard-in-qmk-configurator","text":"This page covers how to properly support keyboards in the QMK Configurator .","title":"Supporting Your Keyboard in QMK Configurator"},{"location":"reference_configurator_support/#how-the-configurator-understands-keyboards","text":"To understand how the Configurator understands keyboards, first one must understand layout macros. For this exercise, we're going to imagine a 17-key numpad PCB, which we're going to call numpad . |---------------| |NLk| / | * | - | |---+---+---+---| |7 |8 |9 | + | |---+---+---| | |4 |5 |6 | | |---+---+---+---| |1 |2 |3 |Ent| |-------+---| | |0 | . | | |---------------| Tip For more on layout macros, see Understanding QMK: Matrix Scanning and Understanding QMK: Matrix to Physical Layout Map . The Configurator's API reads the keyboard's .h file from qmk_firmware/keyboards/<keyboard>/<keyboard>.h . For our numpad, this file would be qmk_firmware/keyboards/numpad/numpad.h : #pragma once #define LAYOUT( \\ k00, k01, k02, k03, \\ k10, k11, k12, k13, \\ k20, k21, k22, \\ k30, k31, k32, k33, \\ k40, k42 \\ ) { \\ { k00, k01, k02, k03 }, \\ { k10, k11, k12, k13 }, \\ { k20, k21, k22, KC_NO }, \\ { k30, k31, k32, k33 }, \\ { k40, KC_NO, k42, KC_NO } \\ } QMK uses KC_NO to designate places in the switch matrix where there is no switch. Sometimes, XXX , ___ or ____ are used as shorthand to make this section easier to read if it needs to be debugged. This is usually defined near the beginning of the .h file: #pragma once #define XXX KC_NO #define LAYOUT( \\ k00, k01, k02, k03, \\ k10, k11, k12, k13, \\ k20, k21, k22, \\ k30, k31, k32, k33, \\ k40, k42 \\ ) { \\ { k00, k01, k02, k03 }, \\ { k10, k11, k12, k13 }, \\ { k20, k21, k22, XXX }, \\ { k30, k31, k32, k33 }, \\ { k40, XXX, k42, XXX } \\ } Note This usage differs from that of keymap macros, which almost always use XXXXXXX (seven capital X's) for KC_NO and _______ (seven underscores) for KC_TRNS . Note To prevent user confusion, using KC_NO is preferred. The layout macro tells the Configurator that our keyboard has 17 keys, arranged in five rows of four columns each. Our switch positions are named k<row><column> , counting from 0. The names themselves actually don't matter, as long as they match between the top section, which receives the keycodes from the keymap, and the bottom half which designates where each key is in the matrix. To display our keyboard in a way that resembles the physical keyboard, we need to build a JSON file that tells the Configurator how to tie the physical locations and sizes of our keys to our switch matrix.","title":"How the Configurator Understands Keyboards"},{"location":"reference_configurator_support/#building-the-json-file","text":"To build the JSON file, the easiest way is to build the layout in Keyboard Layout Editor (\"KLE\"), from which we'll feed the Raw Data into a QMK tool that converts this data into a JSON the Configurator will read and use. Since KLE opens by default with a numpad layout, we're just going to remove the Getting Started instructions, and use what's left. Once the layout is as desired, move to the Raw Data tab in KLE, and copy the contents: [\"Num Lock\",\"/\",\"*\",\"-\"], [\"7\\nHome\",\"8\\n\u2191\",\"9\\nPgUp\",{h:2},\"+\"], [\"4\\n\u2190\",\"5\",\"6\\n\u2192\"], [\"1\\nEnd\",\"2\\n\u2193\",\"3\\nPgDn\",{h:2},\"Enter\"], [{w:2},\"0\\nIns\",\".\\nDel\"] To convert this data into our JSON, go to the QMK KLE-JSON Converter , paste the Raw Data into the Input field, and click the Convert button. After a moment, our JSON data will appear in the Output field. Copy the contents to a new text document, and name the document info.json , saving it in the same folder that contains numpad.h . Use the keyboard_name object to set the name of the keyboard. For instruction purposes, we will put each key's object on its own line. This is only to make the file more human-readable, and does not affect the Configurator's functionality. { \"keyboard_name\" : \"Numpad\" , \"url\" : \"\" , \"maintainer\" : \"qmk\" , \"tags\" : { \"form_factor\" : \"numpad\" }, \"width\" : 4 , \"height\" : 5 , \"layouts\" : { \"LAYOUT\" : { \"layout\" : [ { \"label\" : \"Num Lock\" , \"x\" : 0 , \"y\" : 0 }, { \"label\" : \"/\" , \"x\" : 1 , \"y\" : 0 }, { \"label\" : \"*\" , \"x\" : 2 , \"y\" : 0 }, { \"label\" : \"-\" , \"x\" : 3 , \"y\" : 0 }, { \"label\" : \"7\" , \"x\" : 0 , \"y\" : 1 }, { \"label\" : \"8\" , \"x\" : 1 , \"y\" : 1 }, { \"label\" : \"9\" , \"x\" : 2 , \"y\" : 1 }, { \"label\" : \"+\" , \"x\" : 3 , \"y\" : 1 , \"h\" : 2 }, { \"label\" : \"4\" , \"x\" : 0 , \"y\" : 2 }, { \"label\" : \"5\" , \"x\" : 1 , \"y\" : 2 }, { \"label\" : \"6\" , \"x\" : 2 , \"y\" : 2 }, { \"label\" : \"1\" , \"x\" : 0 , \"y\" : 3 }, { \"label\" : \"2\" , \"x\" : 1 , \"y\" : 3 }, { \"label\" : \"3\" , \"x\" : 2 , \"y\" : 3 }, { \"label\" : \"Enter\" , \"x\" : 3 , \"y\" : 3 , \"h\" : 2 }, { \"label\" : \"0\" , \"x\" : 0 , \"y\" : 4 , \"w\" : 2 }, { \"label\" : \".\" , \"x\" : 2 , \"y\" : 4 } ] } } } The layouts object contains the data that represents the physical layout of the keyboard. It has an object LAYOUT , which needs to match the name of our layout macro from numpad.h . The LAYOUT object itself has an object named layout , which contains one JSON object for each physical key on our keyboard, formatted as follows: The name of the key. Not displayed in the Configurator. | | The key's X-axis location, in key units from the | | keyboard's left edge. | | | | The key's Y-axis location, in key units from | | | the keyboard's top (rear-facing) edge. \u2193 \u2193 \u2193 {\"label\":\"Num Lock\", \"x\":0, \"y\":0}, Some objects will also have \"w\" and \"h\" keys, which represent a key's width and height, respectively. Info For more on the info.json files, see info.json Format .","title":"Building the JSON file"},{"location":"reference_configurator_support/#how-the-configurator-programs-keys","text":"The Configurator's API uses the layout macro and the JSON file we've given it to create a visual representation of the keyboard that has each visual object tied to a specific key, in sequence: key in layout macro JSON object used k00 {\"label\":\"Num Lock\", \"x\":0, \"y\":0} k01 {\"label\":\"/\", \"x\":1, \"y\":0} k02 {\"label\":\"*\", \"x\":2, \"y\":0} k03 {\"label\":\"-\", \"x\":3, \"y\":0} k10 {\"label\":\"7\", \"x\":0, \"y\":1} k11 {\"label\":\"8\", \"x\":1, \"y\":1} k12 {\"label\":\"9\", \"x\":2, \"y\":1} k13 {\"label\":\"+\", \"x\":3, \"y\":1, \"h\":2} k20 {\"label\":\"4\", \"x\":0, \"y\":2} k21 {\"label\":\"5\", \"x\":1, \"y\":2} k22 {\"label\":\"6\", \"x\":2, \"y\":2} k30 {\"label\":\"1\", \"x\":0, \"y\":3} k31 {\"label\":\"2\", \"x\":1, \"y\":3} k32 {\"label\":\"3\", \"x\":2, \"y\":3} k33 {\"label\":\"Enter\", \"x\":3, \"y\":3, \"h\":2} k40 {\"label\":\"0\", \"x\":0, \"y\":4, \"w\":2} k42 {\"label\":\".\", \"x\":2, \"y\":4} When a user selects the top-left key in the Configurator, and assigns Num Lock to it, the Configurator builds a keymap file with KC_NLCK as the first key, and so on as the keymap is built. The label keys are not used; they are only for the user's reference in identifying specific keys when debugging the info.json file.","title":"How the Configurator Programs Keys"},{"location":"reference_configurator_support/#issues-and-hazards","text":"Currently, the Configurator does not support key rotation or non-rectangular key shapes like ISO Enter. Additionally, keys that are vertically-offset from their \"row\" \u2014 the arrow keys on 1800-layouts like the TKC1800 being a prominent example \u2014 confuse the KLE-to-JSON Converter, if not adjusted for by the contributor of the info.json file.","title":"Issues and Hazards"},{"location":"reference_configurator_support/#workarounds","text":"","title":"Workarounds"},{"location":"reference_glossary/","text":"QMK\u672f\u8bed\u8868 \u00b6 ARM \u00b6 \u591a\u5bb6\u516c\u53f8\u751f\u4ea7\u768432\u4f4d\u5355\u7247\u673a\u7cfb\u5217\uff0c\u4f8b\u5982Atmel, Cypress, Kinetis, NXP, ST, \u548c TI\u7b49\u516c\u53f8\u3002 AVR \u00b6 Atmel \u516c\u53f8\u7684\u5355\u7247\u673a\u7cfb\u5217\u3002 AVR\u662fTMK\u7684\u521d\u59cb\u652f\u6301\u5e73\u53f0\u3002 AZERTY \u00b6 Fran\u00e7ais (\u6cd5\u56fd)\u6807\u51c6\u952e\u76d8\u5e03\u5c40\u3002\u7528\u952e\u76d8\u7684\u524d\u516d\u4e2a\u5b57\u6bcd\u547d\u540d\u3002 Backlight(\u80cc\u5149) \u00b6 \u952e\u76d8\u4e0a\u7167\u660e\u7684\u901a\u79f0\u3002\u80cc\u5149\u901a\u5e38\u662f\u4e00\u7ec4LED\u706f\uff0c\u901a\u8fc7\u952e\u5e3d\u6216\u8005\u6309\u8f74\u53d1\u5149\uff0c\u4f46\u4e5f\u4e0d\u603b\u662f\u8fd9\u6837\u3002 Bluetooth(\u84dd\u7259) \u00b6 \u4e00\u79cd\u77ed\u8ddd\u79bb\u70b9\u5bf9\u70b9\u65e0\u7ebf\u534f\u8bae\u3002\u8bb8\u591a\u591a\u65e0\u7ebf\u952e\u76d8\u4f7f\u7528\u6b64\u534f\u8bae\u3002 Bootloader(\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f) \u00b6 \u4e00\u79cd\u5199\u5230\u4f60\u5355\u7247\u673a\u7684\u4fdd\u62a4\u533a\u7684\u7279\u6b8a\u7684\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u5355\u7247\u673a\u5347\u7ea7\u81ea\u5df1\u7684\u56fa\u4ef6\uff0c\u901a\u5e38\u662f\u901a\u8fc7USB\u6765\u5347\u7ea7\u3002 Bootmagic(\u70ed\u6539\u952e) \u00b6 \u5141\u8bb8\u5404\u79cd\u952e\u76d8\u884c\u4e3a\u52a8\u6001\u53d8\u5316\u7684\u529f\u80fd\uff0c\u5982\u4ea4\u6362\u6216\u7981\u7528\u5e38\u7528\u952e\u3002 C \u00b6 \u4e00\u79cd\u9002\u7528\u4e8e\u7cfb\u7edf\u4ee3\u7801\u7684\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3002\u5927\u591a\u6570qmk\u4ee3\u7801\u662f\u7528C\u7f16\u5199\u7684\u3002 Colemak \u00b6 \u4e00\u79cd\u6d41\u884c\u7684\u952e\u76d8\u5e03\u5c40\u3002 Compile(\u7f16\u8bd1) \u00b6 \u628a\u4eba\u53ef\u8bfb\u7684\u4ee3\u7801\u8f6c\u6362\u6210\u4f60\u7684\u5355\u7247\u673a\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002 Dvorak \u00b6 \u4e00\u4e2a\u7531August Dvorak\u535a\u58eb\u572820\u4e16\u7eaa30\u5e74\u4ee3\u521b\u5efa\u7684\u5e03\u5c40\u3002Dvorak\u7b80\u5316\u952e\u76d8(Dvorak Simplified Keyboard)\u7684\u7f29\u5199\u3002 Dynamic Macro(\u52a8\u6001\u5b8f) \u00b6 \u4e00\u79cd\u8bb0\u5f55\u5728\u952e\u76d8\u4e0a\u7684\u5b8f\uff0c\u5f53\u952e\u76d8\u62d4\u51fa\u6216\u8ba1\u7b97\u673a\u91cd\u65b0\u542f\u52a8\u65f6\uff0c\u5b8f\u5c06\u4e22\u5931\u3002 \u52a8\u6001\u5b8f\u6587\u6863 Eclipse \u00b6 \u662f\u4e00\u79cd\u53d7C\u8bed\u8a00\u5f00\u53d1\u8005\u8ffd\u6367\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883(IDE)\u3002 Eclipse\u5b89\u88c5\u8bf4\u660e Firmware(\u56fa\u4ef6) \u00b6 \u7528\u6765\u63a7\u5236\u5355\u7247\u673a\u7684\u8f6f\u4ef6\u3002 git \u00b6 \u547d\u4ee4\u884c\u7248\u672c\u63a7\u5236\u8f6f\u4ef6 GitHub \u00b6 \u8d1f\u8d23\u5927\u591a\u6570QMK\u9879\u76ee\u7684\u7f51\u7ad9\u3002\u5b83\u662fGit\u3001\u95ee\u9898\u8ddf\u8e2a\u548c\u5176\u4ed6\u5e2e\u52a9\u6211\u4eec\u8fd0\u884cqmk\u7684\u529f\u80fd\u7684\u96c6\u6210\u5e73\u53f0\u3002 ISP(\u5728\u7cfb\u7edf\u7f16\u7a0b) \u00b6 \u5728\u7cfb\u7edf\u7f16\u7a0b(In-system programming), \u4f7f\u7528\u5916\u90e8\u786c\u4ef6\u548cJTAG\u7ba1\u811a\u5bf9AVR\u82af\u7247\u8fdb\u884c\u7f16\u7a0b\u7684\u4e00\u79cd\u65b9\u6cd5\u3002 hid_listen \u00b6 \u4ece\u952e\u76d8\u63a5\u6536\u8c03\u8bd5\u6d88\u606f\u7684\u63a5\u53e3\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 QMK Flasher \u6216 PJRC's hid_listen \u67e5\u770b\u8fd9\u4e9b\u6d88\u606f Keycode(\u952e\u7801) \u00b6 \u8868\u793a\u7279\u5b9a\u952e\u76842\u5b57\u8282\u6570\u636e\u3002 0x00 - 0xFF \u7528\u4e8e \u57fa\u672c\u952e\u7801 \u800c 0x100 - 0xFFFF \u7528\u4e8e \u91cf\u5b50\u952e\u7801 . Key Down \u00b6 \u4e00\u4e2a\u952e\u6309\u4e0b\u5c1a\u672a\u62ac\u8d77\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002 Key Up \u00b6 \u4e00\u4e2a\u952e\u62ac\u8d77\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002 Keymap(\u952e\u6620\u5c04) \u00b6 \u6620\u5c04\u5230\u7269\u7406\u952e\u76d8\u5e03\u5c40\u7684\u4e00\u7ec4\u952e\u7801\uff0c\u5728\u6309\u952e\u548c\u6309\u952e\u91ca\u653e\u65f6\u8fdb\u884c\u5904\u7406\u3002\u6709\u65f6\u7ffb\u8bd1\u4e3a\u5e03\u5c40\uff0c\u610f\u4e3a\u8f6f\u4ef6\u4e0a\u8868\u793a\u7684\u5e03\u5c40\uff0c\u5373\u6620\u5c04\u3002 Layer(\u5c42) \u00b6 \u4e3a\u4e86\u8ba9\u4e00\u4e2a\u952e\u5b9e\u73b0\u591a\u4e2a\u529f\u80fd\u7684\u62bd\u8c61\u7ed3\u6784\u3002\u6700\u9ad8\u6d3b\u52a8\u5c42\u6709\u9650\u3002 Leader Key(\u524d\u5bfc\u952e\u3001\u8bbe\u7f6e\u83dc\u5355\u952e) \u00b6 \u672c\u529f\u80fd\u5141\u8bb8\u60a8\u70b9\u51fb\u524d\u5bfc\u952e\uff0c\u7136\u540e\u6309\u987a\u5e8f\u63091-3\u4e2a\u952e\u5b50\u6765\u6fc0\u6d3b\u6309\u952e\u6216\u5176\u4ed6\u91cf\u5b50\u529f\u80fd\u3002 \u524d\u5bfc\u952e\u6587\u6863 LED \u00b6 \u53d1\u5149\u4e8c\u6781\u7ba1\uff0c\u952e\u76d8\u4e0a\u6700\u5e38\u7528\u7684\u6307\u793a\u706f\u88c5\u7f6e\u3002 Make \u00b6 \u7528\u4e8e\u7f16\u8bd1\u6240\u6709\u6e90\u6587\u4ef6\u7684\u8f6f\u4ef6\u5305\u3002\u53ef\u4ee5\u4f7f\u7528 make \u547d\u4ee4\u548c\u5176\u4ed6\u53c2\u6570\u6765\u7f16\u8bd1\u4f60\u7684\u56fa\u4ef6\u3002 Matrix(\u77e9\u9635) \u00b6 \u4e00\u79cd\u7531\u5217\u548c\u884c\u7ec4\u6210\u7684\u63a5\u7ebf\u6a21\u5f0f\uff0c\u4f7f\u5355\u7247\u673a\u80fd\u591f\u7528\u8f83\u5c11\u7684\u5f15\u811a\u68c0\u6d4b\u6309\u952e\u3002\u77e9\u9635\u901a\u5e38\u5305\u542b\u4e8c\u6781\u7ba1\uff0c\u4ee5\u8fbe\u5230\u5168\u952e\u65e0\u51b2\u3002 Macro(\u5b8f) \u00b6 \u672c\u529f\u80fd\u53ef\u4ee5\u5728\u6572\u51fb\u5355\u4e2a\u952e\u540e\u53d1\u9001\u591a\u4e2a\u6309\u952e\u4e8b\u4ef6(hid\u62a5\u544a)\u3002 \u5b8f\u6587\u6863 MCU(\u5355\u7247\u673a\u3001\u5fae\u63a7\u5236\u5355\u5143) \u00b6 \u5fae\u63a7\u5236\u5355\u5143\uff0c\u952e\u76d8\u7684\u5904\u7406\u5668\u3002 Modifier(\u4fee\u6539\u952e\u3001\u4fee\u9970\u952e\u3001\u529f\u80fd\u952e) \u00b6 \u6309\u4f4f\u8be5\u952e\u5c06\u4f1a\u6539\u53d8\u5176\u4ed6\u952e\u7684\u529f\u80fd\uff0c\u4fee\u9970\u952e\u5305\u62ec Ctrl, Alt, \u548c Shift\u3002 Mousekeys(\u9f20\u6807\u952e) \u00b6 \u672c\u529f\u80fd\u5728\u60a8\u6572\u51fb\u952e\u76d8\u65f6\u4f1a\u63a7\u5236\u9f20\u6807\u5149\u6807\u3002 \u9f20\u6807\u952e\u6587\u6863 N-Key Rollover (NKRO\u3001\u5168\u952e\u65e0\u51b2) \u00b6 \u4e00\u79cd\u672f\u8bed\uff0c\u9002\u7528\u4e8e\u80fd\u591f\u540c\u65f6\u62a5\u544a\u4efb\u610f\u6570\u91cf\u6309\u952e\u7684\u952e\u76d8\u3002 Oneshot Modifier(\u7c98\u6ede\u952e) \u00b6 \u4e00\u79cd\u80fd\u8ba9\u4f60\u7684\u529f\u80fd\u952e\u4e00\u76f4\u4fdd\u6301\u6309\u4e0b\uff0c\u76f4\u5230\u4f60\u6309\u4e0b\u5176\u4ed6\u952e\u7684\u529f\u80fd\u3002\u5b83\u53eb\u505a\u7c98\u6ede\u952e\u6216\u53eb\u505a\u7c98\u8fde\u952e\uff0c\u8be5\u529f\u80fd\u7531\u8f6f\u4ef6\u5b9e\u73b0\u800c\u975e\u673a\u68b0\u7ed3\u6784\u3002 ProMicro \u00b6 \u4e00\u79cd\u4f4e\u6210\u672cAVR\u5f00\u53d1\u677f\u3002\u8fd9\u79cd\u677f\u5b50\u5f88\u5bb9\u6613\u5728\u8d2d\u7269\u7f51\u7ad9\u627e\u5230(\u4ef7\u683c\u4e0d\u523020RMB)\uff0c\u4f46\u662f\u636e\u8bf4\u5237\u5199pro micro\u6709\u70b9\u4ee4\u4eba\u6293\u72c2\u3002 Pull Request(\u62c9\u8bf7\u6c42\u3001PR) \u00b6 \u5411QMK\u8bf7\u6c42\u63d0\u4ea4\u4ee3\u7801\u3002\u6211\u4eec\u9f13\u52b1\u6240\u6709\u7528\u6237\u63d0\u4ea4\u4f60\u4eec\u81ea\u5df1\u7684\u952e\u76d8\u7684\u4ee3\u7801\u3002 QWERTY \u00b6 \u6807\u51c6\u82f1\u6587\u952e\u76d8\uff0c\u901a\u5e38\u4e5f\u7528\u4e8e\u5176\u4ed6\u8bed\u8a00\uff0c\u4f8b\u5982\u4e2d\u6587\u3002\u662f\u7528\u952e\u76d8\u524d6\u4e2a\u5b57\u6bcd\u547d\u540d\u7684\u3002 QWERTZ \u00b6 \u6807\u51c6Deutsche(\u5fb7\u8bed)\u952e\u76d8\u5e03\u5c40\u3002\u4f7f\u7528\u524d6\u4e2a\u5b57\u6bcd\u660e\u540d\u3002 Rollover(\u5141\u8bb8\u7ffb\u8f6c\u3001\u65e0\u51b2\u5f62\u5f0f) \u00b6 \u8be5\u672f\u8bed\u8868\u793a\u5728\u4e00\u4e2a\u952e\u5df2\u6309\u4e0b\u65f6\u6309\u4e0b\u53e6\u4e00\u4e2a\u952e\u3002\u5f62\u5f0f\u5305\u62ec2KRO(\u53cc\u952e\u65e0\u51b2),6KRO(6\u952e\u65e0\u51b2),\u548cNKRO(\u5168\u952e\u65e0\u51b2)\uff0c\u65e0\u51b2\u8868\u793a\u53ef\u540c\u65f6\u6309\u4e0b\u800c\u4e0d\u4ea7\u751f\u51b2\u7a81\u7684\u952e\u7684\u6570\u91cf\u3002 Scancode(\u626b\u63cf\u7801) \u00b6 HID\u62a5\u544a\u4e2d\u7684\u4e00\u4e2a1\u5b57\u8282\u7684\u6570\u5b57\uff0c\u8868\u793a\u4e00\u4e2a\u952e\u5b50\u3002\u8fd9\u4e9b\u6570\u5b57\u5728\u4e0b\u5217\u6587\u6863\u4e2d HID Usage Tables \u8be5\u6587\u6863\u53d1\u5e03\u4e8e USB-IF \u3002 Space Cadet\u952e\u76d8\u7684shift\u952e \u00b6 \u4e00\u79cd\u7279\u4f7f\u7684shift\u8bbe\u7f6e\uff0c\u80fd\u8ba9\u4f60\u901a\u8fc7\u6572\u51fb\u5de6\u6216\u53f3shift\u4e00\u6b21\u6216\u591a\u6b21\u952e\u5165\u4e0d\u540c\u7684\u62ec\u53f7\u3002 Space Cadet\u952e\u76d8\u6587\u6863 Tap(\u6572\u51fb\u3001\u5355\u51fb) \u00b6 \u6309\u4e0b\u5e76\u91ca\u653e\u4e00\u4e2a\u952e\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u60a8\u9700\u8981\u533a\u5206\u952e\u6309\u4e0b\u548c\u952e\u62ac\u8d77\uff0c\u4f46\u662f\u5355\u51fb\u628a\u4e24\u4e2a\u4e8b\u4ef6\u90fd\u5305\u62ec\u4e86\u3002 Tap Dance(\u591a\u51fb\u952e) \u00b6 \u672c\u529f\u80fd\u5141\u8bb8\u5411\u540c\u4e00\u4e2a\u952e\u5b50\u5206\u914d\u591a\u4e2a\u952e\u7801\uff0c\u5e76\u6839\u636e\u6309\u952e\u6b21\u6570\u533a\u5206\u3002 \u591a\u51fb\u952e\u6587\u6863 Teensy \u00b6 \u4e00\u79cd\u4f4e\u6210\u672cAVR\u5f00\u53d1\u677f \uff0c\u901a\u5e38\u7528\u4e8e\u624b\u5de5\u8fde\u7ebf\u952e\u76d8\u3002\u8fd9\u4e2ateensy\u662f\u6709\u70b9\u5c0f\u8d35\u4f46\u662fhalfkay bootloader\u4f1a\u8ba9\u5b83\u5237\u5199\u5341\u5206\u7b80\u5355\uff0c\u6240\u4ee5\u4e5f\u5f88\u5e38\u7528\u3002 Underlight(\u80cc\u5149) \u00b6 \u7528\u4e8e\u7167\u4eae\u7535\u8def\u677f\u5e95\u9762\u7684LED\u7684\u603b\u79f0\u3002\u8fd9\u4e9bLED\u901a\u5e38\u4ece\u5370\u5237\u7535\u8def\u677f\u7684\u5e95\u90e8\u5411\u952e\u76d8\u6240\u5728\u7684\u8868\u9762\u53d1\u5149\u3002 Unicode \u00b6 \u5728\u8f83\u5927\u7684\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0cUnicode\u662f\u4e00\u7ec4\u7f16\u7801\u65b9\u6848\uff0c\u7528\u4e8e\u8868\u793a\u4efb\u4f55\u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u3002 \u4e0eqmk\u76f8\u5173\u7684\u662f\uff0c\u5b83\u610f\u5473\u7740\u4f7f\u7528\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\u65b9\u6848\u6765\u53d1\u9001Unicode\u4ee3\u7801\u70b9\uff0c\u800c\u4e0d\u662f\u626b\u63cf\u7801\u3002 Unicode\u6587\u6863 Unit Testing(\u5355\u5143\u6d4b\u8bd5) \u00b6 \u9488\u5bf9qmk\u7684\u81ea\u52a8\u8fd0\u884c\u6d4b\u8bd5\u6846\u67b6\u3002\u5355\u5143\u6d4b\u8bd5\u5e2e\u52a9\u6211\u4eec\u786e\u4fe1\u6211\u4eec\u7684\u66f4\u6539\u4e0d\u4f1a\u7834\u574f\u4efb\u4f55\u4e1c\u897f\u3002 \u5355\u5143\u6d4b\u8bd5\u6587\u6863 USB \u00b6 \u901a\u7528\u4e32\u884c\u603b\u7ebf\uff0c\u952e\u76d8\u6700\u5e38\u89c1\u7684\u6709\u7ebf\u63a5\u53e3\u3002 USB \u4e3b\u673a (\u6216\u7b80\u6613\u4e3b\u673a) \u00b6 USB\u8bf8\u66a8\u5e02\u4f60\u7684\u7535\u8111\uff0c\u6216\u8005\u4f60\u7684\u952e\u76d8\u6240\u63d2\u7684\u4efb\u4f55\u8bbe\u5907\u3002 \u5e76\u6ca1\u6709\u627e\u5230\u4f60\u60f3\u627e\u5230\u7684\u672f\u8bed? \u00b6 \u5efa\u7acb\u4e00\u4e2aissue \uff0c\u60f3\u597d\u4f60\u7684\u95ee\u9898\uff0c\u6216\u8bb8\u4f60\u6240\u95ee\u7684\u672f\u8bed\u5c31\u4f1a\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002\u521b\u5efa\u4e00\u4e2aPR\u5e2e\u6211\u4eec\u6dfb\u52a0\u9700\u8981\u6dfb\u52a0\u7684\u672f\u8bed\u5f53\u7136\u5760\u543c\u4e86:)","title":"\u672f\u8bed\u8868"},{"location":"reference_glossary/#qmk","text":"","title":"QMK\u672f\u8bed\u8868"},{"location":"reference_glossary/#arm","text":"\u591a\u5bb6\u516c\u53f8\u751f\u4ea7\u768432\u4f4d\u5355\u7247\u673a\u7cfb\u5217\uff0c\u4f8b\u5982Atmel, Cypress, Kinetis, NXP, ST, \u548c TI\u7b49\u516c\u53f8\u3002","title":"ARM"},{"location":"reference_glossary/#avr","text":"Atmel \u516c\u53f8\u7684\u5355\u7247\u673a\u7cfb\u5217\u3002 AVR\u662fTMK\u7684\u521d\u59cb\u652f\u6301\u5e73\u53f0\u3002","title":"AVR"},{"location":"reference_glossary/#azerty","text":"Fran\u00e7ais (\u6cd5\u56fd)\u6807\u51c6\u952e\u76d8\u5e03\u5c40\u3002\u7528\u952e\u76d8\u7684\u524d\u516d\u4e2a\u5b57\u6bcd\u547d\u540d\u3002","title":"AZERTY"},{"location":"reference_glossary/#backlight","text":"\u952e\u76d8\u4e0a\u7167\u660e\u7684\u901a\u79f0\u3002\u80cc\u5149\u901a\u5e38\u662f\u4e00\u7ec4LED\u706f\uff0c\u901a\u8fc7\u952e\u5e3d\u6216\u8005\u6309\u8f74\u53d1\u5149\uff0c\u4f46\u4e5f\u4e0d\u603b\u662f\u8fd9\u6837\u3002","title":"Backlight(\u80cc\u5149)"},{"location":"reference_glossary/#bluetooth","text":"\u4e00\u79cd\u77ed\u8ddd\u79bb\u70b9\u5bf9\u70b9\u65e0\u7ebf\u534f\u8bae\u3002\u8bb8\u591a\u591a\u65e0\u7ebf\u952e\u76d8\u4f7f\u7528\u6b64\u534f\u8bae\u3002","title":"Bluetooth(\u84dd\u7259)"},{"location":"reference_glossary/#bootloader","text":"\u4e00\u79cd\u5199\u5230\u4f60\u5355\u7247\u673a\u7684\u4fdd\u62a4\u533a\u7684\u7279\u6b8a\u7684\u7a0b\u5e8f\uff0c\u8be5\u7a0b\u5e8f\u53ef\u4ee5\u4f7f\u5355\u7247\u673a\u5347\u7ea7\u81ea\u5df1\u7684\u56fa\u4ef6\uff0c\u901a\u5e38\u662f\u901a\u8fc7USB\u6765\u5347\u7ea7\u3002","title":"Bootloader(\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f)"},{"location":"reference_glossary/#bootmagic","text":"\u5141\u8bb8\u5404\u79cd\u952e\u76d8\u884c\u4e3a\u52a8\u6001\u53d8\u5316\u7684\u529f\u80fd\uff0c\u5982\u4ea4\u6362\u6216\u7981\u7528\u5e38\u7528\u952e\u3002","title":"Bootmagic(\u70ed\u6539\u952e)"},{"location":"reference_glossary/#c","text":"\u4e00\u79cd\u9002\u7528\u4e8e\u7cfb\u7edf\u4ee3\u7801\u7684\u4f4e\u7ea7\u7f16\u7a0b\u8bed\u8a00\u3002\u5927\u591a\u6570qmk\u4ee3\u7801\u662f\u7528C\u7f16\u5199\u7684\u3002","title":"C"},{"location":"reference_glossary/#colemak","text":"\u4e00\u79cd\u6d41\u884c\u7684\u952e\u76d8\u5e03\u5c40\u3002","title":"Colemak"},{"location":"reference_glossary/#compile","text":"\u628a\u4eba\u53ef\u8bfb\u7684\u4ee3\u7801\u8f6c\u6362\u6210\u4f60\u7684\u5355\u7247\u673a\u53ef\u4ee5\u8fd0\u884c\u7684\u673a\u5668\u4ee3\u7801\u7684\u8fc7\u7a0b\u3002","title":"Compile(\u7f16\u8bd1)"},{"location":"reference_glossary/#dvorak","text":"\u4e00\u4e2a\u7531August Dvorak\u535a\u58eb\u572820\u4e16\u7eaa30\u5e74\u4ee3\u521b\u5efa\u7684\u5e03\u5c40\u3002Dvorak\u7b80\u5316\u952e\u76d8(Dvorak Simplified Keyboard)\u7684\u7f29\u5199\u3002","title":"Dvorak"},{"location":"reference_glossary/#dynamic-macro","text":"\u4e00\u79cd\u8bb0\u5f55\u5728\u952e\u76d8\u4e0a\u7684\u5b8f\uff0c\u5f53\u952e\u76d8\u62d4\u51fa\u6216\u8ba1\u7b97\u673a\u91cd\u65b0\u542f\u52a8\u65f6\uff0c\u5b8f\u5c06\u4e22\u5931\u3002 \u52a8\u6001\u5b8f\u6587\u6863","title":"Dynamic Macro(\u52a8\u6001\u5b8f)"},{"location":"reference_glossary/#eclipse","text":"\u662f\u4e00\u79cd\u53d7C\u8bed\u8a00\u5f00\u53d1\u8005\u8ffd\u6367\u7684\u96c6\u6210\u5f00\u53d1\u73af\u5883(IDE)\u3002 Eclipse\u5b89\u88c5\u8bf4\u660e","title":"Eclipse"},{"location":"reference_glossary/#firmware","text":"\u7528\u6765\u63a7\u5236\u5355\u7247\u673a\u7684\u8f6f\u4ef6\u3002","title":"Firmware(\u56fa\u4ef6)"},{"location":"reference_glossary/#git","text":"\u547d\u4ee4\u884c\u7248\u672c\u63a7\u5236\u8f6f\u4ef6","title":"git"},{"location":"reference_glossary/#github","text":"\u8d1f\u8d23\u5927\u591a\u6570QMK\u9879\u76ee\u7684\u7f51\u7ad9\u3002\u5b83\u662fGit\u3001\u95ee\u9898\u8ddf\u8e2a\u548c\u5176\u4ed6\u5e2e\u52a9\u6211\u4eec\u8fd0\u884cqmk\u7684\u529f\u80fd\u7684\u96c6\u6210\u5e73\u53f0\u3002","title":"GitHub"},{"location":"reference_glossary/#isp","text":"\u5728\u7cfb\u7edf\u7f16\u7a0b(In-system programming), \u4f7f\u7528\u5916\u90e8\u786c\u4ef6\u548cJTAG\u7ba1\u811a\u5bf9AVR\u82af\u7247\u8fdb\u884c\u7f16\u7a0b\u7684\u4e00\u79cd\u65b9\u6cd5\u3002","title":"ISP(\u5728\u7cfb\u7edf\u7f16\u7a0b)"},{"location":"reference_glossary/#hid_listen","text":"\u4ece\u952e\u76d8\u63a5\u6536\u8c03\u8bd5\u6d88\u606f\u7684\u63a5\u53e3\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 QMK Flasher \u6216 PJRC's hid_listen \u67e5\u770b\u8fd9\u4e9b\u6d88\u606f","title":"hid_listen"},{"location":"reference_glossary/#keycode","text":"\u8868\u793a\u7279\u5b9a\u952e\u76842\u5b57\u8282\u6570\u636e\u3002 0x00 - 0xFF \u7528\u4e8e \u57fa\u672c\u952e\u7801 \u800c 0x100 - 0xFFFF \u7528\u4e8e \u91cf\u5b50\u952e\u7801 .","title":"Keycode(\u952e\u7801)"},{"location":"reference_glossary/#key-down","text":"\u4e00\u4e2a\u952e\u6309\u4e0b\u5c1a\u672a\u62ac\u8d77\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002","title":"Key Down"},{"location":"reference_glossary/#key-up","text":"\u4e00\u4e2a\u952e\u62ac\u8d77\u65f6\u89e6\u53d1\u7684\u4e8b\u4ef6\u3002","title":"Key Up"},{"location":"reference_glossary/#keymap","text":"\u6620\u5c04\u5230\u7269\u7406\u952e\u76d8\u5e03\u5c40\u7684\u4e00\u7ec4\u952e\u7801\uff0c\u5728\u6309\u952e\u548c\u6309\u952e\u91ca\u653e\u65f6\u8fdb\u884c\u5904\u7406\u3002\u6709\u65f6\u7ffb\u8bd1\u4e3a\u5e03\u5c40\uff0c\u610f\u4e3a\u8f6f\u4ef6\u4e0a\u8868\u793a\u7684\u5e03\u5c40\uff0c\u5373\u6620\u5c04\u3002","title":"Keymap(\u952e\u6620\u5c04)"},{"location":"reference_glossary/#layer","text":"\u4e3a\u4e86\u8ba9\u4e00\u4e2a\u952e\u5b9e\u73b0\u591a\u4e2a\u529f\u80fd\u7684\u62bd\u8c61\u7ed3\u6784\u3002\u6700\u9ad8\u6d3b\u52a8\u5c42\u6709\u9650\u3002","title":"Layer(\u5c42)"},{"location":"reference_glossary/#leader-key","text":"\u672c\u529f\u80fd\u5141\u8bb8\u60a8\u70b9\u51fb\u524d\u5bfc\u952e\uff0c\u7136\u540e\u6309\u987a\u5e8f\u63091-3\u4e2a\u952e\u5b50\u6765\u6fc0\u6d3b\u6309\u952e\u6216\u5176\u4ed6\u91cf\u5b50\u529f\u80fd\u3002 \u524d\u5bfc\u952e\u6587\u6863","title":"Leader Key(\u524d\u5bfc\u952e\u3001\u8bbe\u7f6e\u83dc\u5355\u952e)"},{"location":"reference_glossary/#led","text":"\u53d1\u5149\u4e8c\u6781\u7ba1\uff0c\u952e\u76d8\u4e0a\u6700\u5e38\u7528\u7684\u6307\u793a\u706f\u88c5\u7f6e\u3002","title":"LED"},{"location":"reference_glossary/#make","text":"\u7528\u4e8e\u7f16\u8bd1\u6240\u6709\u6e90\u6587\u4ef6\u7684\u8f6f\u4ef6\u5305\u3002\u53ef\u4ee5\u4f7f\u7528 make \u547d\u4ee4\u548c\u5176\u4ed6\u53c2\u6570\u6765\u7f16\u8bd1\u4f60\u7684\u56fa\u4ef6\u3002","title":"Make"},{"location":"reference_glossary/#matrix","text":"\u4e00\u79cd\u7531\u5217\u548c\u884c\u7ec4\u6210\u7684\u63a5\u7ebf\u6a21\u5f0f\uff0c\u4f7f\u5355\u7247\u673a\u80fd\u591f\u7528\u8f83\u5c11\u7684\u5f15\u811a\u68c0\u6d4b\u6309\u952e\u3002\u77e9\u9635\u901a\u5e38\u5305\u542b\u4e8c\u6781\u7ba1\uff0c\u4ee5\u8fbe\u5230\u5168\u952e\u65e0\u51b2\u3002","title":"Matrix(\u77e9\u9635)"},{"location":"reference_glossary/#macro","text":"\u672c\u529f\u80fd\u53ef\u4ee5\u5728\u6572\u51fb\u5355\u4e2a\u952e\u540e\u53d1\u9001\u591a\u4e2a\u6309\u952e\u4e8b\u4ef6(hid\u62a5\u544a)\u3002 \u5b8f\u6587\u6863","title":"Macro(\u5b8f)"},{"location":"reference_glossary/#mcu","text":"\u5fae\u63a7\u5236\u5355\u5143\uff0c\u952e\u76d8\u7684\u5904\u7406\u5668\u3002","title":"MCU(\u5355\u7247\u673a\u3001\u5fae\u63a7\u5236\u5355\u5143)"},{"location":"reference_glossary/#modifier","text":"\u6309\u4f4f\u8be5\u952e\u5c06\u4f1a\u6539\u53d8\u5176\u4ed6\u952e\u7684\u529f\u80fd\uff0c\u4fee\u9970\u952e\u5305\u62ec Ctrl, Alt, \u548c Shift\u3002","title":"Modifier(\u4fee\u6539\u952e\u3001\u4fee\u9970\u952e\u3001\u529f\u80fd\u952e)"},{"location":"reference_glossary/#mousekeys","text":"\u672c\u529f\u80fd\u5728\u60a8\u6572\u51fb\u952e\u76d8\u65f6\u4f1a\u63a7\u5236\u9f20\u6807\u5149\u6807\u3002 \u9f20\u6807\u952e\u6587\u6863","title":"Mousekeys(\u9f20\u6807\u952e)"},{"location":"reference_glossary/#n-key-rollover-nkro","text":"\u4e00\u79cd\u672f\u8bed\uff0c\u9002\u7528\u4e8e\u80fd\u591f\u540c\u65f6\u62a5\u544a\u4efb\u610f\u6570\u91cf\u6309\u952e\u7684\u952e\u76d8\u3002","title":"N-Key Rollover (NKRO\u3001\u5168\u952e\u65e0\u51b2)"},{"location":"reference_glossary/#oneshot-modifier","text":"\u4e00\u79cd\u80fd\u8ba9\u4f60\u7684\u529f\u80fd\u952e\u4e00\u76f4\u4fdd\u6301\u6309\u4e0b\uff0c\u76f4\u5230\u4f60\u6309\u4e0b\u5176\u4ed6\u952e\u7684\u529f\u80fd\u3002\u5b83\u53eb\u505a\u7c98\u6ede\u952e\u6216\u53eb\u505a\u7c98\u8fde\u952e\uff0c\u8be5\u529f\u80fd\u7531\u8f6f\u4ef6\u5b9e\u73b0\u800c\u975e\u673a\u68b0\u7ed3\u6784\u3002","title":"Oneshot Modifier(\u7c98\u6ede\u952e)"},{"location":"reference_glossary/#promicro","text":"\u4e00\u79cd\u4f4e\u6210\u672cAVR\u5f00\u53d1\u677f\u3002\u8fd9\u79cd\u677f\u5b50\u5f88\u5bb9\u6613\u5728\u8d2d\u7269\u7f51\u7ad9\u627e\u5230(\u4ef7\u683c\u4e0d\u523020RMB)\uff0c\u4f46\u662f\u636e\u8bf4\u5237\u5199pro micro\u6709\u70b9\u4ee4\u4eba\u6293\u72c2\u3002","title":"ProMicro"},{"location":"reference_glossary/#pull-requestpr","text":"\u5411QMK\u8bf7\u6c42\u63d0\u4ea4\u4ee3\u7801\u3002\u6211\u4eec\u9f13\u52b1\u6240\u6709\u7528\u6237\u63d0\u4ea4\u4f60\u4eec\u81ea\u5df1\u7684\u952e\u76d8\u7684\u4ee3\u7801\u3002","title":"Pull Request(\u62c9\u8bf7\u6c42\u3001PR)"},{"location":"reference_glossary/#qwerty","text":"\u6807\u51c6\u82f1\u6587\u952e\u76d8\uff0c\u901a\u5e38\u4e5f\u7528\u4e8e\u5176\u4ed6\u8bed\u8a00\uff0c\u4f8b\u5982\u4e2d\u6587\u3002\u662f\u7528\u952e\u76d8\u524d6\u4e2a\u5b57\u6bcd\u547d\u540d\u7684\u3002","title":"QWERTY"},{"location":"reference_glossary/#qwertz","text":"\u6807\u51c6Deutsche(\u5fb7\u8bed)\u952e\u76d8\u5e03\u5c40\u3002\u4f7f\u7528\u524d6\u4e2a\u5b57\u6bcd\u660e\u540d\u3002","title":"QWERTZ"},{"location":"reference_glossary/#rollover","text":"\u8be5\u672f\u8bed\u8868\u793a\u5728\u4e00\u4e2a\u952e\u5df2\u6309\u4e0b\u65f6\u6309\u4e0b\u53e6\u4e00\u4e2a\u952e\u3002\u5f62\u5f0f\u5305\u62ec2KRO(\u53cc\u952e\u65e0\u51b2),6KRO(6\u952e\u65e0\u51b2),\u548cNKRO(\u5168\u952e\u65e0\u51b2)\uff0c\u65e0\u51b2\u8868\u793a\u53ef\u540c\u65f6\u6309\u4e0b\u800c\u4e0d\u4ea7\u751f\u51b2\u7a81\u7684\u952e\u7684\u6570\u91cf\u3002","title":"Rollover(\u5141\u8bb8\u7ffb\u8f6c\u3001\u65e0\u51b2\u5f62\u5f0f)"},{"location":"reference_glossary/#scancode","text":"HID\u62a5\u544a\u4e2d\u7684\u4e00\u4e2a1\u5b57\u8282\u7684\u6570\u5b57\uff0c\u8868\u793a\u4e00\u4e2a\u952e\u5b50\u3002\u8fd9\u4e9b\u6570\u5b57\u5728\u4e0b\u5217\u6587\u6863\u4e2d HID Usage Tables \u8be5\u6587\u6863\u53d1\u5e03\u4e8e USB-IF \u3002","title":"Scancode(\u626b\u63cf\u7801)"},{"location":"reference_glossary/#space-cadetshift","text":"\u4e00\u79cd\u7279\u4f7f\u7684shift\u8bbe\u7f6e\uff0c\u80fd\u8ba9\u4f60\u901a\u8fc7\u6572\u51fb\u5de6\u6216\u53f3shift\u4e00\u6b21\u6216\u591a\u6b21\u952e\u5165\u4e0d\u540c\u7684\u62ec\u53f7\u3002 Space Cadet\u952e\u76d8\u6587\u6863","title":"Space Cadet\u952e\u76d8\u7684shift\u952e"},{"location":"reference_glossary/#tap","text":"\u6309\u4e0b\u5e76\u91ca\u653e\u4e00\u4e2a\u952e\u3002\u5728\u67d0\u4e9b\u60c5\u51b5\u4e0b\u60a8\u9700\u8981\u533a\u5206\u952e\u6309\u4e0b\u548c\u952e\u62ac\u8d77\uff0c\u4f46\u662f\u5355\u51fb\u628a\u4e24\u4e2a\u4e8b\u4ef6\u90fd\u5305\u62ec\u4e86\u3002","title":"Tap(\u6572\u51fb\u3001\u5355\u51fb)"},{"location":"reference_glossary/#tap-dance","text":"\u672c\u529f\u80fd\u5141\u8bb8\u5411\u540c\u4e00\u4e2a\u952e\u5b50\u5206\u914d\u591a\u4e2a\u952e\u7801\uff0c\u5e76\u6839\u636e\u6309\u952e\u6b21\u6570\u533a\u5206\u3002 \u591a\u51fb\u952e\u6587\u6863","title":"Tap Dance(\u591a\u51fb\u952e)"},{"location":"reference_glossary/#teensy","text":"\u4e00\u79cd\u4f4e\u6210\u672cAVR\u5f00\u53d1\u677f \uff0c\u901a\u5e38\u7528\u4e8e\u624b\u5de5\u8fde\u7ebf\u952e\u76d8\u3002\u8fd9\u4e2ateensy\u662f\u6709\u70b9\u5c0f\u8d35\u4f46\u662fhalfkay bootloader\u4f1a\u8ba9\u5b83\u5237\u5199\u5341\u5206\u7b80\u5355\uff0c\u6240\u4ee5\u4e5f\u5f88\u5e38\u7528\u3002","title":"Teensy"},{"location":"reference_glossary/#underlight","text":"\u7528\u4e8e\u7167\u4eae\u7535\u8def\u677f\u5e95\u9762\u7684LED\u7684\u603b\u79f0\u3002\u8fd9\u4e9bLED\u901a\u5e38\u4ece\u5370\u5237\u7535\u8def\u677f\u7684\u5e95\u90e8\u5411\u952e\u76d8\u6240\u5728\u7684\u8868\u9762\u53d1\u5149\u3002","title":"Underlight(\u80cc\u5149)"},{"location":"reference_glossary/#unicode","text":"\u5728\u8f83\u5927\u7684\u8ba1\u7b97\u673a\u4e16\u754c\u4e2d\uff0cUnicode\u662f\u4e00\u7ec4\u7f16\u7801\u65b9\u6848\uff0c\u7528\u4e8e\u8868\u793a\u4efb\u4f55\u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u3002 \u4e0eqmk\u76f8\u5173\u7684\u662f\uff0c\u5b83\u610f\u5473\u7740\u4f7f\u7528\u5404\u79cd\u64cd\u4f5c\u7cfb\u7edf\u65b9\u6848\u6765\u53d1\u9001Unicode\u4ee3\u7801\u70b9\uff0c\u800c\u4e0d\u662f\u626b\u63cf\u7801\u3002 Unicode\u6587\u6863","title":"Unicode"},{"location":"reference_glossary/#unit-testing","text":"\u9488\u5bf9qmk\u7684\u81ea\u52a8\u8fd0\u884c\u6d4b\u8bd5\u6846\u67b6\u3002\u5355\u5143\u6d4b\u8bd5\u5e2e\u52a9\u6211\u4eec\u786e\u4fe1\u6211\u4eec\u7684\u66f4\u6539\u4e0d\u4f1a\u7834\u574f\u4efb\u4f55\u4e1c\u897f\u3002 \u5355\u5143\u6d4b\u8bd5\u6587\u6863","title":"Unit Testing(\u5355\u5143\u6d4b\u8bd5)"},{"location":"reference_glossary/#usb","text":"\u901a\u7528\u4e32\u884c\u603b\u7ebf\uff0c\u952e\u76d8\u6700\u5e38\u89c1\u7684\u6709\u7ebf\u63a5\u53e3\u3002","title":"USB"},{"location":"reference_glossary/#usb_1","text":"USB\u8bf8\u66a8\u5e02\u4f60\u7684\u7535\u8111\uff0c\u6216\u8005\u4f60\u7684\u952e\u76d8\u6240\u63d2\u7684\u4efb\u4f55\u8bbe\u5907\u3002","title":"USB \u4e3b\u673a (\u6216\u7b80\u6613\u4e3b\u673a)"},{"location":"reference_glossary/#_1","text":"\u5efa\u7acb\u4e00\u4e2aissue \uff0c\u60f3\u597d\u4f60\u7684\u95ee\u9898\uff0c\u6216\u8bb8\u4f60\u6240\u95ee\u7684\u672f\u8bed\u5c31\u4f1a\u6dfb\u52a0\u5230\u8fd9\u91cc\u3002\u521b\u5efa\u4e00\u4e2aPR\u5e2e\u6211\u4eec\u6dfb\u52a0\u9700\u8981\u6dfb\u52a0\u7684\u672f\u8bed\u5f53\u7136\u5760\u543c\u4e86:)","title":"\u5e76\u6ca1\u6709\u627e\u5230\u4f60\u60f3\u627e\u5230\u7684\u672f\u8bed?"},{"location":"reference_info_json/","text":"info.json \u00b6 This file is used by the QMK API . It contains the information QMK Configurator needs to display a representation of your keyboard. You can also set metadata here. You can create info.json files at every level under qmk_firmware/keyboards/<name> to specify this metadata. These files are combined, with more specific files overriding keys in less specific files. This means you do not need to duplicate your metadata information. For example, qmk_firmware/keyboards/clueboard/info.json specifies manufacturer and maintainer , while qmk_firmware/keyboards/clueboard/66/info.json specifies more specific information about Clueboard 66%. info.json Format \u00b6 The info.json file is a JSON formatted dictionary with the following keys available to be set. You do not have to set all of them, merely the keys that apply to your keyboard. keyboard_name A free-form text string describing the keyboard. Example: Clueboard 66% url A URL to the keyboard's product page, QMK.fm/keyboards page, or other page describing information about the keyboard. maintainer GitHub username of the maintainer, or qmk for community maintained boards width Width of the board in Key Units height Height of the board in Key Units debounce How many milliseconds (ms) to wait for debounce to happen. (Default: 5) diode_direction The direction diodes face. See DIRECT_PINS in the hardware configuration for more details. layout_aliases A dictionary containing layout aliases. The key is the alias and the value is a layout in layouts it maps to. layouts Physical Layout representations. See the Layout Format section for more detail. matrix_pins Configure the pins corresponding to columns and rows, or direct pins. See Matrix Pins for more detail. rgblight Configure the RGB Lighting feature . See the RGB Lighting section for more detail. usb Configure USB VID, PID, and other parameters. See USB for more detail. Layout Format \u00b6 Within our info.json file the layouts portion of the dictionary contains several nested dictionaries. The outer layer consists of QMK layout macros, for example LAYOUT_ansi or LAYOUT_iso . Within each layout macro are keys for width , height , and key_count , each of which should be self-explanatory. width Optional: The width of the layout in Key Units height Optional: The height of the layout in Key Units key_count Optional: The number of keys in this layout layout A list of Key Dictionaries describing the physical layout. See the next section for more details. Key Dictionary Format \u00b6 Each Key Dictionary in a layout describes the physical properties of a key. If you are familiar with the Raw Code for https://keyboard-layout-editor.com you will find many of the concepts the same. We re-use the same key names and layout choices wherever possible, but unlike keyboard-layout-editor each key is stateless, inheriting no properties from the keys that came before it. All key positions and rotations are specified in relation to the top-left corner of the keyboard, and the top-left corner of each key. x Required : The absolute position of the key in the horizontal axis, in Key Units. y Required : The absolute position of the key in the vertical axis, in Key Units. w The width of the key, in Key Units. Ignored if ks is provided. Default: 1 h The height of the key, in Key Units. Ignored if ks is provided. Default: 1 label What to name this position in the matrix. This should usually correspond to the keycode for the first layer of the default keymap. matrix A 2 item list describing the row and column location for this key. Matrix Pins \u00b6 Currently QMK supports connecting switches either directly to GPIO pins or via a switch matrix. At this time you can not combine these, they are mutually exclusive. Switch Matrix \u00b6 Most keyboards use a switch matrix to connect keyswitches to the MCU. You can define your pin columns and rows to configure your switch matrix. When defining switch matrices you should also define your diode_direction . Example: { \"diode_direction\" : \"COL2ROW\" , \"matrix_pins\" : { \"cols\" : [ \"F4\" , \"E6\" , \"B1\" , \"D2\" ], \"rows\" : [ \"B0\" , \"D3\" , \"D5\" , \"D4\" , \"D6\" ] } } Direct Pins \u00b6 Direct pins are when you connect one side of the switch to GND and the other side to a GPIO pin on your MCU. No diode is required, but there is a 1:1 mapping between switches and pins. When specifying direct pins you need to arrange them in nested arrays. The outer array consists of rows, while the inner array is a text string corresponding to a pin. You can use null to indicate an empty spot in the matrix. Example: { \"matrix_pins\" : { \"direct\" : [ [ \"A10\" , \"A9\" ], [ \"A0\" , \"B8\" ], [ null , \"B11\" ], [ \"B9\" , \"A8\" ], [ \"A7\" , \"B1\" ], [ null , \"B2\" ] ] } } RGB Lighting \u00b6 This section controls the legacy WS2812 support in QMK. This should not be confused with the RGB Matrix feature, which can be used to control both WS2812 and ISSI RGB LEDs. The following items can be set. Not every value is required. led_count The number of LEDs in your strip pin The GPIO pin that your LED strip is connected to animations A dictionary that lists enabled and disabled animations. See RGB Light Animations below. sleep Set to true to enable lighting during host sleep split Set to true to enable synchronization functionality between split halves split_count For split keyboards, the number of LEDs on each side max_brightness (0-255) What the maxmimum brightness (value) level is hue_steps How many steps of adjustment to have for hue saturation_steps How many steps of adjustment to have for saturation brightness_steps How many steps of adjustment to have for brightness (value) Example: { \"rgblight\" : { \"led_count\" : 4 , \"pin\" : \"F6\" , \"hue_steps\" : 10 , \"saturation_steps\" : 17 , \"brightness_steps\" : 17 , \"animations\" : { \"all\" : true } } } RGB Light Animations \u00b6 The following animations can be enabled: Key Description all Enable all additional animation modes. alternating Enable alternating animation mode. breathing Enable breathing animation mode. christmas Enable christmas animation mode. knight Enable knight animation mode. rainbow_mood Enable rainbow mood animation mode. rainbow_swirl Enable rainbow swirl animation mode. rgb_test Enable RGB test animation mode. snake Enable snake animation mode. static_gradient Enable static gradient mode. twinkle Enable twinkle animation mode. USB \u00b6 Every USB keyboard needs to have its USB parmaters defined. At a minimum you need to set vid, pid, and device version. Example: { \"usb\" : { \"vid\" : \"0xC1ED\" , \"pid\" : \"0x23B0\" , \"device_ver\" : \"0x0001\" } }","title":"info.json \u683c\u5f0f"},{"location":"reference_info_json/#infojson","text":"This file is used by the QMK API . It contains the information QMK Configurator needs to display a representation of your keyboard. You can also set metadata here. You can create info.json files at every level under qmk_firmware/keyboards/<name> to specify this metadata. These files are combined, with more specific files overriding keys in less specific files. This means you do not need to duplicate your metadata information. For example, qmk_firmware/keyboards/clueboard/info.json specifies manufacturer and maintainer , while qmk_firmware/keyboards/clueboard/66/info.json specifies more specific information about Clueboard 66%.","title":"info.json"},{"location":"reference_info_json/#infojson-format","text":"The info.json file is a JSON formatted dictionary with the following keys available to be set. You do not have to set all of them, merely the keys that apply to your keyboard. keyboard_name A free-form text string describing the keyboard. Example: Clueboard 66% url A URL to the keyboard's product page, QMK.fm/keyboards page, or other page describing information about the keyboard. maintainer GitHub username of the maintainer, or qmk for community maintained boards width Width of the board in Key Units height Height of the board in Key Units debounce How many milliseconds (ms) to wait for debounce to happen. (Default: 5) diode_direction The direction diodes face. See DIRECT_PINS in the hardware configuration for more details. layout_aliases A dictionary containing layout aliases. The key is the alias and the value is a layout in layouts it maps to. layouts Physical Layout representations. See the Layout Format section for more detail. matrix_pins Configure the pins corresponding to columns and rows, or direct pins. See Matrix Pins for more detail. rgblight Configure the RGB Lighting feature . See the RGB Lighting section for more detail. usb Configure USB VID, PID, and other parameters. See USB for more detail.","title":"info.json Format"},{"location":"reference_info_json/#layout-format","text":"Within our info.json file the layouts portion of the dictionary contains several nested dictionaries. The outer layer consists of QMK layout macros, for example LAYOUT_ansi or LAYOUT_iso . Within each layout macro are keys for width , height , and key_count , each of which should be self-explanatory. width Optional: The width of the layout in Key Units height Optional: The height of the layout in Key Units key_count Optional: The number of keys in this layout layout A list of Key Dictionaries describing the physical layout. See the next section for more details.","title":"Layout Format"},{"location":"reference_info_json/#key-dictionary-format","text":"Each Key Dictionary in a layout describes the physical properties of a key. If you are familiar with the Raw Code for https://keyboard-layout-editor.com you will find many of the concepts the same. We re-use the same key names and layout choices wherever possible, but unlike keyboard-layout-editor each key is stateless, inheriting no properties from the keys that came before it. All key positions and rotations are specified in relation to the top-left corner of the keyboard, and the top-left corner of each key. x Required : The absolute position of the key in the horizontal axis, in Key Units. y Required : The absolute position of the key in the vertical axis, in Key Units. w The width of the key, in Key Units. Ignored if ks is provided. Default: 1 h The height of the key, in Key Units. Ignored if ks is provided. Default: 1 label What to name this position in the matrix. This should usually correspond to the keycode for the first layer of the default keymap. matrix A 2 item list describing the row and column location for this key.","title":"Key Dictionary Format"},{"location":"reference_info_json/#matrix-pins","text":"Currently QMK supports connecting switches either directly to GPIO pins or via a switch matrix. At this time you can not combine these, they are mutually exclusive.","title":"Matrix Pins"},{"location":"reference_info_json/#rgb-lighting","text":"This section controls the legacy WS2812 support in QMK. This should not be confused with the RGB Matrix feature, which can be used to control both WS2812 and ISSI RGB LEDs. The following items can be set. Not every value is required. led_count The number of LEDs in your strip pin The GPIO pin that your LED strip is connected to animations A dictionary that lists enabled and disabled animations. See RGB Light Animations below. sleep Set to true to enable lighting during host sleep split Set to true to enable synchronization functionality between split halves split_count For split keyboards, the number of LEDs on each side max_brightness (0-255) What the maxmimum brightness (value) level is hue_steps How many steps of adjustment to have for hue saturation_steps How many steps of adjustment to have for saturation brightness_steps How many steps of adjustment to have for brightness (value) Example: { \"rgblight\" : { \"led_count\" : 4 , \"pin\" : \"F6\" , \"hue_steps\" : 10 , \"saturation_steps\" : 17 , \"brightness_steps\" : 17 , \"animations\" : { \"all\" : true } } }","title":"RGB Lighting"},{"location":"reference_info_json/#usb","text":"Every USB keyboard needs to have its USB parmaters defined. At a minimum you need to set vid, pid, and device version. Example: { \"usb\" : { \"vid\" : \"0xC1ED\" , \"pid\" : \"0x23B0\" , \"device_ver\" : \"0x0001\" } }","title":"USB"},{"location":"reference_keymap_extras/","text":"Language-specific Keycodes \u00b6 Keyboards are able to support a wide range of languages. However, this support is not actually achieved within the keyboard itself - instead, it sends numerical codes, which the operating system maps to the appropriate characters depending on the user's configured keyboard layout. By default (and per the HID spec), this is the US ANSI layout. For example, when a Swedish person presses the key with the \u00e5 character printed on it, the keyboard is actually sending the keycode for [ . Obviously, this can get confusing, so QMK provides language-specific keycode aliases for many keyboard layouts. These won't do much on their own - you still have to set the matching keyboard layout in your OS settings. Think of them more as keycap labels for your keymap. Simply #include one of the keycode headers below at the top of your keymap.c , and assign the keycodes defined in the header in place of the KC_ prefixed ones. Sendstring Support \u00b6 By default, SEND_STRING() assumes a US ANSI keyboard layout is set. If you are using a different layout, you can include one of the Sendstring LUT headers below in your keymap.c to override the lookup tables used for mapping ASCII characters to keycodes. You do not need to include the corresponding keymap_*.h header, as it is implicit when including the Sendstring header. An important thing to note here is that SEND_STRING() only operates on ASCII text . This means that you cannot pass it a string containing Unicode characters - this unfortunately includes accented characters that may be present in your desired layout. Many layouts make certain characters, such as Grave or Tilde, available only as dead keys , so you must add a space immediately after it in the string you want to send, to prevent it from potentially combining with the next character. Certain other layouts have no Sendstring header as they do not use a Latin-derived alphabet (for example Greek and Russian), and thus there is no way to input most of the ASCII character set. Header Files \u00b6 These headers are located in quantum/keymap_extras/ . Layout Keycodes Header Sendstring LUT Header Canadian Multilingual (CSA) keymap_canadian_multilingual.h sendstring_canadian_multilingual.h Croatian keymap_croatian.h sendstring_croatian.h Czech keymap_czech.h sendstring_czech.h Danish keymap_danish.h sendstring_danish.h Dutch (Belgium) keymap_belgian.h sendstring_belgian.h English (Ireland) keymap_irish.h English (UK) keymap_uk.h sendstring_uk.h English (US Extended) keymap_us_extended.h English (US International) keymap_us_international.h sendstring_us_international.h English (US International, Linux) keymap_us_international_linux.h Estonian keymap_estonian.h sendstring_estonian.h Finnish keymap_finnish.h sendstring_finnish.h French keymap_french.h sendstring_french.h French (AFNOR) keymap_french_afnor.h sendstring_french_afnor.h French (B\u00c9PO) keymap_bepo.h sendstring_bepo.h French (Belgium) keymap_belgian.h sendstring_belgian.h French (Switzerland) keymap_fr_ch.h sendstring_fr_ch.h French (macOS, ISO) keymap_french_osx.h sendstring_french_osx.h German keymap_german.h sendstring_german.h German (Switzerland) keymap_german_ch.h sendstring_german_ch.h German (macOS) keymap_german_osx.h sendstring_german_osx.h German (Neo2) keymap_neo2.h Greek keymap_greek.h Hebrew keymap_hebrew.h Hungarian keymap_hungarian.h sendstring_hungarian.h Icelandic keymap_icelandic.h sendstring_icelandic.h Italian keymap_italian.h sendstring_italian.h Italian (macOS, ANSI) keymap_italian_osx_ansi.h sendstring_italian_osx_ansi.h Italian (macOS, ISO) keymap_italian_osx_iso.h sendstring_italian_osx_iso.h Japanese keymap_jp.h sendstring_jis.h Korean keymap_korean.h Latvian keymap_latvian.h sendstring_latvian.h Lithuanian (\u0104\u017dERTY) keymap_lithuanian_azerty.h sendstring_lithuanian_azerty.h Lithuanian (QWERTY) keymap_lithuanian_qwerty.h sendstring_lithuanian_qwerty.h Norwegian keymap_norwegian.h sendstring_norwegian.h Polish keymap_polish.h Portuguese keymap_portuguese.h sendstring_portuguese.h Portuguese (macOS, ISO) keymap_portuguese_osx_iso.h sendstring_portuguese_osx_iso.h Portuguese (Brazil) keymap_br_abnt2.h sendstring_br_abnt2.h Romanian keymap_romanian.h sendstring_romanian.h Russian keymap_russian.h Serbian keymap_serbian.h Serbian (Latin) keymap_serbian_latin.h sendstring_serbian_latin.h Slovak keymap_slovak.h sendstring_slovak.h Slovenian keymap_slovenian.h sendstring_slovenian.h Spanish keymap_spanish.h sendstring_spanish.h Spanish (Dvorak) keymap_spanish_dvorak.h sendstring_spanish_dvorak.h Swedish keymap_swedish.h sendstring_swedish.h Swedish (macOS, ANSI) keymap_swedish_osx_ansi.h Swedish (macOS, ISO) keymap_swedish_osx_iso.h Swedish Pro (macOS, ANSI) keymap_swedish_pro_osx_ansi.h Swedish Pro (macOS, ISO) keymap_swedish_pro_osx_iso.h Turkish (F) keymap_turkish_f.h sendstring_turkish_f.h Turkish (Q) keymap_turkish_q.h sendstring_turkish_q.h There are also a few which are not quite language-specific, but useful if you are not using a QWERTY layout: Layout Keycodes Header Sendstring LUT Header Colemak keymap_colemak.h sendstring_colemak.h Dvorak keymap_dvorak.h sendstring_dvorak.h Dvorak (French) keymap_dvorak_fr.h sendstring_dvorak_fr.h Dvorak (Programmer) keymap_dvp.h sendstring_dvp.h Norman keymap_norman.h sendstring_norman.h Plover keymap_plover.h Plover (Dvorak) keymap_plover_dvorak.h Steno keymap_steno.h Workman keymap_workman.h sendstring_workman.h Workman (ZXCVM) keymap_workman_zxcvm.h sendstring_workman_zxcvm.h","title":"Language-specific Keycodes"},{"location":"reference_keymap_extras/#language-specific-keycodes","text":"Keyboards are able to support a wide range of languages. However, this support is not actually achieved within the keyboard itself - instead, it sends numerical codes, which the operating system maps to the appropriate characters depending on the user's configured keyboard layout. By default (and per the HID spec), this is the US ANSI layout. For example, when a Swedish person presses the key with the \u00e5 character printed on it, the keyboard is actually sending the keycode for [ . Obviously, this can get confusing, so QMK provides language-specific keycode aliases for many keyboard layouts. These won't do much on their own - you still have to set the matching keyboard layout in your OS settings. Think of them more as keycap labels for your keymap. Simply #include one of the keycode headers below at the top of your keymap.c , and assign the keycodes defined in the header in place of the KC_ prefixed ones.","title":"Language-specific Keycodes"},{"location":"reference_keymap_extras/#sendstring-support","text":"By default, SEND_STRING() assumes a US ANSI keyboard layout is set. If you are using a different layout, you can include one of the Sendstring LUT headers below in your keymap.c to override the lookup tables used for mapping ASCII characters to keycodes. You do not need to include the corresponding keymap_*.h header, as it is implicit when including the Sendstring header. An important thing to note here is that SEND_STRING() only operates on ASCII text . This means that you cannot pass it a string containing Unicode characters - this unfortunately includes accented characters that may be present in your desired layout. Many layouts make certain characters, such as Grave or Tilde, available only as dead keys , so you must add a space immediately after it in the string you want to send, to prevent it from potentially combining with the next character. Certain other layouts have no Sendstring header as they do not use a Latin-derived alphabet (for example Greek and Russian), and thus there is no way to input most of the ASCII character set.","title":"Sendstring Support"},{"location":"reference_keymap_extras/#header-files","text":"These headers are located in quantum/keymap_extras/ . Layout Keycodes Header Sendstring LUT Header Canadian Multilingual (CSA) keymap_canadian_multilingual.h sendstring_canadian_multilingual.h Croatian keymap_croatian.h sendstring_croatian.h Czech keymap_czech.h sendstring_czech.h Danish keymap_danish.h sendstring_danish.h Dutch (Belgium) keymap_belgian.h sendstring_belgian.h English (Ireland) keymap_irish.h English (UK) keymap_uk.h sendstring_uk.h English (US Extended) keymap_us_extended.h English (US International) keymap_us_international.h sendstring_us_international.h English (US International, Linux) keymap_us_international_linux.h Estonian keymap_estonian.h sendstring_estonian.h Finnish keymap_finnish.h sendstring_finnish.h French keymap_french.h sendstring_french.h French (AFNOR) keymap_french_afnor.h sendstring_french_afnor.h French (B\u00c9PO) keymap_bepo.h sendstring_bepo.h French (Belgium) keymap_belgian.h sendstring_belgian.h French (Switzerland) keymap_fr_ch.h sendstring_fr_ch.h French (macOS, ISO) keymap_french_osx.h sendstring_french_osx.h German keymap_german.h sendstring_german.h German (Switzerland) keymap_german_ch.h sendstring_german_ch.h German (macOS) keymap_german_osx.h sendstring_german_osx.h German (Neo2) keymap_neo2.h Greek keymap_greek.h Hebrew keymap_hebrew.h Hungarian keymap_hungarian.h sendstring_hungarian.h Icelandic keymap_icelandic.h sendstring_icelandic.h Italian keymap_italian.h sendstring_italian.h Italian (macOS, ANSI) keymap_italian_osx_ansi.h sendstring_italian_osx_ansi.h Italian (macOS, ISO) keymap_italian_osx_iso.h sendstring_italian_osx_iso.h Japanese keymap_jp.h sendstring_jis.h Korean keymap_korean.h Latvian keymap_latvian.h sendstring_latvian.h Lithuanian (\u0104\u017dERTY) keymap_lithuanian_azerty.h sendstring_lithuanian_azerty.h Lithuanian (QWERTY) keymap_lithuanian_qwerty.h sendstring_lithuanian_qwerty.h Norwegian keymap_norwegian.h sendstring_norwegian.h Polish keymap_polish.h Portuguese keymap_portuguese.h sendstring_portuguese.h Portuguese (macOS, ISO) keymap_portuguese_osx_iso.h sendstring_portuguese_osx_iso.h Portuguese (Brazil) keymap_br_abnt2.h sendstring_br_abnt2.h Romanian keymap_romanian.h sendstring_romanian.h Russian keymap_russian.h Serbian keymap_serbian.h Serbian (Latin) keymap_serbian_latin.h sendstring_serbian_latin.h Slovak keymap_slovak.h sendstring_slovak.h Slovenian keymap_slovenian.h sendstring_slovenian.h Spanish keymap_spanish.h sendstring_spanish.h Spanish (Dvorak) keymap_spanish_dvorak.h sendstring_spanish_dvorak.h Swedish keymap_swedish.h sendstring_swedish.h Swedish (macOS, ANSI) keymap_swedish_osx_ansi.h Swedish (macOS, ISO) keymap_swedish_osx_iso.h Swedish Pro (macOS, ANSI) keymap_swedish_pro_osx_ansi.h Swedish Pro (macOS, ISO) keymap_swedish_pro_osx_iso.h Turkish (F) keymap_turkish_f.h sendstring_turkish_f.h Turkish (Q) keymap_turkish_q.h sendstring_turkish_q.h There are also a few which are not quite language-specific, but useful if you are not using a QWERTY layout: Layout Keycodes Header Sendstring LUT Header Colemak keymap_colemak.h sendstring_colemak.h Dvorak keymap_dvorak.h sendstring_dvorak.h Dvorak (French) keymap_dvorak_fr.h sendstring_dvorak_fr.h Dvorak (Programmer) keymap_dvp.h sendstring_dvp.h Norman keymap_norman.h sendstring_norman.h Plover keymap_plover.h Plover (Dvorak) keymap_plover_dvorak.h Steno keymap_steno.h Workman keymap_workman.h sendstring_workman.h Workman (ZXCVM) keymap_workman_zxcvm.h sendstring_workman_zxcvm.h","title":"Header Files"},{"location":"serial_driver/","text":"'serial' Driver \u00b6 This driver powers the Split Keyboard feature. Note Serial in this context should be read as sending information one bit at a time , rather than implementing UART/USART/RS485/RS232 standards. Drivers in this category have the following characteristics: * bit bang and USART Half-duplex provide data and signaling over a single conductor * USART Full-duplex provide data and signaling over two conductors * They are all limited to single master and single slave communication scheme Supported Driver Types \u00b6 AVR ARM bit bang :heavy_check_mark: :heavy_check_mark: USART Half-duplex :heavy_check_mark: USART Full-duplex :heavy_check_mark: Driver configuration \u00b6 Bitbang \u00b6 Default driver, the absence of configuration assumes this driver. To configure it, add this to your rules.mk: SERIAL_DRIVER = bitbang Configure the driver via your config.h: #define SOFT_SERIAL_PIN D0 // or D1, D2, D3, E6 #define SELECT_SOFT_SERIAL_SPEED 1 // or 0, 2, 3, 4, 5 // 0: about 189kbps (Experimental only) // 1: about 137kbps (default) // 2: about 75kbps // 3: about 39kbps // 4: about 26kbps // 5: about 20kbps ARM \u00b6 Warning The bitbang driver causes connection issues with bitbang WS2812 driver Along with the generic options above, you must also turn on the PAL_USE_CALLBACKS feature in your halconf.h. USART Half-duplex \u00b6 Targeting STM32 boards where communication is offloaded to a USART hardware device. The advantage over bitbang is that this provides fast and accurate timings. SERIAL_PIN_TX for this driver is the configured USART TX pin. As this Pin is configured in open-drain mode an external pull-up resistor is needed to keep the line high (resistor values of 1.5k to 8.2k are known to work). To configure it, add this to your rules.mk: SERIAL_DRIVER = usart Configure the hardware via your config.h: #define SOFT_SERIAL_PIN B6 // USART TX pin //#define USART1_REMAP // Remap USART TX and RX pins on STM32F103 MCUs, see table below. #define SELECT_SOFT_SERIAL_SPEED 1 // or 0, 2, 3, 4, 5 // 0: about 460800 baud // 1: about 230400 baud (default) // 2: about 115200 baud // 3: about 57600 baud // 4: about 38400 baud // 5: about 19200 baud #define SERIAL_USART_DRIVER SD1 // USART driver of TX pin. default: SD1 #define SERIAL_USART_TX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7 #define SERIAL_USART_TIMEOUT 100 // USART driver timeout. default 100 You must also enable the ChibiOS SERIAL feature: * In your board's halconf.h: #define HAL_USE_SERIAL TRUE * In your board's mcuconf.h: #define STM32_SERIAL_USE_USARTn TRUE (where 'n' matches the peripheral number of your selected USART on the MCU) Do note that the configuration required is for the SERIAL peripheral, not the UART peripheral. USART Full-duplex \u00b6 Targeting STM32 boards where communication is offloaded to a USART hardware device. The advantage over bitbang is that this provides fast and accurate timings. USART Full-Duplex requires two conductors without pull-up resistors instead of one conductor with a pull-up resistor unlike the Half-duplex driver, but it is more efficent as it uses DMA transfers, which can result in even faster transmission speeds. Pin configuration \u00b6 SERIAL_USART_TX_PIN is the USART TX pin, SERIAL_USART_RX_PIN is the USART RX pin. No external pull-up resistors are needed as the TX pin operates in push-pull mode. To use this driver the usart peripherals TX and RX pins must be configured with the correct Alternate-functions. If you are using a Proton-C everything is already setup, same is true for STM32F103 MCUs. For MCUs which are using a modern flexible GPIO configuration you have to specify these by setting SERIAL_USART_TX_PAL_MODE and SERIAL_USART_RX_PAL_MODE . Refeer to the corresponding datasheets of your MCU or find those settings in the table below. Connecting the halves and Pin Swap \u00b6 Please note that TX of the master half has to be connected with the RX pin of the slave half and RX of the master half has to be connected with the TX pin of the slave half! Usually this pin swap has to be done outside of the MCU e.g. with cables or on the pcb. Some MCUs like the STM32F303 used on the Proton-C allow this pin swap directly inside the MCU, this feature can be enabled using #define SERIAL_USART_PIN_SWAP in your config.h. Setup \u00b6 To use the driver, add this to your rules.mk: SERIAL_DRIVER = usart_duplex Next configure the hardware via your config.h: #define SERIAL_USART_TX_PIN B6 // USART TX pin #define SERIAL_USART_RX_PIN B7 // USART RX pin //#define USART1_REMAP // Remap USART TX and RX pins on STM32F103 MCUs, see table below. //#define SERIAL_USART_PIN_SWAP // Swap TX and RX pins if keyboard is master halve. // Check if this feature is necessary with your keyboard design and available on the mcu. #define SELECT_SOFT_SERIAL_SPEED 1 // or 0, 2, 3, 4, 5 // 0: 460800 baud // 1: 230400 baud (default) // 2: 115200 baud // 3: 57600 baud // 4: 38400 baud // 5: 19200 baud #define SERIAL_USART_DRIVER UARTD1 // USART driver of TX and RX pin. default: UARTD1 #define SERIAL_USART_TX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7 #define SERIAL_USART_RX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7 #define SERIAL_USART_TIMEOUT 100 // USART driver timeout. default 100 You must also enable the ChibiOS UART with blocking api feature: * In your board's halconf.h: #define HAL_USE_UART TRUE and #define UART_USE_WAIT TRUE * In your board's mcuconf.h: #define STM32_UART_USE_USARTn TRUE (where 'n' matches the peripheral number of your selected USART on the MCU) Do note that the configuration required is for the UART peripheral, not the SERIAL peripheral. Pins for USART Peripherals with Alternate Functions for selected STM32 MCUs \u00b6 STM32F303 / Proton-C Datasheet \u00b6 Pin Swap available: :heavy_check_mark: Pin Function Mode USART1 PA9 TX AF7 PA10 RX AF7 PB6 TX AF7 PB7 RX AF7 PC4 TX AF7 PC5 RX AF7 PE0 TX AF7 PE1 RX AF7 USART2 PA2 TX AF7 PA3 RX AF7 PA14 TX AF7 PA15 RX AF7 PB3 TX AF7 PB4 RX AF7 PD5 TX AF7 PD6 RX AF7 USART3 PB10 TX AF7 PB11 RX AF7 PC10 TX AF7 PC11 RX AF7 PD8 TX AF7 PD9 RX AF7 STM32F072 Datasheet \u00b6 Pin Swap available: :heavy_check_mark: Pin Function Mode USART1 PA9 TX AF1 PA10 RX AF1 PB6 TX AF0 PB7 RX AF0 USART2 PA2 TX AF1 PA3 RX AF1 PA14 TX AF1 PA15 RX AF1 USART3 PB10 TX AF4 PB11 RX AF4 PC4 TX AF1 PC5 RX AF1 PC10 TX AF1 PC11 RX AF1 PD8 TX AF0 PD9 RX AF0 USART4 PA0 TX AF4 PA1 RX AF4 STM32F103 Medium Density (C8-CB) Datasheet \u00b6 Pin Swap available: N/A TX Pin is always Alternate Function Push-Pull, RX Pin is always regular input pin for any USART peripheral. For STM32F103 no additional Alternate Function configuration is necessary. QMK is already configured. Pin remapping: The pins of USART Peripherals use default Pins that can be remapped to use other pins using the AFIO registers. Default pins are marked bold . Add the appropriate defines to your config.h file. Pin Function Mode USART_REMAP USART1 PA9 TX AFPP PA10 RX IN PB6 TX AFPP USART1_REMAP PB7 RX IN USART1_REMAP USART2 PA2 TX AFPP PA3 RX IN PD5 TX AFPP USART2_REMAP PD6 RX IN USART2_REMAP USART3 PB10 TX AFPP PB11 RX IN PC10 TX AFPP USART3_PARTIALREMAP PC11 RX IN USART3_PARTIALREMAP PD8 TX AFPP USART3_FULLREMAP PD9 RX IN USART3_FULLREMAP","title":"'serial' Driver"},{"location":"serial_driver/#serial-driver","text":"This driver powers the Split Keyboard feature. Note Serial in this context should be read as sending information one bit at a time , rather than implementing UART/USART/RS485/RS232 standards. Drivers in this category have the following characteristics: * bit bang and USART Half-duplex provide data and signaling over a single conductor * USART Full-duplex provide data and signaling over two conductors * They are all limited to single master and single slave communication scheme","title":"'serial' Driver"},{"location":"serial_driver/#supported-driver-types","text":"AVR ARM bit bang :heavy_check_mark: :heavy_check_mark: USART Half-duplex :heavy_check_mark: USART Full-duplex :heavy_check_mark:","title":"Supported Driver Types"},{"location":"serial_driver/#driver-configuration","text":"","title":"Driver configuration"},{"location":"serial_driver/#bitbang","text":"Default driver, the absence of configuration assumes this driver. To configure it, add this to your rules.mk: SERIAL_DRIVER = bitbang Configure the driver via your config.h: #define SOFT_SERIAL_PIN D0 // or D1, D2, D3, E6 #define SELECT_SOFT_SERIAL_SPEED 1 // or 0, 2, 3, 4, 5 // 0: about 189kbps (Experimental only) // 1: about 137kbps (default) // 2: about 75kbps // 3: about 39kbps // 4: about 26kbps // 5: about 20kbps","title":"Bitbang"},{"location":"serial_driver/#usart-half-duplex","text":"Targeting STM32 boards where communication is offloaded to a USART hardware device. The advantage over bitbang is that this provides fast and accurate timings. SERIAL_PIN_TX for this driver is the configured USART TX pin. As this Pin is configured in open-drain mode an external pull-up resistor is needed to keep the line high (resistor values of 1.5k to 8.2k are known to work). To configure it, add this to your rules.mk: SERIAL_DRIVER = usart Configure the hardware via your config.h: #define SOFT_SERIAL_PIN B6 // USART TX pin //#define USART1_REMAP // Remap USART TX and RX pins on STM32F103 MCUs, see table below. #define SELECT_SOFT_SERIAL_SPEED 1 // or 0, 2, 3, 4, 5 // 0: about 460800 baud // 1: about 230400 baud (default) // 2: about 115200 baud // 3: about 57600 baud // 4: about 38400 baud // 5: about 19200 baud #define SERIAL_USART_DRIVER SD1 // USART driver of TX pin. default: SD1 #define SERIAL_USART_TX_PAL_MODE 7 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 7 #define SERIAL_USART_TIMEOUT 100 // USART driver timeout. default 100 You must also enable the ChibiOS SERIAL feature: * In your board's halconf.h: #define HAL_USE_SERIAL TRUE * In your board's mcuconf.h: #define STM32_SERIAL_USE_USARTn TRUE (where 'n' matches the peripheral number of your selected USART on the MCU) Do note that the configuration required is for the SERIAL peripheral, not the UART peripheral.","title":"USART Half-duplex"},{"location":"serial_driver/#usart-full-duplex","text":"Targeting STM32 boards where communication is offloaded to a USART hardware device. The advantage over bitbang is that this provides fast and accurate timings. USART Full-Duplex requires two conductors without pull-up resistors instead of one conductor with a pull-up resistor unlike the Half-duplex driver, but it is more efficent as it uses DMA transfers, which can result in even faster transmission speeds.","title":"USART Full-duplex"},{"location":"spi_driver/","text":"SPI Master Driver \u00b6 The SPI Master drivers used in QMK have a set of common functions to allow portability between MCUs. AVR Configuration \u00b6 No special setup is required - just connect the SS , SCK , MOSI and MISO pins of your SPI devices to the matching pins on the MCU: MCU SS SCK MOSI MISO ATmega16/32U2/4 B0 B1 B2 B3 AT90USB64/128/162 B0 B1 B2 B3 ATmega32A B4 B7 B5 B6 ATmega328/P B2 B5 B3 B4 You may use more than one slave select pin, not just the SS pin. This is useful when you have multiple devices connected and need to communicate with them individually. SPI_SS_PIN can be passed to spi_start() to refer to SS . ChibiOS/ARM Configuration \u00b6 You'll need to determine which pins can be used for SPI -- as an example, STM32 parts generally have multiple SPI peripherals, labeled SPI1, SPI2, SPI3 etc. To enable SPI, modify your board's halconf.h to enable SPI: #define HAL_USE_SPI TRUE #define SPI_USE_WAIT TRUE #define SPI_SELECT_MODE SPI_SELECT_MODE_PAD Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_SPI_USE_SPI2 #define STM32_SPI_USE_SPI2 TRUE Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h Override Description Default SPI_DRIVER SPI peripheral to use - SPI1 -> SPID1 , SPI2 -> SPID2 etc. SPID2 SPI_SCK_PIN The pin to use for SCK B13 SPI_SCK_PAL_MODE The alternate function mode for SCK 5 SPI_MOSI_PIN The pin to use for MOSI B15 SPI_MOSI_PAL_MODE The alternate function mode for MOSI 5 SPI_MISO_PIN The pin to use for MISO B14 SPI_MISO_PAL_MODE The alternate function mode for MISO 5 As per the AVR configuration, you may choose any other standard GPIO as a slave select pin, which should be supplied to spi_start() . Functions \u00b6 void spi_init(void) \u00b6 Initialize the SPI driver. This function must be called only once, before any of the below functions can be called. bool spi_start(pin_t slavePin, bool lsbFirst, uint8_t mode, uint16_t divisor) \u00b6 Start an SPI transaction. Arguments \u00b6 pin_t slavePin The QMK pin to assert as the slave select pin, eg. B4 . bool lsbFirst Determines the endianness of the transmission. If true , the least significant bit of each byte is sent first. uint8_t mode The SPI mode to use: Mode Clock Polarity Clock Phase 0 Leading edge rising Sample on leading edge 1 Leading edge rising Sample on trailing edge 2 Leading edge falling Sample on leading edge 3 Leading edge falling Sample on trailing edge uint16_t divisor The SPI clock divisor, will be rounded up to the nearest power of two. This number can be calculated by dividing the MCU's clock speed by the desired SPI clock speed. For example, an MCU running at 8 MHz wanting to talk to an SPI device at 4 MHz would set the divisor to 2 . Return Value \u00b6 false if the supplied parameters are invalid or the SPI peripheral is already in use, or true . spi_status_t spi_write(uint8_t data) \u00b6 Write a byte to the selected SPI device. Arguments \u00b6 uint8_t data The byte to write. Return Value \u00b6 SPI_STATUS_TIMEOUT if the timeout period elapses, or SPI_STATUS_SUCCESS . spi_status_t spi_read(void) \u00b6 Read a byte from the selected SPI device. Return Value \u00b6 SPI_STATUS_TIMEOUT if the timeout period elapses, or the byte read from the device. spi_status_t spi_transmit(const uint8_t *data, uint16_t length) \u00b6 Send multiple bytes to the selected SPI device. Arguments \u00b6 const uint8_t *data A pointer to the data to write from. uint16_t length The number of bytes to write. Take care not to overrun the length of data . Return Value \u00b6 SPI_STATUS_TIMEOUT if the timeout period elapses, SPI_STATUS_ERROR if some other error occurs, otherwise SPI_STATUS_SUCCESS . spi_status_t spi_receive(uint8_t *data, uint16_t length) \u00b6 Receive multiple bytes from the selected SPI device. Arguments \u00b6 uint8_t *data A pointer to the buffer to read into. uint16_t length The number of bytes to read. Take care not to overrun the length of data . Return Value \u00b6 SPI_STATUS_TIMEOUT if the timeout period elapses, SPI_STATUS_ERROR if some other error occurs, otherwise SPI_STATUS_SUCCESS . void spi_stop(void) \u00b6 End the current SPI transaction. This will deassert the slave select pin and reset the endianness, mode and divisor configured by spi_start() .","title":"SPI\u8bbe\u5907"},{"location":"spi_driver/#spi-master-driver","text":"The SPI Master drivers used in QMK have a set of common functions to allow portability between MCUs.","title":"SPI Master Driver"},{"location":"spi_driver/#avr-configuration","text":"No special setup is required - just connect the SS , SCK , MOSI and MISO pins of your SPI devices to the matching pins on the MCU: MCU SS SCK MOSI MISO ATmega16/32U2/4 B0 B1 B2 B3 AT90USB64/128/162 B0 B1 B2 B3 ATmega32A B4 B7 B5 B6 ATmega328/P B2 B5 B3 B4 You may use more than one slave select pin, not just the SS pin. This is useful when you have multiple devices connected and need to communicate with them individually. SPI_SS_PIN can be passed to spi_start() to refer to SS .","title":"AVR Configuration"},{"location":"spi_driver/#chibiosarm-configuration","text":"You'll need to determine which pins can be used for SPI -- as an example, STM32 parts generally have multiple SPI peripherals, labeled SPI1, SPI2, SPI3 etc. To enable SPI, modify your board's halconf.h to enable SPI: #define HAL_USE_SPI TRUE #define SPI_USE_WAIT TRUE #define SPI_SELECT_MODE SPI_SELECT_MODE_PAD Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_SPI_USE_SPI2 #define STM32_SPI_USE_SPI2 TRUE Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h Override Description Default SPI_DRIVER SPI peripheral to use - SPI1 -> SPID1 , SPI2 -> SPID2 etc. SPID2 SPI_SCK_PIN The pin to use for SCK B13 SPI_SCK_PAL_MODE The alternate function mode for SCK 5 SPI_MOSI_PIN The pin to use for MOSI B15 SPI_MOSI_PAL_MODE The alternate function mode for MOSI 5 SPI_MISO_PIN The pin to use for MISO B14 SPI_MISO_PAL_MODE The alternate function mode for MISO 5 As per the AVR configuration, you may choose any other standard GPIO as a slave select pin, which should be supplied to spi_start() .","title":"ChibiOS/ARM Configuration"},{"location":"spi_driver/#functions","text":"","title":"Functions"},{"location":"spi_driver/#void-spi_initvoid","text":"Initialize the SPI driver. This function must be called only once, before any of the below functions can be called.","title":"void spi_init(void)"},{"location":"spi_driver/#bool-spi_startpin_t-slavepin-bool-lsbfirst-uint8_t-mode-uint16_t-divisor","text":"Start an SPI transaction.","title":"bool spi_start(pin_t slavePin, bool lsbFirst, uint8_t mode, uint16_t divisor)"},{"location":"spi_driver/#spi_status_t-spi_writeuint8_t-data","text":"Write a byte to the selected SPI device.","title":"spi_status_t spi_write(uint8_t data)"},{"location":"spi_driver/#spi_status_t-spi_readvoid","text":"Read a byte from the selected SPI device.","title":"spi_status_t spi_read(void)"},{"location":"spi_driver/#spi_status_t-spi_transmitconst-uint8_t-data-uint16_t-length","text":"Send multiple bytes to the selected SPI device.","title":"spi_status_t spi_transmit(const uint8_t *data, uint16_t length)"},{"location":"spi_driver/#spi_status_t-spi_receiveuint8_t-data-uint16_t-length","text":"Receive multiple bytes from the selected SPI device.","title":"spi_status_t spi_receive(uint8_t *data, uint16_t length)"},{"location":"spi_driver/#void-spi_stopvoid","text":"End the current SPI transaction. This will deassert the slave select pin and reset the endianness, mode and divisor configured by spi_start() .","title":"void spi_stop(void)"},{"location":"support/","text":"\u83b7\u5f97\u5e2e\u52a9 \u00b6 \u6709\u5f88\u591a\u65b9\u6cd5\u6765\u83b7\u5f97\u5173\u4e8eQMK\u7684\u5e2e\u52a9. \u5b9e\u65f6\u804a\u5929 \u00b6 \u4f60\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4e3b\u8981 Discord\u670d\u52a1\u5668 \u627e\u5230QMK\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u3002\u6709\u5f88\u591a\u8ba8\u8bba\u56fa\u4ef6\u7684\u4e0d\u540c\u9891\u9053, \u5de5\u5177\u7bb1(Toolbox), \u786c\u4ef6,\u914d\u7f6e\u5de5\u5177(configurator). OLKB Subreddit \u00b6 QMK\u7684\u5b98\u65b9\u8bba\u575b\u662f /r/olkb \u5728 reddit.com \u4e0a. GitHub\u7684Issue \u00b6 \u4f60\u53ef\u4ee5\u5728GitHub\u4e0a \u63d0\u51faissue .\u5f53\u60a8\u7684\u95ee\u9898\u9700\u8981\u957f\u671f\u8ba8\u8bba\u6216\u8c03\u8bd5\u65f6\uff0c\u8fd9\u5c24\u5176\u65b9\u4fbf\u3002","title":"\u652f\u6301"},{"location":"support/#_1","text":"\u6709\u5f88\u591a\u65b9\u6cd5\u6765\u83b7\u5f97\u5173\u4e8eQMK\u7684\u5e2e\u52a9.","title":"\u83b7\u5f97\u5e2e\u52a9"},{"location":"support/#_2","text":"\u4f60\u53ef\u4ee5\u5728\u6211\u4eec\u7684\u4e3b\u8981 Discord\u670d\u52a1\u5668 \u627e\u5230QMK\u7684\u5f00\u53d1\u8005\u548c\u7528\u6237\u3002\u6709\u5f88\u591a\u8ba8\u8bba\u56fa\u4ef6\u7684\u4e0d\u540c\u9891\u9053, \u5de5\u5177\u7bb1(Toolbox), \u786c\u4ef6,\u914d\u7f6e\u5de5\u5177(configurator).","title":"\u5b9e\u65f6\u804a\u5929"},{"location":"support/#olkb-subreddit","text":"QMK\u7684\u5b98\u65b9\u8bba\u575b\u662f /r/olkb \u5728 reddit.com \u4e0a.","title":"OLKB Subreddit"},{"location":"support/#githubissue","text":"\u4f60\u53ef\u4ee5\u5728GitHub\u4e0a \u63d0\u51faissue .\u5f53\u60a8\u7684\u95ee\u9898\u9700\u8981\u957f\u671f\u8ba8\u8bba\u6216\u8c03\u8bd5\u65f6\uff0c\u8fd9\u5c24\u5176\u65b9\u4fbf\u3002","title":"GitHub\u7684Issue"},{"location":"syllabus/","text":"QMK Syllabus \u00b6 This page helps you build up your QMK knowledge by introducing the basics first and guiding you to understanding all the concepts you need to know to be proficient with QMK. Beginning Topics \u00b6 If you read nothing else you should read the documents in this section. After reading the Tutorial you should be able to create a basic keymap, compile it, and flash it to your keyboard. The remaining documents will flesh out your knowledge of these basics. Learn How To Use QMK Tools Tutorial CLI GIT Learn About Keymaps Layers Keycodes The full list of keycodes you can use. Note that some may require knowledge found in the Intermediate or Advanced Topics. Configuring IDEs - Optional Eclipse VS Code Intermediate Topics \u00b6 These topics start to dig into some of the features that QMK supports. You don't have to read all of these documents, but some of the documents in the Advanced Topics section won't make sense if you skip over some of these. Learn How To Configure Features Audio Lighting Backlight LED Matrix RGB Lighting RGB Matrix Tap-Hold Configuration Learn More About Keymaps Keymaps Custom Functions and Keycodes Macros Dynamic Macros Compiled Macros Tap Dance Combos Userspace Advanced Topics \u00b6 Everything below here requires a lot of foundational knowledge. Besides being able to create keymaps using advanced features you should be familiar with using both config.h and rules.mk to configure options for your keyboard. Maintaining Keyboards Within QMK Handwiring a Keyboard Keyboard Guidelines info.json Reference Debounce API Advanced Features Unicode API Bootmagic Hardware How Keyboards Work How A Keyboard Matrix Works Split Keyboards Stenography Pointing Devices Core Development Coding Conventions Compatible Microcontrollers Custom Matrix Understanding QMK CLI Development Coding Conventions CLI Development Overview","title":"QMK Syllabus"},{"location":"syllabus/#qmk-syllabus","text":"This page helps you build up your QMK knowledge by introducing the basics first and guiding you to understanding all the concepts you need to know to be proficient with QMK.","title":"QMK Syllabus"},{"location":"syllabus/#beginning-topics","text":"If you read nothing else you should read the documents in this section. After reading the Tutorial you should be able to create a basic keymap, compile it, and flash it to your keyboard. The remaining documents will flesh out your knowledge of these basics. Learn How To Use QMK Tools Tutorial CLI GIT Learn About Keymaps Layers Keycodes The full list of keycodes you can use. Note that some may require knowledge found in the Intermediate or Advanced Topics. Configuring IDEs - Optional Eclipse VS Code","title":"Beginning Topics"},{"location":"syllabus/#intermediate-topics","text":"These topics start to dig into some of the features that QMK supports. You don't have to read all of these documents, but some of the documents in the Advanced Topics section won't make sense if you skip over some of these. Learn How To Configure Features Audio Lighting Backlight LED Matrix RGB Lighting RGB Matrix Tap-Hold Configuration Learn More About Keymaps Keymaps Custom Functions and Keycodes Macros Dynamic Macros Compiled Macros Tap Dance Combos Userspace","title":"Intermediate Topics"},{"location":"syllabus/#advanced-topics","text":"Everything below here requires a lot of foundational knowledge. Besides being able to create keymaps using advanced features you should be familiar with using both config.h and rules.mk to configure options for your keyboard. Maintaining Keyboards Within QMK Handwiring a Keyboard Keyboard Guidelines info.json Reference Debounce API Advanced Features Unicode API Bootmagic Hardware How Keyboards Work How A Keyboard Matrix Works Split Keyboards Stenography Pointing Devices Core Development Coding Conventions Compatible Microcontrollers Custom Matrix Understanding QMK CLI Development Coding Conventions CLI Development Overview","title":"Advanced Topics"},{"location":"tap_hold/","text":"Tap-Hold Configuration Options \u00b6 While Tap-Hold options are fantastic, they are not without their issues. We have tried to configure them with reasonable defaults, but that may still cause issues for some people. These options let you modify the behavior of the Tap-Hold keys. Tapping Term \u00b6 The crux of all of the following features is the tapping term setting. This determines what is a tap and what is a hold. And the exact timing for this to feel natural can vary from keyboard to keyboard, from switch to switch, and from key to key. You can set the global time for this by adding the following setting to your config.h : #define TAPPING_TERM 200 This setting is defined in milliseconds, and does default to 200ms. This is a good average for a majority of people. For more granular control of this feature, you can add the following to your config.h : #define TAPPING_TERM_PER_KEY You can then add the following function to your keymap: uint16_t get_tapping_term ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return TAPPING_TERM + 1250 ; case LT ( 1 , KC_GRV ) : return 130 ; default : return TAPPING_TERM ; } } Permissive Hold \u00b6 As of PR#1359 , there is a new config.h option: #define PERMISSIVE_HOLD This makes tap and hold keys (like Mod Tap) work better for fast typists, or for high TAPPING_TERM settings. If you press a Mod Tap key, tap another key (press and release) and then release the Mod Tap key, all within the tapping term, it will output the tapping function for both keys. For Instance: SFT_T(KC_A) Down KC_X Down KC_X Up SFT_T(KC_A) Up Normally, if you do all this within the TAPPING_TERM (default: 200ms) this will be registered as ax by the firmware and host system. With permissive hold enabled, this modifies how this is handled by considering the Mod Tap keys as a Mod if another key is tapped, and would registered as X ( SHIFT + x ). Tip If you have Ignore Mod Tap Interrupt enabled, as well, this will modify how both work. The regular key has the modifier added if the first key is released first or if both keys are held longer than the TAPPING_TERM . For more granular control of this feature, you can add the following to your config.h : #define PERMISSIVE_HOLD_PER_KEY You can then add the following function to your keymap: bool get_permissive_hold ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 1 , KC_BSPC ) : return true ; default : return false ; } } Ignore Mod Tap Interrupt \u00b6 To enable this setting, add this to your config.h : #define IGNORE_MOD_TAP_INTERRUPT Similar to Permissive Hold, this alters how the firmware processes inputs for fast typists. If you press a Mod Tap key, press another key, release the Mod Tap key, and then release the normal key, it would normally output the Mod plus the normal key, even if pressed within the TAPPING_TERM . This may not be desirable for rolling combo keys, or for fast typists who have a Mod Tap on a frequently used key ( RCTL_T(KC_QUOT) , for example). Setting Ignore Mod Tap Interrupt requires holding both keys for the TAPPING_TERM to trigger the hold function (the mod). For Instance: SFT_T(KC_A) Down KC_X Down SFT_T(KC_A) Up KC_X Up Normally, this would send a capital X ( SHIFT + x ), or, Mod + key. With Ignore Mod Tap Interrupt enabled, holding both keys are required for the TAPPING_TERM to register the hold action. A quick tap will output ax in this case, while a hold on both will still output capital X ( SHIFT + x ). Note This only concerns modifiers and not layer switching keys. Tip If you have Permissive Hold enabled, as well, this will modify how both work. The regular key has the modifier added if the first key is released first or if both keys are held longer than the TAPPING_TERM . For more granular control of this feature, you can add the following to your config.h : #define IGNORE_MOD_TAP_INTERRUPT_PER_KEY You can then add the following function to your keymap: bool get_ignore_mod_tap_interrupt ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return true ; default : return false ; } } Tapping Force Hold \u00b6 To enable tapping force hold , add the following to your config.h : #define TAPPING_FORCE_HOLD When the user holds a key after tapping it, the tapping function is repeated by default, rather than activating the hold function. This allows keeping the ability to auto-repeat the tapping function of a dual-role key. TAPPING_FORCE_HOLD removes that ability to let the user activate the hold function instead, in the case of holding the dual-role key after having tapped it. Example: SFT_T(KC_A) Down SFT_T(KC_A) Up SFT_T(KC_A) Down wait until the tapping term expires... SFT_T(KC_A) Up With default settings, a will be sent on the first release, then a will be sent on the second press allowing the computer to trigger its auto repeat function. With TAPPING_FORCE_HOLD , the second press will be interpreted as a Shift, allowing to use it as a modifier shortly after having used it as a tap. Warning TAPPING_FORCE_HOLD will break anything that uses tapping toggles (Such as the TT layer keycode, and the One Shot Tap Toggle). For more granular control of this feature, you can add the following to your config.h : #define TAPPING_FORCE_HOLD_PER_KEY You can then add the following function to your keymap: bool get_tapping_force_hold ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 1 , KC_BSPC ) : return true ; default : return false ; } } Retro Tapping \u00b6 To enable retro tapping , add the following to your config.h : #define RETRO_TAPPING Holding and releasing a dual function key without pressing another key will result in nothing happening. With retro tapping enabled, releasing the key without pressing another will send the original keycode even if it is outside the tapping term. For instance, holding and releasing LT(2, KC_SPACE) without hitting another key will result in nothing happening. With this enabled, it will send KC_SPACE instead. For more granular control of this feature, you can add the following to your config.h : #define RETRO_TAPPING_PER_KEY You can then add the following function to your keymap: bool get_retro_tapping ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 2 , KC_SPACE ) : return true ; default : return false ; } } Why do we include the key record for the per key functions? \u00b6 One thing that you may notice is that we include the key record for all of the \"per key\" functions, and may be wondering why we do that. Well, it's simple really: customization. But specifically, it depends on how your keyboard is wired up. For instance, if each row is actually using a row in the keyboard's matrix, then it may be simpler to use if (record->event.row == 3) instead of checking a whole bunch of keycodes. Which is especially good for those people using the Tap Hold type keys on the home row. So you could fine tune those to not interfere with your normal typing. Why is there no *_kb or *_user functions?! \u00b6 Unlike many of the other functions here, there isn't a need (or even reason) to have a quantum or keyboard level function. Only user level functions are useful here, so no need to mark them as such.","title":"Tap-Hold Configuration Options"},{"location":"tap_hold/#tap-hold-configuration-options","text":"While Tap-Hold options are fantastic, they are not without their issues. We have tried to configure them with reasonable defaults, but that may still cause issues for some people. These options let you modify the behavior of the Tap-Hold keys.","title":"Tap-Hold Configuration Options"},{"location":"tap_hold/#tapping-term","text":"The crux of all of the following features is the tapping term setting. This determines what is a tap and what is a hold. And the exact timing for this to feel natural can vary from keyboard to keyboard, from switch to switch, and from key to key. You can set the global time for this by adding the following setting to your config.h : #define TAPPING_TERM 200 This setting is defined in milliseconds, and does default to 200ms. This is a good average for a majority of people. For more granular control of this feature, you can add the following to your config.h : #define TAPPING_TERM_PER_KEY You can then add the following function to your keymap: uint16_t get_tapping_term ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return TAPPING_TERM + 1250 ; case LT ( 1 , KC_GRV ) : return 130 ; default : return TAPPING_TERM ; } }","title":"Tapping Term"},{"location":"tap_hold/#permissive-hold","text":"As of PR#1359 , there is a new config.h option: #define PERMISSIVE_HOLD This makes tap and hold keys (like Mod Tap) work better for fast typists, or for high TAPPING_TERM settings. If you press a Mod Tap key, tap another key (press and release) and then release the Mod Tap key, all within the tapping term, it will output the tapping function for both keys. For Instance: SFT_T(KC_A) Down KC_X Down KC_X Up SFT_T(KC_A) Up Normally, if you do all this within the TAPPING_TERM (default: 200ms) this will be registered as ax by the firmware and host system. With permissive hold enabled, this modifies how this is handled by considering the Mod Tap keys as a Mod if another key is tapped, and would registered as X ( SHIFT + x ). Tip If you have Ignore Mod Tap Interrupt enabled, as well, this will modify how both work. The regular key has the modifier added if the first key is released first or if both keys are held longer than the TAPPING_TERM . For more granular control of this feature, you can add the following to your config.h : #define PERMISSIVE_HOLD_PER_KEY You can then add the following function to your keymap: bool get_permissive_hold ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 1 , KC_BSPC ) : return true ; default : return false ; } }","title":"Permissive Hold"},{"location":"tap_hold/#ignore-mod-tap-interrupt","text":"To enable this setting, add this to your config.h : #define IGNORE_MOD_TAP_INTERRUPT Similar to Permissive Hold, this alters how the firmware processes inputs for fast typists. If you press a Mod Tap key, press another key, release the Mod Tap key, and then release the normal key, it would normally output the Mod plus the normal key, even if pressed within the TAPPING_TERM . This may not be desirable for rolling combo keys, or for fast typists who have a Mod Tap on a frequently used key ( RCTL_T(KC_QUOT) , for example). Setting Ignore Mod Tap Interrupt requires holding both keys for the TAPPING_TERM to trigger the hold function (the mod). For Instance: SFT_T(KC_A) Down KC_X Down SFT_T(KC_A) Up KC_X Up Normally, this would send a capital X ( SHIFT + x ), or, Mod + key. With Ignore Mod Tap Interrupt enabled, holding both keys are required for the TAPPING_TERM to register the hold action. A quick tap will output ax in this case, while a hold on both will still output capital X ( SHIFT + x ). Note This only concerns modifiers and not layer switching keys. Tip If you have Permissive Hold enabled, as well, this will modify how both work. The regular key has the modifier added if the first key is released first or if both keys are held longer than the TAPPING_TERM . For more granular control of this feature, you can add the following to your config.h : #define IGNORE_MOD_TAP_INTERRUPT_PER_KEY You can then add the following function to your keymap: bool get_ignore_mod_tap_interrupt ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case SFT_T ( KC_SPC ) : return true ; default : return false ; } }","title":"Ignore Mod Tap Interrupt"},{"location":"tap_hold/#tapping-force-hold","text":"To enable tapping force hold , add the following to your config.h : #define TAPPING_FORCE_HOLD When the user holds a key after tapping it, the tapping function is repeated by default, rather than activating the hold function. This allows keeping the ability to auto-repeat the tapping function of a dual-role key. TAPPING_FORCE_HOLD removes that ability to let the user activate the hold function instead, in the case of holding the dual-role key after having tapped it. Example: SFT_T(KC_A) Down SFT_T(KC_A) Up SFT_T(KC_A) Down wait until the tapping term expires... SFT_T(KC_A) Up With default settings, a will be sent on the first release, then a will be sent on the second press allowing the computer to trigger its auto repeat function. With TAPPING_FORCE_HOLD , the second press will be interpreted as a Shift, allowing to use it as a modifier shortly after having used it as a tap. Warning TAPPING_FORCE_HOLD will break anything that uses tapping toggles (Such as the TT layer keycode, and the One Shot Tap Toggle). For more granular control of this feature, you can add the following to your config.h : #define TAPPING_FORCE_HOLD_PER_KEY You can then add the following function to your keymap: bool get_tapping_force_hold ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 1 , KC_BSPC ) : return true ; default : return false ; } }","title":"Tapping Force Hold"},{"location":"tap_hold/#retro-tapping","text":"To enable retro tapping , add the following to your config.h : #define RETRO_TAPPING Holding and releasing a dual function key without pressing another key will result in nothing happening. With retro tapping enabled, releasing the key without pressing another will send the original keycode even if it is outside the tapping term. For instance, holding and releasing LT(2, KC_SPACE) without hitting another key will result in nothing happening. With this enabled, it will send KC_SPACE instead. For more granular control of this feature, you can add the following to your config.h : #define RETRO_TAPPING_PER_KEY You can then add the following function to your keymap: bool get_retro_tapping ( uint16_t keycode , keyrecord_t * record ) { switch ( keycode ) { case LT ( 2 , KC_SPACE ) : return true ; default : return false ; } }","title":"Retro Tapping"},{"location":"tap_hold/#why-do-we-include-the-key-record-for-the-per-key-functions","text":"One thing that you may notice is that we include the key record for all of the \"per key\" functions, and may be wondering why we do that. Well, it's simple really: customization. But specifically, it depends on how your keyboard is wired up. For instance, if each row is actually using a row in the keyboard's matrix, then it may be simpler to use if (record->event.row == 3) instead of checking a whole bunch of keycodes. Which is especially good for those people using the Tap Hold type keys on the home row. So you could fine tune those to not interfere with your normal typing.","title":"Why do we include the key record for the per key functions?"},{"location":"tap_hold/#why-is-there-no-_kb-or-_user-functions","text":"Unlike many of the other functions here, there isn't a need (or even reason) to have a quantum or keyboard level function. Only user level functions are useful here, so no need to mark them as such.","title":"Why is there no *_kb or *_user functions?!"},{"location":"translating/","text":"Translating the QMK Docs \u00b6 All files in the root folder ( docs/ ) should be in English - all other languages should be in subfolders with the ISO 639-1 language codes, followed by - and the country code where relevant. A list of common ones can be found here . If this folder doesn't exist, you may create it. Each of the translated files should have the same name as the English version, so things can fall back successfully. A _summary.md file should exist in this folder with a list of links to each file, with a translated name, and link preceded by the language folder: * [ QMK\u7b80\u4ecb ]( zh-cn/getting_started_introduction.md ) All links to other docs pages must also be prefixed with the language folder. If the link is to a specific part of the page (ie. a certain heading), you must use the English ID for the heading, like so: [ \u5efa\u7acb\u4f60\u7684\u73af\u5883 ]( zh-cn/tutorial-getting-started.md#set-up-your-environment ) ## \u5efa\u7acb\u4f60\u7684\u73af\u5883 {: id=set-up-your-environment } Once you've finished translating a new language, you'll also need to modify the following files: Previewing the Translations \u00b6 See Previewing the Documentation for how to set up a local instance of the docs - you should be able to select your new language from the \"Translations\" menu at the top-right. Once you're happy with your work, feel free to open a pull request!","title":"\u7ffb\u8bd1QMK\u6587\u6863"},{"location":"translating/#translating-the-qmk-docs","text":"All files in the root folder ( docs/ ) should be in English - all other languages should be in subfolders with the ISO 639-1 language codes, followed by - and the country code where relevant. A list of common ones can be found here . If this folder doesn't exist, you may create it. Each of the translated files should have the same name as the English version, so things can fall back successfully. A _summary.md file should exist in this folder with a list of links to each file, with a translated name, and link preceded by the language folder: * [ QMK\u7b80\u4ecb ]( zh-cn/getting_started_introduction.md ) All links to other docs pages must also be prefixed with the language folder. If the link is to a specific part of the page (ie. a certain heading), you must use the English ID for the heading, like so: [ \u5efa\u7acb\u4f60\u7684\u73af\u5883 ]( zh-cn/tutorial-getting-started.md#set-up-your-environment ) ## \u5efa\u7acb\u4f60\u7684\u73af\u5883 {: id=set-up-your-environment } Once you've finished translating a new language, you'll also need to modify the following files:","title":"Translating the QMK Docs"},{"location":"translating/#previewing-the-translations","text":"See Previewing the Documentation for how to set up a local instance of the docs - you should be able to select your new language from the \"Translations\" menu at the top-right. Once you're happy with your work, feel free to open a pull request!","title":"Previewing the Translations"},{"location":"tutorial/","text":"QMK\u83dc\u9e1f\u6559\u7a0b \u00b6 QMK\u662f\u4e3a\u4f60\u673a\u68b0\u786c\u76d8\u8bbe\u8ba1\u7684\u7684\u4e00\u4e2a\u5f3a\u5927\u7684\u5f00\u6e90\u56fa\u4ef6\u3002\u4f7f\u7528QMK\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u8ba9\u4f60\u7684\u5b9a\u5236\u952e\u76d8\u53d8\u5f97\u5f3a\u5927\u3002\u770b\u5b8c\u8fd9\u7bc7\u6587\u7ae0\uff0c\u65e0\u8bba\u4f60\u662f\u83dc\u9e1f\u8fd8\u662f\u5927\u4f6c\uff0c\u90fd\u53ef\u4ee5\u987a\u5229\u7684\u4f7f\u7528QMK\u6765\u5b9a\u5236\u952e\u76d8\u3002 \u4f60\u662f\u5426\u4e3a\u4e0d\u77e5\u9053\u4f60\u7684\u952e\u76d8\u80fd\u4e0d\u80fd\u8fd0\u884cQMK\u800c\u82e6\u607c? \u5982\u679c\u4f60\u7684\u673a\u68b0\u952e\u76d8\u662f\u4f60\u81ea\u5df1\u505a\u7684\uff0c\u90a3\u4e48\u8fd9\u628a\u952e\u76d8\u4e00\u822c\u53ef\u4ee5\u8fd0\u884cQMK\u3002\u6211\u4eec\u63d0\u4f9b\u4e86 \u4e00\u5927\u5806\u81ea\u5236\u952e\u76d8 , \u6240\u4ee5\u5373\u4fbf\u4f60\u7684\u952e\u76d8\u4e0d\u80fd\u8fd0\u884cQMK\u4f60\u4e5f\u5f88\u5bb9\u6613\u80fd\u627e\u5230\u6ee1\u8db3\u4f60\u9700\u6c42\u7684\u952e\u76d8\u3002 \u6982\u89c8 \u00b6 \u8fd9\u4e2a\u6559\u7a0b\u67097\u4e2a\u4e3b\u8981\u90e8\u5206\uff1a \u65b0\u624b\u4e0a\u8def \u7528\u547d\u4ee4\u884c\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u7528\u5728\u7ebf\u754c\u9762\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u5237\u65b0\u56fa\u4ef6 \u6d4b\u8bd5\u548c\u8c03\u8bd5 Git\u6700\u4f73\u5b9e\u8df5 \u5176\u4ed6\u5b66\u4e60\u8d44\u6e90 \u8fd9\u4efd\u6559\u7a0b\u65e8\u5728\u5e2e\u52a9\u6ca1\u6709\u56fa\u4ef6\u6784\u5efa\u7ecf\u9a8c\u7684\u4eba\uff0c\u4e5f\u662f\u6839\u636e\u8be5\u76ee\u7684\u505a\u51fa\u9009\u62e9\u548c\u5efa\u8bae\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u6709\u5f88\u591a\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u66ff\u4ee3\u6211\u4eec\u90fd\u652f\u6301\u3002\u5982\u679c\u4f60\u5bf9\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u6709\u7591\u95ee\uff0c\u53ef\u4ee5 \u5411\u6211\u4eec\u5bfb\u6c42\u5e2e\u52a9 . \u5176\u4ed6\u8d44\u6e90 \u00b6 Thomas Baart\u7684 QMK\u57fa\u7840\u535a\u5ba2 \u2013 \u8fd9\u662f\u4e00\u4e2a\u7528\u6237\u521b\u5efa\u7684\u535a\u5ba2\uff0c\u6db5\u76d6\u4e86\u4e3a\u65b0\u624b\u51c6\u5907\u7684\u4f7f\u7528QMK\u7684\u57fa\u7840\u77e5\u8bc6\u3002","title":"Introduction"},{"location":"tutorial/#qmk","text":"QMK\u662f\u4e3a\u4f60\u673a\u68b0\u786c\u76d8\u8bbe\u8ba1\u7684\u7684\u4e00\u4e2a\u5f3a\u5927\u7684\u5f00\u6e90\u56fa\u4ef6\u3002\u4f7f\u7528QMK\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u8ba9\u4f60\u7684\u5b9a\u5236\u952e\u76d8\u53d8\u5f97\u5f3a\u5927\u3002\u770b\u5b8c\u8fd9\u7bc7\u6587\u7ae0\uff0c\u65e0\u8bba\u4f60\u662f\u83dc\u9e1f\u8fd8\u662f\u5927\u4f6c\uff0c\u90fd\u53ef\u4ee5\u987a\u5229\u7684\u4f7f\u7528QMK\u6765\u5b9a\u5236\u952e\u76d8\u3002 \u4f60\u662f\u5426\u4e3a\u4e0d\u77e5\u9053\u4f60\u7684\u952e\u76d8\u80fd\u4e0d\u80fd\u8fd0\u884cQMK\u800c\u82e6\u607c? \u5982\u679c\u4f60\u7684\u673a\u68b0\u952e\u76d8\u662f\u4f60\u81ea\u5df1\u505a\u7684\uff0c\u90a3\u4e48\u8fd9\u628a\u952e\u76d8\u4e00\u822c\u53ef\u4ee5\u8fd0\u884cQMK\u3002\u6211\u4eec\u63d0\u4f9b\u4e86 \u4e00\u5927\u5806\u81ea\u5236\u952e\u76d8 , \u6240\u4ee5\u5373\u4fbf\u4f60\u7684\u952e\u76d8\u4e0d\u80fd\u8fd0\u884cQMK\u4f60\u4e5f\u5f88\u5bb9\u6613\u80fd\u627e\u5230\u6ee1\u8db3\u4f60\u9700\u6c42\u7684\u952e\u76d8\u3002","title":"QMK\u83dc\u9e1f\u6559\u7a0b"},{"location":"tutorial/#_1","text":"\u8fd9\u4e2a\u6559\u7a0b\u67097\u4e2a\u4e3b\u8981\u90e8\u5206\uff1a \u65b0\u624b\u4e0a\u8def \u7528\u547d\u4ee4\u884c\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u7528\u5728\u7ebf\u754c\u9762\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u5237\u65b0\u56fa\u4ef6 \u6d4b\u8bd5\u548c\u8c03\u8bd5 Git\u6700\u4f73\u5b9e\u8df5 \u5176\u4ed6\u5b66\u4e60\u8d44\u6e90 \u8fd9\u4efd\u6559\u7a0b\u65e8\u5728\u5e2e\u52a9\u6ca1\u6709\u56fa\u4ef6\u6784\u5efa\u7ecf\u9a8c\u7684\u4eba\uff0c\u4e5f\u662f\u6839\u636e\u8be5\u76ee\u7684\u505a\u51fa\u9009\u62e9\u548c\u5efa\u8bae\u3002\u8fd9\u4e9b\u7a0b\u5e8f\u6709\u5f88\u591a\u66ff\u4ee3\u65b9\u6cd5\uff0c\u5927\u90e8\u5206\u66ff\u4ee3\u6211\u4eec\u90fd\u652f\u6301\u3002\u5982\u679c\u4f60\u5bf9\u5b8c\u6210\u4e00\u4e2a\u4efb\u52a1\u6709\u7591\u95ee\uff0c\u53ef\u4ee5 \u5411\u6211\u4eec\u5bfb\u6c42\u5e2e\u52a9 .","title":"\u6982\u89c8"},{"location":"tutorial/#_2","text":"Thomas Baart\u7684 QMK\u57fa\u7840\u535a\u5ba2 \u2013 \u8fd9\u662f\u4e00\u4e2a\u7528\u6237\u521b\u5efa\u7684\u535a\u5ba2\uff0c\u6db5\u76d6\u4e86\u4e3a\u65b0\u624b\u51c6\u5907\u7684\u4f7f\u7528QMK\u7684\u57fa\u7840\u77e5\u8bc6\u3002","title":"\u5176\u4ed6\u8d44\u6e90"},{"location":"tutorial_best_practices/","text":"\u6700\u4f73\u5b9e\u8df5 \u00b6 \u6216\u8005\u8bf4, \"\u6211\u5e94\u5982\u4f55\u5b66\u4f1a\u4e0d\u518d\u62c5\u5fc3\u5e76\u5f00\u59cb\u7231\u4e0aGit\u3002\" \u00b6 \u672c\u6587\u6863\u65e8\u5728\u6307\u5bfc\u65b0\u624b\u4ee5\u6700\u4f73\u65b9\u5f0f\u83b7\u5f97\u4e3aQMK\u505a\u51fa\u8d21\u732e\u7684\u4e1d\u6ed1\u4f53\u9a8c\u3002\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e3aQMK\u505a\u51fa\u8d21\u732e\u7684\u8fc7\u7a0b\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u5bb9\u6613\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5236\u9020\u4e00\u4e9b\u95ee\u9898\uff0c\u6765\u6559\u4f60\u5982\u4f55\u89e3\u51b3\u5b83\u4eec\u3002 \u672c\u6587\u5047\u8bbe\u4e86\u4e00\u4e9b\u5185\u5bb9: \u4e00\u6709\u4e2aGitHub\u8d26\u6237, \u5e76 \u521b\u5efaqmk_firmware\u4ed3\u5e93\u5206\u53c9 \u5230\u4f60\u7684\u5e10\u6237. \u4f60\u5df2\u7ecf \u5efa\u7acb\u4f60\u7684\u6784\u5efa\u73af\u5883 . \u4f60\u5206\u53c9\u7684\u4e3b\u5206\u652f: \u4e00\u76f4\u5728\u4e0a\u4f20\uff0c\u4f46\u4e0d\u8981\u63d0\u4ea4 \u00b6 \u5341\u5206\u63a8\u8350\u60a8\u5728QMK\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u65e0\u8bba\u5f00\u53d1\u662f\u5426\u5b8c\u6210\u90fd\u8981\u4fdd\u6301\u4f60\u7684 master \u5206\u652f\u66f4\u65b0\uff0c\u4f46\u662f \u4e00\u5b9a\u4e0d\u8981 \u63d0\u4ea4\u3002\u76f8\u53cd\uff0c\u4f60\u5e94\u8be5\u5728\u4e00\u4e2a\u5f00\u53d1\u5206\u53c9\u4e2d\u505a\u51fa\u4f60\u6240\u6709\u4fee\u6539\u5e76\u5728\u5f00\u53d1\u65f6\u63d0\u4ea4pull request\u3002 \u51cf\u5c11\u5408\u5e76\u51b2\u7a81\u7684\u53ef\u80fd\u6027 \u2014 \u4e24\u4e2a\u6216\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u6587\u4ef6\u7684\u540c\u4e00\u90e8\u5206\u7684\u5b9e\u4f8b \u2014 \u4fdd\u6301 master \u5206\u652f\u6700\u65b0\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u6765\u5f00\u59cb\u65b0\u7684\u5f00\u53d1\u3002 \u66f4\u65b0\u4f60\u7684\u4e3b\u5206\u652f \u00b6 \u4fdd\u6301\u4f60\u7684 master \u66f4\u65b0, \u63a8\u8350\u4f60\u6dfb\u52a0QMK Firmware\u4ed3\u5e93\u4f5c\u4e3aGit\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u60f3\u8fd9\u4e48\u505a\u7684\u8bdd, \u4f60\u53ef\u4ee5\u6253\u5f00\u4f60\u7684Git\u547d\u4ee4\u884c\u63a5\u53e3\u7136\u540e\u8f93\u5165: git remote add upstream https://github.com/qmk/qmk_firmware.git \u8fd0\u884c git remote -v , \u6765\u786e\u5b9a\u8fd9\u4e2a\u4ed3\u5e93\u5df2\u7ecf\u6dfb\u52a0\uff0c\u4ee5\u4e0b\u662f\u56de\u663e: $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git (fetch) origin https://github.com/<your_username>/qmk_firmware.git (push) upstream https://github.com/qmk/qmk_firmware.git (fetch) upstream https://github.com/qmk/qmk_firmware.git (push) \u73b0\u5728\u6dfb\u52a0\u5df2\u5b8c\u6210\uff0c\u4f60\u53ef\u4ee5\u7528 git fetch upstream \u6765\u68c0\u67e5\u4ed3\u5e93\u7684\u66f4\u65b0. \u8fd9\u4f1a\u68c0\u7d22branches \u548c tags \u2014 \u7edf\u79f0\u4e3a\"refs\" \u2014 \u4eceQMK\u4ed3\u5e93, \u4e5f\u5c31\u662f upstream \u3002\u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\u6211\u4eec\u7684\u5206\u53c9\u548cQMK\u7684 origin \u6570\u636e\u7684\u4e0d\u540c\u3002 \u8981\u66f4\u65b0\u4f60\u7684\u5206\u53c9\u7684\u4e3b\u5206\u652f\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u6bcf\u884c\u4e4b\u540e\u6309Enter\u952e: git checkout master git fetch upstream git pull upstream master git push origin master \u8fd9\u56de\u5207\u6362\u5230\u4f60\u7684 master \u5206\u652f, \u68c0\u7d22\u4f60QMK\u4ed3\u5e93\u7684refs, \u4e0b\u8f7d\u5f53\u524dQMK master \u5206\u652f\u5230\u4f60\u7684\u7535\u8111, \u5e76\u4e0a\u4f20\u5230\u4f60\u7684\u5206\u53c9. \u505a\u6539\u52a8 \u00b6 \u4f60\u53ef\u4ee5\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u6765\u505a\u6539\u52a8: git checkout -b dev_branch git push --set-upstream origin dev_branch \u8fd9\u56de\u5efa\u7acb\u4e00\u4e2a\u53eb\u505a dev_branch \u7684\u65b0\u5206\u652f, \u68c0\u67e5\u4e00\u4e0b, \u7136\u540e\u60f3\u4f60\u7684\u5206\u53c9\u4fdd\u5b58\u5206\u652f. \u4f7f\u7528 --set-upstream \u53c2\u6570\u6765\u544a\u8bc9git\u4f7f\u7528\u4f60\u7684\u5206\u53c9\u5e76\u4e14\u5f53\u6bcf\u6b21\u4f60\u5bf9\u4f60\u7684\u5206\u652f\u7528 git push \u6216 git pull \u65f6\u8981\u4f7f\u7528 dev_branch \u3002 \u5b83\u4ec5\u9700\u8981\u5728\u7b2c\u4e00\u6b21push\u7684\u65f6\u5019\u4f7f\u7528\uff1b\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5f88\u5b89\u5168\u7684\u7528 git push \u6216 git pull , \u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u53c2\u6570\u4e86\u3002 Tip \u4f7f\u7528 git push , \u4f60\u53ef\u4ee5\u7528 -u \u6765\u4ee3\u66ff --set-upstream \u2014 -u \u662f --set-upstream \u7684\u7b80\u5199\u3002 \u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u5206\u652f\u547d\u540d\u4e3a\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u540d\u79f0\uff0c\u4f46\u5efa\u8bae\u5c06\u5176\u547d\u540d\u4e3a\u4e0e\u60a8\u8981\u8fdb\u884c\u7684\u66f4\u6539\u76f8\u5173\u7684\u5185\u5bb9\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b git checkout -b \u5728\u5df2\u7ecf\u68c0\u51fa\u7684\u5206\u652f\u4e0a\u5efa\u7acb\u65b0\u7684\u5206\u652f\u3002\u60a8\u53ef\u4ee5\u5c06\u65b0\u7684\u5206\u652f\u5efa\u7acb\u5728\u672a\u68c0\u51fa\u7684\u73b0\u6709\u5206\u652f\u7684\u57fa\u7840\u4e0a\uff0c\u65b9\u6cd5\u662f\u5c06\u73b0\u6709\u5206\u652f\u7684\u540d\u79f0\u6dfb\u52a0\u5230\u547d\u4ee4\uff1a git checkout -b dev_branch master \u73b0\u5728\u60a8\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5f00\u53d1\u5206\u652f\uff0c\u90a3\u4e48\u5c31\u6253\u5f00\u60a8\u7684\u6587\u672c\u7f16\u8f91\u5668\u5e76\u8fdb\u884c\u60a8\u9700\u8981\u505a\u7684\u4efb\u4f55\u66f4\u6539\u3002\u5efa\u8bae\u5bf9\u60a8\u7684\u5206\u652f\u8fdb\u884c\u8bb8\u591a\u5c0f\u7684\u63d0\u4ea4\uff1b\u8fd9\u6837\uff0c\u4efb\u4f55\u5f15\u8d77\u95ee\u9898\u7684\u66f4\u6539\u90fd\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u66f4\u5bb9\u6613\u5730\u8ddf\u8e2a\u548c\u64a4\u6d88\u3002\u8981\u8fdb\u884c\u66f4\u6539\uff0c\u7f16\u8f91\u5e76\u4fdd\u5b58\u4efb\u4f55\u9700\u8981\u66f4\u65b0\u7684\u6587\u4ef6\uff0c\u8bf7\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230Git\u7684 staging area \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u63d0\u4ea4\u5230\u60a8\u7684\u5206\u652f\uff1a git add path/to/updated_file git commit -m \"My commit message.\" git add \u6dfb\u52a0\u5df2\u66f4\u6539\u5230Git\u7684 \u4e34\u65f6\u533a\u57df \u4e5f\u5c31\u662fGit\u7684\u201c\u52a0\u8f7d\u533a\u57df\u201d\u7684\u6587\u4ef6\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528 git commit \u547d\u4ee4 \u63d0\u4ea4 \u7684\u5e76\u5df2\u7ecf\u4fdd\u5b58\u5230\u4ed3\u5e93\u7684\u66f4\u6539\u3002\u5efa\u8bae\u60a8\u4f7f\u7528\u63cf\u8ff0\u6027\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u4e00\u76ee\u4e86\u7136\u5730\u77e5\u9053\u66f4\u6539\u4e86\u4ec0\u4e48\u3002 !> \u5982\u679c\u4f60\u4fee\u6539\u4e86\u5f88\u591a\u6587\u4ef6\uff0c\u4f46\u6240\u6709\u7684\u6587\u4ef6\u90fd\u662f\u540c\u4e00\u4e2a\u66f4\u6539\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u7528 git add . \u6765\u6dfb\u52a0\u5f53\u524d\u76ee\u5f55\u4e2d\u6240\u6709\u5df2\u66f4\u6539\u7684\u6587\u4ef6\u800c\u4e0d\u662f\u5355\u72ec\u6dfb\u52a0\u6bcf\u4e2a\u6587\u4ef6. \u53d1\u5e03\u66f4\u6539 \u00b6 \u6700\u540e\u4e00\u6b65\u662f\u5c06\u66f4\u6539\u63a8\u9001\u5230\u60a8\u7684\u5206\u53c9\u3002 \u8f93\u5165 git push \u6765\u63a8\u9001. \u73b0\u5728Git\u5c06 dev_branch \u7684\u5f53\u524d\u72b6\u6001\u53d1\u5e03\u5230\u60a8\u7684\u5206\u53c9\u3002 \u89e3\u51b3\u5408\u5e76\u51b2\u7a81 \u00b6 \u6709\u65f6\uff0c\u5f53\u60a8\u5728\u67d0\u4e2a\u5206\u652f\u4e2d\u7684\u5de5\u4f5c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\u65f6\uff0c\u5176\u4ed6\u4eba\u6240\u505a\u7684\u66f4\u6539\u4e0e\u60a8\u5728\u6253\u5f00pull request\u65f6\u5bf9\u8be5\u5206\u652f\u6240\u505a\u7684\u66f4\u6539\u76f8\u51b2\u7a81\u3002\u8fd9\u79f0\u4e3a rebase \u5373\u5408\u5e76\u51b2\u7a81\uff0c\u5f53\u591a\u4e2a\u4eba\u7f16\u8f91\u540c\u4e00\u6587\u4ef6\u7684\u540c\u4e00\u90e8\u5206\u65f6\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002 \u91cd\u65b0\u8c03\u6574\u60a8\u7684\u66f4\u6539 \u00b6 rebase \u662fGit\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b83\u83b7\u53d6\u5728\u67d0\u4e00\u70b9\u4e0a\u5e94\u7528\u7684\u66f4\u6539\uff0c\u64a4\u9500\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u76f8\u540c\u7684\u66f4\u6539\u5e94\u7528\u5230\u53e6\u4e00\u70b9\u3002\u5728\u5408\u5e76\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u91cd\u65b0\u8bbe\u7f6e\u60a8\u7684\u5206\u652f\u4ee5\u83b7\u53d6\u5728\u521b\u5efa\u5206\u652f\u65f6\u548c\u5f53\u524d\u65f6\u95f4\u4e4b\u95f4\u7684\u90a3\u6bb5\u65f6\u95f4\u6240\u505a\u7684\u66f4\u6539\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u5f00\u59cb\uff1a git fetch upstream git rev-list --left-right --count HEAD...upstream/master \u8fd9\u91cc\u7684 git rev-list \u547d\u4ee4\u8fd4\u56de\u5f53\u524d\u5206\u652f\u548cqmk\u7684\u4e3b\u5206\u652f\u4e4b\u95f4\u4e0d\u540c\u7684\u63d0\u4ea4\u6570\u3002\u6211\u4eec\u9996\u5148\u8fd0\u884c git fetch \uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u6709\u4ee3\u8868upstream\u4ed3\u5e93\u7684refs\u3002 git rev-list \u547d\u4ee4\u7684\u56de\u663e\u6709\u4e24\u4e2a\u6570\u5b57\uff1a $ git rev-list --left-right --count HEAD...upstream/master 7 35 \u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u81ea\u521b\u5efa\u4ee5\u6765\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\u6570, \u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f\u81ea\u521b\u5efa\u5f53\u524d\u5206\u652f\u4ee5\u6765\u5bf9 upstream/master \u8fdb\u884c\u7684\u63d0\u4ea4\u6570, \u56e0\u6b64, \u5f53\u524d\u5206\u652f\u4e2d\u672a\u8bb0\u5f55\u53d8\u52a8\u3002 \u65e2\u7136\u77e5\u9053\u5f53\u524d\u5206\u652f\u548cupstream\u4ed3\u5e93\u7684\u5f53\u524d\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2arebase\u64cd\u4f5c\uff1a git rebase upstream/master \u8fd9\u5c31\u662f\u8ba9Git\u64a4\u9500\u5f53\u524d\u5206\u652f\u4e0a\u7684\u63d0\u4ea4\uff0c\u7136\u540e\u6839\u636eQMK\u7684\u4e3b\u5206\u652f\u91cd\u65b0\u5e94\u7528\u5b83\u4eec\u3002 $ git rebase upstream/master First, rewinding head to replay your work on top of it... Applying: Commit #1 Using index info to reconstruct a base tree... M conflicting_file_1.txt Falling back to patching base and 3-way merge... Auto-merging conflicting_file_1.txt CONFLICT (content): Merge conflict in conflicting_file_1.txt error: Failed to merge in the changes. hint: Use 'git am --show-current-patch' to see the failed patch Patch failed at 0001 Commit #1 Resolve all conflicts manually, mark them as resolved with \"git add/rm <conflicted_files>\", then run \"git rebase --continue\". You can instead skip this commit: run \"git rebase --skip\". To abort and get back to the state before \"git rebase\", run \"git rebase --abort\". \u8fd9\u544a\u8bc9\u6211\u4eec\u6709\u4e00\u4e2a\u5408\u5e76\u51b2\u7a81\uff0c\u5e76\u7ed9\u51fa\u5e26\u6709\u51b2\u7a81\u7684\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u51b2\u7a81\u7684\u6587\u4ef6\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u60a8\u4f1a\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff1a <<<<<<< HEAD <p>For help with any issues, email us at support@webhost.us.</p> ======= <p>Need help? Email support@webhost.us.</p> >>>>>>> Commit #1 <<<<<<< HEAD \u884c\u6807\u8bb0\u5408\u5e76\u51b2\u7a81\u7684\u5f00\u59cb, >>>>>>> Commit #1 \u884c\u6807\u8bb0\u7ed3\u675f, \u51b2\u7a81\u9009\u9879\u88ab ======= \u5206\u9694\u3002 HEAD \u90a3\u7aef\u7684\u90e8\u5206\u6765\u81ea\u6587\u4ef6\u7684qmk master\u7248\u672c\uff0c\u6807\u8bb0\u6709commit\u6d88\u606f\u7684\u90e8\u5206\u6765\u81ea\u5f53\u524d\u7684\u5206\u652f\u6301\u548c\u63d0\u4ea4\u3002 \u56e0\u4e3aGit\u8ddf\u8e2a \u5bf9\u6587\u4ef6\u7684\u66f4\u6539 \u800c\u4e0d\u662f\u76f4\u63a5\u8ddf\u8e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u5982\u679cGit\u5728\u63d0\u4ea4\u4e4b\u524d\u627e\u4e0d\u5230\u6587\u4ef6\u4e2d\u7684\u6587\u672c\uff0c\u5b83\u5c06\u4e0d\u77e5\u9053\u5982\u4f55\u7f16\u8f91\u8be5\u6587\u4ef6\u3002\u91cd\u65b0\u7f16\u8f91\u6587\u4ef6\u5c06\u89e3\u51b3\u51b2\u7a81\u3002\u8fdb\u884c\u66f4\u6539\uff0c\u7136\u540e\u4fdd\u5b58\u6587\u4ef6\u3002 <p>Need help? Email support@webhost.us.</p> \u73b0\u5728\u8fd0\u884c: git add conflicting_file_1.txt git rebase --continue Git\u8bb0\u5f55\u5bf9\u51b2\u7a81\u6587\u4ef6\u7684\u66f4\u6539\uff0c\u5e76\u7ee7\u7eed\u5e94\u7528\u6765\u81ea\u6211\u4eec\u7684\u5206\u652f\u7684\u63d0\u4ea4\uff0c\u76f4\u5230\u5b83\u5230\u8fbe\u672b\u5c3e\u3002","title":"\u6700\u4f73\u5b9e\u8df5"},{"location":"tutorial_best_practices/#_1","text":"","title":"\u6700\u4f73\u5b9e\u8df5"},{"location":"tutorial_best_practices/#git","text":"\u672c\u6587\u6863\u65e8\u5728\u6307\u5bfc\u65b0\u624b\u4ee5\u6700\u4f73\u65b9\u5f0f\u83b7\u5f97\u4e3aQMK\u505a\u51fa\u8d21\u732e\u7684\u4e1d\u6ed1\u4f53\u9a8c\u3002\u6211\u4eec\u5c06\u4ecb\u7ecd\u4e3aQMK\u505a\u51fa\u8d21\u732e\u7684\u8fc7\u7a0b\uff0c\u8be6\u7ec6\u4ecb\u7ecd\u4f7f\u8fd9\u9879\u4efb\u52a1\u66f4\u5bb9\u6613\u7684\u4e00\u4e9b\u65b9\u6cd5\uff0c\u7136\u540e\u6211\u4eec\u5c06\u5236\u9020\u4e00\u4e9b\u95ee\u9898\uff0c\u6765\u6559\u4f60\u5982\u4f55\u89e3\u51b3\u5b83\u4eec\u3002 \u672c\u6587\u5047\u8bbe\u4e86\u4e00\u4e9b\u5185\u5bb9: \u4e00\u6709\u4e2aGitHub\u8d26\u6237, \u5e76 \u521b\u5efaqmk_firmware\u4ed3\u5e93\u5206\u53c9 \u5230\u4f60\u7684\u5e10\u6237. \u4f60\u5df2\u7ecf \u5efa\u7acb\u4f60\u7684\u6784\u5efa\u73af\u5883 .","title":"\u6216\u8005\u8bf4, \"\u6211\u5e94\u5982\u4f55\u5b66\u4f1a\u4e0d\u518d\u62c5\u5fc3\u5e76\u5f00\u59cb\u7231\u4e0aGit\u3002\""},{"location":"tutorial_best_practices/#_2","text":"\u5341\u5206\u63a8\u8350\u60a8\u5728QMK\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u65e0\u8bba\u5f00\u53d1\u662f\u5426\u5b8c\u6210\u90fd\u8981\u4fdd\u6301\u4f60\u7684 master \u5206\u652f\u66f4\u65b0\uff0c\u4f46\u662f \u4e00\u5b9a\u4e0d\u8981 \u63d0\u4ea4\u3002\u76f8\u53cd\uff0c\u4f60\u5e94\u8be5\u5728\u4e00\u4e2a\u5f00\u53d1\u5206\u53c9\u4e2d\u505a\u51fa\u4f60\u6240\u6709\u4fee\u6539\u5e76\u5728\u5f00\u53d1\u65f6\u63d0\u4ea4pull request\u3002 \u51cf\u5c11\u5408\u5e76\u51b2\u7a81\u7684\u53ef\u80fd\u6027 \u2014 \u4e24\u4e2a\u6216\u591a\u4e2a\u7528\u6237\u540c\u65f6\u7f16\u8f91\u6587\u4ef6\u7684\u540c\u4e00\u90e8\u5206\u7684\u5b9e\u4f8b \u2014 \u4fdd\u6301 master \u5206\u652f\u6700\u65b0\uff0c\u5e76\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u6765\u5f00\u59cb\u65b0\u7684\u5f00\u53d1\u3002","title":"\u4f60\u5206\u53c9\u7684\u4e3b\u5206\u652f: \u4e00\u76f4\u5728\u4e0a\u4f20\uff0c\u4f46\u4e0d\u8981\u63d0\u4ea4"},{"location":"tutorial_best_practices/#_3","text":"\u4fdd\u6301\u4f60\u7684 master \u66f4\u65b0, \u63a8\u8350\u4f60\u6dfb\u52a0QMK Firmware\u4ed3\u5e93\u4f5c\u4e3aGit\u7684\u8fdc\u7a0b\u4ed3\u5e93\uff0c\u60f3\u8fd9\u4e48\u505a\u7684\u8bdd, \u4f60\u53ef\u4ee5\u6253\u5f00\u4f60\u7684Git\u547d\u4ee4\u884c\u63a5\u53e3\u7136\u540e\u8f93\u5165: git remote add upstream https://github.com/qmk/qmk_firmware.git \u8fd0\u884c git remote -v , \u6765\u786e\u5b9a\u8fd9\u4e2a\u4ed3\u5e93\u5df2\u7ecf\u6dfb\u52a0\uff0c\u4ee5\u4e0b\u662f\u56de\u663e: $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git (fetch) origin https://github.com/<your_username>/qmk_firmware.git (push) upstream https://github.com/qmk/qmk_firmware.git (fetch) upstream https://github.com/qmk/qmk_firmware.git (push) \u73b0\u5728\u6dfb\u52a0\u5df2\u5b8c\u6210\uff0c\u4f60\u53ef\u4ee5\u7528 git fetch upstream \u6765\u68c0\u67e5\u4ed3\u5e93\u7684\u66f4\u65b0. \u8fd9\u4f1a\u68c0\u7d22branches \u548c tags \u2014 \u7edf\u79f0\u4e3a\"refs\" \u2014 \u4eceQMK\u4ed3\u5e93, \u4e5f\u5c31\u662f upstream \u3002\u6211\u4eec\u53ef\u4ee5\u6bd4\u8f83\u6211\u4eec\u7684\u5206\u53c9\u548cQMK\u7684 origin \u6570\u636e\u7684\u4e0d\u540c\u3002 \u8981\u66f4\u65b0\u4f60\u7684\u5206\u53c9\u7684\u4e3b\u5206\u652f\uff0c\u8bf7\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\uff0c\u5728\u6bcf\u884c\u4e4b\u540e\u6309Enter\u952e: git checkout master git fetch upstream git pull upstream master git push origin master \u8fd9\u56de\u5207\u6362\u5230\u4f60\u7684 master \u5206\u652f, \u68c0\u7d22\u4f60QMK\u4ed3\u5e93\u7684refs, \u4e0b\u8f7d\u5f53\u524dQMK master \u5206\u652f\u5230\u4f60\u7684\u7535\u8111, \u5e76\u4e0a\u4f20\u5230\u4f60\u7684\u5206\u53c9.","title":"\u66f4\u65b0\u4f60\u7684\u4e3b\u5206\u652f"},{"location":"tutorial_best_practices/#_4","text":"\u4f60\u53ef\u4ee5\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\u6765\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5206\u652f\u6765\u505a\u6539\u52a8: git checkout -b dev_branch git push --set-upstream origin dev_branch \u8fd9\u56de\u5efa\u7acb\u4e00\u4e2a\u53eb\u505a dev_branch \u7684\u65b0\u5206\u652f, \u68c0\u67e5\u4e00\u4e0b, \u7136\u540e\u60f3\u4f60\u7684\u5206\u53c9\u4fdd\u5b58\u5206\u652f. \u4f7f\u7528 --set-upstream \u53c2\u6570\u6765\u544a\u8bc9git\u4f7f\u7528\u4f60\u7684\u5206\u53c9\u5e76\u4e14\u5f53\u6bcf\u6b21\u4f60\u5bf9\u4f60\u7684\u5206\u652f\u7528 git push \u6216 git pull \u65f6\u8981\u4f7f\u7528 dev_branch \u3002 \u5b83\u4ec5\u9700\u8981\u5728\u7b2c\u4e00\u6b21push\u7684\u65f6\u5019\u4f7f\u7528\uff1b\u7136\u540e\u4f60\u5c31\u53ef\u4ee5\u5f88\u5b89\u5168\u7684\u7528 git push \u6216 git pull , \u5e76\u4e0d\u9700\u8981\u5176\u4ed6\u53c2\u6570\u4e86\u3002 Tip \u4f7f\u7528 git push , \u4f60\u53ef\u4ee5\u7528 -u \u6765\u4ee3\u66ff --set-upstream \u2014 -u \u662f --set-upstream \u7684\u7b80\u5199\u3002 \u60a8\u53ef\u4ee5\u5c06\u60a8\u7684\u5206\u652f\u547d\u540d\u4e3a\u60a8\u60f3\u8981\u7684\u4efb\u4f55\u540d\u79f0\uff0c\u4f46\u5efa\u8bae\u5c06\u5176\u547d\u540d\u4e3a\u4e0e\u60a8\u8981\u8fdb\u884c\u7684\u66f4\u6539\u76f8\u5173\u7684\u5185\u5bb9\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b git checkout -b \u5728\u5df2\u7ecf\u68c0\u51fa\u7684\u5206\u652f\u4e0a\u5efa\u7acb\u65b0\u7684\u5206\u652f\u3002\u60a8\u53ef\u4ee5\u5c06\u65b0\u7684\u5206\u652f\u5efa\u7acb\u5728\u672a\u68c0\u51fa\u7684\u73b0\u6709\u5206\u652f\u7684\u57fa\u7840\u4e0a\uff0c\u65b9\u6cd5\u662f\u5c06\u73b0\u6709\u5206\u652f\u7684\u540d\u79f0\u6dfb\u52a0\u5230\u547d\u4ee4\uff1a git checkout -b dev_branch master \u73b0\u5728\u60a8\u5df2\u7ecf\u6709\u4e86\u4e00\u4e2a\u5f00\u53d1\u5206\u652f\uff0c\u90a3\u4e48\u5c31\u6253\u5f00\u60a8\u7684\u6587\u672c\u7f16\u8f91\u5668\u5e76\u8fdb\u884c\u60a8\u9700\u8981\u505a\u7684\u4efb\u4f55\u66f4\u6539\u3002\u5efa\u8bae\u5bf9\u60a8\u7684\u5206\u652f\u8fdb\u884c\u8bb8\u591a\u5c0f\u7684\u63d0\u4ea4\uff1b\u8fd9\u6837\uff0c\u4efb\u4f55\u5f15\u8d77\u95ee\u9898\u7684\u66f4\u6539\u90fd\u53ef\u4ee5\u5728\u9700\u8981\u65f6\u66f4\u5bb9\u6613\u5730\u8ddf\u8e2a\u548c\u64a4\u6d88\u3002\u8981\u8fdb\u884c\u66f4\u6539\uff0c\u7f16\u8f91\u5e76\u4fdd\u5b58\u4efb\u4f55\u9700\u8981\u66f4\u65b0\u7684\u6587\u4ef6\uff0c\u8bf7\u5c06\u5b83\u4eec\u6dfb\u52a0\u5230Git\u7684 staging area \uff0c\u7136\u540e\u5c06\u5b83\u4eec\u63d0\u4ea4\u5230\u60a8\u7684\u5206\u652f\uff1a git add path/to/updated_file git commit -m \"My commit message.\" git add \u6dfb\u52a0\u5df2\u66f4\u6539\u5230Git\u7684 \u4e34\u65f6\u533a\u57df \u4e5f\u5c31\u662fGit\u7684\u201c\u52a0\u8f7d\u533a\u57df\u201d\u7684\u6587\u4ef6\u3002\u5176\u4e2d\u5305\u542b\u4f7f\u7528 git commit \u547d\u4ee4 \u63d0\u4ea4 \u7684\u5e76\u5df2\u7ecf\u4fdd\u5b58\u5230\u4ed3\u5e93\u7684\u66f4\u6539\u3002\u5efa\u8bae\u60a8\u4f7f\u7528\u63cf\u8ff0\u6027\u7684\u63d0\u4ea4\u6d88\u606f\uff0c\u8fd9\u6837\u60a8\u5c31\u53ef\u4ee5\u4e00\u76ee\u4e86\u7136\u5730\u77e5\u9053\u66f4\u6539\u4e86\u4ec0\u4e48\u3002 !> \u5982\u679c\u4f60\u4fee\u6539\u4e86\u5f88\u591a\u6587\u4ef6\uff0c\u4f46\u6240\u6709\u7684\u6587\u4ef6\u90fd\u662f\u540c\u4e00\u4e2a\u66f4\u6539\u7684\u4e00\u90e8\u5206\uff0c\u4f60\u53ef\u4ee5\u7528 git add . \u6765\u6dfb\u52a0\u5f53\u524d\u76ee\u5f55\u4e2d\u6240\u6709\u5df2\u66f4\u6539\u7684\u6587\u4ef6\u800c\u4e0d\u662f\u5355\u72ec\u6dfb\u52a0\u6bcf\u4e2a\u6587\u4ef6.","title":"\u505a\u6539\u52a8"},{"location":"tutorial_best_practices/#_5","text":"\u6700\u540e\u4e00\u6b65\u662f\u5c06\u66f4\u6539\u63a8\u9001\u5230\u60a8\u7684\u5206\u53c9\u3002 \u8f93\u5165 git push \u6765\u63a8\u9001. \u73b0\u5728Git\u5c06 dev_branch \u7684\u5f53\u524d\u72b6\u6001\u53d1\u5e03\u5230\u60a8\u7684\u5206\u53c9\u3002","title":"\u53d1\u5e03\u66f4\u6539"},{"location":"tutorial_best_practices/#_6","text":"\u6709\u65f6\uff0c\u5f53\u60a8\u5728\u67d0\u4e2a\u5206\u652f\u4e2d\u7684\u5de5\u4f5c\u9700\u8981\u5f88\u957f\u65f6\u95f4\u624d\u80fd\u5b8c\u6210\u65f6\uff0c\u5176\u4ed6\u4eba\u6240\u505a\u7684\u66f4\u6539\u4e0e\u60a8\u5728\u6253\u5f00pull request\u65f6\u5bf9\u8be5\u5206\u652f\u6240\u505a\u7684\u66f4\u6539\u76f8\u51b2\u7a81\u3002\u8fd9\u79f0\u4e3a rebase \u5373\u5408\u5e76\u51b2\u7a81\uff0c\u5f53\u591a\u4e2a\u4eba\u7f16\u8f91\u540c\u4e00\u6587\u4ef6\u7684\u540c\u4e00\u90e8\u5206\u65f6\u4f1a\u53d1\u751f\u8fd9\u79cd\u60c5\u51b5\u3002","title":"\u89e3\u51b3\u5408\u5e76\u51b2\u7a81"},{"location":"tutorial_best_practices/#_7","text":"rebase \u662fGit\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u5b83\u83b7\u53d6\u5728\u67d0\u4e00\u70b9\u4e0a\u5e94\u7528\u7684\u66f4\u6539\uff0c\u64a4\u9500\u5b83\u4eec\uff0c\u7136\u540e\u5c06\u76f8\u540c\u7684\u66f4\u6539\u5e94\u7528\u5230\u53e6\u4e00\u70b9\u3002\u5728\u5408\u5e76\u51b2\u7a81\u7684\u60c5\u51b5\u4e0b\uff0c\u60a8\u53ef\u4ee5\u91cd\u65b0\u8bbe\u7f6e\u60a8\u7684\u5206\u652f\u4ee5\u83b7\u53d6\u5728\u521b\u5efa\u5206\u652f\u65f6\u548c\u5f53\u524d\u65f6\u95f4\u4e4b\u95f4\u7684\u90a3\u6bb5\u65f6\u95f4\u6240\u505a\u7684\u66f4\u6539\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u5f00\u59cb\uff1a git fetch upstream git rev-list --left-right --count HEAD...upstream/master \u8fd9\u91cc\u7684 git rev-list \u547d\u4ee4\u8fd4\u56de\u5f53\u524d\u5206\u652f\u548cqmk\u7684\u4e3b\u5206\u652f\u4e4b\u95f4\u4e0d\u540c\u7684\u63d0\u4ea4\u6570\u3002\u6211\u4eec\u9996\u5148\u8fd0\u884c git fetch \uff0c\u4ee5\u786e\u4fdd\u6211\u4eec\u6709\u4ee3\u8868upstream\u4ed3\u5e93\u7684refs\u3002 git rev-list \u547d\u4ee4\u7684\u56de\u663e\u6709\u4e24\u4e2a\u6570\u5b57\uff1a $ git rev-list --left-right --count HEAD...upstream/master 7 35 \u7b2c\u4e00\u4e2a\u6570\u5b57\u8868\u793a\u81ea\u521b\u5efa\u4ee5\u6765\u5f53\u524d\u5206\u652f\u7684\u63d0\u4ea4\u6570, \u7b2c\u4e8c\u4e2a\u6570\u5b57\u662f\u81ea\u521b\u5efa\u5f53\u524d\u5206\u652f\u4ee5\u6765\u5bf9 upstream/master \u8fdb\u884c\u7684\u63d0\u4ea4\u6570, \u56e0\u6b64, \u5f53\u524d\u5206\u652f\u4e2d\u672a\u8bb0\u5f55\u53d8\u52a8\u3002 \u65e2\u7136\u77e5\u9053\u5f53\u524d\u5206\u652f\u548cupstream\u4ed3\u5e93\u7684\u5f53\u524d\u72b6\u6001\uff0c\u6211\u4eec\u53ef\u4ee5\u5f00\u59cb\u4e00\u4e2arebase\u64cd\u4f5c\uff1a git rebase upstream/master \u8fd9\u5c31\u662f\u8ba9Git\u64a4\u9500\u5f53\u524d\u5206\u652f\u4e0a\u7684\u63d0\u4ea4\uff0c\u7136\u540e\u6839\u636eQMK\u7684\u4e3b\u5206\u652f\u91cd\u65b0\u5e94\u7528\u5b83\u4eec\u3002 $ git rebase upstream/master First, rewinding head to replay your work on top of it... Applying: Commit #1 Using index info to reconstruct a base tree... M conflicting_file_1.txt Falling back to patching base and 3-way merge... Auto-merging conflicting_file_1.txt CONFLICT (content): Merge conflict in conflicting_file_1.txt error: Failed to merge in the changes. hint: Use 'git am --show-current-patch' to see the failed patch Patch failed at 0001 Commit #1 Resolve all conflicts manually, mark them as resolved with \"git add/rm <conflicted_files>\", then run \"git rebase --continue\". You can instead skip this commit: run \"git rebase --skip\". To abort and get back to the state before \"git rebase\", run \"git rebase --abort\". \u8fd9\u544a\u8bc9\u6211\u4eec\u6709\u4e00\u4e2a\u5408\u5e76\u51b2\u7a81\uff0c\u5e76\u7ed9\u51fa\u5e26\u6709\u51b2\u7a81\u7684\u6587\u4ef6\u7684\u540d\u79f0\u3002\u5728\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00\u51b2\u7a81\u7684\u6587\u4ef6\uff0c\u5728\u8be5\u6587\u4ef6\u7684\u67d0\u4e2a\u4f4d\u7f6e\uff0c\u60a8\u4f1a\u53d1\u73b0\u5982\u4e0b\u5185\u5bb9\uff1a <<<<<<< HEAD <p>For help with any issues, email us at support@webhost.us.</p> ======= <p>Need help? Email support@webhost.us.</p> >>>>>>> Commit #1 <<<<<<< HEAD \u884c\u6807\u8bb0\u5408\u5e76\u51b2\u7a81\u7684\u5f00\u59cb, >>>>>>> Commit #1 \u884c\u6807\u8bb0\u7ed3\u675f, \u51b2\u7a81\u9009\u9879\u88ab ======= \u5206\u9694\u3002 HEAD \u90a3\u7aef\u7684\u90e8\u5206\u6765\u81ea\u6587\u4ef6\u7684qmk master\u7248\u672c\uff0c\u6807\u8bb0\u6709commit\u6d88\u606f\u7684\u90e8\u5206\u6765\u81ea\u5f53\u524d\u7684\u5206\u652f\u6301\u548c\u63d0\u4ea4\u3002 \u56e0\u4e3aGit\u8ddf\u8e2a \u5bf9\u6587\u4ef6\u7684\u66f4\u6539 \u800c\u4e0d\u662f\u76f4\u63a5\u8ddf\u8e2a\u6587\u4ef6\u7684\u5185\u5bb9\uff0c\u6240\u4ee5\u5982\u679cGit\u5728\u63d0\u4ea4\u4e4b\u524d\u627e\u4e0d\u5230\u6587\u4ef6\u4e2d\u7684\u6587\u672c\uff0c\u5b83\u5c06\u4e0d\u77e5\u9053\u5982\u4f55\u7f16\u8f91\u8be5\u6587\u4ef6\u3002\u91cd\u65b0\u7f16\u8f91\u6587\u4ef6\u5c06\u89e3\u51b3\u51b2\u7a81\u3002\u8fdb\u884c\u66f4\u6539\uff0c\u7136\u540e\u4fdd\u5b58\u6587\u4ef6\u3002 <p>Need help? Email support@webhost.us.</p> \u73b0\u5728\u8fd0\u884c: git add conflicting_file_1.txt git rebase --continue Git\u8bb0\u5f55\u5bf9\u51b2\u7a81\u6587\u4ef6\u7684\u66f4\u6539\uff0c\u5e76\u7ee7\u7eed\u5e94\u7528\u6765\u81ea\u6211\u4eec\u7684\u5206\u652f\u7684\u63d0\u4ea4\uff0c\u76f4\u5230\u5b83\u5230\u8fbe\u672b\u5c3e\u3002","title":"\u91cd\u65b0\u8c03\u6574\u60a8\u7684\u66f4\u6539"},{"location":"tutorial_building_firmware/","text":"\u6784\u5efa\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u00b6 \u73b0\u5728\u60a8\u5df2\u7ecf\u5efa\u7acb\u4e86\u6784\u5efa\u73af\u5883\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u81ea\u5b9a\u4e49\u56fa\u4ef6\u4e86\u3002\u5bf9\u4e8e\u672c\u6307\u5357\u7684\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u57283\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u5207\u6362\u2014\u2014\u6587\u4ef6\u7ba1\u7406\u5668\u3001\u6587\u672c\u7f16\u8f91\u5668\u548c\u7ec8\u7aef\u7a97\u53e3\u3002\u8bf7\u4fdd\u6301\u6240\u67093\u4e2a\u7a0b\u5e8f\u6253\u5f00\uff0c\u76f4\u5230\u60a8\u5b8c\u6210\u5e76\u5bf9\u952e\u76d8\u56fa\u4ef6\u6ee1\u610f\u3002 \u5982\u679c\u60a8\u5728\u6309\u7167\u6307\u5357\u7b2c\u4e00\u90e8\u5206\u7684\u64cd\u4f5c\u4e4b\u540e\u5173\u95ed\u5e76\u91cd\u65b0\u6253\u5f00\u4e86\u7ec8\u7aef\u7a97\u53e3\uff0c\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u8f93\u5165\u201ccd qmk_firmware\u201d\uff0c\u6765\u4f7f\u60a8\u7684\u7ec8\u7aef\u4f4d\u4e8e\u6b63\u786e\u7684\u76ee\u5f55\u3002 \u5bfc\u822a\u5230\u60a8\u7684keymaps\u6587\u4ef6\u5939 \u00b6 \u9996\u5148\u5bfc\u822a\u5230\u952e\u76d8\u7684 keymaps \u6587\u4ef6\u5939. Tip \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fMacOS\u6216Windows\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8f7b\u677e\u5730\u6253\u5f00keymaps\u6587\u4ef6\u5939\u3002 macOS: open keyboards/<keyboard_folder>/keymaps Windows: start .\\\\keyboards\\\\<keyboard_folder>\\\\keymaps \u521b\u5efa default \u5e03\u5c40\u526f\u672c \u00b6 \u6253\u5f00 keymaps \u6587\u4ef6\u5939\u540e\uff0c\u60a8\u5c06\u9700\u8981\u521b\u5efa default \u6587\u4ef6\u5939\u7684\u526f\u672c\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u5c06\u6587\u4ef6\u5939\u547d\u540d\u4e3a\u4e0eGitHub\u7528\u6237\u540d\u76f8\u540c\u7684\u540d\u79f0\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u60a8\u60f3\u4f7f\u7528\u7684\u540d\u79f0\uff0c\u53ea\u8981\u5b83\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u8981\u81ea\u52a8\u6267\u884c\u6b64\u8fc7\u7a0b\uff0c\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u8fd0\u884c new_keymap.sh \u811a\u672c\u3002 \u5bfc\u822a\u5230 qmk_firmware/util \u76ee\u5f55\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a ./new_keymap.sh <keyboard path> <username> \u4f8b\u5982\uff0c\u4e00\u4e2a\u540d\u5b57\u53ebymzcdg\u7684\u7528\u6237\u8981\u521b\u5efa1up60hse\u7684\u5e03\u5c40\uff0c\u4ed6\u9700\u8981\u8f93\u5165 ./new_keymap.sh 1upkeyboards/1up60hse ymzcdg \u5728\u4f60\u6700\u949f\u7231\u7684\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00 keymap.c \u00b6 \u6253\u5f00\u4f60\u7684 keymap.c . \u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u63a7\u5236\u952e\u76d8\u884c\u4e3a\u7684\u7ed3\u6784\u3002 \u5728\u4f60\u7684 keymap.c \u7684\u9876\u90e8\u6709\u4e00\u4e9b\u8ba9\u5e03\u5c40\u66f4\u6613\u8bfb\u7684define\u548cenum\u3002\u5728\u9760\u4e0b\u7684\u4f4d\u7f6e\u4f60\u4f1a\u627e\u5230\u4e00\u884c\u548c\u4e0b\u9762\u8fd9\u53e5\u5f88\u50cf\u7684: const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { \u4ece\u8fd9\u4e00\u884c\u5f00\u59cb\u4fbf\u662f\u5c42\u5217\u8868\u3002\u8fd9\u884c\u4e0b\u9762\u4f60\u4f1a\u770b\u5230\u5305\u62ec LAYOUT \u6216 KEYMAP \u8fd9\u4e24\u4e2a\u8bcd\u7684\u51e0\u884c, \u4ece\u8fd9\u4e9b\u884c\u5f00\u59cb\u5c31\u662f\u5c42\u3002\u5728\u8fd9\u4e00\u884c\u4e0b\u9762\u662f\u7ec4\u6210\u8be5\u7279\u5b9a\u5c42\u7684\u952e\u7684\u5217\u8868\u3002 Tip \u7f16\u8f91\u60a8\u7684keymap\u6587\u4ef6\u65f6\uff0c\u6ce8\u610f\u4e0d\u8981\u6dfb\u52a0\u6216\u5220\u9664\u4efb\u4f55\u9017\u53f7\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u60a8\u5c06\u963b\u6b62\u60a8\u7684\u56fa\u4ef6\u7f16\u8bd1\uff0c\u5e76\u4e14\u60a8\u53ef\u80fd\u4e0d\u5bb9\u6613\u627e\u51fa\u591a\u4f59\u7684\u6216\u7f3a\u5c11\u7684\u9017\u53f7\u5728\u54ea\u91cc\u3002 \u6839\u636e\u60a8\u7684\u559c\u597d\u81ea\u5b9a\u4e49\u5e03\u5c40 \u00b6 \u5982\u4f55\u5b8c\u6210\u8fd9\u4e00\u6b65\u9aa4\u5b8c\u5168\u53d6\u51b3\u4e8e\u60a8\u3002\u6539\u53d8\u4e00\u76f4\u56f0\u6270\u7740\u4f60\u7684\u95ee\u9898\uff0c\u6216\u8005\u5b8c\u5168\u91cd\u505a\u6240\u6709\u7684\u4e8b\u60c5\u3002\u5982\u679c\u60a8\u4e0d\u9700\u8981\u5168\u90e8\u56fe\u5c42\uff0c\u53ef\u4ee5\u5220\u9664\u56fe\u5c42\uff0c\u6216\u8005\u5c06\u56fe\u5c42\u603b\u6570\u589e\u52a0\u523032\u4e2a\u3002\u67e5\u770b\u4ee5\u4e0b\u6587\u6863\uff0c\u4e86\u89e3\u53ef\u4ee5\u5728\u6b64\u5904\u5b9a\u4e49\u7684\u5185\u5bb9: \u952e\u7801 \u7279\u6027 \u95ee\u9898\u4e0e\u89e3\u7b54 Tip \u5f53\u4f60\u660e\u767d\u5e03\u5c40\u662f\u600e\u4e48\u5de5\u4f5c\u65f6\uff0c\u60a8\u4e5f\u8981\u8ba9\u6bcf\u6b21\u6539\u53d8\u5c3d\u53ef\u80fd\u5c0f\u3002\u4e00\u6b21\u6539\u53d8\u5f88\u5927\u5728\u8c03\u8bd5\u65f6\u627e\u51fa\u95ee\u9898\u4f1a\u5341\u5206\u56f0\u96be\u3002 \u6784\u5efa\u4f60\u7684\u56fa\u4ef6 \u00b6 \u5b8c\u6210\u5bf9\u5e03\u5c40\u7684\u66f4\u6539\u540e\uff0c\u60a8\u5c31\u8981\u6784\u5efa\u56fa\u4ef6\u4e86\u3002\u4e3a\u6b64\uff0c\u8bf7\u8fd4\u56de\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884cbuild\u547d\u4ee4: make <my_keyboard>:<my_keymap> \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684keymap\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3arev5 planck\u6784\u5efa\u4e00\u4e2akeymap\uff0c\u90a3\u4e48\u60a8\u5c06\u4f7f\u7528\u6b64\u547d\u4ee4\uff1a make planck/rev5:xyverz \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5c4f\u5e55\u4e0a\u6709\u5f88\u591a\u8f93\u51fa\uff0c\u901a\u77e5\u60a8\u6b63\u5728\u7f16\u8bd1\u54ea\u4e9b\u6587\u4ef6\u4ed6\u5e94\u8be5\u4ee5\u4e0e\u4e0b\u6587\u7c7b\u4f3c\u7684\u8f93\u51fa\u7ed3\u675f: Linking: .build/planck_rev5_xyverz.elf [OK] Creating load file for flashing: .build/planck_rev5_xyverz.hex [OK] Copying planck_rev5_xyverz.hex to qmk_firmware folder [OK] Checking file size of planck_rev5_xyverz.hex [OK] * File size is fine - 18392/28672 \u5237\u65b0\u4f60\u7684\u56fa\u4ef6 \u00b6 \u8bf7\u79fb\u6b65 Flashing Firmware \u6765\u7ee7\u7eed\u3002","title":"\u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6"},{"location":"tutorial_building_firmware/#_1","text":"\u73b0\u5728\u60a8\u5df2\u7ecf\u5efa\u7acb\u4e86\u6784\u5efa\u73af\u5883\uff0c\u5c31\u53ef\u4ee5\u5f00\u59cb\u6784\u5efa\u81ea\u5b9a\u4e49\u56fa\u4ef6\u4e86\u3002\u5bf9\u4e8e\u672c\u6307\u5357\u7684\u8fd9\u4e00\u90e8\u5206\uff0c\u6211\u4eec\u5c06\u57283\u4e2a\u7a0b\u5e8f\u4e4b\u95f4\u5207\u6362\u2014\u2014\u6587\u4ef6\u7ba1\u7406\u5668\u3001\u6587\u672c\u7f16\u8f91\u5668\u548c\u7ec8\u7aef\u7a97\u53e3\u3002\u8bf7\u4fdd\u6301\u6240\u67093\u4e2a\u7a0b\u5e8f\u6253\u5f00\uff0c\u76f4\u5230\u60a8\u5b8c\u6210\u5e76\u5bf9\u952e\u76d8\u56fa\u4ef6\u6ee1\u610f\u3002 \u5982\u679c\u60a8\u5728\u6309\u7167\u6307\u5357\u7b2c\u4e00\u90e8\u5206\u7684\u64cd\u4f5c\u4e4b\u540e\u5173\u95ed\u5e76\u91cd\u65b0\u6253\u5f00\u4e86\u7ec8\u7aef\u7a97\u53e3\uff0c\u8bf7\u4e0d\u8981\u5fd8\u8bb0\u8f93\u5165\u201ccd qmk_firmware\u201d\uff0c\u6765\u4f7f\u60a8\u7684\u7ec8\u7aef\u4f4d\u4e8e\u6b63\u786e\u7684\u76ee\u5f55\u3002","title":"\u6784\u5efa\u7b2c\u4e00\u4e2a\u56fa\u4ef6"},{"location":"tutorial_building_firmware/#keymaps","text":"\u9996\u5148\u5bfc\u822a\u5230\u952e\u76d8\u7684 keymaps \u6587\u4ef6\u5939. Tip \u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fMacOS\u6216Windows\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8f7b\u677e\u5730\u6253\u5f00keymaps\u6587\u4ef6\u5939\u3002 macOS: open keyboards/<keyboard_folder>/keymaps Windows: start .\\\\keyboards\\\\<keyboard_folder>\\\\keymaps","title":"\u5bfc\u822a\u5230\u60a8\u7684keymaps\u6587\u4ef6\u5939"},{"location":"tutorial_building_firmware/#default","text":"\u6253\u5f00 keymaps \u6587\u4ef6\u5939\u540e\uff0c\u60a8\u5c06\u9700\u8981\u521b\u5efa default \u6587\u4ef6\u5939\u7684\u526f\u672c\u3002\u6211\u4eec\u5f3a\u70c8\u5efa\u8bae\u60a8\u5c06\u6587\u4ef6\u5939\u547d\u540d\u4e3a\u4e0eGitHub\u7528\u6237\u540d\u76f8\u540c\u7684\u540d\u79f0\uff0c\u4f46\u60a8\u4e5f\u53ef\u4ee5\u4f7f\u7528\u4efb\u4f55\u60a8\u60f3\u4f7f\u7528\u7684\u540d\u79f0\uff0c\u53ea\u8981\u5b83\u53ea\u5305\u542b\u5c0f\u5199\u5b57\u6bcd\u3001\u6570\u5b57\u548c\u4e0b\u5212\u7ebf\u5b57\u7b26\u3002 \u8981\u81ea\u52a8\u6267\u884c\u6b64\u8fc7\u7a0b\uff0c\u60a8\u8fd8\u53ef\u4ee5\u9009\u62e9\u8fd0\u884c new_keymap.sh \u811a\u672c\u3002 \u5bfc\u822a\u5230 qmk_firmware/util \u76ee\u5f55\u7136\u540e\u8f93\u5165\u4ee5\u4e0b\u547d\u4ee4\uff1a ./new_keymap.sh <keyboard path> <username> \u4f8b\u5982\uff0c\u4e00\u4e2a\u540d\u5b57\u53ebymzcdg\u7684\u7528\u6237\u8981\u521b\u5efa1up60hse\u7684\u5e03\u5c40\uff0c\u4ed6\u9700\u8981\u8f93\u5165 ./new_keymap.sh 1upkeyboards/1up60hse ymzcdg","title":"\u521b\u5efadefault \u5e03\u5c40\u526f\u672c"},{"location":"tutorial_building_firmware/#keymapc","text":"\u6253\u5f00\u4f60\u7684 keymap.c . \u5728\u8fd9\u4e2a\u6587\u4ef6\u4e2d\uff0c\u60a8\u53ef\u4ee5\u627e\u5230\u63a7\u5236\u952e\u76d8\u884c\u4e3a\u7684\u7ed3\u6784\u3002 \u5728\u4f60\u7684 keymap.c \u7684\u9876\u90e8\u6709\u4e00\u4e9b\u8ba9\u5e03\u5c40\u66f4\u6613\u8bfb\u7684define\u548cenum\u3002\u5728\u9760\u4e0b\u7684\u4f4d\u7f6e\u4f60\u4f1a\u627e\u5230\u4e00\u884c\u548c\u4e0b\u9762\u8fd9\u53e5\u5f88\u50cf\u7684: const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { \u4ece\u8fd9\u4e00\u884c\u5f00\u59cb\u4fbf\u662f\u5c42\u5217\u8868\u3002\u8fd9\u884c\u4e0b\u9762\u4f60\u4f1a\u770b\u5230\u5305\u62ec LAYOUT \u6216 KEYMAP \u8fd9\u4e24\u4e2a\u8bcd\u7684\u51e0\u884c, \u4ece\u8fd9\u4e9b\u884c\u5f00\u59cb\u5c31\u662f\u5c42\u3002\u5728\u8fd9\u4e00\u884c\u4e0b\u9762\u662f\u7ec4\u6210\u8be5\u7279\u5b9a\u5c42\u7684\u952e\u7684\u5217\u8868\u3002 Tip \u7f16\u8f91\u60a8\u7684keymap\u6587\u4ef6\u65f6\uff0c\u6ce8\u610f\u4e0d\u8981\u6dfb\u52a0\u6216\u5220\u9664\u4efb\u4f55\u9017\u53f7\u3002\u5982\u679c\u8fd9\u6837\u505a\uff0c\u60a8\u5c06\u963b\u6b62\u60a8\u7684\u56fa\u4ef6\u7f16\u8bd1\uff0c\u5e76\u4e14\u60a8\u53ef\u80fd\u4e0d\u5bb9\u6613\u627e\u51fa\u591a\u4f59\u7684\u6216\u7f3a\u5c11\u7684\u9017\u53f7\u5728\u54ea\u91cc\u3002","title":"\u5728\u4f60\u6700\u949f\u7231\u7684\u6587\u672c\u7f16\u8f91\u5668\u4e2d\u6253\u5f00keymap.c"},{"location":"tutorial_building_firmware/#_2","text":"\u5982\u4f55\u5b8c\u6210\u8fd9\u4e00\u6b65\u9aa4\u5b8c\u5168\u53d6\u51b3\u4e8e\u60a8\u3002\u6539\u53d8\u4e00\u76f4\u56f0\u6270\u7740\u4f60\u7684\u95ee\u9898\uff0c\u6216\u8005\u5b8c\u5168\u91cd\u505a\u6240\u6709\u7684\u4e8b\u60c5\u3002\u5982\u679c\u60a8\u4e0d\u9700\u8981\u5168\u90e8\u56fe\u5c42\uff0c\u53ef\u4ee5\u5220\u9664\u56fe\u5c42\uff0c\u6216\u8005\u5c06\u56fe\u5c42\u603b\u6570\u589e\u52a0\u523032\u4e2a\u3002\u67e5\u770b\u4ee5\u4e0b\u6587\u6863\uff0c\u4e86\u89e3\u53ef\u4ee5\u5728\u6b64\u5904\u5b9a\u4e49\u7684\u5185\u5bb9: \u952e\u7801 \u7279\u6027 \u95ee\u9898\u4e0e\u89e3\u7b54 Tip \u5f53\u4f60\u660e\u767d\u5e03\u5c40\u662f\u600e\u4e48\u5de5\u4f5c\u65f6\uff0c\u60a8\u4e5f\u8981\u8ba9\u6bcf\u6b21\u6539\u53d8\u5c3d\u53ef\u80fd\u5c0f\u3002\u4e00\u6b21\u6539\u53d8\u5f88\u5927\u5728\u8c03\u8bd5\u65f6\u627e\u51fa\u95ee\u9898\u4f1a\u5341\u5206\u56f0\u96be\u3002","title":"\u6839\u636e\u60a8\u7684\u559c\u597d\u81ea\u5b9a\u4e49\u5e03\u5c40"},{"location":"tutorial_building_firmware/#_3","text":"\u5b8c\u6210\u5bf9\u5e03\u5c40\u7684\u66f4\u6539\u540e\uff0c\u60a8\u5c31\u8981\u6784\u5efa\u56fa\u4ef6\u4e86\u3002\u4e3a\u6b64\uff0c\u8bf7\u8fd4\u56de\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884cbuild\u547d\u4ee4: make <my_keyboard>:<my_keymap> \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684keymap\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3arev5 planck\u6784\u5efa\u4e00\u4e2akeymap\uff0c\u90a3\u4e48\u60a8\u5c06\u4f7f\u7528\u6b64\u547d\u4ee4\uff1a make planck/rev5:xyverz \u5728\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\uff0c\u4f60\u5c06\u770b\u5230\u5c4f\u5e55\u4e0a\u6709\u5f88\u591a\u8f93\u51fa\uff0c\u901a\u77e5\u60a8\u6b63\u5728\u7f16\u8bd1\u54ea\u4e9b\u6587\u4ef6\u4ed6\u5e94\u8be5\u4ee5\u4e0e\u4e0b\u6587\u7c7b\u4f3c\u7684\u8f93\u51fa\u7ed3\u675f: Linking: .build/planck_rev5_xyverz.elf [OK] Creating load file for flashing: .build/planck_rev5_xyverz.hex [OK] Copying planck_rev5_xyverz.hex to qmk_firmware folder [OK] Checking file size of planck_rev5_xyverz.hex [OK] * File size is fine - 18392/28672","title":"\u6784\u5efa\u4f60\u7684\u56fa\u4ef6"},{"location":"tutorial_building_firmware/#_4","text":"\u8bf7\u79fb\u6b65 Flashing Firmware \u6765\u7ee7\u7eed\u3002","title":"\u5237\u65b0\u4f60\u7684\u56fa\u4ef6"},{"location":"tutorial_building_firmware_configurator/","text":"QMK Configurator \u00b6 The QMK Configurator is an online graphical user interface that generates QMK Firmware .hex or .bin files. Watch the Video Tutorial . Many people find that is enough information to start programming their own keyboard. The QMK Configurator works best with Chrome or Firefox. Warning Files from other tools such as Keyboard Layout Editor (KLE), or kbfirmware will not be compatible with QMK Configurator. Do not load them, do not import them. QMK Configurator is a DIFFERENT tool. Please refer to QMK Configurator: Step by Step .","title":"QMK Configurator"},{"location":"tutorial_building_firmware_configurator/#qmk-configurator","text":"The QMK Configurator is an online graphical user interface that generates QMK Firmware .hex or .bin files. Watch the Video Tutorial . Many people find that is enough information to start programming their own keyboard. The QMK Configurator works best with Chrome or Firefox. Warning Files from other tools such as Keyboard Layout Editor (KLE), or kbfirmware will not be compatible with QMK Configurator. Do not load them, do not import them. QMK Configurator is a DIFFERENT tool. Please refer to QMK Configurator: Step by Step .","title":"QMK Configurator"},{"location":"tutorial_flashing/","text":"\u5237\u65b0\u4f60\u7684\u952e\u76d8 \u00b6 \u73b0\u5728\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u56fa\u4ef6\u6587\u4ef6\uff0c\u90a3\u4e48\u60a8\u5c31\u9700\u8981\u5237\u65b0\u952e\u76d8\u4e86\u3002 \u7528QMK\u5de5\u5177\u7bb1\u5237\u65b0\u952e\u76d8 \u00b6 \u5237\u65b0\u952e\u76d8\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528 QMK \u5de5\u5177\u7bb1 . \u4f46\u662f\uff0cQMK\u5de5\u5177\u7bb1\u76ee\u524d\u4ec5\u9002\u7528\u4e8eWindows\u548cMacOS\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fLinux\uff08\u6216\u8005\u53ea\u662f\u5e0c\u671b\u4ece\u547d\u4ee4\u884c\u5237\u65b0\u56fa\u4ef6\uff09\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 \u65b9\u6cd5\u6982\u8ff0 . \u5c06\u6587\u4ef6\u52a0\u8f7d\u5230QMK\u5de5\u5177\u7bb1\u4e2d \u00b6 \u9996\u5148\u6253\u5f00QMK\u5de5\u5177\u7bb1\u5e94\u7528\u7a0b\u5e8f\u3002\u60a8\u5c06\u8981\u5728\u8bbf\u8fbe\u6216\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u627e\u5230\u56fa\u4ef6\u6587\u4ef6\u3002\u60a8\u7684\u952e\u76d8\u56fa\u4ef6\u53ef\u80fd\u662f\u4e24\u79cd\u683c\u5f0f\u4e4b\u4e00 .hex \u6216 .bin \u3002qmk\u4f1a\u5c1d\u8bd5\u5c06\u952e\u76d8\u7684\u76f8\u5e94\u6587\u4ef6\u590d\u5236\u5230\u201cqmk_firmware\u201d\u6839\u76ee\u5f55\u4e2d\u3002 Tip \u5982\u679c\u60a8\u5728Windows\u6216MacOS\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8f7b\u677e\u5730\u5728\u8d44\u6e90\u7ba1\u7406\u5668\u6216\u8bbf\u8fbe\u4e2d\u6253\u5f00\u5f53\u524d\u56fa\u4ef6\u6587\u4ef6\u5939\u3002 Windows: start . macOS: open . \u56fa\u4ef6\u6587\u4ef6\u59cb\u7ec8\u9075\u5faa\u6b64\u547d\u540d\u683c\u5f0f: <keyboard_name>_<keymap_name>.{bin,hex} \u4f8b\u5982\uff0c\u4f7f\u7528 default \u5e03\u5c40\u7684 plank/rev5 \u5c06\u4f7f\u7528\u4ee5\u4e0b\u540d\u5b57\uff1a planck_rev5_default.hex \u627e\u5230\u56fa\u4ef6\u6587\u4ef6\u540e\uff0c\u5c06\u5176\u62d6\u5230QMK\u5de5\u5177\u7bb1\u4e2d\u7684\u201cLocal file\u201d\u6846\u4e2d\uff0c\u6216\u5355\u51fb\u201cOpen\u201d\u5e76\u5bfc\u822a\u5230\u56fa\u4ef6\u6587\u4ef6\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002 \u5c06\u952e\u76d8\u7f6e\u4e8eDFU\uff08Bootloader\uff09\u6a21\u5f0f \u00b6 \u8981\u5237\u65b0\u81ea\u5b9a\u4e49\u56fa\u4ef6\uff0c\u60a8\u5fc5\u987b\u5c06\u952e\u76d8\u7f6e\u4e8e\u7279\u6b8a\u7684\u5237\u65b0\u6a21\u5f0f\u3002\u5728\u6b64\u6a21\u5f0f\u4e0b\uff0c\u60a8\u5c06\u65e0\u6cd5\u952e\u5165\u6216\u4f7f\u7528\u952e\u76d8\u3002\u5728\u5199\u5165\u56fa\u4ef6\u65f6\uff0c\u4e0d\u8981\u62d4\u4e0b\u952e\u76d8\u63d2\u5934\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e2d\u65ad\u5237\u65b0\u8fc7\u7a0b\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002 \u4e0d\u540c\u7684\u952e\u76d8\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u8fdb\u5165\u8fd9\u79cd\u7279\u6b8a\u6a21\u5f0f\u3002\u5982\u679c\u60a8\u7684\u952e\u76d8\u5f53\u524d\u8fd0\u884c\u7684\u662fQMK\u6216TMK\uff0c\u800c\u60a8\u6ca1\u6709\u5f97\u5230\u7279\u5b9a\u7684\u6307\u793a\uff0c\u8bf7\u6309\u987a\u5e8f\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c: \u6309\u4f4f\u4e24\u4e2ashift\u952e\u5e76\u6309 Pause \u6309\u4f4f\u4e24\u4e2ashift\u952e\u5e76\u6309 B \u62d4\u4e0b\u952e\u76d8\u63d2\u5934, \u540c\u65f6\u6309\u4f4f\u7a7a\u683c\u952e\u548c B , \u63d2\u4e0a\u952e\u76d8\u7136\u540e\u7b49\u4e00\u4f1a\u518d\u653e\u5f00\u6309\u952e \u6309\u4e0bPCB\u5e95\u90e8\u7684 RESET \u7269\u7406\u952e \u627e\u5230PCB\u4e0a\u6807\u8bb0\u6709 BOOT0 \u6216 RESET \u7684\u91d1\u5c5e\u70b9, \u5728\u63d2\u5165PCB\u7684\u540c\u65f6\u77ed\u63a5\u5b83\u4eec \u6210\u529f\u540e\uff0c\u60a8\u5c06\u5728QMK\u5de5\u5177\u7bb1\u4e2d\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u6d88\u606f: *** Clueboard - Clueboard 66% HotSwap disconnected -- 0xC1ED:0x2390 *** DFU device connected \u5237\u65b0\u4f60\u7684\u952e\u76d8 \u00b6 \u5355\u51fbQMK\u5de5\u5177\u7bb1\u4e2d\u7684 Flash \u6309\u94ae\u3002\u60a8\u5c06\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u8f93\u51fa: *** Clueboard - Clueboard 66% HotSwap disconnected -- 0xC1ED:0x2390 *** DFU device connected *** Attempting to flash, please don't remove device >>> dfu-programmer atmega32u4 erase --force Erasing flash... Success Checking memory from 0x0 to 0x6FFF... Empty. >>> dfu-programmer atmega32u4 flash /Users/skully/qmk_firmware/clueboard_66_hotswap_gen1_skully.hex Checking memory from 0x0 to 0x55FF... Empty. 0% 100% Programming 0x5600 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success 0% 100% Reading 0x7000 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success Validating... Success 0x5600 bytes written into 0x7000 bytes memory (76.79%). >>> dfu-programmer atmega32u4 reset *** DFU device disconnected *** Clueboard - Clueboard 66% HotSwap connected -- 0xC1ED:0x2390 \u4f7f\u7528\u547d\u4ee4\u884c\u5237\u65b0\u952e\u76d8 \u00b6 \u9996\u5148\uff0c\u60a8\u9700\u8981\u77e5\u9053\u60a8\u7684\u952e\u76d8\u4f7f\u7528\u7684\u662f\u54ea\u4e2abootloader\u3002\u901a\u5e38\u662f\u4ee5\u4e0b\u56db\u4e2a\u5e38\u89c1\u7684bootloader\u3002Pro-Micro \u548c clones \u4f7f\u7528 CATERINA, Teensy \u4f7f\u7528 Halfkay, OLKB \u952e\u76d8\u4f7f\u7528 QMK-DFU, \u5176\u4ed6\u7684atmega32u4\u82af\u7247\u4f7f\u7528DFU\u3002 \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u6587\u7ae0\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8ebootloader \u5237\u65b0\u6307\u4ee4\u548cBootloader\u4fe1\u606f \u3002 \u5982\u679c\u60a8\u77e5\u9053\u6b63\u5728\u4f7f\u7528\u7684bootloader\u662f\u54ea\u79cd\uff0c\u90a3\u4e48\u5728\u7f16\u8bd1\u56fa\u4ef6\u65f6\uff0c\u53ef\u4ee5\u5411\u201cmake\u201d\u547d\u4ee4\u91cc\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u53c2\u6570\uff0c\u4ee5\u81ea\u52a8\u6267\u884c\u5237\u65b0\u8fc7\u7a0b\u3002 DFU \u00b6 \u5bf9\u4e8eDFU\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:dfu \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684\u5e03\u5c40\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3arev5 planck\u6784\u5efa\u4e00\u4e2a\u5e03\u5c40\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u547d\u4ee4\uff1a make planck/rev5:xyverz:dfu \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u5e94\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9\uff1a Linking: .build/planck_rev5_xyverz.elf [OK] Creating load file for flashing: .build/planck_rev5_xyverz.hex [OK] Copying planck_rev5_xyverz.hex to qmk_firmware folder [OK] Checking file size of planck_rev5_xyverz.hex * File size is fine - 18574/28672 ``` \u5230\u4e86\u8fd9\u4e2a\u65f6\u5019, \u6784\u5efa\u811a\u672c\u5c06\u6bcf\u96945\u79d2\u67e5\u627e\u4e00\u6b21DFU\u3002\u5b83\u5c06\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u76f4\u5230\u627e\u5230\u8bbe\u5907\u6216\u5c06\u5176\u53d6\u6d88\u3002 dfu-programmer: no device present. Error: Bootloader not found. Trying again in 5s. \u4e00\u65e6\u51fa\u73b0\u4ee5\u4e0a\u56de\u663e\uff0c\u60a8\u5c06\u9700\u8981\u91cd\u7f6e\u63a7\u5236\u5668\u3002\u7136\u540e\uff0c\u5b83\u5e94\u8be5\u663e\u793a\u4e0e\u4ee5\u4e0b\u7c7b\u4f3c\u7684\u8f93\u51fa\uff1a *** Attempting to flash, please don't remove device dfu-programmer atmega32u4 erase --force Erasing flash... Success Checking memory from 0x0 to 0x6FFF... Empty. dfu-programmer atmega32u4 flash /Users/skully/qmk_firmware/clueboard_66_hotswap_gen1_skully.hex Checking memory from 0x0 to 0x55FF... Empty. 0% 100% Programming 0x5600 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success 0% 100% Reading 0x7000 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success Validating... Success 0x5600 bytes written into 0x7000 bytes memory (76.79%). dfu-programmer atmega32u4 reset \u5982\u679c\u60a8\u5bf9\u6b64\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a\uff1a sudo make <my_keyboard>:<my_keymap>:dfu #### DFU\u547d\u4ee4 \u6709\u8bb8\u591aDFU\u547d\u4ee4\u53ef\u7528\u4e8e\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230DFU\u8bbe\u5907\uff1a * `:dfu` - \u8fd9\u662f\u6b63\u5e38\u9009\u9879\uff0c\u7b49\u5f85DFU\u8bbe\u5907\u53ef\u7528\uff0c\u7136\u540e\u5237\u65b0\u56fa\u4ef6\u3002\u8fd9\u5c06\u6bcf\u96945\u79d2\u68c0\u67e5\u4e00\u6b21\uff0c\u4ee5\u67e5\u770b\u662f\u5426\u51fa\u73b0\u4e86DFU\u8bbe\u5907\u3002 * `:dfu-ee` - \u8fd9\u5c06\u5237\u65b0\u4e00\u4e2a`eep`\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u666e\u901a\u7684\u5341\u516d\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u5f88\u4e0d\u5e38\u89c1\u3002 * `:dfu-split-left` - \u8fd9\u5c06\u5237\u65b0\u6b63\u5e38\u56fa\u4ef6\uff0c\u5c31\u50cf\u9ed8\u8ba4\u9009\u9879 (`:dfu`)\u4e00\u6837. \u4f46\u662f\uff0c\u8fd9\u4e5f\u4f1a\u5237\u65b0\u201c\u5de6\u4fa7\u201dEEPROM\u6587\u4ef6\uff0c\u7528\u4e8e\u5206\u5272\u952e\u76d8\u3002 _\u8fd9\u662f\u57fa\u4e8eElite C\u7684\u952e\u76d8\u7684\u63a8\u8350\u9009\u62e9\u3002_ * `:dfu-split-right` - \u8fd9\u5c06\u5237\u65b0\u6b63\u5e38\u56fa\u4ef6\uff0c\u5c31\u50cf\u9ed8\u8ba4\u9009\u9879(`:dfu`). \u4f46\u662f\uff0c\u8fd9\u4e5f\u4f1a\u5237\u65b0\u201c\u53f3\u4fa7\u201dEEPROM\u6587\u4ef6\uff0c\u7528\u4e8e\u5206\u5272\u952e\u76d8\u3002 _\u8fd9\u662f\u57fa\u4e8eElite C\u7684\u952e\u76d8\u7684\u63a8\u8350\u9009\u62e9\u3002_ ### Caterina \u5bf9\u4e8eArduino\u677f\u4ee5\u53ca\u5176\u514b\u9686\u7248\u6765\u8bf4(\u6bd4\u5982SparkFun\u548cProMicro), \u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u540e\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:avrdude \u6bd4\u5982, \u4f60\u7684\u5e03\u5c40\u53eb\"xyverz\"\u4f60\u8981\u521b\u5efa\u4e00\u4e2arev2 Lets Split\u7684\u5e03\u5c40,\u4f60\u8981\u7528\u4ee5\u4e0b\u547d\u4ee4: make lets_split/rev2:xyverz:avrdude \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u5185\u5bb9: Linking: .build/lets_split_rev2_xyverz.elf [OK] Creating load file for flashing: .build/lets_split_rev2_xyverz.hex [OK] Checking file size of lets_split_rev2_xyverz.hex [OK] * File size is fine - 27938/28672 Detecting USB port, reset your controller now.............. \u6b64\u65f6\uff0c\u590d\u4f4d\uff0c\u7136\u540e\u811a\u672c\u5c06\u68c0\u6d4bbootloader\uff0c\u7136\u540e\u5237\u65b0\u56fa\u4ef6\u3002\u8f93\u51fa\u5e94\u8be5\u50cf\u8fd9\u6837: Detected controller on USB port at /dev/ttyS15 Connecting to programmer: . Found programmer: Id = \"CATERIN\"; type = S Software Version = 1.0; No Hardware Version given. Programmer supports auto addr increment. Programmer supports buffered memory access with buffersize=128 bytes. Programmer supports the following devices: Device code: 0x44 avrdude.exe: AVR device initialized and ready to accept instructions Reading | ################################################## | 100% 0.00s avrdude.exe: Device signature = 0x1e9587 (probably m32u4) avrdude.exe: NOTE: \"flash\" memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option. avrdude.exe: erasing chip avrdude.exe: reading input file \"./.build/lets_split_rev2_xyverz.hex\" avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex auto detected as Intel Hex avrdude.exe: writing flash (27938 bytes): Writing | ################################################## | 100% 2.40s avrdude.exe: 27938 bytes of flash written avrdude.exe: verifying flash memory against ./.build/lets_split_rev2_xyverz.hex: avrdude.exe: load data flash data from input file ./.build/lets_split_rev2_xyverz.hex: avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex auto detected as Intel Hex avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex contains 27938 bytes avrdude.exe: reading on-chip flash data: Reading | ################################################## | 100% 0.43s avrdude.exe: verifying ... avrdude.exe: 27938 bytes of flash verified avrdude.exe: safemode: Fuses OK (E:CB, H:D8, L:FF) avrdude.exe done. Thank you. \u5982\u679c\u60a8\u5bf9\u6b64\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a\uff1a sudo make <my_keyboard>:<my_keymap>:avrdude \u6b64\u5916\uff0c\u5982\u679c\u8981\u5237\u65b0\u591a\u4e2a\u677f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a make <keyboard>:<keymap>:avrdude-loop \u5f53\u4f60\u5b8c\u6210\u4e86\u5237\u65b0\u540e\uff0c\u4f60\u9700\u8981\u6309\u4e0bctrl+c\u6216\u8005\u5176\u4ed6\u6b63\u786e\u7684\u6309\u952e\u6765\u8ba9\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u6b62\u5faa\u73af\u3002 ## HalfKay \u5bf9\u4e8ePJRC\u8bbe\u5907\uff08Teensy\uff09\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:teensy \u6bd4\u5982, \u5982\u679c\u4f60\u7684\u5e03\u5c40\u53eb\u505a\"xyverz\"\u4f60\u60f3\u521b\u5efaErgodox or Ergodox EZ\u7684\u5e03\u5c40,\u4f60\u8981\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4: make erdogox_ez:xyverz:teensy \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a Linking: .build/ergodox_ez_xyverz.elf [OK] Creating load file for flashing: .build/ergodox_ez_xyverz.hex [OK] Checking file size of ergodox_ez_xyverz.hex [OK] * File size is fine - 25584/32256 Teensy Loader, Command Line, Version 2.1 Read \"./.build/ergodox_ez_xyverz.hex\": 25584 bytes, 79.3% usage Waiting for Teensy device... (hint: press the reset button) ``` \u6b64\u65f6\uff0c\u590d\u4f4d\u952e\u76d8\u3002\u5b8c\u6210\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a ``` Found HalfKay Bootloader Read \"./.build/ergodox_ez_xyverz.hex\": 28532 bytes, 88.5% usage Programming............................................................................................................................................................................ ................................................... Booting ## STM32 (ARM) \u5bf9\u4e8e\u5927\u591a\u6570ARM\u677f\uff08\u5305\u62ecProton C\u3001Planck Rev 6\u548cPreonic Rev 3\uff09\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4\uff1a make <my_keyboard>:<my_keymap>:dfu-util \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684keymap\u88ab\u547d\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3aPlanck Revision 6\u952e\u76d8\u6784\u5efa\u4e00\u4e2a\u5e03\u5c40\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u7136\u540e\u5c06\u952e\u76d8\u91cd\u65b0\u542f\u52a8\u5230bootloader\uff08\u5728\u5b8c\u6210\u7f16\u8bd1\u4e4b\u524d\uff09\uff1a make planck/rev6:xyverz:dfu-util \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a Linking: .build/planck_rev6_xyverz.elf [OK] Creating binary load file for flashing: .build/planck_rev6_xyverz.bin [OK] Creating load file for flashing: .build/planck_rev6_xyverz.hex [OK] Size after: text data bss dec hex filename 0 41820 0 41820 a35c .build/planck_rev6_xyverz.hex Copying planck_rev6_xyverz.bin to qmk_firmware folder [OK] dfu-util 0.9 Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc. Copyright 2010-2016 Tormod Volden and Stefan Schmidt This program is Free Software and has ABSOLUTELY NO WARRANTY Please report bugs to http://sourceforge.net/p/dfu-util/tickets/ Invalid DFU suffix signature A valid DFU suffix will be required in a future dfu-util release!!! Opening DFU capable USB device... ID 0483:df11 Run-time device DFU version 011a Claiming USB DFU Interface... Setting Alternate Setting #0 ... Determining device status: state = dfuERROR, status = 10 dfuERROR, clearing status Determining device status: state = dfuIDLE, status = 0 dfuIDLE, continuing DFU mode device DFU version 011a Device returned transfer size 2048 DfuSe interface name: \"Internal Flash \" Downloading to address = 0x08000000, size = 41824 Download [=========================] 100% 41824 bytes Download done. File downloaded successfully Transitioning to dfuMANIFEST state ``` \u8bd5\u4e00\u8bd5\u5427! \u00b6 \u606d\u559c\u60a8! \u60a8\u7684\u81ea\u5b9a\u4e49\u56fa\u4ef6\u5df2\u7ecf\u5237\u5199\u5230\u60a8\u7684\u952e\u76d8 \u8bd5\u4e00\u8bd5\uff0c\u786e\u4fdd\u4e00\u5207\u6309\u4f60\u60f3\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\u6211\u4eec\u5199\u4e86 \u6d4b\u8bd5\u548c\u8c03\u8bd5 \u6765\u5b8c\u5584\u65b0\u624b\u5f15\u5bfc\u3002 \u56e0\u6b64\uff0c\u8bf7\u524d\u5f80\u90a3\u91cc\u4e86\u89e3\u5982\u4f55\u6392\u9664\u81ea\u5b9a\u4e49\u529f\u80fd\u7684\u6545\u969c\u3002","title":"\u5237\u65b0\u56fa\u4ef6"},{"location":"tutorial_flashing/#_1","text":"\u73b0\u5728\u60a8\u5df2\u7ecf\u6784\u5efa\u4e86\u4e00\u4e2a\u81ea\u5b9a\u4e49\u56fa\u4ef6\u6587\u4ef6\uff0c\u90a3\u4e48\u60a8\u5c31\u9700\u8981\u5237\u65b0\u952e\u76d8\u4e86\u3002","title":"\u5237\u65b0\u4f60\u7684\u952e\u76d8"},{"location":"tutorial_flashing/#qmk","text":"\u5237\u65b0\u952e\u76d8\u7684\u6700\u7b80\u5355\u65b9\u6cd5\u662f\u4f7f\u7528 QMK \u5de5\u5177\u7bb1 . \u4f46\u662f\uff0cQMK\u5de5\u5177\u7bb1\u76ee\u524d\u4ec5\u9002\u7528\u4e8eWindows\u548cMacOS\u3002\u5982\u679c\u60a8\u4f7f\u7528\u7684\u662fLinux\uff08\u6216\u8005\u53ea\u662f\u5e0c\u671b\u4ece\u547d\u4ee4\u884c\u5237\u65b0\u56fa\u4ef6\uff09\uff0c\u5219\u5fc5\u987b\u4f7f\u7528 \u65b9\u6cd5\u6982\u8ff0 .","title":"\u7528QMK\u5de5\u5177\u7bb1\u5237\u65b0\u952e\u76d8"},{"location":"tutorial_flashing/#qmk_1","text":"\u9996\u5148\u6253\u5f00QMK\u5de5\u5177\u7bb1\u5e94\u7528\u7a0b\u5e8f\u3002\u60a8\u5c06\u8981\u5728\u8bbf\u8fbe\u6216\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u627e\u5230\u56fa\u4ef6\u6587\u4ef6\u3002\u60a8\u7684\u952e\u76d8\u56fa\u4ef6\u53ef\u80fd\u662f\u4e24\u79cd\u683c\u5f0f\u4e4b\u4e00 .hex \u6216 .bin \u3002qmk\u4f1a\u5c1d\u8bd5\u5c06\u952e\u76d8\u7684\u76f8\u5e94\u6587\u4ef6\u590d\u5236\u5230\u201cqmk_firmware\u201d\u6839\u76ee\u5f55\u4e2d\u3002 Tip \u5982\u679c\u60a8\u5728Windows\u6216MacOS\u4e0a\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8f7b\u677e\u5730\u5728\u8d44\u6e90\u7ba1\u7406\u5668\u6216\u8bbf\u8fbe\u4e2d\u6253\u5f00\u5f53\u524d\u56fa\u4ef6\u6587\u4ef6\u5939\u3002 Windows: start . macOS: open . \u56fa\u4ef6\u6587\u4ef6\u59cb\u7ec8\u9075\u5faa\u6b64\u547d\u540d\u683c\u5f0f: <keyboard_name>_<keymap_name>.{bin,hex} \u4f8b\u5982\uff0c\u4f7f\u7528 default \u5e03\u5c40\u7684 plank/rev5 \u5c06\u4f7f\u7528\u4ee5\u4e0b\u540d\u5b57\uff1a planck_rev5_default.hex \u627e\u5230\u56fa\u4ef6\u6587\u4ef6\u540e\uff0c\u5c06\u5176\u62d6\u5230QMK\u5de5\u5177\u7bb1\u4e2d\u7684\u201cLocal file\u201d\u6846\u4e2d\uff0c\u6216\u5355\u51fb\u201cOpen\u201d\u5e76\u5bfc\u822a\u5230\u56fa\u4ef6\u6587\u4ef6\u7684\u5b58\u50a8\u4f4d\u7f6e\u3002","title":"\u5c06\u6587\u4ef6\u52a0\u8f7d\u5230QMK\u5de5\u5177\u7bb1\u4e2d"},{"location":"tutorial_flashing/#dfubootloader","text":"\u8981\u5237\u65b0\u81ea\u5b9a\u4e49\u56fa\u4ef6\uff0c\u60a8\u5fc5\u987b\u5c06\u952e\u76d8\u7f6e\u4e8e\u7279\u6b8a\u7684\u5237\u65b0\u6a21\u5f0f\u3002\u5728\u6b64\u6a21\u5f0f\u4e0b\uff0c\u60a8\u5c06\u65e0\u6cd5\u952e\u5165\u6216\u4f7f\u7528\u952e\u76d8\u3002\u5728\u5199\u5165\u56fa\u4ef6\u65f6\uff0c\u4e0d\u8981\u62d4\u4e0b\u952e\u76d8\u63d2\u5934\u6216\u4ee5\u5176\u4ed6\u65b9\u5f0f\u4e2d\u65ad\u5237\u65b0\u8fc7\u7a0b\uff0c\u8fd9\u4e00\u70b9\u975e\u5e38\u91cd\u8981\u3002 \u4e0d\u540c\u7684\u952e\u76d8\u6709\u4e0d\u540c\u7684\u65b9\u5f0f\u8fdb\u5165\u8fd9\u79cd\u7279\u6b8a\u6a21\u5f0f\u3002\u5982\u679c\u60a8\u7684\u952e\u76d8\u5f53\u524d\u8fd0\u884c\u7684\u662fQMK\u6216TMK\uff0c\u800c\u60a8\u6ca1\u6709\u5f97\u5230\u7279\u5b9a\u7684\u6307\u793a\uff0c\u8bf7\u6309\u987a\u5e8f\u5c1d\u8bd5\u4ee5\u4e0b\u64cd\u4f5c: \u6309\u4f4f\u4e24\u4e2ashift\u952e\u5e76\u6309 Pause \u6309\u4f4f\u4e24\u4e2ashift\u952e\u5e76\u6309 B \u62d4\u4e0b\u952e\u76d8\u63d2\u5934, \u540c\u65f6\u6309\u4f4f\u7a7a\u683c\u952e\u548c B , \u63d2\u4e0a\u952e\u76d8\u7136\u540e\u7b49\u4e00\u4f1a\u518d\u653e\u5f00\u6309\u952e \u6309\u4e0bPCB\u5e95\u90e8\u7684 RESET \u7269\u7406\u952e \u627e\u5230PCB\u4e0a\u6807\u8bb0\u6709 BOOT0 \u6216 RESET \u7684\u91d1\u5c5e\u70b9, \u5728\u63d2\u5165PCB\u7684\u540c\u65f6\u77ed\u63a5\u5b83\u4eec \u6210\u529f\u540e\uff0c\u60a8\u5c06\u5728QMK\u5de5\u5177\u7bb1\u4e2d\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u6d88\u606f: *** Clueboard - Clueboard 66% HotSwap disconnected -- 0xC1ED:0x2390 *** DFU device connected","title":"\u5c06\u952e\u76d8\u7f6e\u4e8eDFU\uff08Bootloader\uff09\u6a21\u5f0f"},{"location":"tutorial_flashing/#_2","text":"\u5355\u51fbQMK\u5de5\u5177\u7bb1\u4e2d\u7684 Flash \u6309\u94ae\u3002\u60a8\u5c06\u770b\u5230\u7c7b\u4f3c\u4ee5\u4e0b\u5185\u5bb9\u7684\u8f93\u51fa: *** Clueboard - Clueboard 66% HotSwap disconnected -- 0xC1ED:0x2390 *** DFU device connected *** Attempting to flash, please don't remove device >>> dfu-programmer atmega32u4 erase --force Erasing flash... Success Checking memory from 0x0 to 0x6FFF... Empty. >>> dfu-programmer atmega32u4 flash /Users/skully/qmk_firmware/clueboard_66_hotswap_gen1_skully.hex Checking memory from 0x0 to 0x55FF... Empty. 0% 100% Programming 0x5600 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success 0% 100% Reading 0x7000 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success Validating... Success 0x5600 bytes written into 0x7000 bytes memory (76.79%). >>> dfu-programmer atmega32u4 reset *** DFU device disconnected *** Clueboard - Clueboard 66% HotSwap connected -- 0xC1ED:0x2390","title":"\u5237\u65b0\u4f60\u7684\u952e\u76d8"},{"location":"tutorial_flashing/#_3","text":"\u9996\u5148\uff0c\u60a8\u9700\u8981\u77e5\u9053\u60a8\u7684\u952e\u76d8\u4f7f\u7528\u7684\u662f\u54ea\u4e2abootloader\u3002\u901a\u5e38\u662f\u4ee5\u4e0b\u56db\u4e2a\u5e38\u89c1\u7684bootloader\u3002Pro-Micro \u548c clones \u4f7f\u7528 CATERINA, Teensy \u4f7f\u7528 Halfkay, OLKB \u952e\u76d8\u4f7f\u7528 QMK-DFU, \u5176\u4ed6\u7684atmega32u4\u82af\u7247\u4f7f\u7528DFU\u3002 \u60a8\u53ef\u4ee5\u5728\u4ee5\u4e0b\u6587\u7ae0\u4e2d\u4e86\u89e3\u66f4\u591a\u5173\u4e8ebootloader \u5237\u65b0\u6307\u4ee4\u548cBootloader\u4fe1\u606f \u3002 \u5982\u679c\u60a8\u77e5\u9053\u6b63\u5728\u4f7f\u7528\u7684bootloader\u662f\u54ea\u79cd\uff0c\u90a3\u4e48\u5728\u7f16\u8bd1\u56fa\u4ef6\u65f6\uff0c\u53ef\u4ee5\u5411\u201cmake\u201d\u547d\u4ee4\u91cc\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u53c2\u6570\uff0c\u4ee5\u81ea\u52a8\u6267\u884c\u5237\u65b0\u8fc7\u7a0b\u3002","title":"\u4f7f\u7528\u547d\u4ee4\u884c\u5237\u65b0\u952e\u76d8"},{"location":"tutorial_flashing/#dfu","text":"\u5bf9\u4e8eDFU\u5f15\u5bfc\u52a0\u8f7d\u7a0b\u5e8f\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:dfu \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684\u5e03\u5c40\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3arev5 planck\u6784\u5efa\u4e00\u4e2a\u5e03\u5c40\uff0c\u90a3\u4e48\u60a8\u53ef\u4ee5\u4f7f\u7528\u6b64\u547d\u4ee4\uff1a make planck/rev5:xyverz:dfu \u7f16\u8bd1\u5b8c\u6210\u540e\uff0c\u5e94\u8f93\u51fa\u4ee5\u4e0b\u5185\u5bb9\uff1a Linking: .build/planck_rev5_xyverz.elf [OK] Creating load file for flashing: .build/planck_rev5_xyverz.hex [OK] Copying planck_rev5_xyverz.hex to qmk_firmware folder [OK] Checking file size of planck_rev5_xyverz.hex * File size is fine - 18574/28672 ``` \u5230\u4e86\u8fd9\u4e2a\u65f6\u5019, \u6784\u5efa\u811a\u672c\u5c06\u6bcf\u96945\u79d2\u67e5\u627e\u4e00\u6b21DFU\u3002\u5b83\u5c06\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c\uff0c\u76f4\u5230\u627e\u5230\u8bbe\u5907\u6216\u5c06\u5176\u53d6\u6d88\u3002 dfu-programmer: no device present. Error: Bootloader not found. Trying again in 5s. \u4e00\u65e6\u51fa\u73b0\u4ee5\u4e0a\u56de\u663e\uff0c\u60a8\u5c06\u9700\u8981\u91cd\u7f6e\u63a7\u5236\u5668\u3002\u7136\u540e\uff0c\u5b83\u5e94\u8be5\u663e\u793a\u4e0e\u4ee5\u4e0b\u7c7b\u4f3c\u7684\u8f93\u51fa\uff1a *** Attempting to flash, please don't remove device dfu-programmer atmega32u4 erase --force Erasing flash... Success Checking memory from 0x0 to 0x6FFF... Empty. dfu-programmer atmega32u4 flash /Users/skully/qmk_firmware/clueboard_66_hotswap_gen1_skully.hex Checking memory from 0x0 to 0x55FF... Empty. 0% 100% Programming 0x5600 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success 0% 100% Reading 0x7000 bytes... [>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>] Success Validating... Success 0x5600 bytes written into 0x7000 bytes memory (76.79%). dfu-programmer atmega32u4 reset \u5982\u679c\u60a8\u5bf9\u6b64\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a\uff1a sudo make <my_keyboard>:<my_keymap>:dfu #### DFU\u547d\u4ee4 \u6709\u8bb8\u591aDFU\u547d\u4ee4\u53ef\u7528\u4e8e\u5c06\u56fa\u4ef6\u4e0b\u8f7d\u5230DFU\u8bbe\u5907\uff1a * `:dfu` - \u8fd9\u662f\u6b63\u5e38\u9009\u9879\uff0c\u7b49\u5f85DFU\u8bbe\u5907\u53ef\u7528\uff0c\u7136\u540e\u5237\u65b0\u56fa\u4ef6\u3002\u8fd9\u5c06\u6bcf\u96945\u79d2\u68c0\u67e5\u4e00\u6b21\uff0c\u4ee5\u67e5\u770b\u662f\u5426\u51fa\u73b0\u4e86DFU\u8bbe\u5907\u3002 * `:dfu-ee` - \u8fd9\u5c06\u5237\u65b0\u4e00\u4e2a`eep`\u6587\u4ef6\uff0c\u800c\u4e0d\u662f\u666e\u901a\u7684\u5341\u516d\u8fdb\u5236\u6587\u4ef6\u3002\u8fd9\u5f88\u4e0d\u5e38\u89c1\u3002 * `:dfu-split-left` - \u8fd9\u5c06\u5237\u65b0\u6b63\u5e38\u56fa\u4ef6\uff0c\u5c31\u50cf\u9ed8\u8ba4\u9009\u9879 (`:dfu`)\u4e00\u6837. \u4f46\u662f\uff0c\u8fd9\u4e5f\u4f1a\u5237\u65b0\u201c\u5de6\u4fa7\u201dEEPROM\u6587\u4ef6\uff0c\u7528\u4e8e\u5206\u5272\u952e\u76d8\u3002 _\u8fd9\u662f\u57fa\u4e8eElite C\u7684\u952e\u76d8\u7684\u63a8\u8350\u9009\u62e9\u3002_ * `:dfu-split-right` - \u8fd9\u5c06\u5237\u65b0\u6b63\u5e38\u56fa\u4ef6\uff0c\u5c31\u50cf\u9ed8\u8ba4\u9009\u9879(`:dfu`). \u4f46\u662f\uff0c\u8fd9\u4e5f\u4f1a\u5237\u65b0\u201c\u53f3\u4fa7\u201dEEPROM\u6587\u4ef6\uff0c\u7528\u4e8e\u5206\u5272\u952e\u76d8\u3002 _\u8fd9\u662f\u57fa\u4e8eElite C\u7684\u952e\u76d8\u7684\u63a8\u8350\u9009\u62e9\u3002_ ### Caterina \u5bf9\u4e8eArduino\u677f\u4ee5\u53ca\u5176\u514b\u9686\u7248\u6765\u8bf4(\u6bd4\u5982SparkFun\u548cProMicro), \u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u540e\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:avrdude \u6bd4\u5982, \u4f60\u7684\u5e03\u5c40\u53eb\"xyverz\"\u4f60\u8981\u521b\u5efa\u4e00\u4e2arev2 Lets Split\u7684\u5e03\u5c40,\u4f60\u8981\u7528\u4ee5\u4e0b\u547d\u4ee4: make lets_split/rev2:xyverz:avrdude \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u7c7b\u4f3c\u4ee5\u4e0b\u7684\u5185\u5bb9: Linking: .build/lets_split_rev2_xyverz.elf [OK] Creating load file for flashing: .build/lets_split_rev2_xyverz.hex [OK] Checking file size of lets_split_rev2_xyverz.hex [OK] * File size is fine - 27938/28672 Detecting USB port, reset your controller now.............. \u6b64\u65f6\uff0c\u590d\u4f4d\uff0c\u7136\u540e\u811a\u672c\u5c06\u68c0\u6d4bbootloader\uff0c\u7136\u540e\u5237\u65b0\u56fa\u4ef6\u3002\u8f93\u51fa\u5e94\u8be5\u50cf\u8fd9\u6837: Detected controller on USB port at /dev/ttyS15 Connecting to programmer: . Found programmer: Id = \"CATERIN\"; type = S Software Version = 1.0; No Hardware Version given. Programmer supports auto addr increment. Programmer supports buffered memory access with buffersize=128 bytes. Programmer supports the following devices: Device code: 0x44 avrdude.exe: AVR device initialized and ready to accept instructions Reading | ################################################## | 100% 0.00s avrdude.exe: Device signature = 0x1e9587 (probably m32u4) avrdude.exe: NOTE: \"flash\" memory has been specified, an erase cycle will be performed To disable this feature, specify the -D option. avrdude.exe: erasing chip avrdude.exe: reading input file \"./.build/lets_split_rev2_xyverz.hex\" avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex auto detected as Intel Hex avrdude.exe: writing flash (27938 bytes): Writing | ################################################## | 100% 2.40s avrdude.exe: 27938 bytes of flash written avrdude.exe: verifying flash memory against ./.build/lets_split_rev2_xyverz.hex: avrdude.exe: load data flash data from input file ./.build/lets_split_rev2_xyverz.hex: avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex auto detected as Intel Hex avrdude.exe: input file ./.build/lets_split_rev2_xyverz.hex contains 27938 bytes avrdude.exe: reading on-chip flash data: Reading | ################################################## | 100% 0.43s avrdude.exe: verifying ... avrdude.exe: 27938 bytes of flash verified avrdude.exe: safemode: Fuses OK (E:CB, H:D8, L:FF) avrdude.exe done. Thank you. \u5982\u679c\u60a8\u5bf9\u6b64\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u60a8\u53ef\u80fd\u9700\u8981\u8fd9\u6837\u505a\uff1a sudo make <my_keyboard>:<my_keymap>:avrdude \u6b64\u5916\uff0c\u5982\u679c\u8981\u5237\u65b0\u591a\u4e2a\u677f\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a make <keyboard>:<keymap>:avrdude-loop \u5f53\u4f60\u5b8c\u6210\u4e86\u5237\u65b0\u540e\uff0c\u4f60\u9700\u8981\u6309\u4e0bctrl+c\u6216\u8005\u5176\u4ed6\u6b63\u786e\u7684\u6309\u952e\u6765\u8ba9\u4f60\u7684\u64cd\u4f5c\u7cfb\u7edf\u7ec8\u6b62\u5faa\u73af\u3002 ## HalfKay \u5bf9\u4e8ePJRC\u8bbe\u5907\uff08Teensy\uff09\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4: make <my_keyboard>:<my_keymap>:teensy \u6bd4\u5982, \u5982\u679c\u4f60\u7684\u5e03\u5c40\u53eb\u505a\"xyverz\"\u4f60\u60f3\u521b\u5efaErgodox or Ergodox EZ\u7684\u5e03\u5c40,\u4f60\u8981\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4: make erdogox_ez:xyverz:teensy \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a Linking: .build/ergodox_ez_xyverz.elf [OK] Creating load file for flashing: .build/ergodox_ez_xyverz.hex [OK] Checking file size of ergodox_ez_xyverz.hex [OK] * File size is fine - 25584/32256 Teensy Loader, Command Line, Version 2.1 Read \"./.build/ergodox_ez_xyverz.hex\": 25584 bytes, 79.3% usage Waiting for Teensy device... (hint: press the reset button) ``` \u6b64\u65f6\uff0c\u590d\u4f4d\u952e\u76d8\u3002\u5b8c\u6210\u540e\uff0c\u60a8\u5c06\u770b\u5230\u5982\u4e0b\u8f93\u51fa\uff1a ``` Found HalfKay Bootloader Read \"./.build/ergodox_ez_xyverz.hex\": 28532 bytes, 88.5% usage Programming............................................................................................................................................................................ ................................................... Booting ## STM32 (ARM) \u5bf9\u4e8e\u5927\u591a\u6570ARM\u677f\uff08\u5305\u62ecProton C\u3001Planck Rev 6\u548cPreonic Rev 3\uff09\uff0c\u5f53\u60a8\u51c6\u5907\u597d\u7f16\u8bd1\u548c\u5237\u65b0\u56fa\u4ef6\u65f6\uff0c\u6253\u5f00\u7ec8\u7aef\u7a97\u53e3\u5e76\u8fd0\u884c\u6784\u5efa\u547d\u4ee4\uff1a make <my_keyboard>:<my_keymap>:dfu-util \u4f8b\u5982\uff0c\u5982\u679c\u60a8\u7684keymap\u88ab\u547d\u540d\u4e3a\u201cxyverz\u201d\uff0c\u5e76\u4e14\u60a8\u6b63\u5728\u4e3aPlanck Revision 6\u952e\u76d8\u6784\u5efa\u4e00\u4e2a\u5e03\u5c40\uff0c\u90a3\u4e48\u60a8\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff0c\u7136\u540e\u5c06\u952e\u76d8\u91cd\u65b0\u542f\u52a8\u5230bootloader\uff08\u5728\u5b8c\u6210\u7f16\u8bd1\u4e4b\u524d\uff09\uff1a make planck/rev6:xyverz:dfu-util \u56fa\u4ef6\u5b8c\u6210\u7f16\u8bd1\u540e\uff0c\u5b83\u5c06\u8f93\u51fa\u5982\u4e0b\u5185\u5bb9\uff1a Linking: .build/planck_rev6_xyverz.elf [OK] Creating binary load file for flashing: .build/planck_rev6_xyverz.bin [OK] Creating load file for flashing: .build/planck_rev6_xyverz.hex [OK] Size after: text data bss dec hex filename 0 41820 0 41820 a35c .build/planck_rev6_xyverz.hex Copying planck_rev6_xyverz.bin to qmk_firmware folder [OK] dfu-util 0.9 Copyright 2005-2009 Weston Schmidt, Harald Welte and OpenMoko Inc. Copyright 2010-2016 Tormod Volden and Stefan Schmidt This program is Free Software and has ABSOLUTELY NO WARRANTY Please report bugs to http://sourceforge.net/p/dfu-util/tickets/ Invalid DFU suffix signature A valid DFU suffix will be required in a future dfu-util release!!! Opening DFU capable USB device... ID 0483:df11 Run-time device DFU version 011a Claiming USB DFU Interface... Setting Alternate Setting #0 ... Determining device status: state = dfuERROR, status = 10 dfuERROR, clearing status Determining device status: state = dfuIDLE, status = 0 dfuIDLE, continuing DFU mode device DFU version 011a Device returned transfer size 2048 DfuSe interface name: \"Internal Flash \" Downloading to address = 0x08000000, size = 41824 Download [=========================] 100% 41824 bytes Download done. File downloaded successfully Transitioning to dfuMANIFEST state ```","title":"DFU"},{"location":"tutorial_flashing/#_4","text":"\u606d\u559c\u60a8! \u60a8\u7684\u81ea\u5b9a\u4e49\u56fa\u4ef6\u5df2\u7ecf\u5237\u5199\u5230\u60a8\u7684\u952e\u76d8 \u8bd5\u4e00\u8bd5\uff0c\u786e\u4fdd\u4e00\u5207\u6309\u4f60\u60f3\u7684\u65b9\u5f0f\u8fdb\u884c\u3002\u6211\u4eec\u5199\u4e86 \u6d4b\u8bd5\u548c\u8c03\u8bd5 \u6765\u5b8c\u5584\u65b0\u624b\u5f15\u5bfc\u3002 \u56e0\u6b64\uff0c\u8bf7\u524d\u5f80\u90a3\u91cc\u4e86\u89e3\u5982\u4f55\u6392\u9664\u81ea\u5b9a\u4e49\u529f\u80fd\u7684\u6545\u969c\u3002","title":"\u8bd5\u4e00\u8bd5\u5427!"},{"location":"tutorial_getting_started/","text":"\u4ecb\u7ecd \u00b6 \u4f60\u7684\u7535\u8111\u952e\u76d8\u91cc\u9762\u5305\u542b\u4e00\u4e2a\u5904\u7406\u5668, \u8fd9\u4e2a\u5904\u7406\u5668\u548c\u4f60\u7535\u8111\u91cc\u9762\u7684\u4e0d\u592a\u4e00\u6837\u3002\u8fd9\u4e2a\u5904\u7406\u5668\u8d1f\u8d23\u8fd0\u884c\u4e00\u4e9b\u7279\u6b8a\u7684\u8f6f\u4ef6\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u53ef\u4ee5\u76d1\u6d4b\u6309\u94ae\u6309\u4e0b\u5e76\u5c06\u6309\u94ae\u5904\u4e8e\u6309\u4e0b\u8fd8\u662f\u91ca\u653e\u72b6\u6001\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\u3002QMK\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u8f6f\u4ef6\uff0c\u5373\u76d1\u6d4b\u6309\u94ae\u88ab\u6309\u4e0b\u5e76\u53d1\u9001\u8fd9\u6837\u7684\u4fe1\u606f\u5230\u4f5c\u4e3a\u4e3b\u673a\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u5f53\u4f60\u521b\u5efa\u4e86\u4f60\u7684\u5e03\u5c40, \u4f60\u4e5f\u5c31\u521b\u5efa\u4e86\u4f60\u7684\u952e\u76d8\u8fd0\u884c\u7684\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 QMK\u8bd5\u56fe\u901a\u8fc7\u4f7f\u7b80\u5355\u7684\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u4f7f\u4f7f\u4e0d\u53ef\u80fd\u6210\u4e3a\u53ef\u80fd\u6765\u628a\u5927\u91cf\u7684\u6743\u529b\u4ea4\u7ed9\u4f60\u3002\u4f60\u4e0d\u9700\u8981\u61c2\u5982\u4f55\u901a\u8fc7\u7a0b\u5e8f\u521b\u5efa\u5f3a\u5927\u7684\u5e03\u5c40\u2014\u2014\u4f60\u53ea\u9700\u8981\u9075\u5faa\u7b80\u5355\u7684\u8bed\u6cd5\u89c4\u5219\u3002 \u65b0\u624b\u4e0a\u8def \u00b6 \u5728\u4f60\u80fd\u521b\u5efa\u5e03\u5c40\u524d,\u4f60\u8981\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u6765\u5efa\u7acb\u4f60\u7684\u5f00\u53d1\u73af\u5883\u3002\u65e0\u8bba\u4f60\u60f3\u7f16\u8bd1\u591a\u5c11\u56fa\u4ef6\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u3002 \u5982\u679c\u60a8\u66f4\u559c\u6b22\u56fe\u5f62\u5316\u754c\u9762, \u8bf7\u8003\u8651\u4f7f\u7528\u5728\u7ebf\u5de5\u5177 QMK\u914d\u7f6e\u5668 \u3002 \u8bf7\u53c2\u8003 \u4f7f\u7528\u5728\u7ebfGUI\u6784\u5efa\u60a8\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u3002 \u4e0b\u8f7d\u8f6f\u4ef6 \u00b6 \u6587\u672c\u7f16\u8f91\u5668 \u00b6 \u4f60\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u7f16\u8f91 \u7eaf\u6587\u672c \u6587\u4ef6\u7684\u7a0b\u5e8f\u3002\u5728Windows\u4e0a\u4f60\u53ef\u4ee5\u7528Notepad, \u5728Linux\u4e0a\u4f7f\u7528gedit\uff0c\u8fd9\u4e24\u4e2a\u90fd\u662f\u7b80\u5355\u53c8\u5b9e\u7528\u7684\u6587\u672c\u7f16\u8f91\u5de5\u5177\u3002 \u5728macOS\u4e0a, \u8bf7\u5c0f\u5fc3\u4f7f\u7528 \u201c\u6587\u672c\u7f16\u8f91\u201d \u8fd9\u4e2a\u9ed8\u8ba4\u8f6f\u4ef6: \u5982\u679c\u4f60\u4e0d\u660e\u786e\u7684\u9009\u62e9_\u683c\u5f0f_\u83dc\u5355\u4e2d\u7684 \u5236\u4f5c\u7eaf\u6587\u672c \u7684\u8bdd\u6587\u672c\u5c06\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u4e3a\u7eaf\u6587\u672c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e00\u4e2a\u4e13\u7528\u7f16\u8f91\u5668 Sublime Text \u6216 VS Code \u3002 \u8fd9\u5927\u6982\u662f\u8de8\u5e73\u53f0\u7684\u6700\u597d\u65b9\u6cd5\u4e86, \u8fd9\u4e9b\u7f16\u8f91\u5668\u662f\u4e13\u95e8\u4e3a\u4e86\u7f16\u8f91\u4ee3\u7801\u8bbe\u8ba1\u7684\u3002 Tip \u641e\u4e0d\u6e05\u7528\u54ea\u79cd\u7f16\u8f91\u5668? Laurence Bradford \u5199\u4e86\u7bc7\u5173\u4e8e\u7f16\u8f91\u5668\u9009\u62e9\u7684\u6587\u7ae0 a great introduction \u3002 QMK \u5de5\u5177\u7bb1 \u00b6 QMK \u5de5\u5177\u7bb1 \u662f\u4e00\u79cd\u53ef\u9009\u7684Windows\u548cmacOS\u4e0b\u7684\u56fe\u5f62\u5316\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5bf9\u4f60\u7684\u5b9a\u5236\u952e\u76d8\u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u5c31\u662f\u4f60\u80fd\u7b80\u5355\u7684\u5237\u65b0\u4f60\u7684\u952e\u76d8\u56fa\u4ef6\u5e76\u67e5\u770b\u8c03\u8bd5\u4fe1\u606f\u7684\u7a00\u4e16\u73cd\u5b9d\u3002 \u5728\u8fd9\u91cc\u4e0b\u8f7d\u6700\u65b0\u53d1\u5e03\u7248\u672c Windows\u7528\u6237: qmk_toolbox.exe (\u7eff\u8272\u7248) \u6216 qmk_toolbox_install.exe (\u5b89\u88c5\u7248) macOS\u7528\u6237: QMK.Toolbox.app.zip (\u7eff\u8272\u7248) or QMK.Toolbox.pkg (\u5b89\u88c5\u7248) \u5efa\u7acb\u4f60\u7684\u73af\u5883 \u00b6 \u6211\u4eec\u4e3a\u4e86\u4f7fQMK\u73af\u5883\u53d8\u5f97\u66f4\u5bb9\u6613\u5efa\u7acb\u5df2\u7aed\u5c3d\u6240\u80fd\u3002\u4f60\u53ea\u9700\u8981\u51c6\u5907Linux \u6216 Unix \u73af\u5883, \u7136\u540e\u8ba9QMK\u5b89\u88c5\u5269\u4f59\u90e8\u5206\u3002 Tip \u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7Linux/Unix\u7684\u547d\u4ee4\u884c,\u6709\u4e00\u4e9b\u4f60\u9700\u8981\u5b66\u4e60\u7684\u57fa\u7840\u6982\u5ff5\u548c\u547d\u4ee4\uff0c\u4ee5\u4e0b\u8d44\u6599\u5c06\u6559\u4f1a\u60a8\u4f7f\u7528QMK\u73af\u5883\u7684\u5fc5\u8981\u80fd\u529b: \u5fc5\u4f1aLinux\u547d\u4ee4 \u4e00\u4e9b\u57fa\u672c\u7684Unix\u547d\u4ee4 Windows \u00b6 \u4f60\u9700\u8981\u5b89\u88c5MSYS2\u548cGit. \u6309\u7167\u4ee5\u4e0b\u5b89\u88c5\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c MSYS2 \u4e3b\u9875 \u3002 \u5173\u95ed\u6240\u6709\u6253\u5f00\u7684MSYS2\u7ec8\u7aef\u5e76\u6253\u5f00\u65b0\u7684MSYS2 MinGW 64-bit\u7ec8\u7aef\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5Git: pacman -S git \u3002 macOS \u00b6 \u4f60\u9700\u8981\u5b89\u88c5Homebrew\u3002\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c Homebrew \u4e3b\u9875 \u3002 \u5728Homebrew\u5b89\u88c5\u5b8c\u6210\u540e, \u7ee7\u7eed \u540c\u6b65QMK\u5de5\u7a0b . \u8fd9\u4e00\u6b65\u4f60\u5c06\u4f1a\u901a\u8fc7\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u5b89\u88c5\u5176\u4ed6\u5305\u3002 Linux \u00b6 \u4f60\u5c06\u9700\u8981\u5b89\u88c5Git.\u4f60\u5f88\u6709\u53ef\u80fd\u5df2\u7ecf\u5b89\u88c5,\u4f46\u82e5\u4f60\u5c1a\u672a\u5b89\u88c5,\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fdb\u884c\u5b89\u88c5: Debian / Ubuntu / Devuan: apt-get install git Fedora / Red Hat / CentOS: yum install git Arch: pacman -S git Tip \u65e0\u8bba\u4f60\u4f7f\u7528\u54ea\u79cd\u5e73\u53f0\uff0cDocker\u90fd\u53ef\u4ee5\u662f\u4f60\u7684\u9009\u62e9 \u70b9\u8fd9\u91cc\u8fdb\u4e00\u6b65\u4e86\u89e3 \u540c\u6b65QMK\u5de5\u7a0b \u00b6 \u5f53\u4f60\u5efa\u7acbLinux/Unix\u73af\u5883\u540e,\u4f60\u5c31\u5df2\u7ecf\u53ef\u4ee5\u4e0b\u8f7dQMK\u4e86.\u4e0b\u8f7d\u65f6\u6211\u4eec\u53ef\u4ee5\u7528Git\u6765 \"clone\" QMK\u4ed3\u5e93. \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u6216MSYS2 MinGW \u7a97\u53e3\uff0c\u5728\u9605\u8bfb\u5269\u4f59\u7684\u6307\u5357\u65f6\u8bf7\u4fdd\u6301\u7a97\u53e3\u6253\u5f00\u3002\u5728\u7a97\u53e3\u91cc\u9762\u8fd0\u884c\u4ee5\u4e0b\u4e24\u53e5\u547d\u4ee4: git clone --recurse-submodules https://github.com/qmk/qmk_firmware.git cd qmk_firmware Tip \u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053 \u5982\u4f55\u4f7f\u7528GitHub , \u6211\u4eec\u63a8\u8350\u60a8\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u5206\u652f\u5e76\u514b\u9686\u3002 \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48, \u60a8\u5b8c\u5168\u53ef\u4ee5\u5ffd\u7565\u8fd9\u53e5\u65e0\u5173\u7d27\u8981\u7684\u8bdd\u3002 QMK\u9644\u5e26\u4e00\u4e2a\u811a\u672c\uff0c\u53ef\u5e2e\u52a9\u60a8\u8bbe\u7f6e\u5269\u4f59\u7684\u6240\u9700\u5185\u5bb9.\u60a8\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u6b64\u547d\u4ee4\u6765\u8fd0\u884c\u5b83: util/qmk_install.sh \u6d4b\u8bd5\u4f60\u7684\u5f00\u53d1\u73af\u5883 \u00b6 \u73b0\u5728\u4f60\u7684QMK\u73af\u5883\u5df2\u7ecf\u5efa\u7acb\u5b8c\u6bd5, \u4f60\u53ef\u4ee5\u4e3a\u4f60\u7684\u952e\u76d8\u521b\u5efa\u56fa\u4ef6\u4e86\u3002\u5f00\u59cb\u8bd5\u7740\u521b\u5efa\u952e\u76d8\u7684\u9ed8\u8ba4\u56fa\u4ef6\u5427\u3002 \u4f60\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u7684\u547d\u4ee4\u521b\u5efa\u56fa\u4ef6: make <keyboard>:default \u6bd4\u5982, \u5236\u4f5c\u4e00\u4e2aClueboard 66%\u7684\u56fa\u4ef6\uff0c\u9700\u8981\u7528: make clueboard/66/rev3:default \u5f53\u5b8c\u6210\u540e\u4f60\u8981\u770b\u5230\u4e00\u4e9b\u56de\u663e\uff0c\u5c3e\u90e8\u5982\u4e0b: Linking: .build/clueboard_66_rev3_default.elf [OK] Creating load file for flashing: .build/clueboard_66_rev3_default.hex [OK] Copying clueboard_66_rev3_default.hex to qmk_firmware folder [OK] Checking file size of clueboard_66_rev3_default.hex [OK] * The firmware size is fine - 26356/28672 (2316 bytes free) \u521b\u5efa\u4f60\u7684\u5e03\u5c40 \u00b6 \u73b0\u5728\u4f60\u53ef\u4ee5\u521b\u5efa\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684\u5e03\u5c40\u4e86! \u8bf7\u79fb\u6b65 \u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u6765\u7ee7\u7eed\u3002","title":"\u5b89\u88c5\u6784\u5efa\u5de5\u5177"},{"location":"tutorial_getting_started/#_1","text":"\u4f60\u7684\u7535\u8111\u952e\u76d8\u91cc\u9762\u5305\u542b\u4e00\u4e2a\u5904\u7406\u5668, \u8fd9\u4e2a\u5904\u7406\u5668\u548c\u4f60\u7535\u8111\u91cc\u9762\u7684\u4e0d\u592a\u4e00\u6837\u3002\u8fd9\u4e2a\u5904\u7406\u5668\u8d1f\u8d23\u8fd0\u884c\u4e00\u4e9b\u7279\u6b8a\u7684\u8f6f\u4ef6\uff0c\u8fd9\u4e9b\u8f6f\u4ef6\u53ef\u4ee5\u76d1\u6d4b\u6309\u94ae\u6309\u4e0b\u5e76\u5c06\u6309\u94ae\u5904\u4e8e\u6309\u4e0b\u8fd8\u662f\u91ca\u653e\u72b6\u6001\u7684\u6570\u636e\u53d1\u9001\u51fa\u53bb\u3002QMK\u5c31\u662f\u8fd9\u6837\u4e00\u79cd\u8f6f\u4ef6\uff0c\u5373\u76d1\u6d4b\u6309\u94ae\u88ab\u6309\u4e0b\u5e76\u53d1\u9001\u8fd9\u6837\u7684\u4fe1\u606f\u5230\u4f5c\u4e3a\u4e3b\u673a\u7684\u8ba1\u7b97\u673a\u4e0a\u3002\u5f53\u4f60\u521b\u5efa\u4e86\u4f60\u7684\u5e03\u5c40, \u4f60\u4e5f\u5c31\u521b\u5efa\u4e86\u4f60\u7684\u952e\u76d8\u8fd0\u884c\u7684\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\u3002 QMK\u8bd5\u56fe\u901a\u8fc7\u4f7f\u7b80\u5355\u7684\u4e8b\u60c5\u53d8\u5f97\u66f4\u7b80\u5355\uff0c\u4f7f\u4f7f\u4e0d\u53ef\u80fd\u6210\u4e3a\u53ef\u80fd\u6765\u628a\u5927\u91cf\u7684\u6743\u529b\u4ea4\u7ed9\u4f60\u3002\u4f60\u4e0d\u9700\u8981\u61c2\u5982\u4f55\u901a\u8fc7\u7a0b\u5e8f\u521b\u5efa\u5f3a\u5927\u7684\u5e03\u5c40\u2014\u2014\u4f60\u53ea\u9700\u8981\u9075\u5faa\u7b80\u5355\u7684\u8bed\u6cd5\u89c4\u5219\u3002","title":"\u4ecb\u7ecd"},{"location":"tutorial_getting_started/#_2","text":"\u5728\u4f60\u80fd\u521b\u5efa\u5e03\u5c40\u524d,\u4f60\u8981\u5b89\u88c5\u4e00\u4e9b\u8f6f\u4ef6\u6765\u5efa\u7acb\u4f60\u7684\u5f00\u53d1\u73af\u5883\u3002\u65e0\u8bba\u4f60\u60f3\u7f16\u8bd1\u591a\u5c11\u56fa\u4ef6\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u90fd\u53ea\u9700\u8981\u8fdb\u884c\u4e00\u6b21\u3002 \u5982\u679c\u60a8\u66f4\u559c\u6b22\u56fe\u5f62\u5316\u754c\u9762, \u8bf7\u8003\u8651\u4f7f\u7528\u5728\u7ebf\u5de5\u5177 QMK\u914d\u7f6e\u5668 \u3002 \u8bf7\u53c2\u8003 \u4f7f\u7528\u5728\u7ebfGUI\u6784\u5efa\u60a8\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u3002","title":"\u65b0\u624b\u4e0a\u8def"},{"location":"tutorial_getting_started/#_3","text":"","title":"\u4e0b\u8f7d\u8f6f\u4ef6"},{"location":"tutorial_getting_started/#_4","text":"\u4f60\u9700\u8981\u4e00\u4e2a\u53ef\u4ee5\u7f16\u8f91 \u7eaf\u6587\u672c \u6587\u4ef6\u7684\u7a0b\u5e8f\u3002\u5728Windows\u4e0a\u4f60\u53ef\u4ee5\u7528Notepad, \u5728Linux\u4e0a\u4f7f\u7528gedit\uff0c\u8fd9\u4e24\u4e2a\u90fd\u662f\u7b80\u5355\u53c8\u5b9e\u7528\u7684\u6587\u672c\u7f16\u8f91\u5de5\u5177\u3002 \u5728macOS\u4e0a, \u8bf7\u5c0f\u5fc3\u4f7f\u7528 \u201c\u6587\u672c\u7f16\u8f91\u201d \u8fd9\u4e2a\u9ed8\u8ba4\u8f6f\u4ef6: \u5982\u679c\u4f60\u4e0d\u660e\u786e\u7684\u9009\u62e9_\u683c\u5f0f_\u83dc\u5355\u4e2d\u7684 \u5236\u4f5c\u7eaf\u6587\u672c \u7684\u8bdd\u6587\u672c\u5c06\u4e0d\u4f1a\u88ab\u4fdd\u5b58\u4e3a\u7eaf\u6587\u672c\u3002 \u4f60\u4e5f\u53ef\u4ee5\u4e0b\u8f7d\u5e76\u5b89\u88c5\u4e00\u4e2a\u4e13\u7528\u7f16\u8f91\u5668 Sublime Text \u6216 VS Code \u3002 \u8fd9\u5927\u6982\u662f\u8de8\u5e73\u53f0\u7684\u6700\u597d\u65b9\u6cd5\u4e86, \u8fd9\u4e9b\u7f16\u8f91\u5668\u662f\u4e13\u95e8\u4e3a\u4e86\u7f16\u8f91\u4ee3\u7801\u8bbe\u8ba1\u7684\u3002 Tip \u641e\u4e0d\u6e05\u7528\u54ea\u79cd\u7f16\u8f91\u5668? Laurence Bradford \u5199\u4e86\u7bc7\u5173\u4e8e\u7f16\u8f91\u5668\u9009\u62e9\u7684\u6587\u7ae0 a great introduction \u3002","title":"\u6587\u672c\u7f16\u8f91\u5668"},{"location":"tutorial_getting_started/#qmk","text":"QMK \u5de5\u5177\u7bb1 \u662f\u4e00\u79cd\u53ef\u9009\u7684Windows\u548cmacOS\u4e0b\u7684\u56fe\u5f62\u5316\u5de5\u5177\uff0c\u5b83\u53ef\u4ee5\u5bf9\u4f60\u7684\u5b9a\u5236\u952e\u76d8\u8fdb\u884c\u7f16\u7a0b\u548c\u8c03\u8bd5\u3002\u4f60\u53ef\u80fd\u4f1a\u53d1\u73b0\u5b83\u5c31\u662f\u4f60\u80fd\u7b80\u5355\u7684\u5237\u65b0\u4f60\u7684\u952e\u76d8\u56fa\u4ef6\u5e76\u67e5\u770b\u8c03\u8bd5\u4fe1\u606f\u7684\u7a00\u4e16\u73cd\u5b9d\u3002 \u5728\u8fd9\u91cc\u4e0b\u8f7d\u6700\u65b0\u53d1\u5e03\u7248\u672c Windows\u7528\u6237: qmk_toolbox.exe (\u7eff\u8272\u7248) \u6216 qmk_toolbox_install.exe (\u5b89\u88c5\u7248) macOS\u7528\u6237: QMK.Toolbox.app.zip (\u7eff\u8272\u7248) or QMK.Toolbox.pkg (\u5b89\u88c5\u7248)","title":"QMK \u5de5\u5177\u7bb1"},{"location":"tutorial_getting_started/#_5","text":"\u6211\u4eec\u4e3a\u4e86\u4f7fQMK\u73af\u5883\u53d8\u5f97\u66f4\u5bb9\u6613\u5efa\u7acb\u5df2\u7aed\u5c3d\u6240\u80fd\u3002\u4f60\u53ea\u9700\u8981\u51c6\u5907Linux \u6216 Unix \u73af\u5883, \u7136\u540e\u8ba9QMK\u5b89\u88c5\u5269\u4f59\u90e8\u5206\u3002 Tip \u5982\u679c\u4f60\u4ece\u672a\u4f7f\u7528\u8fc7Linux/Unix\u7684\u547d\u4ee4\u884c,\u6709\u4e00\u4e9b\u4f60\u9700\u8981\u5b66\u4e60\u7684\u57fa\u7840\u6982\u5ff5\u548c\u547d\u4ee4\uff0c\u4ee5\u4e0b\u8d44\u6599\u5c06\u6559\u4f1a\u60a8\u4f7f\u7528QMK\u73af\u5883\u7684\u5fc5\u8981\u80fd\u529b: \u5fc5\u4f1aLinux\u547d\u4ee4 \u4e00\u4e9b\u57fa\u672c\u7684Unix\u547d\u4ee4","title":"\u5efa\u7acb\u4f60\u7684\u73af\u5883"},{"location":"tutorial_getting_started/#windows","text":"\u4f60\u9700\u8981\u5b89\u88c5MSYS2\u548cGit. \u6309\u7167\u4ee5\u4e0b\u5b89\u88c5\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c MSYS2 \u4e3b\u9875 \u3002 \u5173\u95ed\u6240\u6709\u6253\u5f00\u7684MSYS2\u7ec8\u7aef\u5e76\u6253\u5f00\u65b0\u7684MSYS2 MinGW 64-bit\u7ec8\u7aef\u3002 \u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5Git: pacman -S git \u3002","title":"Windows"},{"location":"tutorial_getting_started/#macos","text":"\u4f60\u9700\u8981\u5b89\u88c5Homebrew\u3002\u6309\u7167\u4ee5\u4e0b\u8bf4\u660e\u8fdb\u884c\u64cd\u4f5c Homebrew \u4e3b\u9875 \u3002 \u5728Homebrew\u5b89\u88c5\u5b8c\u6210\u540e, \u7ee7\u7eed \u540c\u6b65QMK\u5de5\u7a0b . \u8fd9\u4e00\u6b65\u4f60\u5c06\u4f1a\u901a\u8fc7\u8fd0\u884c\u4e00\u4e2a\u811a\u672c\u5b89\u88c5\u5176\u4ed6\u5305\u3002","title":"macOS"},{"location":"tutorial_getting_started/#linux","text":"\u4f60\u5c06\u9700\u8981\u5b89\u88c5Git.\u4f60\u5f88\u6709\u53ef\u80fd\u5df2\u7ecf\u5b89\u88c5,\u4f46\u82e5\u4f60\u5c1a\u672a\u5b89\u88c5,\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u8fdb\u884c\u5b89\u88c5: Debian / Ubuntu / Devuan: apt-get install git Fedora / Red Hat / CentOS: yum install git Arch: pacman -S git Tip \u65e0\u8bba\u4f60\u4f7f\u7528\u54ea\u79cd\u5e73\u53f0\uff0cDocker\u90fd\u53ef\u4ee5\u662f\u4f60\u7684\u9009\u62e9 \u70b9\u8fd9\u91cc\u8fdb\u4e00\u6b65\u4e86\u89e3","title":"Linux"},{"location":"tutorial_getting_started/#qmk_1","text":"\u5f53\u4f60\u5efa\u7acbLinux/Unix\u73af\u5883\u540e,\u4f60\u5c31\u5df2\u7ecf\u53ef\u4ee5\u4e0b\u8f7dQMK\u4e86.\u4e0b\u8f7d\u65f6\u6211\u4eec\u53ef\u4ee5\u7528Git\u6765 \"clone\" QMK\u4ed3\u5e93. \u6253\u5f00\u4e00\u4e2a\u7ec8\u7aef\u6216MSYS2 MinGW \u7a97\u53e3\uff0c\u5728\u9605\u8bfb\u5269\u4f59\u7684\u6307\u5357\u65f6\u8bf7\u4fdd\u6301\u7a97\u53e3\u6253\u5f00\u3002\u5728\u7a97\u53e3\u91cc\u9762\u8fd0\u884c\u4ee5\u4e0b\u4e24\u53e5\u547d\u4ee4: git clone --recurse-submodules https://github.com/qmk/qmk_firmware.git cd qmk_firmware Tip \u5982\u679c\u60a8\u5df2\u7ecf\u77e5\u9053 \u5982\u4f55\u4f7f\u7528GitHub , \u6211\u4eec\u63a8\u8350\u60a8\u521b\u5efa\u60a8\u81ea\u5df1\u7684\u5206\u652f\u5e76\u514b\u9686\u3002 \u5982\u679c\u60a8\u4e0d\u77e5\u9053\u8fd9\u662f\u4ec0\u4e48, \u60a8\u5b8c\u5168\u53ef\u4ee5\u5ffd\u7565\u8fd9\u53e5\u65e0\u5173\u7d27\u8981\u7684\u8bdd\u3002 QMK\u9644\u5e26\u4e00\u4e2a\u811a\u672c\uff0c\u53ef\u5e2e\u52a9\u60a8\u8bbe\u7f6e\u5269\u4f59\u7684\u6240\u9700\u5185\u5bb9.\u60a8\u53ef\u4ee5\u901a\u8fc7\u8f93\u5165\u6b64\u547d\u4ee4\u6765\u8fd0\u884c\u5b83: util/qmk_install.sh","title":"\u540c\u6b65QMK\u5de5\u7a0b"},{"location":"tutorial_getting_started/#_6","text":"\u73b0\u5728\u4f60\u7684QMK\u73af\u5883\u5df2\u7ecf\u5efa\u7acb\u5b8c\u6bd5, \u4f60\u53ef\u4ee5\u4e3a\u4f60\u7684\u952e\u76d8\u521b\u5efa\u56fa\u4ef6\u4e86\u3002\u5f00\u59cb\u8bd5\u7740\u521b\u5efa\u952e\u76d8\u7684\u9ed8\u8ba4\u56fa\u4ef6\u5427\u3002 \u4f60\u9700\u8981\u4f7f\u7528\u4ee5\u4e0b\u683c\u5f0f\u7684\u547d\u4ee4\u521b\u5efa\u56fa\u4ef6: make <keyboard>:default \u6bd4\u5982, \u5236\u4f5c\u4e00\u4e2aClueboard 66%\u7684\u56fa\u4ef6\uff0c\u9700\u8981\u7528: make clueboard/66/rev3:default \u5f53\u5b8c\u6210\u540e\u4f60\u8981\u770b\u5230\u4e00\u4e9b\u56de\u663e\uff0c\u5c3e\u90e8\u5982\u4e0b: Linking: .build/clueboard_66_rev3_default.elf [OK] Creating load file for flashing: .build/clueboard_66_rev3_default.hex [OK] Copying clueboard_66_rev3_default.hex to qmk_firmware folder [OK] Checking file size of clueboard_66_rev3_default.hex [OK] * The firmware size is fine - 26356/28672 (2316 bytes free)","title":"\u6d4b\u8bd5\u4f60\u7684\u5f00\u53d1\u73af\u5883"},{"location":"tutorial_getting_started/#_7","text":"\u73b0\u5728\u4f60\u53ef\u4ee5\u521b\u5efa\u5c5e\u4e8e\u4f60\u81ea\u5df1\u7684\u5e03\u5c40\u4e86! \u8bf7\u79fb\u6b65 \u6784\u5efa\u4f60\u7684\u7b2c\u4e00\u4e2a\u56fa\u4ef6 \u6765\u7ee7\u7eed\u3002","title":"\u521b\u5efa\u4f60\u7684\u5e03\u5c40"},{"location":"tutorial_git_best_practices/","text":"Best Git Practices for Working with QMK \u00b6 Or, \"How I Learned to Stop Worrying and Love Git.\" \u00b6 This section aims to instruct novices in the best ways to have a smooth experience in contributing to QMK. We will walk through the process of contributing to QMK, detailing some ways to make this task easier, and then later we'll break some things in order to teach you how to fix them. This section assumes a few things: You have a GitHub account, and have forked the qmk_firmware repository to your account. You've set up both your build environment and QMK . Part 1: Your Fork's Master: Update Often, Commit Never Part 2: Resolving Merge Conflicts Part 3: Resynchronizing an Out-of-Sync Git Branch","title":"Best Git Practices for Working with QMK"},{"location":"tutorial_git_best_practices/#best-git-practices-for-working-with-qmk","text":"","title":"Best Git Practices for Working with QMK"},{"location":"tutorial_git_best_practices/#or-how-i-learned-to-stop-worrying-and-love-git","text":"This section aims to instruct novices in the best ways to have a smooth experience in contributing to QMK. We will walk through the process of contributing to QMK, detailing some ways to make this task easier, and then later we'll break some things in order to teach you how to fix them. This section assumes a few things: You have a GitHub account, and have forked the qmk_firmware repository to your account. You've set up both your build environment and QMK . Part 1: Your Fork's Master: Update Often, Commit Never Part 2: Resolving Merge Conflicts Part 3: Resynchronizing an Out-of-Sync Git Branch","title":"Or, \"How I Learned to Stop Worrying and Love Git.\""},{"location":"tutorial_git_resolving_merge_conflicts/","text":"Resolving Merge Conflicts \u00b6 Sometimes when your work in a branch takes a long time to complete, changes that have been made by others conflict with changes you have made to your branch when you open a pull request. This is called a merge conflict , and is what happens when multiple people edit the same parts of the same files. Note This document builds upon the concepts detailed in Your Fork's Master: Update Often, Commit Never . If you are not familiar with that document, please read it first, then return here. Rebasing Your Changes \u00b6 A rebase is Git's way of taking changes that were applied at one point in the commit history, reversing them, and then applying the same changes at another point. In the case of a merge conflict, you can rebase your branch to grab the changes that were made between when you created your branch and the present time. To start, run the following: git fetch upstream git rev-list --left-right --count HEAD...upstream/master The git rev-list command entered here returns the number of commits that differ between the current branch and QMK's master branch. We run git fetch first to make sure we have the refs that represent the current state of the upstream repo. The output of the git rev-list command entered returns two numbers: $ git rev-list --left-right --count HEAD...upstream/master 7 35 The first number represents the number of commits on the current branch since it was created, and the second number is the number of commits made to upstream/master since the current branch was created, and thus, the changes that are not recorded in the current branch. Now that the current states of both the current branch and the upstream repo are known, we can start a rebase operation: git rebase upstream/master This tells Git to undo the commits on the current branch, and then reapply them against QMK's master branch. $ git rebase upstream/master First, rewinding head to replay your work on top of it... Applying: Commit #1 Using index info to reconstruct a base tree... M conflicting_file_1.txt Falling back to patching base and 3-way merge... Auto-merging conflicting_file_1.txt CONFLICT (content): Merge conflict in conflicting_file_1.txt error: Failed to merge in the changes. hint: Use 'git am --show-current-patch' to see the failed patch Patch failed at 0001 Commit #1 Resolve all conflicts manually, mark them as resolved with \"git add/rm <conflicted_files>\", then run \"git rebase --continue\". You can instead skip this commit: run \"git rebase --skip\". To abort and get back to the state before \"git rebase\", run \"git rebase --abort\". This tells us that we have a merge conflict, and gives the name of the file with the conflict. Open the conflicting file in your text editor, and somewhere in the file, you'll find something like this: <<<<<<< HEAD <p>For help with any issues, email us at support@webhost.us.</p> ======= <p>Need help? Email support@webhost.us.</p> >>>>>>> Commit #1 The line <<<<<<< HEAD marks the beginning of a merge conflict, and the >>>>>>> Commit #1 line marks the end, with the conflicting sections separated by ======= . The part on the HEAD side is from the QMK master version of the file, and the part marked with the commit message is from the current branch and commit. Because Git tracks changes to files rather than the contents of the files directly, if Git can't find the text that was in the file previous to the commit that was made, it won't know how to edit the file. Re-editing the file will solve the conflict. Make your changes, and then save the file. <p>Need help? Email support@webhost.us.</p> Now run: git add conflicting_file_1.txt git rebase --continue Git logs the changes to the conflicting file, and continues applying the commits from our branch until it reaches the end.","title":"\u89e3\u51b3\u5408\u5e76\u51b2\u7a81"},{"location":"tutorial_git_resolving_merge_conflicts/#resolving-merge-conflicts","text":"Sometimes when your work in a branch takes a long time to complete, changes that have been made by others conflict with changes you have made to your branch when you open a pull request. This is called a merge conflict , and is what happens when multiple people edit the same parts of the same files. Note This document builds upon the concepts detailed in Your Fork's Master: Update Often, Commit Never . If you are not familiar with that document, please read it first, then return here.","title":"Resolving Merge Conflicts"},{"location":"tutorial_git_resolving_merge_conflicts/#rebasing-your-changes","text":"A rebase is Git's way of taking changes that were applied at one point in the commit history, reversing them, and then applying the same changes at another point. In the case of a merge conflict, you can rebase your branch to grab the changes that were made between when you created your branch and the present time. To start, run the following: git fetch upstream git rev-list --left-right --count HEAD...upstream/master The git rev-list command entered here returns the number of commits that differ between the current branch and QMK's master branch. We run git fetch first to make sure we have the refs that represent the current state of the upstream repo. The output of the git rev-list command entered returns two numbers: $ git rev-list --left-right --count HEAD...upstream/master 7 35 The first number represents the number of commits on the current branch since it was created, and the second number is the number of commits made to upstream/master since the current branch was created, and thus, the changes that are not recorded in the current branch. Now that the current states of both the current branch and the upstream repo are known, we can start a rebase operation: git rebase upstream/master This tells Git to undo the commits on the current branch, and then reapply them against QMK's master branch. $ git rebase upstream/master First, rewinding head to replay your work on top of it... Applying: Commit #1 Using index info to reconstruct a base tree... M conflicting_file_1.txt Falling back to patching base and 3-way merge... Auto-merging conflicting_file_1.txt CONFLICT (content): Merge conflict in conflicting_file_1.txt error: Failed to merge in the changes. hint: Use 'git am --show-current-patch' to see the failed patch Patch failed at 0001 Commit #1 Resolve all conflicts manually, mark them as resolved with \"git add/rm <conflicted_files>\", then run \"git rebase --continue\". You can instead skip this commit: run \"git rebase --skip\". To abort and get back to the state before \"git rebase\", run \"git rebase --abort\". This tells us that we have a merge conflict, and gives the name of the file with the conflict. Open the conflicting file in your text editor, and somewhere in the file, you'll find something like this: <<<<<<< HEAD <p>For help with any issues, email us at support@webhost.us.</p> ======= <p>Need help? Email support@webhost.us.</p> >>>>>>> Commit #1 The line <<<<<<< HEAD marks the beginning of a merge conflict, and the >>>>>>> Commit #1 line marks the end, with the conflicting sections separated by ======= . The part on the HEAD side is from the QMK master version of the file, and the part marked with the commit message is from the current branch and commit. Because Git tracks changes to files rather than the contents of the files directly, if Git can't find the text that was in the file previous to the commit that was made, it won't know how to edit the file. Re-editing the file will solve the conflict. Make your changes, and then save the file. <p>Need help? Email support@webhost.us.</p> Now run: git add conflicting_file_1.txt git rebase --continue Git logs the changes to the conflicting file, and continues applying the commits from our branch until it reaches the end.","title":"Rebasing Your Changes"},{"location":"tutorial_git_resynchronize_a_branch/","text":"Resynchronizing an Out-of-Sync Git Branch \u00b6 Suppose you have committed to your master branch, and now need to update your QMK repository. You could git pull QMK's master branch into your own, but GitHub will tell you that your branch is a number of commits ahead of qmk:master , which can create issues if you want to make a pull request to QMK. Note This document builds upon the concepts detailed in Your Fork's Master: Update Often, Commit Never . If you are not familiar with that document, please read it first, then return here. Backing Up the Changes on Your Own Master Branch (Optional) \u00b6 No one wants to lose work if it can be helped. If you want to save the changes you've already made to your master branch, the simplest way to do so is to simply create a duplicate of your \"dirty\" master branch: git branch old_master master Now you have a branch named old_master that is a duplicate of your master branch. Resynchronizing Your Branch \u00b6 Now it's time to resynchronize your master branch. For this step, you'll want to have QMK's repository configured as a remote in Git. To check your configured remotes, run git remote -v , which should return something similar to: QMKuser ~/qmk_firmware ( master ) $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git ( fetch ) origin https://github.com/<your_username>/qmk_firmware.git ( push ) upstream https://github.com/qmk/qmk_firmware.git ( fetch ) upstream https://github.com/qmk/qmk_firmware.git ( push ) If you only see one fork referenced: QMKuser ~/qmk_firmware ( master ) $ git remote -v origin https://github.com/qmk/qmk_firmware.git ( fetch ) origin https://github.com/qmk/qmk_firmware.git ( push ) add a new remote with: git remote add upstream https://github.com/qmk/qmk_firmware.git Then, redirect the origin remote to your own fork with: git remote set-url origin https://github.com/<your_username>/qmk_firmware.git Now that you have both remotes configured, you need to update the references for the upstream repository, which is QMK's, by running: git fetch upstream At this point, resynchronize your branch to QMK's by running: git reset --hard upstream/master These steps will update the repository on your computer, but your GitHub fork will still be out of sync. To resynchronize your fork on GitHub, you need to push to your fork, instructing Git to override any remote changes that are not reflected in your local repository. To do this, run: git push --force-with-lease Danger DO NOT run git push --force-with-lease on a fork to which other users post commits. This will erase their commits. Now your GitHub fork, your local files, and QMK's repository are all the same. From here you can make further needed changes ( use a branch! ) and post them as normal.","title":"\u91cd\u65b0\u540c\u6b65\u4e00\u4e2a\u5206\u652f"},{"location":"tutorial_git_resynchronize_a_branch/#resynchronizing-an-out-of-sync-git-branch","text":"Suppose you have committed to your master branch, and now need to update your QMK repository. You could git pull QMK's master branch into your own, but GitHub will tell you that your branch is a number of commits ahead of qmk:master , which can create issues if you want to make a pull request to QMK. Note This document builds upon the concepts detailed in Your Fork's Master: Update Often, Commit Never . If you are not familiar with that document, please read it first, then return here.","title":"Resynchronizing an Out-of-Sync Git Branch"},{"location":"tutorial_git_resynchronize_a_branch/#backing-up-the-changes-on-your-own-master-branch-optional","text":"No one wants to lose work if it can be helped. If you want to save the changes you've already made to your master branch, the simplest way to do so is to simply create a duplicate of your \"dirty\" master branch: git branch old_master master Now you have a branch named old_master that is a duplicate of your master branch.","title":"Backing Up the Changes on Your Own Master Branch (Optional)"},{"location":"tutorial_git_resynchronize_a_branch/#resynchronizing-your-branch","text":"Now it's time to resynchronize your master branch. For this step, you'll want to have QMK's repository configured as a remote in Git. To check your configured remotes, run git remote -v , which should return something similar to: QMKuser ~/qmk_firmware ( master ) $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git ( fetch ) origin https://github.com/<your_username>/qmk_firmware.git ( push ) upstream https://github.com/qmk/qmk_firmware.git ( fetch ) upstream https://github.com/qmk/qmk_firmware.git ( push ) If you only see one fork referenced: QMKuser ~/qmk_firmware ( master ) $ git remote -v origin https://github.com/qmk/qmk_firmware.git ( fetch ) origin https://github.com/qmk/qmk_firmware.git ( push ) add a new remote with: git remote add upstream https://github.com/qmk/qmk_firmware.git Then, redirect the origin remote to your own fork with: git remote set-url origin https://github.com/<your_username>/qmk_firmware.git Now that you have both remotes configured, you need to update the references for the upstream repository, which is QMK's, by running: git fetch upstream At this point, resynchronize your branch to QMK's by running: git reset --hard upstream/master These steps will update the repository on your computer, but your GitHub fork will still be out of sync. To resynchronize your fork on GitHub, you need to push to your fork, instructing Git to override any remote changes that are not reflected in your local repository. To do this, run: git push --force-with-lease Danger DO NOT run git push --force-with-lease on a fork to which other users post commits. This will erase their commits. Now your GitHub fork, your local files, and QMK's repository are all the same. From here you can make further needed changes ( use a branch! ) and post them as normal.","title":"Resynchronizing Your Branch"},{"location":"tutorial_git_using_your_master_branch/","text":"Your Fork's Master: Update Often, Commit Never \u00b6 It is highly recommended for QMK development, regardless of what is being done or where, to keep your master branch updated, but never commit to it. Instead, do all your changes in a development branch and issue pull requests from your branches when you're developing. To reduce the chances of merge conflicts \u2014 instances where two or more users have edited the same part of a file concurrently \u2014 keep your master branch relatively up-to-date, and start any new developments by creating a new branch. Updating your master branch \u00b6 To keep your master branch updated, it is recommended to add the QMK Firmware repository (\"repo\") as a remote repository in git. To do this, open your Git command line interface and enter: git remote add upstream https://github.com/qmk/qmk_firmware.git Tip The name upstream is arbitrary, but a common convention; you can give the QMK remote any name that suits you. Git's remote command uses the syntax git remote add <name> <url> , <name> being shorthand for the remote repo. This name can be used with many Git commands, including but not limited to fetch , pull and push , to specify the remote repo on which to act. To verify that the repository has been added, run git remote -v , which should return the following: $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git (fetch) origin https://github.com/<your_username>/qmk_firmware.git (push) upstream https://github.com/qmk/qmk_firmware.git (fetch) upstream https://github.com/qmk/qmk_firmware.git (push) Now that this is done, you can check for updates to the repo by running git fetch upstream . This retrieves the branches and tags \u2014 collectively referred to as \"refs\" \u2014 from the QMK repo, which now has the nickname upstream . We can now compare the data on our fork origin to that held by QMK. To update your fork's master, run the following, hitting the Enter key after each line: git checkout master git fetch upstream git pull upstream master git push origin master This switches you to your master branch, retrieves the refs from the QMK repo, downloads the current QMK master branch to your computer, and then uploads it to your fork. Making Changes \u00b6 To make changes, create a new branch by entering: git checkout -b dev_branch git push --set-upstream origin dev_branch This creates a new branch named dev_branch , checks it out, and then saves the new branch to your fork. The --set-upstream argument tells git to use your fork and the dev_branch branch every time you use git push or git pull from this branch. It only needs to be used on the first push; after that, you can safely use git push or git pull , without the rest of the arguments. Tip With git push , you can use -u in place of --set-upstream \u2014 -u is an alias for --set-upstream . You can name your branch nearly anything you want, though it is recommended to name it something related to the changes you are going to make. By default git checkout -b will base your new branch on the branch that is currently checked out. You can base your new branch on an existing branch that is not checked out by adding the name of the existing branch to the command: git checkout -b dev_branch master Now that you have a development branch, open your text editor and make whatever changes you need to make. It is recommended to make many small commits to your branch; that way, any change that causes issues can be more easily traced and undone if needed. To make your changes, edit and save any files that need to be updated, add them to Git's staging area , and then commit them to your branch: git add path/to/updated_file git commit -m \"My commit message.\" git add adds files that have been changed to Git's staging area , which is Git's \"loading zone.\" This contains the changes that are going to be committed by git commit , which saves the changes to the repo. Use descriptive commit messages so you can know what was changed at a glance. Tip If you've changed multiple files, you can use git add -- path/to/file1 path/to/file2 ... to add all your desired files. Publishing Your Changes \u00b6 The last step is to push your changes to your fork. To do this, enter git push . Git will then publish the current state of dev_branch to your fork.","title":"\u4f7f\u7528\u4f60\u5206\u53c9(fork)\u7684\u4e3b\u5206\u652f(master)"},{"location":"tutorial_git_using_your_master_branch/#your-forks-master-update-often-commit-never","text":"It is highly recommended for QMK development, regardless of what is being done or where, to keep your master branch updated, but never commit to it. Instead, do all your changes in a development branch and issue pull requests from your branches when you're developing. To reduce the chances of merge conflicts \u2014 instances where two or more users have edited the same part of a file concurrently \u2014 keep your master branch relatively up-to-date, and start any new developments by creating a new branch.","title":"Your Fork's Master: Update Often, Commit Never"},{"location":"tutorial_git_using_your_master_branch/#updating-your-master-branch","text":"To keep your master branch updated, it is recommended to add the QMK Firmware repository (\"repo\") as a remote repository in git. To do this, open your Git command line interface and enter: git remote add upstream https://github.com/qmk/qmk_firmware.git Tip The name upstream is arbitrary, but a common convention; you can give the QMK remote any name that suits you. Git's remote command uses the syntax git remote add <name> <url> , <name> being shorthand for the remote repo. This name can be used with many Git commands, including but not limited to fetch , pull and push , to specify the remote repo on which to act. To verify that the repository has been added, run git remote -v , which should return the following: $ git remote -v origin https://github.com/<your_username>/qmk_firmware.git (fetch) origin https://github.com/<your_username>/qmk_firmware.git (push) upstream https://github.com/qmk/qmk_firmware.git (fetch) upstream https://github.com/qmk/qmk_firmware.git (push) Now that this is done, you can check for updates to the repo by running git fetch upstream . This retrieves the branches and tags \u2014 collectively referred to as \"refs\" \u2014 from the QMK repo, which now has the nickname upstream . We can now compare the data on our fork origin to that held by QMK. To update your fork's master, run the following, hitting the Enter key after each line: git checkout master git fetch upstream git pull upstream master git push origin master This switches you to your master branch, retrieves the refs from the QMK repo, downloads the current QMK master branch to your computer, and then uploads it to your fork.","title":"Updating your master branch"},{"location":"tutorial_git_using_your_master_branch/#making-changes","text":"To make changes, create a new branch by entering: git checkout -b dev_branch git push --set-upstream origin dev_branch This creates a new branch named dev_branch , checks it out, and then saves the new branch to your fork. The --set-upstream argument tells git to use your fork and the dev_branch branch every time you use git push or git pull from this branch. It only needs to be used on the first push; after that, you can safely use git push or git pull , without the rest of the arguments. Tip With git push , you can use -u in place of --set-upstream \u2014 -u is an alias for --set-upstream . You can name your branch nearly anything you want, though it is recommended to name it something related to the changes you are going to make. By default git checkout -b will base your new branch on the branch that is currently checked out. You can base your new branch on an existing branch that is not checked out by adding the name of the existing branch to the command: git checkout -b dev_branch master Now that you have a development branch, open your text editor and make whatever changes you need to make. It is recommended to make many small commits to your branch; that way, any change that causes issues can be more easily traced and undone if needed. To make your changes, edit and save any files that need to be updated, add them to Git's staging area , and then commit them to your branch: git add path/to/updated_file git commit -m \"My commit message.\" git add adds files that have been changed to Git's staging area , which is Git's \"loading zone.\" This contains the changes that are going to be committed by git commit , which saves the changes to the repo. Use descriptive commit messages so you can know what was changed at a glance. Tip If you've changed multiple files, you can use git add -- path/to/file1 path/to/file2 ... to add all your desired files.","title":"Making Changes"},{"location":"tutorial_git_using_your_master_branch/#publishing-your-changes","text":"The last step is to push your changes to your fork. To do this, enter git push . Git will then publish the current state of dev_branch to your fork.","title":"Publishing Your Changes"},{"location":"tutorial_learn_more_resources/","text":"\u5b66\u4e60\u8d44\u6e90 \u00b6 \u8fd9\u4e9b\u8d44\u6e90\u65e8\u5728\u8ba9QMK\u793e\u533a\u7684\u65b0\u6210\u5458\u66f4\u4e86\u89e3\u65b0\u6210\u5458\u6587\u6863\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u3002 Git \u8d44\u6e90: \u5f88\u597d\u7684\u901a\u7528\u6559\u7a0b \u4ece\u4f8b\u5b50\u4e2d\u5b66\u4e60Git\u6e38\u620f \u4e86\u89e3\u6709\u5173GitHub\u7684\u66f4\u591a\u4fe1\u606f\u7684Git\u8d44\u6e90 \u4e13\u95e8\u9488\u5bf9QMK\u7684Git\u8d44\u6e90 \u547d\u4ee4\u884c\u8d44\u6e90: \u8d85\u68d2\u7684\u547d\u4ee4\u884c\u901a\u7528\u6559\u7a0b","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"tutorial_learn_more_resources/#_1","text":"\u8fd9\u4e9b\u8d44\u6e90\u65e8\u5728\u8ba9QMK\u793e\u533a\u7684\u65b0\u6210\u5458\u66f4\u4e86\u89e3\u65b0\u6210\u5458\u6587\u6863\u4e2d\u63d0\u4f9b\u7684\u4fe1\u606f\u3002 Git \u8d44\u6e90: \u5f88\u597d\u7684\u901a\u7528\u6559\u7a0b \u4ece\u4f8b\u5b50\u4e2d\u5b66\u4e60Git\u6e38\u620f \u4e86\u89e3\u6709\u5173GitHub\u7684\u66f4\u591a\u4fe1\u606f\u7684Git\u8d44\u6e90 \u4e13\u95e8\u9488\u5bf9QMK\u7684Git\u8d44\u6e90 \u547d\u4ee4\u884c\u8d44\u6e90: \u8d85\u68d2\u7684\u547d\u4ee4\u884c\u901a\u7528\u6559\u7a0b","title":"\u5b66\u4e60\u8d44\u6e90"},{"location":"tutorial_testing_debugging/","text":"\u6d4b\u8bd5\u548c\u8c03\u8bd5 \u00b6 \u4f7f\u7528\u81ea\u5b9a\u4e49\u56fa\u4ef6\u5237\u65b0\u952e\u76d8\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u5b83\u4e86\u3002\u5982\u679c\u60a8\u5e78\u8fd0\uff0c\u4e00\u5207\u90fd\u4f1a\u5b8c\u7f8e\u8fd0\u884c\uff0c\u4f46\u5982\u679c\u6ca1\u6709\uff0c\u8fd9\u4efd\u6587\u4ef6\u5c06\u5e2e\u52a9\u60a8\u627e\u51fa\u95ee\u9898\u6240\u5728\u3002 \u6d4b\u8bd5 \u00b6 \u6d4b\u8bd5\u952e\u76d8\u901a\u5e38\u975e\u5e38\u7b80\u5355\u3002\u6309\u4e0b\u6bcf\u4e00\u4e2a\u952e\u5e76\u786e\u4fdd\u5b83\u53d1\u9001\u7684\u662f\u60a8\u671f\u671b\u7684\u952e\u3002\u751a\u81f3\u6709\u4e00\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u4fdd\u6ca1\u6709\u4efb\u4f55\u952e\u5931\u6548\u3002 \u6ce8\u610f\uff1a\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u662f\u7531QMK\u63d0\u4f9b\u6216\u8ba4\u53ef\u7684\u3002 QMK Configurator (\u7f51\u9875\u7248) Switch Hitter (\u4ec5Windows) Keyboard Viewer (\u4ec5Mac) Keyboard Tester (\u7f51\u9875\u7248) Keyboard Checker (\u7f51\u9875\u7248) \u4f7f\u7528QMK\u5de5\u5177\u7bb1\u8fdb\u884c\u8c03\u8bd5 \u00b6 QMK\u5de5\u5177\u7bb1 \u5c06\u4f1a\u5728\u4f60\u7684 rules.mk \u4e2d\u6709 CONSOLE_ENABLE = yes \u7684\u65f6\u5019\u663e\u793a\u4f60\u952e\u76d8\u53d1\u6765\u7684\u6d88\u606f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8f93\u51fa\u6781\u4e3a\u6709\u9650\uff0c\u4e0d\u8fc7\u60a8\u53ef\u4ee5\u6253\u5f00\u8c03\u8bd5\u6a21\u5f0f\u6765\u589e\u52a0\u8f93\u51fa\u4fe1\u606f\u91cf\u3002\u4f7f\u7528\u4f60\u952e\u76d8\u5e03\u5c40\u4e2d\u7684 DEBUG \u952e\u7801,\u4f7f\u7528 \u547d\u4ee4 \u7279\u6027\u6765\u4f7f\u80fd\u8c03\u8bd5\u6a21\u5f0f, \u6216\u8005\u5411\u4f60\u7684\u5e03\u5c40\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u3002 void keyboard_post_init_user ( void ) { // Customise these values to desired behaviour debug_enable = true ; debug_matrix = true ; //debug_keyboard=true; //debug_mouse=true; } \u53d1\u9001\u60a8\u81ea\u5df1\u7684\u8c03\u8bd5\u6d88\u606f \u00b6 \u6709\u65f6\u7528 custom code \u53d1\u9001\u81ea\u5b9a\u4e49\u8c03\u8bd5\u4fe1\u606f\u5f88\u6709\u7528. \u8fd9\u4e48\u505a\u5f88\u7b80\u5355. \u9996\u5148\u5728\u4f60\u6587\u4ef6\u5934\u90e8\u5305\u542b print.h : #include \"print.h\" \u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4e0d\u540c\u7684\u6253\u5370\u529f\u80fd: print(\"string\") : \u6253\u5370\u7b80\u5355\u5b57\u7b26\u4e32. uprintf(\"%s string\", var) : \u6253\u5370\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 dprint(\"string\") : \u4ec5\u5728\u8c03\u8bd5\u6a21\u5f0f\u4f7f\u80fd\u65f6\u6253\u5370\u7b80\u5355\u5b57\u7b26\u4e32 dprintf(\"%s string\", var) : \u4ec5\u5728\u8c03\u8bd5\u6a21\u5f0f\u4f7f\u80fd\u65f6\u6253\u5370\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","title":"\u6d4b\u8bd5\u548c\u8c03\u8bd5"},{"location":"tutorial_testing_debugging/#_1","text":"\u4f7f\u7528\u81ea\u5b9a\u4e49\u56fa\u4ef6\u5237\u65b0\u952e\u76d8\u540e\uff0c\u60a8\u5c31\u53ef\u4ee5\u6d4b\u8bd5\u5b83\u4e86\u3002\u5982\u679c\u60a8\u5e78\u8fd0\uff0c\u4e00\u5207\u90fd\u4f1a\u5b8c\u7f8e\u8fd0\u884c\uff0c\u4f46\u5982\u679c\u6ca1\u6709\uff0c\u8fd9\u4efd\u6587\u4ef6\u5c06\u5e2e\u52a9\u60a8\u627e\u51fa\u95ee\u9898\u6240\u5728\u3002","title":"\u6d4b\u8bd5\u548c\u8c03\u8bd5"},{"location":"tutorial_testing_debugging/#_2","text":"\u6d4b\u8bd5\u952e\u76d8\u901a\u5e38\u975e\u5e38\u7b80\u5355\u3002\u6309\u4e0b\u6bcf\u4e00\u4e2a\u952e\u5e76\u786e\u4fdd\u5b83\u53d1\u9001\u7684\u662f\u60a8\u671f\u671b\u7684\u952e\u3002\u751a\u81f3\u6709\u4e00\u4e9b\u7a0b\u5e8f\u53ef\u4ee5\u5e2e\u52a9\u60a8\u786e\u4fdd\u6ca1\u6709\u4efb\u4f55\u952e\u5931\u6548\u3002 \u6ce8\u610f\uff1a\u8fd9\u4e9b\u7a0b\u5e8f\u4e0d\u662f\u7531QMK\u63d0\u4f9b\u6216\u8ba4\u53ef\u7684\u3002 QMK Configurator (\u7f51\u9875\u7248) Switch Hitter (\u4ec5Windows) Keyboard Viewer (\u4ec5Mac) Keyboard Tester (\u7f51\u9875\u7248) Keyboard Checker (\u7f51\u9875\u7248)","title":"\u6d4b\u8bd5"},{"location":"tutorial_testing_debugging/#qmk","text":"QMK\u5de5\u5177\u7bb1 \u5c06\u4f1a\u5728\u4f60\u7684 rules.mk \u4e2d\u6709 CONSOLE_ENABLE = yes \u7684\u65f6\u5019\u663e\u793a\u4f60\u952e\u76d8\u53d1\u6765\u7684\u6d88\u606f\u3002 \u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8f93\u51fa\u6781\u4e3a\u6709\u9650\uff0c\u4e0d\u8fc7\u60a8\u53ef\u4ee5\u6253\u5f00\u8c03\u8bd5\u6a21\u5f0f\u6765\u589e\u52a0\u8f93\u51fa\u4fe1\u606f\u91cf\u3002\u4f7f\u7528\u4f60\u952e\u76d8\u5e03\u5c40\u4e2d\u7684 DEBUG \u952e\u7801,\u4f7f\u7528 \u547d\u4ee4 \u7279\u6027\u6765\u4f7f\u80fd\u8c03\u8bd5\u6a21\u5f0f, \u6216\u8005\u5411\u4f60\u7684\u5e03\u5c40\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u4ee3\u7801\u3002 void keyboard_post_init_user ( void ) { // Customise these values to desired behaviour debug_enable = true ; debug_matrix = true ; //debug_keyboard=true; //debug_mouse=true; }","title":"\u4f7f\u7528QMK\u5de5\u5177\u7bb1\u8fdb\u884c\u8c03\u8bd5"},{"location":"tutorial_testing_debugging/#_3","text":"\u6709\u65f6\u7528 custom code \u53d1\u9001\u81ea\u5b9a\u4e49\u8c03\u8bd5\u4fe1\u606f\u5f88\u6709\u7528. \u8fd9\u4e48\u505a\u5f88\u7b80\u5355. \u9996\u5148\u5728\u4f60\u6587\u4ef6\u5934\u90e8\u5305\u542b print.h : #include \"print.h\" \u4e4b\u540e\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e9b\u4e0d\u540c\u7684\u6253\u5370\u529f\u80fd: print(\"string\") : \u6253\u5370\u7b80\u5355\u5b57\u7b26\u4e32. uprintf(\"%s string\", var) : \u6253\u5370\u683c\u5f0f\u5316\u5b57\u7b26\u4e32 dprint(\"string\") : \u4ec5\u5728\u8c03\u8bd5\u6a21\u5f0f\u4f7f\u80fd\u65f6\u6253\u5370\u7b80\u5355\u5b57\u7b26\u4e32 dprintf(\"%s string\", var) : \u4ec5\u5728\u8c03\u8bd5\u6a21\u5f0f\u4f7f\u80fd\u65f6\u6253\u5370\u683c\u5f0f\u5316\u5b57\u7b26\u4e32","title":"\u53d1\u9001\u60a8\u81ea\u5df1\u7684\u8c03\u8bd5\u6d88\u606f"},{"location":"uart_driver/","text":"UART Driver \u00b6 The UART drivers used in QMK have a set of common functions to allow portability between MCUs. Currently, this driver does not support enabling hardware flow control (the RTS and CTS pins) if available, but may do so in future. AVR Configuration \u00b6 No special setup is required - just connect the RX and TX pins of your UART device to the opposite pins on the MCU: MCU TX RX CTS RTS ATmega16/32U2 D3 D2 D7 D6 ATmega16/32U4 D3 D2 D5 B7 AT90USB64/128 D3 D2 n/a n/a ATmega32A D1 D0 n/a n/a ATmega328/P D1 D0 n/a n/a ChibiOS/ARM Configuration \u00b6 You'll need to determine which pins can be used for UART -- as an example, STM32 parts generally have multiple UART peripherals, labeled USART1, USART2, USART3 etc. To enable UART, modify your board's halconf.h to enable the serial driver: #define HAL_USE_SERIAL TRUE Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_SERIAL_USE_USART2 #define STM32_SERIAL_USE_USART2 TRUE Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h override Description Default Value #define SERIAL_DRIVER USART peripheral to use - USART1 -> SD1 , USART2 -> SD2 etc. SD1 #define SD1_TX_PIN The pin to use for TX A9 #define SD1_TX_PAL_MODE The alternate function mode for TX 7 #define SD1_RX_PIN The pin to use for RX A10 #define SD1_RX_PAL_MODE The alternate function mode for RX 7 #define SD1_CTS_PIN The pin to use for CTS A11 #define SD1_CTS_PAL_MODE The alternate function mode for CTS 7 #define SD1_RTS_PIN The pin to use for RTS A12 #define SD1_RTS_PAL_MODE The alternate function mode for RTS 7 Functions \u00b6 void uart_init(uint32_t baud) \u00b6 Initialize the UART driver. This function must be called only once, before any of the below functions can be called. Arguments \u00b6 uint32_t baud The baud rate to transmit and receive at. This may depend on the device you are communicating with. Common values are 1200, 2400, 4800, 9600, 19200, 38400, 57600, and 115200. void uart_putchar(uint8_t c) \u00b6 Transmit a single byte. Arguments \u00b6 uint8_t c The byte (character) to send, from 0 to 255. uint8_t uart_getchar(void) \u00b6 Receive a single byte. Return Value \u00b6 The byte read from the receive buffer. bool uart_available(void) \u00b6 Return whether the receive buffer contains data. Call this function to determine if uart_getchar() will return meaningful data. Return Value \u00b6 true if the receive buffer length is non-zero.","title":"UART Driver"},{"location":"uart_driver/#uart-driver","text":"The UART drivers used in QMK have a set of common functions to allow portability between MCUs. Currently, this driver does not support enabling hardware flow control (the RTS and CTS pins) if available, but may do so in future.","title":"UART Driver"},{"location":"uart_driver/#avr-configuration","text":"No special setup is required - just connect the RX and TX pins of your UART device to the opposite pins on the MCU: MCU TX RX CTS RTS ATmega16/32U2 D3 D2 D7 D6 ATmega16/32U4 D3 D2 D5 B7 AT90USB64/128 D3 D2 n/a n/a ATmega32A D1 D0 n/a n/a ATmega328/P D1 D0 n/a n/a","title":"AVR Configuration"},{"location":"uart_driver/#chibiosarm-configuration","text":"You'll need to determine which pins can be used for UART -- as an example, STM32 parts generally have multiple UART peripherals, labeled USART1, USART2, USART3 etc. To enable UART, modify your board's halconf.h to enable the serial driver: #define HAL_USE_SERIAL TRUE Then, modify your board's mcuconf.h to enable the peripheral you've chosen, for example: #undef STM32_SERIAL_USE_USART2 #define STM32_SERIAL_USE_USART2 TRUE Configuration-wise, you'll need to set up the peripheral as per your MCU's datasheet -- the defaults match the pins for a Proton-C, i.e. STM32F303. config.h override Description Default Value #define SERIAL_DRIVER USART peripheral to use - USART1 -> SD1 , USART2 -> SD2 etc. SD1 #define SD1_TX_PIN The pin to use for TX A9 #define SD1_TX_PAL_MODE The alternate function mode for TX 7 #define SD1_RX_PIN The pin to use for RX A10 #define SD1_RX_PAL_MODE The alternate function mode for RX 7 #define SD1_CTS_PIN The pin to use for CTS A11 #define SD1_CTS_PAL_MODE The alternate function mode for CTS 7 #define SD1_RTS_PIN The pin to use for RTS A12 #define SD1_RTS_PAL_MODE The alternate function mode for RTS 7","title":"ChibiOS/ARM Configuration"},{"location":"uart_driver/#functions","text":"","title":"Functions"},{"location":"uart_driver/#void-uart_inituint32_t-baud","text":"Initialize the UART driver. This function must be called only once, before any of the below functions can be called.","title":"void uart_init(uint32_t baud)"},{"location":"uart_driver/#void-uart_putcharuint8_t-c","text":"Transmit a single byte.","title":"void uart_putchar(uint8_t c)"},{"location":"uart_driver/#uint8_t-uart_getcharvoid","text":"Receive a single byte.","title":"uint8_t uart_getchar(void)"},{"location":"uart_driver/#bool-uart_availablevoid","text":"Return whether the receive buffer contains data. Call this function to determine if uart_getchar() will return meaningful data.","title":"bool uart_available(void)"},{"location":"understanding_qmk/","text":"Understanding QMK's Code \u00b6 This document attempts to explain how the QMK firmware works from a very high level. It assumes you understand basic programming concepts but does not (except where needed to demonstrate) assume familiarity with C. It assumes that you have a basic understanding of the following documents: Introduction How Keyboards Work FAQ Startup \u00b6 You can think of QMK as no different from any other computer program. It is started, performs its tasks, and then ends. The entry point for the program is the main() function, just like it is on any other C program. However, for a newcomer to QMK it can be confusing because the main() function appears in multiple places, and it can be hard to tell which one to look at. The reason for this is the different platforms that QMK supports. The most common platform is lufa , which runs on AVR processors such at the atmega32u4. We also support chibios and vusb . We'll focus on AVR processors for the moment, which use the lufa platform. You can find the main() function in tmk_core/protocol/lufa/lufa.c . If you browse through that function you'll find that it initializes any hardware that has been configured (including USB to the host) and then it starts the core part of the program with a while(1) . This is The Main Loop . The Main Loop \u00b6 This section of code is called \"The Main Loop\" because it's responsible for looping over the same set of instructions forever. This is where QMK dispatches out to the functions responsible for making the keyboard do everything it is supposed to do. At first glance it can look like a lot of functionality but most of the time the code will be disabled by #define 's. keyboard_task(); This is where all the keyboard specific functionality is dispatched. The source code for keyboard_task() can be found in tmk_core/common/keyboard.c , and it is responsible for detecting changes in the matrix and turning status LEDs on and off. Within keyboard_task() you'll find code to handle: Matrix Scanning Mouse Handling Serial Link(s) Visualizer Keyboard status LEDs (Caps Lock, Num Lock, Scroll Lock) Matrix Scanning \u00b6 Matrix scanning is the core function of a keyboard firmware. It is the process of detecting which keys are currently pressed, and your keyboard runs this function many times a second. It's no exaggeration to say that 99% of your firmware's CPU time is spent on matrix scanning. While there are different strategies for doing the actual matrix detection, they are out of scope for this document. It is sufficient to treat matrix scanning as a black box, you ask for the matrix's current state and get back a datastructure that looks like this: { {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0} } That datastructure is a direct representation of the matrix for a 4 row by 5 column numpad. When a key is pressed that key's position within the matrix will be returned as 1 instead of 0 . Matrix Scanning runs many times per second. The exact rate varies but typically it runs at least 10 times per second to avoid perceptible lag. Matrix to Physical Layout Map \u00b6 Once we know the state of every switch on our keyboard we have to map that to a keycode. In QMK this is done by making use of C macros to allow us to separate the definition of the physical layout from the definition of keycodes. At the keyboard level we define a C macro (typically named LAYOUT() ) which maps our keyboard's matrix to physical keys. Sometimes the matrix does not have a switch in every location, and we can use this macro to pre-populate those with KC_NO, making the keymap definition easier to work with. Here's an example LAYOUT() macro for a numpad: #define LAYOUT( \\ k00, k01, k02, k03, \\ k10, k11, k12, k13, \\ k20, k21, k22, \\ k30, k31, k32, k33, \\ k40, k42 \\ ) { \\ { k00, k01, k02, k03, }, \\ { k10, k11, k12, k13, }, \\ { k20, k21, k22, KC_NO, }, \\ { k30, k31, k32, k33, }, \\ { k40, KC_NO, k42, KC_NO } \\ } Notice how the second block of our LAYOUT() macro matches the Matrix Scanning array above? This macro is what will map the matrix scanning array to keycodes. However, if you look at a 17 key numpad you'll notice that it has 3 places where the matrix could have a switch but doesn't, due to larger keys. We have populated those spaces with KC_NO so that our keymap definition doesn't have to. You can also use this macro to handle unusual matrix layouts, for example the Clueboard rev 2 . Explaining that is outside the scope of this document. Keycode Assignment \u00b6 At the keymap level we make use of our LAYOUT() macro above to map keycodes to physical locations to matrix locations. It looks like this: const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = { [0] = LAYOUT( KC_NLCK, KC_PSLS, KC_PAST, KC_PMNS, \\ KC_P7, KC_P8, KC_P9, KC_PPLS, \\ KC_P4, KC_P5, KC_P6, \\ KC_P1, KC_P2, KC_P3, KC_PENT, \\ KC_P0, KC_PDOT) } Notice how all of these arguments match up with the first half of the LAYOUT() macro from the last section? This is how we take a keycode and map it to our Matrix Scan from earlier. State Change Detection \u00b6 The matrix scanning described above tells us the state of the matrix at a given moment, but your computer only wants to know about changes, it doesn't care about the current state. QMK stores the results from the last matrix scan and compares the results from this matrix to determine when a key has been pressed or released. Let's look at an example. We'll hop into the middle of a keyboard scanning loop to find that our previous scan looks like this: { {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0} } And when our current scan completes it will look like this: { {1,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0}, {0,0,0,0} } Comparing against our keymap we can see that the pressed key is KC_NLCK. From here we dispatch to the process_record set of functions. Process Record \u00b6 The process_record() function itself is deceptively simple, but hidden within is a gateway to overriding functionality at various levels of QMK. The chain of events is listed below, using cluecard whenever we need to look at the keyboard/keymap level functions. Depending on options set in rules.mk or elsewhere, only a subset of the functions below will be included in final firmware. void process_record(keyrecord_t *record) bool process_record_quantum(keyrecord_t *record) Map this record to a keycode void velocikey_accelerate(void) void preprocess_tap_dance(uint16_t keycode, keyrecord_t *record) bool process_key_lock(uint16_t keycode, keyrecord_t *record) bool process_clicky(uint16_t keycode, keyrecord_t *record) bool process_haptic(uint16_t keycode, keyrecord_t *record) bool process_record_kb(uint16_t keycode, keyrecord_t *record) bool process_record_user(uint16_t keycode, keyrecord_t *record) bool process_midi(uint16_t keycode, keyrecord_t *record) bool process_audio(uint16_t keycode, keyrecord_t *record) bool process_steno(uint16_t keycode, keyrecord_t *record) bool process_music(uint16_t keycode, keyrecord_t *record) bool process_tap_dance(uint16_t keycode, keyrecord_t *record) bool process_unicode_common(uint16_t keycode, keyrecord_t *record) calls one of: bool process_unicode(uint16_t keycode, keyrecord_t *record) bool process_unicodemap(uint16_t keycode, keyrecord_t *record) bool process_ucis(uint16_t keycode, keyrecord_t *record) bool process_leader(uint16_t keycode, keyrecord_t *record) bool process_combo(uint16_t keycode, keyrecord_t *record) bool process_printer(uint16_t keycode, keyrecord_t *record) bool process_auto_shift(uint16_t keycode, keyrecord_t *record) bool process_terminal(uint16_t keycode, keyrecord_t *record) Identify and process Quantum-specific keycodes At any step during this chain of events a function (such as process_record_kb() ) can return false to halt all further processing. After this is called, post_process_record() is called, which can be used to handle additional cleanup that needs to be run after the keycode is normally handled. void post_process_record(keyrecord_t *record) void post_process_record_quantum(keyrecord_t *record) Map this record to a keycode void post_process_clicky(uint16_t keycode, keyrecord_t *record) void post_process_record_kb(uint16_t keycode, keyrecord_t *record) void post_process_record_user(uint16_t keycode, keyrecord_t *record)","title":"\u6df1\u5165\u4e86\u89e3QMK"},{"location":"understanding_qmk/#understanding-qmks-code","text":"This document attempts to explain how the QMK firmware works from a very high level. It assumes you understand basic programming concepts but does not (except where needed to demonstrate) assume familiarity with C. It assumes that you have a basic understanding of the following documents: Introduction How Keyboards Work FAQ","title":"Understanding QMK's Code"},{"location":"understanding_qmk/#startup","text":"You can think of QMK as no different from any other computer program. It is started, performs its tasks, and then ends. The entry point for the program is the main() function, just like it is on any other C program. However, for a newcomer to QMK it can be confusing because the main() function appears in multiple places, and it can be hard to tell which one to look at. The reason for this is the different platforms that QMK supports. The most common platform is lufa , which runs on AVR processors such at the atmega32u4. We also support chibios and vusb . We'll focus on AVR processors for the moment, which use the lufa platform. You can find the main() function in tmk_core/protocol/lufa/lufa.c . If you browse through that function you'll find that it initializes any hardware that has been configured (including USB to the host) and then it starts the core part of the program with a while(1) . This is The Main Loop .","title":"Startup"},{"location":"understanding_qmk/#the-main-loop","text":"This section of code is called \"The Main Loop\" because it's responsible for looping over the same set of instructions forever. This is where QMK dispatches out to the functions responsible for making the keyboard do everything it is supposed to do. At first glance it can look like a lot of functionality but most of the time the code will be disabled by #define 's. keyboard_task(); This is where all the keyboard specific functionality is dispatched. The source code for keyboard_task() can be found in tmk_core/common/keyboard.c , and it is responsible for detecting changes in the matrix and turning status LEDs on and off. Within keyboard_task() you'll find code to handle: Matrix Scanning Mouse Handling Serial Link(s) Visualizer Keyboard status LEDs (Caps Lock, Num Lock, Scroll Lock)","title":"The Main Loop"},{"location":"unit_testing/","text":"Unit Testing \u00b6 If you are new to unit testing, then you can find many good resources on internet. However most of it is scattered around in small pieces here and there, and there's also many different opinions, so I won't give any recommendations. Instead I recommend these two books, explaining two different styles of Unit Testing in detail. \"Test Driven Development: By Example: Kent Beck\" \"Growing Object-Oriented Software, Guided By Tests: Steve Freeman, Nat Pryce\" If you prefer videos there are Uncle Bob's Clean Coders Videos , which unfortunately cost quite a bit, especially if you want to watch many of them. But James Shore has a free Let's Play video series. Google Test and Google Mock \u00b6 It's possible to Unit Test your code using Google Test . The Google Test framework also includes another component for writing testing mocks and stubs, called \"Google Mock\". For information how to write the actual tests, please refer to the documentation on that site. Use of C++ \u00b6 Note that Google Test and therefore any test has to be written in C++, even if the rest of the QMK codebases is written in C. This should hopefully not be a problem even if you don't know any C++, since there's quite clear documentation and examples of the required C++ features, and you can write the rest of the test code almost as you would write normal C. Note that some compiler errors which you might get can look quite scary, but just read carefully what it says, and you should be ok. One thing to remember, is that you have to append extern \"C\" around all of your C file includes. Adding Tests for New or Existing Features \u00b6 If you want to unit test some feature, then take a look at the existing serial_link tests, in the quantum/serial_link/tests folder , and follow the steps below to create a similar structure. If it doesn't already exist, add a test subfolder to the folder containing the feature. Create a testlist.mk and a rules.mk file in that folder. Include those files from the root folder testlist.mk and build_test.mk respectively. Add a new name for your testgroup to the testlist.mk file. Each group defined there will be a separate executable. And that's how you can support mocking out different parts. Note that it's worth adding some common prefix, just like it's done for the serial_link tests. The reason for that is that the make command allows substring filtering, so this way you can easily run a subset of the tests. Define the source files and required options in the rules.mk file. * _SRC for source files * _DEFS for additional defines * _INC for additional include folders Write the tests in a new cpp file inside the test folder you created. That file has to be one of the files included from the rules.mk file. Note how there's several different tests, each mocking out a separate part. Also note that each of them only compiles the very minimum that's needed for the tests. It's recommend that you try to do the same. For a relevant video check out Matt Hargett \"Advanced Unit Testing in C & C++ Running the Tests \u00b6 To run all the tests in the codebase, type make test:all . You can also run test matching a substring by typing make test:matchingsubstring Note that the tests are always compiled with the native compiler of your platform, so they are also run like any other program on your computer. Debugging the Tests \u00b6 If there are problems with the tests, you can find the executable in the ./build/test folder. You should be able to run those with GDB or a similar debugger. To forward any debug messages to stderr , the tests can run with DEBUG=1 . For example make test:all DEBUG=1 Alternatively, add CONSOLE_ENABLE=yes to the tests rules.mk . Full Integration Tests \u00b6 It's not yet possible to do a full integration test, where you would compile the whole firmware and define a keymap that you are going to test. However there are plans for doing that, because writing tests that way would probably be easier, at least for people that are not used to unit testing. In that model you would emulate the input, and expect a certain output from the emulated keyboard. Tracing Variables \u00b6 Sometimes you might wonder why a variable gets changed and where, and this can be quite tricky to track down without having a debugger. It's of course possible to manually add print statements to track it, but you can also enable the variable trace feature. This works for both variables that are changed by the code, and when the variable is changed by some memory corruption. To take the feature into use add VARIABLE_TRACE=x to the end of you make command. x represents the number of variables you want to trace, which is usually 1. Then at a suitable place in the code, call ADD_TRACED_VARIABLE , to begin the tracing. For example to trace all the layer changes, you can do this void matrix_init_user ( void ) { ADD_TRACED_VARIABLE ( \"layer\" , & layer_state , sizeof ( layer_state )); } This will add a traced variable named \"layer\" (the name is just for your information), which tracks the memory location of layer_state . It tracks 4 bytes (the size of layer_state ), so any modification to the variable will be reported. By default you can not specify a size bigger than 4, but you can change it by adding MAX_VARIABLE_TRACE_SIZE=x to the end of the make command line. In order to actually detect changes to the variables you should call VERIFY_TRACED_VARIABLES around the code that you think that modifies the variable. If a variable is modified it will tell you between which two VERIFY_TRACED_VARIABLES calls the modification happened. You can then add more calls to track it down further. I don't recommend spamming the codebase with calls. It's better to start with a few, and then keep adding them in a binary search fashion. You can also delete the ones you don't need, as each call need to store the file name and line number in the ROM, so you can run out of memory if you add too many calls. Also remember to delete all the tracing code once you have found the bug, as you wouldn't want to create a pull request with tracing code.","title":"\u5355\u5143\u6d4b\u8bd5"},{"location":"unit_testing/#unit-testing","text":"If you are new to unit testing, then you can find many good resources on internet. However most of it is scattered around in small pieces here and there, and there's also many different opinions, so I won't give any recommendations. Instead I recommend these two books, explaining two different styles of Unit Testing in detail. \"Test Driven Development: By Example: Kent Beck\" \"Growing Object-Oriented Software, Guided By Tests: Steve Freeman, Nat Pryce\" If you prefer videos there are Uncle Bob's Clean Coders Videos , which unfortunately cost quite a bit, especially if you want to watch many of them. But James Shore has a free Let's Play video series.","title":"Unit Testing"},{"location":"unit_testing/#google-test-and-google-mock","text":"It's possible to Unit Test your code using Google Test . The Google Test framework also includes another component for writing testing mocks and stubs, called \"Google Mock\". For information how to write the actual tests, please refer to the documentation on that site.","title":"Google Test and Google Mock"},{"location":"unit_testing/#use-of-c","text":"Note that Google Test and therefore any test has to be written in C++, even if the rest of the QMK codebases is written in C. This should hopefully not be a problem even if you don't know any C++, since there's quite clear documentation and examples of the required C++ features, and you can write the rest of the test code almost as you would write normal C. Note that some compiler errors which you might get can look quite scary, but just read carefully what it says, and you should be ok. One thing to remember, is that you have to append extern \"C\" around all of your C file includes.","title":"Use of C++"},{"location":"unit_testing/#adding-tests-for-new-or-existing-features","text":"If you want to unit test some feature, then take a look at the existing serial_link tests, in the quantum/serial_link/tests folder , and follow the steps below to create a similar structure. If it doesn't already exist, add a test subfolder to the folder containing the feature. Create a testlist.mk and a rules.mk file in that folder. Include those files from the root folder testlist.mk and build_test.mk respectively. Add a new name for your testgroup to the testlist.mk file. Each group defined there will be a separate executable. And that's how you can support mocking out different parts. Note that it's worth adding some common prefix, just like it's done for the serial_link tests. The reason for that is that the make command allows substring filtering, so this way you can easily run a subset of the tests. Define the source files and required options in the rules.mk file. * _SRC for source files * _DEFS for additional defines * _INC for additional include folders Write the tests in a new cpp file inside the test folder you created. That file has to be one of the files included from the rules.mk file. Note how there's several different tests, each mocking out a separate part. Also note that each of them only compiles the very minimum that's needed for the tests. It's recommend that you try to do the same. For a relevant video check out Matt Hargett \"Advanced Unit Testing in C & C++","title":"Adding Tests for New or Existing Features"},{"location":"unit_testing/#running-the-tests","text":"To run all the tests in the codebase, type make test:all . You can also run test matching a substring by typing make test:matchingsubstring Note that the tests are always compiled with the native compiler of your platform, so they are also run like any other program on your computer.","title":"Running the Tests"},{"location":"unit_testing/#debugging-the-tests","text":"If there are problems with the tests, you can find the executable in the ./build/test folder. You should be able to run those with GDB or a similar debugger. To forward any debug messages to stderr , the tests can run with DEBUG=1 . For example make test:all DEBUG=1 Alternatively, add CONSOLE_ENABLE=yes to the tests rules.mk .","title":"Debugging the Tests"},{"location":"unit_testing/#full-integration-tests","text":"It's not yet possible to do a full integration test, where you would compile the whole firmware and define a keymap that you are going to test. However there are plans for doing that, because writing tests that way would probably be easier, at least for people that are not used to unit testing. In that model you would emulate the input, and expect a certain output from the emulated keyboard.","title":"Full Integration Tests"},{"location":"unit_testing/#tracing-variables","text":"Sometimes you might wonder why a variable gets changed and where, and this can be quite tricky to track down without having a debugger. It's of course possible to manually add print statements to track it, but you can also enable the variable trace feature. This works for both variables that are changed by the code, and when the variable is changed by some memory corruption. To take the feature into use add VARIABLE_TRACE=x to the end of you make command. x represents the number of variables you want to trace, which is usually 1. Then at a suitable place in the code, call ADD_TRACED_VARIABLE , to begin the tracing. For example to trace all the layer changes, you can do this void matrix_init_user ( void ) { ADD_TRACED_VARIABLE ( \"layer\" , & layer_state , sizeof ( layer_state )); } This will add a traced variable named \"layer\" (the name is just for your information), which tracks the memory location of layer_state . It tracks 4 bytes (the size of layer_state ), so any modification to the variable will be reported. By default you can not specify a size bigger than 4, but you can change it by adding MAX_VARIABLE_TRACE_SIZE=x to the end of the make command line. In order to actually detect changes to the variables you should call VERIFY_TRACED_VARIABLES around the code that you think that modifies the variable. If a variable is modified it will tell you between which two VERIFY_TRACED_VARIABLES calls the modification happened. You can then add more calls to track it down further. I don't recommend spamming the codebase with calls. It's better to start with a few, and then keep adding them in a binary search fashion. You can also delete the ones you don't need, as each call need to store the file name and line number in the ROM, so you can run out of memory if you add too many calls. Also remember to delete all the tracing code once you have found the bug, as you wouldn't want to create a pull request with tracing code.","title":"Tracing Variables"},{"location":"ws2812_driver/","text":"WS2812 Driver \u00b6 This driver powers the RGB Lighting and RGB Matrix features. Currently QMK supports the following addressable LEDs (however, the white LED in RGBW variants is not supported): WS2811, WS2812, WS2812B, WS2812C, etc. SK6812, SK6812MINI, SK6805 These LEDs are called \"addressable\" because instead of using a wire per color, each LED contains a small microchip that understands a special protocol sent over a single wire. The chip passes on the remaining data to the next LED, allowing them to be chained together. In this way, you can easily control the color of the individual LEDs. Supported Driver Types \u00b6 AVR ARM bit bang :heavy_check_mark: :heavy_check_mark: I2C :heavy_check_mark: SPI :heavy_check_mark: PWM :heavy_check_mark: Driver configuration \u00b6 All drivers \u00b6 Different versions of the addressable LEDs have differing requirements for the T RST period between frames. The default setting is 280 \u00b5s, which should work for most cases, but this can be overridden in your config.h. e.g.: #define WS2812_TRST_US 80 Byte Order \u00b6 Some variants of the WS2812 may have their color components in a different physical or logical order. For example, the WS2812B-2020 has physically swapped red and green LEDs, which causes the wrong color to be displayed, because the default order of the bytes sent over the wire is defined as GRB. In this case, you can change the byte order by defining WS2812_BYTE_ORDER as one of the following values: Byte order Known devices WS2812_BYTE_ORDER_GRB (default) Most WS2812's, SK6812, SK6805 WS2812_BYTE_ORDER_RGB WS2812B-2020 WS2812_BYTE_ORDER_BGR TM1812 Bitbang \u00b6 Default driver, the absence of configuration assumes this driver. To configure it, add this to your rules.mk: WS2812_DRIVER = bitbang Note This driver is not hardware accelerated and may not be performant on heavily loaded systems. I2C \u00b6 Targeting boards where WS2812 support is offloaded to a 2nd MCU. Currently the driver is limited to AVR given the known consumers are ps2avrGB/BMC. To configure it, add this to your rules.mk: WS2812_DRIVER = i2c Configure the hardware via your config.h: #define WS2812_ADDRESS 0xb0 // default: 0xb0 #define WS2812_TIMEOUT 100 // default: 100 SPI \u00b6 Targeting STM32 boards where WS2812 support is offloaded to an SPI hardware device. The advantage is that the use of DMA offloads processing of the WS2812 protocol from the MCU. RGB_DI_PIN for this driver is the configured SPI MOSI pin. Due to the nature of repurposing SPI to drive the LEDs, the other SPI pins, MISO and SCK, must remain unused. To configure it, add this to your rules.mk: WS2812_DRIVER = spi Configure the hardware via your config.h: #define WS2812_SPI SPID1 // default: SPID1 #define WS2812_SPI_MOSI_PAL_MODE 5 // MOSI pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 5 #define WS2812_SPI_SCK_PIN B3 // Required for F072, may be for others -- SCK pin, see the respective datasheet for the appropriate values for your MCU. default: unspecified #define WS2812_SPI_SCK_PAL_MODE 5 // SCK pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 5 You must also turn on the SPI feature in your halconf.h and mcuconf.h Circular Buffer Mode \u00b6 Some boards may flicker while in the normal buffer mode. To fix this issue, circular buffer mode may be used to rectify the issue. By default, the circular buffer mode is disabled. To enable this alternative buffer mode, place this into your config.h file: #define WS2812_SPI_USE_CIRCULAR_BUFFER Setting baudrate with divisor \u00b6 To adjust the baudrate at which the SPI peripheral is configured, users will need to derive the target baudrate from the clock tree provided by STM32CubeMX. Only divisors of 2, 4, 8, 16, 32, 64, 128 and 256 are supported by hardware. Define Default Description WS2812_SPI_DIVISOR 16 SPI source clock peripheral divisor Testing Notes \u00b6 While not an exhaustive list, the following table provides the scenarios that have been partially validated: SPI1 SPI2 SPI3 f072 ? B15 :heavy_check_mark: (needs SCK: B13) N/A f103 A7 :heavy_check_mark: B15 :heavy_check_mark: N/A f303 A7 :heavy_check_mark: B5 :heavy_check_mark: B15 :heavy_check_mark: B5 :heavy_check_mark: Other supported ChibiOS boards and/or pins may function, it will be highly chip and configuration dependent. PWM \u00b6 Targeting STM32 boards where WS2812 support is offloaded to an PWM timer and DMA stream. The advantage is that the use of DMA offloads processing of the WS2812 protocol from the MCU. To configure it, add this to your rules.mk: WS2812_DRIVER = pwm Configure the hardware via your config.h: #define WS2812_PWM_DRIVER PWMD2 // default: PWMD2 #define WS2812_PWM_CHANNEL 2 // default: 2 #define WS2812_PWM_PAL_MODE 2 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 2 //#define WS2812_PWM_COMPLEMENTARY_OUTPUT // Define for a complementary timer output (TIMx_CHyN); omit for a normal timer output (TIMx_CHy). #define WS2812_DMA_STREAM STM32_DMA1_STREAM2 // DMA Stream for TIMx_UP, see the respective reference manual for the appropriate values for your MCU. #define WS2812_DMA_CHANNEL 2 // DMA Channel for TIMx_UP, see the respective reference manual for the appropriate values for your MCU. #define WS2812_DMAMUX_ID STM32_DMAMUX1_TIM2_UP // DMAMUX configuration for TIMx_UP -- only required if your MCU has a DMAMUX peripheral, see the respective reference manual for the appropriate values for your MCU. Note that using a complementary timer output (TIMx_CHyN) is possible only for advanced-control timers (TIM1, TIM8, TIM20 on STM32), and the STM32_PWM_USE_ADVANCED option in mcuconf.h must be set to TRUE . Complementary outputs of general-purpose timers are not supported due to ChibiOS limitations. You must also turn on the PWM feature in your halconf.h and mcuconf.h Testing Notes \u00b6 While not an exhaustive list, the following table provides the scenarios that have been partially validated: Status f072 ? f103 :heavy_check_mark: f303 :heavy_check_mark: f401/f411 :heavy_check_mark: Other supported ChibiOS boards and/or pins may function, it will be highly chip and configuration dependent. Push Pull and Open Drain Configuration \u00b6 The default configuration is a push pull on the defined pin. This can be configured for bitbang, PWM and SPI. Note: This only applies to STM32 boards. To configure the RGB_DI_PIN to open drain configuration add this to your config.h file: #define WS2812_EXTERNAL_PULLUP","title":"WS2812\u8bbe\u5907"},{"location":"ws2812_driver/#ws2812-driver","text":"This driver powers the RGB Lighting and RGB Matrix features. Currently QMK supports the following addressable LEDs (however, the white LED in RGBW variants is not supported): WS2811, WS2812, WS2812B, WS2812C, etc. SK6812, SK6812MINI, SK6805 These LEDs are called \"addressable\" because instead of using a wire per color, each LED contains a small microchip that understands a special protocol sent over a single wire. The chip passes on the remaining data to the next LED, allowing them to be chained together. In this way, you can easily control the color of the individual LEDs.","title":"WS2812 Driver"},{"location":"ws2812_driver/#supported-driver-types","text":"AVR ARM bit bang :heavy_check_mark: :heavy_check_mark: I2C :heavy_check_mark: SPI :heavy_check_mark: PWM :heavy_check_mark:","title":"Supported Driver Types"},{"location":"ws2812_driver/#driver-configuration","text":"","title":"Driver configuration"},{"location":"ws2812_driver/#all-drivers","text":"Different versions of the addressable LEDs have differing requirements for the T RST period between frames. The default setting is 280 \u00b5s, which should work for most cases, but this can be overridden in your config.h. e.g.: #define WS2812_TRST_US 80","title":"All drivers"},{"location":"ws2812_driver/#bitbang","text":"Default driver, the absence of configuration assumes this driver. To configure it, add this to your rules.mk: WS2812_DRIVER = bitbang Note This driver is not hardware accelerated and may not be performant on heavily loaded systems.","title":"Bitbang"},{"location":"ws2812_driver/#i2c","text":"Targeting boards where WS2812 support is offloaded to a 2nd MCU. Currently the driver is limited to AVR given the known consumers are ps2avrGB/BMC. To configure it, add this to your rules.mk: WS2812_DRIVER = i2c Configure the hardware via your config.h: #define WS2812_ADDRESS 0xb0 // default: 0xb0 #define WS2812_TIMEOUT 100 // default: 100","title":"I2C"},{"location":"ws2812_driver/#spi","text":"Targeting STM32 boards where WS2812 support is offloaded to an SPI hardware device. The advantage is that the use of DMA offloads processing of the WS2812 protocol from the MCU. RGB_DI_PIN for this driver is the configured SPI MOSI pin. Due to the nature of repurposing SPI to drive the LEDs, the other SPI pins, MISO and SCK, must remain unused. To configure it, add this to your rules.mk: WS2812_DRIVER = spi Configure the hardware via your config.h: #define WS2812_SPI SPID1 // default: SPID1 #define WS2812_SPI_MOSI_PAL_MODE 5 // MOSI pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 5 #define WS2812_SPI_SCK_PIN B3 // Required for F072, may be for others -- SCK pin, see the respective datasheet for the appropriate values for your MCU. default: unspecified #define WS2812_SPI_SCK_PAL_MODE 5 // SCK pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 5 You must also turn on the SPI feature in your halconf.h and mcuconf.h","title":"SPI"},{"location":"ws2812_driver/#pwm","text":"Targeting STM32 boards where WS2812 support is offloaded to an PWM timer and DMA stream. The advantage is that the use of DMA offloads processing of the WS2812 protocol from the MCU. To configure it, add this to your rules.mk: WS2812_DRIVER = pwm Configure the hardware via your config.h: #define WS2812_PWM_DRIVER PWMD2 // default: PWMD2 #define WS2812_PWM_CHANNEL 2 // default: 2 #define WS2812_PWM_PAL_MODE 2 // Pin \"alternate function\", see the respective datasheet for the appropriate values for your MCU. default: 2 //#define WS2812_PWM_COMPLEMENTARY_OUTPUT // Define for a complementary timer output (TIMx_CHyN); omit for a normal timer output (TIMx_CHy). #define WS2812_DMA_STREAM STM32_DMA1_STREAM2 // DMA Stream for TIMx_UP, see the respective reference manual for the appropriate values for your MCU. #define WS2812_DMA_CHANNEL 2 // DMA Channel for TIMx_UP, see the respective reference manual for the appropriate values for your MCU. #define WS2812_DMAMUX_ID STM32_DMAMUX1_TIM2_UP // DMAMUX configuration for TIMx_UP -- only required if your MCU has a DMAMUX peripheral, see the respective reference manual for the appropriate values for your MCU. Note that using a complementary timer output (TIMx_CHyN) is possible only for advanced-control timers (TIM1, TIM8, TIM20 on STM32), and the STM32_PWM_USE_ADVANCED option in mcuconf.h must be set to TRUE . Complementary outputs of general-purpose timers are not supported due to ChibiOS limitations. You must also turn on the PWM feature in your halconf.h and mcuconf.h","title":"PWM"},{"location":"ws2812_driver/#push-pull-and-open-drain-configuration","text":"The default configuration is a push pull on the defined pin. This can be configured for bitbang, PWM and SPI. Note: This only applies to STM32 boards. To configure the RGB_DI_PIN to open drain configuration add this to your config.h file: #define WS2812_EXTERNAL_PULLUP","title":"Push Pull and Open Drain Configuration"},{"location":"ChangeLog/20190830/","text":"QMK Breaking Change - 2019 Aug 30 \u00b6 Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. This document marks the inaugural Breaking Change merge. A list of changes follows. Core code formatting with clang-format \u00b6 All core files ( drivers/ , quantum/ , tests/ , and tmk_core/ ) have been formatted with clang-format A travis process to reformat PR's on merge has been instituted You can use the new CLI command qmk cformat to format before submitting your PR if you wish. LUFA USB descriptor cleanup \u00b6 Some code cleanups related to the USB HID descriptors on AVR keyboards, to make them easier to read and understand More information: see https://github.com/qmk/qmk_firmware/pull/4871 No behaviour changes anticipated and no keymaps modified Migrating ACTION_LAYER_MOMENTARY() entries in fn_actions to MO() keycodes \u00b6 fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() The end result of removing this obsolete feature should result in a decent reduction in firmware size and code complexity All keymaps affected are recommended to switch away from fn_actions in favour of the custom keycode and macro features Update Atreus to current code conventions \u00b6 Duplicate include guards have bypassed the expected header processing behavior All keymaps affected are recommended to remove duplication of <keyboard>/config.h to <keyboard>/keymaps/<user>/config.h and only provide overrides at the keymap level Backport changes to keymap language files from ZSA fork \u00b6 Fixes an issue in the keymap_br_abnt2.h file that includes the wrong source ( keymap_common.h instead of keymap.h ) Updates the keymap_swedish.h file to be specific to swedish, and not just \"nordic\" in general. Any keymaps using this will need to remove NO_* and replace it with SE_* . Update repo to use LUFA as a git submodule \u00b6 /lib/LUFA removed from the repo LUFA set as a submodule, pointing to qmk/lufa This should allow more flexibility with LUFA, and allow us to keep the sub-module up to date, a lot more easily. It was ~2 years out of date with no easy path to fix that. This prevents that from being an issue in the future Migrating ACTION_BACKLIGHT_*() entries in fn_actions to BL_ keycodes \u00b6 fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() All keymaps using these actions have had the relevant KC_FN* keys replaced with the equivalent BL_* keys If you currently use KC_FN* you will need to replace fn_actions with the custom keycode and macro features Remove KC_DELT alias in favor of KC_DEL \u00b6 KC_DELT was a redundant, undocumented alias for KC_DELETE It has been removed and all its uses replaced with the more common KC_DEL alias Around 90 keymaps (mostly for ErgoDox boards) have been modified as a result","title":"2019\u5e748\u670830\u65e5"},{"location":"ChangeLog/20190830/#qmk-breaking-change-2019-aug-30","text":"Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. This document marks the inaugural Breaking Change merge. A list of changes follows.","title":"QMK Breaking Change - 2019 Aug 30"},{"location":"ChangeLog/20190830/#core-code-formatting-with-clang-format","text":"All core files ( drivers/ , quantum/ , tests/ , and tmk_core/ ) have been formatted with clang-format A travis process to reformat PR's on merge has been instituted You can use the new CLI command qmk cformat to format before submitting your PR if you wish.","title":"Core code formatting with clang-format"},{"location":"ChangeLog/20190830/#lufa-usb-descriptor-cleanup","text":"Some code cleanups related to the USB HID descriptors on AVR keyboards, to make them easier to read and understand More information: see https://github.com/qmk/qmk_firmware/pull/4871 No behaviour changes anticipated and no keymaps modified","title":"LUFA USB descriptor cleanup"},{"location":"ChangeLog/20190830/#migrating-action_layer_momentary-entries-in-fn_actions-to-mo-keycodes","text":"fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() The end result of removing this obsolete feature should result in a decent reduction in firmware size and code complexity All keymaps affected are recommended to switch away from fn_actions in favour of the custom keycode and macro features","title":"Migrating ACTION_LAYER_MOMENTARY() entries in fn_actions to MO() keycodes"},{"location":"ChangeLog/20190830/#update-atreus-to-current-code-conventions","text":"Duplicate include guards have bypassed the expected header processing behavior All keymaps affected are recommended to remove duplication of <keyboard>/config.h to <keyboard>/keymaps/<user>/config.h and only provide overrides at the keymap level","title":"Update Atreus to current code conventions"},{"location":"ChangeLog/20190830/#backport-changes-to-keymap-language-files-from-zsa-fork","text":"Fixes an issue in the keymap_br_abnt2.h file that includes the wrong source ( keymap_common.h instead of keymap.h ) Updates the keymap_swedish.h file to be specific to swedish, and not just \"nordic\" in general. Any keymaps using this will need to remove NO_* and replace it with SE_* .","title":"Backport changes to keymap language files from ZSA fork"},{"location":"ChangeLog/20190830/#update-repo-to-use-lufa-as-a-git-submodule","text":"/lib/LUFA removed from the repo LUFA set as a submodule, pointing to qmk/lufa This should allow more flexibility with LUFA, and allow us to keep the sub-module up to date, a lot more easily. It was ~2 years out of date with no easy path to fix that. This prevents that from being an issue in the future","title":"Update repo to use LUFA as a git submodule"},{"location":"ChangeLog/20190830/#migrating-action_backlight_-entries-in-fn_actions-to-bl_-keycodes","text":"fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() All keymaps using these actions have had the relevant KC_FN* keys replaced with the equivalent BL_* keys If you currently use KC_FN* you will need to replace fn_actions with the custom keycode and macro features","title":"Migrating ACTION_BACKLIGHT_*() entries in fn_actions to BL_ keycodes"},{"location":"ChangeLog/20190830/#remove-kc_delt-alias-in-favor-of-kc_del","text":"KC_DELT was a redundant, undocumented alias for KC_DELETE It has been removed and all its uses replaced with the more common KC_DEL alias Around 90 keymaps (mostly for ErgoDox boards) have been modified as a result","title":"Remove KC_DELT alias in favor of KC_DEL"},{"location":"ChangeLog/20200229/","text":"QMK Breaking Change - 2020 Feb 29 Changelog \u00b6 Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. Update ChibiOS/ChibiOS-Contrib/uGFX submodules \u00b6 General Notes A make git-submodule may be required after pulling the latest QMK firmware code to update affected submodules to the upgraded revisions Enabling link-time-optimization ( LINK_TIME_OPTIMIZATION_ENABLE = yes ) should work on a lot more boards Upgrade to ChibiOS ver19.1.3 This will allow QMK to update to upstream ChibiOS a lot easier -- the old version was ~2 years out of date. Automated update scripts have been made available to simplify future upgrades. Includes improved MCU support and bugfixes ChibiOS revision is now included in Command output Timers should now be more accurate Upgrade to newer ChibiOS-Contrib Also includes improved MCU support and bugfixes ChibiOS-Contrib revision is now included in Command output Upgrade to newer uGFX Required in order to support updated ChibiOS Fix ChibiOS timer overflow for 16-bit SysTick devices \u00b6 On 16-bit SysTick devices, the timer subsystem in QMK was incorrectly dealing with overflow. When running at a 100000 SysTick frequency (possible on 16-bit devices, but uncommon), this overflow would occur after 0.65 seconds. Timers are now correctly handling this overflow case and timing should now be correct on ChibiOS/ARM. Update LUFA submodule \u00b6 Updates the LUFA submodule to include updates from upstream (abcminiuser/lufa) Includes some cleanup for QMK DFU generation Encoder flip \u00b6 Flips the encoder direction so that clockwise == true is for actually turning the knob clockwise Adds ENCODER_DIRECTION_FLIP define, so that reversing the expected dirction is simple for users. Cleans up documentation page for encoders Adding support for BACKLIGHT_ON_STATE for hardware PWM backlight \u00b6 Previously, the define only affected software PWM, and hardware PWM always assumed an N-channel MOSFET. The hardware PWM backlight setup has been updated to respect this option. The default \"on\" state has been changed to 1 - this impacts all keyboards using software PWM backlight that do not define it explicitly . If your keyboard's backlight is acting strange, it may have a P-channel MOSFET, and will need to have #define BACKLIGHT_ON_STATE 0 added to the keyboard-level config.h . Please see the PR for more detailed information. Migrating ACTION_LAYER_TAP_KEY() entries in fn_actions to LT() keycodes \u00b6 fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() The end result of removing this obsolete feature should result in a decent reduction in firmware size and code complexity All keymaps affected are recommended to switch away from fn_actions in favour of the custom keycode and macro features Moving backlight keycode handling to process_keycode/ \u00b6 This refactors the backlight keycode logic to be clearer and more modular. All backlight-related keycodes are now actioned in a single file. The ACTION_BACKLIGHT_* macros have also been deleted. If you are still using these in a fn_actions[] block, please switch to using the backlight keycodes or functions directly. Refactor Planck keymaps to use Layout Macros \u00b6 Refactor Planck keymaps to use layout macros instead of raw matrix assignments Makes keymaps revision-agnostic Should reduce noise and errors in Travis CI logs GON NerD codebase refactor \u00b6 Splits the codebase for GON NerD 60 and NerdD TKL PCBs into two separate directories. If your keymap is for a NerD 60 PCB, your make command is now make gon/nerd60:<keymap> . If your keymap is for a NerD TKL PCB, your make command is now make gon/nerdtkl:<keymap> .","title":"QMK Breaking Change - 2020 Feb 29 Changelog"},{"location":"ChangeLog/20200229/#qmk-breaking-change-2020-feb-29-changelog","text":"Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps.","title":"QMK Breaking Change - 2020 Feb 29 Changelog"},{"location":"ChangeLog/20200229/#update-chibioschibios-contribugfx-submodules","text":"General Notes A make git-submodule may be required after pulling the latest QMK firmware code to update affected submodules to the upgraded revisions Enabling link-time-optimization ( LINK_TIME_OPTIMIZATION_ENABLE = yes ) should work on a lot more boards Upgrade to ChibiOS ver19.1.3 This will allow QMK to update to upstream ChibiOS a lot easier -- the old version was ~2 years out of date. Automated update scripts have been made available to simplify future upgrades. Includes improved MCU support and bugfixes ChibiOS revision is now included in Command output Timers should now be more accurate Upgrade to newer ChibiOS-Contrib Also includes improved MCU support and bugfixes ChibiOS-Contrib revision is now included in Command output Upgrade to newer uGFX Required in order to support updated ChibiOS","title":"Update ChibiOS/ChibiOS-Contrib/uGFX submodules"},{"location":"ChangeLog/20200229/#fix-chibios-timer-overflow-for-16-bit-systick-devices","text":"On 16-bit SysTick devices, the timer subsystem in QMK was incorrectly dealing with overflow. When running at a 100000 SysTick frequency (possible on 16-bit devices, but uncommon), this overflow would occur after 0.65 seconds. Timers are now correctly handling this overflow case and timing should now be correct on ChibiOS/ARM.","title":"Fix ChibiOS timer overflow for 16-bit SysTick devices"},{"location":"ChangeLog/20200229/#update-lufa-submodule","text":"Updates the LUFA submodule to include updates from upstream (abcminiuser/lufa) Includes some cleanup for QMK DFU generation","title":"Update LUFA submodule"},{"location":"ChangeLog/20200229/#encoder-flip","text":"Flips the encoder direction so that clockwise == true is for actually turning the knob clockwise Adds ENCODER_DIRECTION_FLIP define, so that reversing the expected dirction is simple for users. Cleans up documentation page for encoders","title":"Encoder flip"},{"location":"ChangeLog/20200229/#adding-support-for-backlight_on_state-for-hardware-pwm-backlight","text":"Previously, the define only affected software PWM, and hardware PWM always assumed an N-channel MOSFET. The hardware PWM backlight setup has been updated to respect this option. The default \"on\" state has been changed to 1 - this impacts all keyboards using software PWM backlight that do not define it explicitly . If your keyboard's backlight is acting strange, it may have a P-channel MOSFET, and will need to have #define BACKLIGHT_ON_STATE 0 added to the keyboard-level config.h . Please see the PR for more detailed information.","title":"Adding support for BACKLIGHT_ON_STATE for hardware PWM backlight"},{"location":"ChangeLog/20200229/#migrating-action_layer_tap_key-entries-in-fn_actions-to-lt-keycodes","text":"fn_actions is deprecated, and its functionality has been superseded by direct keycodes and process_record_user() The end result of removing this obsolete feature should result in a decent reduction in firmware size and code complexity All keymaps affected are recommended to switch away from fn_actions in favour of the custom keycode and macro features","title":"Migrating ACTION_LAYER_TAP_KEY() entries in fn_actions to LT() keycodes"},{"location":"ChangeLog/20200229/#moving-backlight-keycode-handling-to-process_keycode","text":"This refactors the backlight keycode logic to be clearer and more modular. All backlight-related keycodes are now actioned in a single file. The ACTION_BACKLIGHT_* macros have also been deleted. If you are still using these in a fn_actions[] block, please switch to using the backlight keycodes or functions directly.","title":"Moving backlight keycode handling to process_keycode/"},{"location":"ChangeLog/20200229/#refactor-planck-keymaps-to-use-layout-macros","text":"Refactor Planck keymaps to use layout macros instead of raw matrix assignments Makes keymaps revision-agnostic Should reduce noise and errors in Travis CI logs","title":"Refactor Planck keymaps to use Layout Macros"},{"location":"ChangeLog/20200229/#gon-nerd-codebase-refactor","text":"Splits the codebase for GON NerD 60 and NerdD TKL PCBs into two separate directories. If your keymap is for a NerD 60 PCB, your make command is now make gon/nerd60:<keymap> . If your keymap is for a NerD TKL PCB, your make command is now make gon/nerdtkl:<keymap> .","title":"GON NerD codebase refactor"},{"location":"ChangeLog/20200530/","text":"QMK Breaking Change - 2020 May 30 Changelog \u00b6 Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. The list of changes follows. Core Changes \u00b6 Converting V-USB usbdrv to a submodule \u00b6 #8321 and qmk_compiler#62 . These PRs move the V-USB driver code out of the qmk_firmware repository and into a submodule pointed at https://github.com/obdev/v-usb. This will make it easier to update the codebase if needed, while applying any potential QMK-specific modifications by forking it to the QMK GitHub organization. Unify Tap Hold functions and documentation \u00b6 #8348 Updates all of the per key tap-hold functions to pass the keyrecord_t structure, and include documentation changes. Any remaining versions or code outside of the main repo will need to be converted: | Old function | New Function | |------------------------------------------------------|---------------------------------------------------------------------------| | uint16_t get_tapping_term(uint16_t keycode) | uint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) | | bool get_ignore_mod_tap_interrupt(uint16_t keycode) | bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) | Python Required In The Build Process \u00b6 #9000 This is the last release of QMK that will work without having Python 3.6 (or later) installed. If your environment is not fully setup you will get a warning instructing you to set it up. After the next breaking change you will not be able to build if bin/qmk hello does not work. Upgrade from tinyprintf to mpaland/printf \u00b6 #8269 Provides debug functionality on ChibiOS/ARM that is more compliant than previous integrations. Less maintenence, fewer QMK customisations, and allows QMK to sidestep previous compile and runtime issues. A make git-submodule may be required after pulling the latest QMK Firmware code to update to the new dependency. Fixed RGB_DISABLE_AFTER_TIMEOUT to be seconds based & small internals cleanup \u00b6 #6480 Changes RGB_DISABLE_AFTER_TIMEOUT to be based on milliseconds instead of ticks. Includes a code cleanup, resulting in a savings of 100 bytes, depending on features used. Fixed issues with timeouts / suspending at the wrong time not turning off all LEDs in some cases. The RGB_DISABLE_AFTER_TIMEOUT definition is now deprecated, and has been superseded by RGB_DISABLE_TIMEOUT . To use the new definition, rename RGB_DISABLE_AFTER_TIMEOUT to RGB_DISABLE_TIMEOUT in your config.h file, and multiply the value set by 1200. Before: #define RGB_DISABLE_AFTER_TIMEOUT 100 After: #define RGB_DISABLE_TIMEOUT 120000 Switch to qmk forks for everything \u00b6 #9019 Fork all QMK submodules to protect against upstream repositories disappearing. code cleanup regarding deprecated macro PLAY_NOTE_ARRAY by replacing it with PLAY_SONG \u00b6 #8484 Removes the deprecated PLAY_NOTE_ARRAY macro. References to it are replaced with PLAY_SONG , which references the same function. fixing wrong configuration of AUDIO feature \u00b6 #8903 and #8974 audio_avr.c does not default to any pin; there has to be a #define XX_AUDIO in config.h at some level for Audio to actually work. Otherwise, the Audio code ends up cluttering the firmware, possibly breaking builds because the maximum allowed firmware size is exceeded. These changes fix this by disabling Audio on keyboards that have the feature misconfigured, and therefore non-functional. Also, add a compile-time error to alert the user to a missing pin-configuration (on AVR boards) when AUDIO_ENABLE = yes is set. Keyboard Refactors \u00b6 Migrating Lily58 to use split_common \u00b6 #6260 Modifies the default firmware for Lily58 to use the split_common library, instead of including and depending on its own set of libraries for the following functionality: SSD1306 display i2c for OLED Serial Communication This allows current lily58 firmware to advance with updates to the split_common library, which is shared with many other split keyboards. To migrate existing Lily58 firmware: \u00b6 Changes to config.h : - Remove #define SSD1306OLED from config.h Changes to keymap.c : - Find/Replace each instance of #ifdef SSD1306OLED with #ifdef OLED_DRIVER_ENABLE - The following changes are for compatibility with the OLED driver. If you don't use the OLED driver you may safely delete this section - Alternatively, if you did not change the OLED code from that in default , you may find it easier to simply copy the relevant section . Otherwise, the changes you need to make are as follows (sample change here ) - Remove the block #ifdef SSD1306OLED iota_gfx_init ( ! has_usb ()); // turns on the display #endif - Within the block bounded by #ifdef OLED_DRIVER_ENABLE and #endif // OLED_DRIVER_ENABLE , add the following block to ensure that your two OLEDs are rotated correctly across the left and right sides: oled_rotation_t oled_init_user ( oled_rotation_t rotation ) { if ( ! is_keyboard_master ()) return OLED_ROTATION_180 ; // flips the display 180 degrees if offhand return rotation ; } - Remove the functions matrix_scan_user , matrix_update and iota_gfx_task_user - Find/Replace matrix_render_user(struct CharacterMatrix *matrix) with iota_gfx_task_user(void) - Find/Replace is_master with is_keyboard_master() - For each instance of matrix_write_ln(matrix, display_fn()) , rewrite it as oled_write_ln(read_layer_state(), false); - For each instance of matrix_write(matrix, read_logo()); , replace with oled_write(read_logo(), false); Refactor zinc to use split_common \u00b6 #7114 and #9171 Refactor to use split_common and remove split codes under the zinc/revx/ Add - backlight RGB LED and/or underglow RGB LED option Add - continuous RGB animations feature (between L and R halves) Fix - keymap files to adapt to changes all authors of keymaps confirmed this PR Update - documents and rules.mk Refactor of TKC1800 to use common OLED code \u00b6 #8472 Modifies the default firmware for TKC1800 to use the in-built I2C and OLED drivers, instead of including and depending on its own set of libraries for the following functionality: SSD1306 display i2c for OLED This allows current TKC1800 firmware to advance with updates to those drivers, which are shared with other keyboards. To migrate existing TKC1800 firmware: \u00b6 Changes to config.h : - Remove #define SSD1306OLED from config.h Changes to tkc1800.c : - Add the following to avoid debug errors on HID_listen if the screen is not present void keyboard_pre_init_kb ( void ) { setPinInputHigh ( D0 ); setPinInputHigh ( D1 ); keyboard_pre_init_user (); } Changes to keymap.c : - Find/Replace each instance of #ifdef SSD1306OLED with #ifdef OLED_DRIVER_ENABLE - The following changes are for compatibility with the OLED driver. If you don't use the OLED driver you may safely delete this section - Remove the block #ifdef SSD1306OLED iota_gfx_init ( ! has_usb ()); // turns on the display #endif - Within the block bounded by #ifdef OLED_DRIVER_ENABLE and #endif // OLED_DRIVER_ENABLE , add the following block to ensure that your two OLEDs are rotated correctly across the left and right sides: oled_rotation_t oled_init_user ( oled_rotation_t rotation ) { if ( ! is_keyboard_master ()) return OLED_ROTATION_180 ; // flips the display 180 degrees if offhand return rotation ; } - Remove the function iota_gfx_task_user Split HHKB to ANSI and JP layouts and Add VIA support for each \u00b6 #8582 Splits the HHKB codebase into two separate folders keyboards/hhkb/ansi and keyboards/hhkb/jp . Adds VIA Configurator support for both versions. Migrating existing HHKB keymaps \u00b6 Remove any checks for the HHKB_JP definition All checks for this definition have been removed, and each version uses the source that is appropriate to that version. Move the directory for your keymap into the appropriate keymaps directory keyboards/hhkb/ansi/keymaps/ for ANSI HHKBs keyboards/hhkb/jp/keymaps/ for HHKB JPs Compile with the new keyboard names This PR changes the compilation instructions for the HHKB Alternate Controller. To compile firmware for this controller moving forward, use: make hhkb/ansi for ANSI-layout HHKBs make hhkb/jp for HHKB JP keyboards Keyboard Moves \u00b6 #8412 by blindassassin111 #8499 by algernon #8830 by Spaceman (formerly known as Rionlion100) #8537 by hsgw Keyboards by Keyboardio, Spaceman, and hsgw move to vendor folders, while PCBs designed by blindassassin111 are renamed. Old Name New Name 2_milk spaceman/2_milk at101_blackheart at101_bh ergoinu dm9records/ergoinu model01 keyboardio/model01 omnikey_blackheart omnikey_bh pancake spaceman/pancake plaid dm9records/plaid tartan dm9records/tartan z150_blackheart z150_bh If you own one of these PCBs, please use the new names to compile your firmware moving forward. Keycode Migration PRs \u00b6 #8954 , #8957 , #8958 , #8959 , #8968 , #8977 , and #8979 Authored by fauxpark, these pull requests remove references to deprecated TMK macros that have been superseded by native QMK keycodes. Old fn_actions action New QMK keycode ACTION_DEFAULT_LAYER_SET(layer) DF(layer) ACTION_LAYER_MODS(layer, mod) LM(layer, mod) ACTION_LAYER_ONESHOT(mod) OSL(mod) ACTION_LAYER_TOGGLE(layer) TG(layer) ACTION_MODS_ONESHOT(mod) OSM(mod) ACTION_MODS_TAP_KEY(mod, kc) MT(mod, kc) ACTION_MODS_KEY(mod, kc) e.g. ACTION_MODS_KEY(MOD_LCTL, KC_0) MOD(kc) e.g. LCTL(KC_0)","title":"QMK Breaking Change - 2020 May 30 Changelog"},{"location":"ChangeLog/20200530/#qmk-breaking-change-2020-may-30-changelog","text":"Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. The list of changes follows.","title":"QMK Breaking Change - 2020 May 30 Changelog"},{"location":"ChangeLog/20200530/#core-changes","text":"","title":"Core Changes"},{"location":"ChangeLog/20200530/#converting-v-usb-usbdrv-to-a-submodule","text":"#8321 and qmk_compiler#62 . These PRs move the V-USB driver code out of the qmk_firmware repository and into a submodule pointed at https://github.com/obdev/v-usb. This will make it easier to update the codebase if needed, while applying any potential QMK-specific modifications by forking it to the QMK GitHub organization.","title":"Converting V-USB usbdrv to a submodule"},{"location":"ChangeLog/20200530/#unify-tap-hold-functions-and-documentation","text":"#8348 Updates all of the per key tap-hold functions to pass the keyrecord_t structure, and include documentation changes. Any remaining versions or code outside of the main repo will need to be converted: | Old function | New Function | |------------------------------------------------------|---------------------------------------------------------------------------| | uint16_t get_tapping_term(uint16_t keycode) | uint16_t get_tapping_term(uint16_t keycode, keyrecord_t *record) | | bool get_ignore_mod_tap_interrupt(uint16_t keycode) | bool get_ignore_mod_tap_interrupt(uint16_t keycode, keyrecord_t *record) |","title":"Unify Tap Hold functions and documentation"},{"location":"ChangeLog/20200530/#python-required-in-the-build-process","text":"#9000 This is the last release of QMK that will work without having Python 3.6 (or later) installed. If your environment is not fully setup you will get a warning instructing you to set it up. After the next breaking change you will not be able to build if bin/qmk hello does not work.","title":"Python Required In The Build Process"},{"location":"ChangeLog/20200530/#upgrade-from-tinyprintf-to-mpalandprintf","text":"#8269 Provides debug functionality on ChibiOS/ARM that is more compliant than previous integrations. Less maintenence, fewer QMK customisations, and allows QMK to sidestep previous compile and runtime issues. A make git-submodule may be required after pulling the latest QMK Firmware code to update to the new dependency.","title":"Upgrade from tinyprintf to mpaland/printf"},{"location":"ChangeLog/20200530/#fixed-rgb_disable_after_timeout-to-be-seconds-based-small-internals-cleanup","text":"#6480 Changes RGB_DISABLE_AFTER_TIMEOUT to be based on milliseconds instead of ticks. Includes a code cleanup, resulting in a savings of 100 bytes, depending on features used. Fixed issues with timeouts / suspending at the wrong time not turning off all LEDs in some cases. The RGB_DISABLE_AFTER_TIMEOUT definition is now deprecated, and has been superseded by RGB_DISABLE_TIMEOUT . To use the new definition, rename RGB_DISABLE_AFTER_TIMEOUT to RGB_DISABLE_TIMEOUT in your config.h file, and multiply the value set by 1200. Before: #define RGB_DISABLE_AFTER_TIMEOUT 100 After: #define RGB_DISABLE_TIMEOUT 120000","title":"Fixed RGB_DISABLE_AFTER_TIMEOUT to be seconds based &amp; small internals cleanup"},{"location":"ChangeLog/20200530/#switch-to-qmk-forks-for-everything","text":"#9019 Fork all QMK submodules to protect against upstream repositories disappearing.","title":"Switch to qmk forks for everything"},{"location":"ChangeLog/20200530/#code-cleanup-regarding-deprecated-macro-play_note_array-by-replacing-it-with-play_song","text":"#8484 Removes the deprecated PLAY_NOTE_ARRAY macro. References to it are replaced with PLAY_SONG , which references the same function.","title":"code cleanup regarding deprecated macro PLAY_NOTE_ARRAY by replacing it with PLAY_SONG"},{"location":"ChangeLog/20200530/#fixing-wrong-configuration-of-audio-feature","text":"#8903 and #8974 audio_avr.c does not default to any pin; there has to be a #define XX_AUDIO in config.h at some level for Audio to actually work. Otherwise, the Audio code ends up cluttering the firmware, possibly breaking builds because the maximum allowed firmware size is exceeded. These changes fix this by disabling Audio on keyboards that have the feature misconfigured, and therefore non-functional. Also, add a compile-time error to alert the user to a missing pin-configuration (on AVR boards) when AUDIO_ENABLE = yes is set.","title":"fixing wrong configuration of AUDIO feature"},{"location":"ChangeLog/20200530/#keyboard-refactors","text":"","title":"Keyboard Refactors"},{"location":"ChangeLog/20200530/#migrating-lily58-to-use-split_common","text":"#6260 Modifies the default firmware for Lily58 to use the split_common library, instead of including and depending on its own set of libraries for the following functionality: SSD1306 display i2c for OLED Serial Communication This allows current lily58 firmware to advance with updates to the split_common library, which is shared with many other split keyboards.","title":"Migrating Lily58 to use split_common"},{"location":"ChangeLog/20200530/#refactor-zinc-to-use-split_common","text":"#7114 and #9171 Refactor to use split_common and remove split codes under the zinc/revx/ Add - backlight RGB LED and/or underglow RGB LED option Add - continuous RGB animations feature (between L and R halves) Fix - keymap files to adapt to changes all authors of keymaps confirmed this PR Update - documents and rules.mk","title":"Refactor zinc to use split_common"},{"location":"ChangeLog/20200530/#refactor-of-tkc1800-to-use-common-oled-code","text":"#8472 Modifies the default firmware for TKC1800 to use the in-built I2C and OLED drivers, instead of including and depending on its own set of libraries for the following functionality: SSD1306 display i2c for OLED This allows current TKC1800 firmware to advance with updates to those drivers, which are shared with other keyboards.","title":"Refactor of TKC1800 to use common OLED code"},{"location":"ChangeLog/20200530/#split-hhkb-to-ansi-and-jp-layouts-and-add-via-support-for-each","text":"#8582 Splits the HHKB codebase into two separate folders keyboards/hhkb/ansi and keyboards/hhkb/jp . Adds VIA Configurator support for both versions.","title":"Split HHKB to ANSI and JP layouts and Add VIA support for each"},{"location":"ChangeLog/20200530/#keyboard-moves","text":"#8412 by blindassassin111 #8499 by algernon #8830 by Spaceman (formerly known as Rionlion100) #8537 by hsgw Keyboards by Keyboardio, Spaceman, and hsgw move to vendor folders, while PCBs designed by blindassassin111 are renamed. Old Name New Name 2_milk spaceman/2_milk at101_blackheart at101_bh ergoinu dm9records/ergoinu model01 keyboardio/model01 omnikey_blackheart omnikey_bh pancake spaceman/pancake plaid dm9records/plaid tartan dm9records/tartan z150_blackheart z150_bh If you own one of these PCBs, please use the new names to compile your firmware moving forward.","title":"Keyboard Moves"},{"location":"ChangeLog/20200530/#keycode-migration-prs","text":"#8954 , #8957 , #8958 , #8959 , #8968 , #8977 , and #8979 Authored by fauxpark, these pull requests remove references to deprecated TMK macros that have been superseded by native QMK keycodes. Old fn_actions action New QMK keycode ACTION_DEFAULT_LAYER_SET(layer) DF(layer) ACTION_LAYER_MODS(layer, mod) LM(layer, mod) ACTION_LAYER_ONESHOT(mod) OSL(mod) ACTION_LAYER_TOGGLE(layer) TG(layer) ACTION_MODS_ONESHOT(mod) OSM(mod) ACTION_MODS_TAP_KEY(mod, kc) MT(mod, kc) ACTION_MODS_KEY(mod, kc) e.g. ACTION_MODS_KEY(MOD_LCTL, KC_0) MOD(kc) e.g. LCTL(KC_0)","title":"Keycode Migration PRs"},{"location":"ChangeLog/20200829/","text":"QMK Breaking Change - 2020 Aug 29 Changelog \u00b6 Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. Changes Requiring User Action \u00b6 Relocated Keyboards \u00b6 The Key Company project consolidation ( #9547 ) \u00b6 relocating boards by flehrad to flehrad/ folder ( #9635 ) \u00b6 Keyboards released by The Key Company and keyboards designed by flehrad have moved to vendor folders. If you own any of the keyboards listed below, please use the new names to compile your firmware moving forward. Old Name New Name candybar/lefty tkc/candybar/lefty candybar/righty tkc/candybar/righty m0lly tkc/m0lly tkc1800 tkc/tkc1800 bigswitch flehrad/bigswitch handwired/downbubble flehrad/downbubble handwired/numbrero flehrad/numbrero snagpad flehrad/snagpad handwired/tradestation flehrad/tradestation Updated Keyboard Codebases \u00b6 Keebio RGB wiring update ( #7754 ) \u00b6 This pull request changes the configuration for Keebio split boards to use the same RGB strip wiring for each half, which provides the following improvements: Easier wiring due to one fewer wire needed (the wire between left DOut to extra data pin) and the fact that wiring is the same for both halves. RGB LEDs can be controlled by each half now instead of just master half. Extra data line is freed up to allow for I2C usage instead of serial. If you have customized the value of RGBLED_SPLIT for your keymap, you will need to undefine it using #undef RGBLED_SPLIT before defining it to your customized value. This change affects: BFO-9000 Fourier Iris rev2 Levinson, revs. 1 and 2 Nyquist, revs. 1 and 2 Quefrency rev1 Viterbi, revs. 1 and 2 Changes to Core Functionality \u00b6 Bigger Combo index ( #9318 ) Allows the Combo feature to support more than 256 combos. Any fork that uses process_combo_event needs to update the function's first argument to uint16_t : Old function: void process_combo_event(uint8_t combo_index, bool pressed) New function: void process_combo_event(uint16_t combo_index, bool pressed) Core Changes \u00b6 Fixes \u00b6 Mousekeys: scrolling acceleration is no longer coupled to mouse movement acceleration ( #9174 ) Keymap Extras: correctly assign Question Mark in Czech layout ( #9987 ) Additions and Enhancements \u00b6 allow for WS2812 PWM to work on DMAMUX-capable devices ( #9471 ) Newer STM32 MCUs have a DMAMUX peripheral, which allows mapping of DMAs to different DMA streams, rather than hard-defining the target streams in silicon. Affects STM32L4+ devices, as well as the soon-to-be-supported-by-QMK STM32G4/H7 families. Tested on F303/Proton C (ChibiOS v19, non-DMAMUX), G474 (ChibiOS v20, with DMAMUX). dual-bank STM32 bootloader support ( #8778 and #9738 ) Adds support for STM32 dual-bank flash bootloaders, by toggling a GPIO during early init in order to charge an RC circuit attached to BOOT0 . The main rationale behind this is that dual-bank STM32 devices unconditionally execute user-mode code, regardless of whether or not the user-mode code jumps to the bootloader. If either flash bank is valid (and BOOT0 is low), then the built-in bootloader will skip any sort of DFU. This PR allows for the initialisation sequencing to charge the RC circuit based on the example circuit posted on Discord, effectively pulling BOOT0 high before issuing the system reset. As the RC circuit takes a while to discharge, the system reset executes the ROM bootloader which subsequently sees BOOT0 high, and starts executing the DFU routines. Tested with STM32L082 (with current QMK+current ChibiOS), and STM32G474 (against ChibiOS 20.x). update Space Cadet and Tap Dance features to use Custom Tapping Term when appropriate ( #6259 ) For the Tap Dance feature, this completely removes the need for the ACTION_TAP_DANCE_FN_ADVANCED_TIME dance. HID Joystick Interface ( #4226 and #9949 ) This implements a joystick feature, including a joystick_task function called from TMK, specific keycodes for joystick buttons and a USB HID interface. Tested on V-USB backend and Proton C; compiles but untested on LUFA. In order to test, you have to add JOYSTICK_ENABLE = yes to your rules.mk and #define JOYSTICK_BUTTON_COUNT 8 #define JOYSTICK_AXES_COUNT 2 in your config.h. Christmas RGB Underglow animation now fades between green and red ( #7648 ) RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL has been greatly decreased; please check your animation if you have customized this value. layer state now initializes on startup ( #8318 ) This should produce more consistent behavior between the two functions and layer masks. added support for HSV->RGB conversion without using CIE curve ( #9856 ) added NOEEPROM functions for RGB Matrix ( #9487 ) Added eeprom_helpers for toggle, mode, sethsv, speed, similar to rgblight versions. Added set_speed function. Added helper functions, similar to those in rgblight, in order to add NOEEPROM versions of toggle, step, hue, sat, val, and speed. Minor: spelling correction for EEPROM in a debug message. flashing firmware using st-flash utility from STLink Tools is now supported ( #9964 ) add ability to dump all makefile variables for the specified target ( #8256 ) Adds a new subtarget to builds, dump_vars , which allows for printing out all the variables that make knows about, after all substitutions occur. Example: make handwired/onekey/proton_c:default:dump_vars add ability to change the Auto Shift timeout in real time ( #8441 ) added a timer implementation for backlight on ChibiOS ( #8291 ) added a third endpoint to V-USB keyboards ( #9020 ) added a method to read the OLED display buffer from user space ( #8777 ) K-Type refactor ( #9864 ) The K-Type has been refactored to use QMK's native matrix scanning routine, and now has partial support for the RGB Matrix feature. Joysticks can now be used without defining analog pins ( #10169 ) Clean-ups and Optimizations \u00b6 iWRAP protocol removed ( #9284 ) work begun for consolidation of ChibiOS platform files ( #8327 and #9315 ) Start of the consolidation work to move the ChibiOS board definitions as well as the default set of configuration files for existing board definitions used by keyboards. Uses /platforms/chibios as previously discussed on discord. Consolidates the Proton C configs into the generic F303 definitions. Allows for defining a default set of chconf.h , halconf.h , and mcuconf.h files within the platform definition, which is able to be overridden by the keyboard directly, though include path ordering. Adds template chconf.h , halconf.h , mcuconf.h , and board.h that can be dropped into a keyboard directory, in order to override rather than replace the entire contents of the respective files. Removed Proton C QMK board definitions, falling back to ChibiOS board definitions with QMK overrides. Various tidy-ups for USB descriptor code ( #9005 ) Renamed keyboard_led_stats in lufa.c and ChibiOS usb_main.c to keyboard_led_state , as well as vusb_keyboard_leds , for consistency Formatted CDC and MIDI descriptors better Removed ENDPOINT_CONFIG macro, it seems pointless and removes the need for endpoint address defines in the middle of the endpoint numbering enum Fixed (possibly?) V-USB GET_REPORT request handling. Not sure about this one, but the existing code appears to always return an empty report - now send_keyboard sets this variable to the current report, matching what the LUFA code does. converted CONSUMER2BLUEFRUIT() and CONSUMER2RN42() macros to static inline functions ( #9055 ) Additional cleanups for V-USB code ( #9310 ) Removing the UART stuff entirely, now that we have Console support. Also fixing up various other things; switching some debug() calls to dprintf() , moved raw_hid_report out of the way so that we can implement the shared endpoint stuff. removed inclusion of adafruit_ble.h from ssd1306.c ( #9355 ) outputselect.c is no longer compiled if Bluetooth is disabled ( #9356 ) analogRead() deprecated in favor of analogReadPin() ( #9023 ) forcibly disable NKRO on V-USB controllers ( #9054 ) removed warning if running backlight on STM32F072 ( #10040 ) removed unused CORTEX_VTOR_INIT rules.mk option ( #10053 ) improved handling for enabling Link Time Optimization ( #9832 ) streamline rules for supporting Kiibohd bootloader ( #10129 ) Define STM32_DMA_REQUIRED when using DMA-based WS2812 driver on STM32 ( #10127 ) fix DMA stream ID calculation in ws2812_pwm ( #10008 ) remove support for Adafruit EZ Key Bluetooth controller ( #10103 ) QMK Infrastructure and Internals \u00b6 Attempt to fix CI for non-master branches. ( #9308 ) Actually fetch the branch we're attempting to compare against. Run qmk cformat on develop branch ( #9501 ) minor refactor of Bluetooth API ( #9905 )","title":"QMK Breaking Change - 2020 Aug 29 Changelog"},{"location":"ChangeLog/20200829/#qmk-breaking-change-2020-aug-29-changelog","text":"Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps.","title":"QMK Breaking Change - 2020 Aug 29 Changelog"},{"location":"ChangeLog/20200829/#changes-requiring-user-action","text":"","title":"Changes Requiring User Action"},{"location":"ChangeLog/20200829/#relocated-keyboards","text":"","title":"Relocated Keyboards"},{"location":"ChangeLog/20200829/#keyboard-updates","text":"","title":"Updated Keyboard Codebases"},{"location":"ChangeLog/20200829/#core-updates","text":"Bigger Combo index ( #9318 ) Allows the Combo feature to support more than 256 combos. Any fork that uses process_combo_event needs to update the function's first argument to uint16_t : Old function: void process_combo_event(uint8_t combo_index, bool pressed) New function: void process_combo_event(uint16_t combo_index, bool pressed)","title":"Changes to Core Functionality"},{"location":"ChangeLog/20200829/#core-changes","text":"","title":"Core Changes"},{"location":"ChangeLog/20200829/#core-fixes","text":"Mousekeys: scrolling acceleration is no longer coupled to mouse movement acceleration ( #9174 ) Keymap Extras: correctly assign Question Mark in Czech layout ( #9987 )","title":"Fixes"},{"location":"ChangeLog/20200829/#core-additions","text":"allow for WS2812 PWM to work on DMAMUX-capable devices ( #9471 ) Newer STM32 MCUs have a DMAMUX peripheral, which allows mapping of DMAs to different DMA streams, rather than hard-defining the target streams in silicon. Affects STM32L4+ devices, as well as the soon-to-be-supported-by-QMK STM32G4/H7 families. Tested on F303/Proton C (ChibiOS v19, non-DMAMUX), G474 (ChibiOS v20, with DMAMUX). dual-bank STM32 bootloader support ( #8778 and #9738 ) Adds support for STM32 dual-bank flash bootloaders, by toggling a GPIO during early init in order to charge an RC circuit attached to BOOT0 . The main rationale behind this is that dual-bank STM32 devices unconditionally execute user-mode code, regardless of whether or not the user-mode code jumps to the bootloader. If either flash bank is valid (and BOOT0 is low), then the built-in bootloader will skip any sort of DFU. This PR allows for the initialisation sequencing to charge the RC circuit based on the example circuit posted on Discord, effectively pulling BOOT0 high before issuing the system reset. As the RC circuit takes a while to discharge, the system reset executes the ROM bootloader which subsequently sees BOOT0 high, and starts executing the DFU routines. Tested with STM32L082 (with current QMK+current ChibiOS), and STM32G474 (against ChibiOS 20.x). update Space Cadet and Tap Dance features to use Custom Tapping Term when appropriate ( #6259 ) For the Tap Dance feature, this completely removes the need for the ACTION_TAP_DANCE_FN_ADVANCED_TIME dance. HID Joystick Interface ( #4226 and #9949 ) This implements a joystick feature, including a joystick_task function called from TMK, specific keycodes for joystick buttons and a USB HID interface. Tested on V-USB backend and Proton C; compiles but untested on LUFA. In order to test, you have to add JOYSTICK_ENABLE = yes to your rules.mk and #define JOYSTICK_BUTTON_COUNT 8 #define JOYSTICK_AXES_COUNT 2 in your config.h. Christmas RGB Underglow animation now fades between green and red ( #7648 ) RGBLIGHT_EFFECT_CHRISTMAS_INTERVAL has been greatly decreased; please check your animation if you have customized this value. layer state now initializes on startup ( #8318 ) This should produce more consistent behavior between the two functions and layer masks. added support for HSV->RGB conversion without using CIE curve ( #9856 ) added NOEEPROM functions for RGB Matrix ( #9487 ) Added eeprom_helpers for toggle, mode, sethsv, speed, similar to rgblight versions. Added set_speed function. Added helper functions, similar to those in rgblight, in order to add NOEEPROM versions of toggle, step, hue, sat, val, and speed. Minor: spelling correction for EEPROM in a debug message. flashing firmware using st-flash utility from STLink Tools is now supported ( #9964 ) add ability to dump all makefile variables for the specified target ( #8256 ) Adds a new subtarget to builds, dump_vars , which allows for printing out all the variables that make knows about, after all substitutions occur. Example: make handwired/onekey/proton_c:default:dump_vars add ability to change the Auto Shift timeout in real time ( #8441 ) added a timer implementation for backlight on ChibiOS ( #8291 ) added a third endpoint to V-USB keyboards ( #9020 ) added a method to read the OLED display buffer from user space ( #8777 ) K-Type refactor ( #9864 ) The K-Type has been refactored to use QMK's native matrix scanning routine, and now has partial support for the RGB Matrix feature. Joysticks can now be used without defining analog pins ( #10169 )","title":"Additions and Enhancements"},{"location":"ChangeLog/20200829/#core-optimizations","text":"iWRAP protocol removed ( #9284 ) work begun for consolidation of ChibiOS platform files ( #8327 and #9315 ) Start of the consolidation work to move the ChibiOS board definitions as well as the default set of configuration files for existing board definitions used by keyboards. Uses /platforms/chibios as previously discussed on discord. Consolidates the Proton C configs into the generic F303 definitions. Allows for defining a default set of chconf.h , halconf.h , and mcuconf.h files within the platform definition, which is able to be overridden by the keyboard directly, though include path ordering. Adds template chconf.h , halconf.h , mcuconf.h , and board.h that can be dropped into a keyboard directory, in order to override rather than replace the entire contents of the respective files. Removed Proton C QMK board definitions, falling back to ChibiOS board definitions with QMK overrides. Various tidy-ups for USB descriptor code ( #9005 ) Renamed keyboard_led_stats in lufa.c and ChibiOS usb_main.c to keyboard_led_state , as well as vusb_keyboard_leds , for consistency Formatted CDC and MIDI descriptors better Removed ENDPOINT_CONFIG macro, it seems pointless and removes the need for endpoint address defines in the middle of the endpoint numbering enum Fixed (possibly?) V-USB GET_REPORT request handling. Not sure about this one, but the existing code appears to always return an empty report - now send_keyboard sets this variable to the current report, matching what the LUFA code does. converted CONSUMER2BLUEFRUIT() and CONSUMER2RN42() macros to static inline functions ( #9055 ) Additional cleanups for V-USB code ( #9310 ) Removing the UART stuff entirely, now that we have Console support. Also fixing up various other things; switching some debug() calls to dprintf() , moved raw_hid_report out of the way so that we can implement the shared endpoint stuff. removed inclusion of adafruit_ble.h from ssd1306.c ( #9355 ) outputselect.c is no longer compiled if Bluetooth is disabled ( #9356 ) analogRead() deprecated in favor of analogReadPin() ( #9023 ) forcibly disable NKRO on V-USB controllers ( #9054 ) removed warning if running backlight on STM32F072 ( #10040 ) removed unused CORTEX_VTOR_INIT rules.mk option ( #10053 ) improved handling for enabling Link Time Optimization ( #9832 ) streamline rules for supporting Kiibohd bootloader ( #10129 ) Define STM32_DMA_REQUIRED when using DMA-based WS2812 driver on STM32 ( #10127 ) fix DMA stream ID calculation in ws2812_pwm ( #10008 ) remove support for Adafruit EZ Key Bluetooth controller ( #10103 )","title":"Clean-ups and Optimizations"},{"location":"ChangeLog/20200829/#qmk-internals","text":"Attempt to fix CI for non-master branches. ( #9308 ) Actually fetch the branch we're attempting to compare against. Run qmk cformat on develop branch ( #9501 ) minor refactor of Bluetooth API ( #9905 )","title":"QMK Infrastructure and Internals"},{"location":"ChangeLog/20201128/","text":"QMK Breaking Change - 2020 Nov 28 Changelog \u00b6 Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps. Changes Requiring User Action \u00b6 Relocated Keyboards \u00b6 Reduce Helix keyboard build variation ( #8669 ) \u00b6 The build commands for the Helix keyboard are: make <helix_build_name>:<keymap_name> For <helix_build_name> , specify the one in the rightmost column of the table below, such as helix , helix/pico . before Oct 17 2019 Oct 17 2019 Mar 10 2020 Nov 28 2020 helix/rev1 helix/rev1 helix/rev1 helix/rev1 helix/pico helix/pico helix/pico helix/pico helix/pico/back helix/pico/back helix/pico/back helix/pico/under helix/pico/under helix/pico/under helix/pico/sc -- helix/pico/sc/back helix/pico/sc helix/pico/sc/under -- helix/rev2 (=helix) helix/rev2 (=helix) helix/rev2 (=helix) -- helix/rev2/back helix/rev2/back -- helix/rev2/back/oled helix/rev2/back/oled ( --> helix/rev2/back) helix/rev2/oled helix/rev2/oled helix/rev2\u3000(=helix) helix/rev2/oled/back helix/rev2/oled/back helix/rev2/back helix/rev2/oled/under helix/rev2/oled/under helix/rev2/under helix/rev2/sc -- helix/rev2/sc/back -- helix/rev2/sc/oled -- helix/rev2/sc/oledback helix/rev2/sc helix/rev2/sc/oledunder -- helix/rev2/sc/under -- helix/rev2/under helix/rev2/under -- helix/rev2/under/oled helix/rev2/under/oled ( --> helix/rev2/under) Update the Speedo firmware for v3.0 ( #10657 ) \u00b6 The Speedo keyboard has moved to cozykeys/speedo/v2 as the designer prepares to release the Speedo v3.0. Previous Name New Name speedo cozykeys/speedo/v2 -- cozykeys/speedo/v3 new Maartenwut/Maarten name change to evyd13/Evy ( #10274 ) \u00b6 Maartenwut has rebranded as @evyd13, and all released Maartenwut boards have moved. Previous Name New Name maartenwut/atom47/rev2 evyd13/atom47/rev2 maartenwut/atom47/rev3 evyd13/atom47/rev3 maartenwut/eon40 evyd13/eon40 maartenwut/eon65 evyd13/eon65 maartenwut/eon75 evyd13/eon75 maartenwut/eon87 evyd13/eon87 maartenwut/eon95 evyd13/eon95 maartenwut/gh80_1800 evyd13/gh80_1800 maartenwut/gh80_3700 evyd13/gh80_3700 maartenwut/minitomic evyd13/minitomic maartenwut/mx5160 evyd13/mx5160 maartenwut/nt660 evyd13/nt660 maartenwut/omrontkl evyd13/omrontkl maartenwut/plain60 evyd13/plain60 maartenwut/pockettype evyd13/pockettype maartenwut/quackfire evyd13/quackfire maartenwut/solheim68 evyd13/solheim68 maartenwut/ta65 evyd13/ta65 maartenwut/wasdat evyd13/wasdat maartenwut/wasdat_code evyd13/wasdat_code maartenwut/wonderland evyd13/wonderland Xelus Valor and Dawn60 Refactors ( #10512 , #10584 ) \u00b6 The Valor and Dawn60 keyboards by Xelus22 both now require their revisions to be specified when compiling. Previous Name New Name xelus/dawn60 xelus/dawn60/rev1 xelus/valor xelus/valor/rev1 Updated Keyboard Codebases \u00b6 AEboards EXT65 Refactor ( #10820 ) \u00b6 The EXT65 codebase has been reworked so keymaps can be used with either revision. Core Changes \u00b6 Fixes \u00b6 Reconnect the USB if users wake up a computer from the keyboard to restore the USB state ( #10088 ) Fix cursor position bug in oled_write_raw functions ( #10800 ) Additions and Enhancements \u00b6 Allow MATRIX_ROWS to be greater than 32 ( #10183 ) Add support for soft serial to ATmega32U2 ( #10204 ) Allow direct control of MIDI velocity value ( #9940 ) Joystick 16-bit support ( #10439 ) Allow encoder resolutions to be set per encoder ( #10259 ) Share button state from mousekey to pointing_device ( #10179 ) Add advanced/efficient RGB Matrix Indicators ( #8564 ) OLED display update interval support ( #10388 ) Per-Key Retro Tapping ( #10622 ) Allow backlight duty cycle limit ( #10260 ) Add step sequencer feature ( #9703 ) Added add_oneshot_mods & del_oneshot_mods ( #10549 ) Add AT90USB support for serial.c ( #10706 ) Auto shift: support repeats and early registration (#9826) Clean-ups and Optimizations \u00b6 Haptic and solenoid cleanup ( #9700 ) XD75 cleanup ( #10524 ) Minor change to behavior allowing display updates to continue between task ticks ( #10750 ) Change some GPIO manipulations in matrix.c to be atomic ( #10491 ) combine repeated lines of code for ATmega32U2, ATmega16U2, ATmega328 and ATmega328P ( #10837 ) Remove references to HD44780 ( #10735 ) QMK Infrastructure and Internals \u00b6 Add ability to build a subset of all keyboards based on platform. ( #10420 ) Initialise EEPROM drivers at startup, instead of upon first execution ( #10438 ) Make bootloader_jump weak for ChibiOS ( #10417 ) Support for STM32 GPIOF,G,H,I,J,K ( #10206 ) Add milc as a dependency and remove the installed milc ( #10563 ) ChibiOS upgrade: early init conversions ( #10214 ) ChibiOS upgrade: configuration file migrator ( #9952 ) Add definition based on currently-selected serial driver. ( #10716 ) Allow for modification of output RGB values when using rgblight/rgb_matrix. ( #10638 ) Allow keyboards/keymaps to execute code at each main loop iteration ( #10530 ) qmk cformat ( #10767 ) Add a Make variable to easily enable DEBUG_MATRIX_SCAN_RATE on the command line ( #10824 ) update Chibios OS USB for the OTG driver ( #8893 ) Fixup version.h writing when using SKIP_VERSION=yes ( #10972 , #10974 ) Rename ledmatrix.h to match .c file ( #7949 ) Split RGB_MATRIX_ENABLE into _ENABLE and _DRIVER ( #10231 ) Split LED_MATRIX_ENABLE into _ENABLE and _DRIVER ( #10840 )","title":"QMK Breaking Change - 2020 Nov 28 Changelog"},{"location":"ChangeLog/20201128/#qmk-breaking-change-2020-nov-28-changelog","text":"Four times a year QMK runs a process for merging Breaking Changes. A Breaking Change is any change which modifies how QMK behaves in a way that is incompatible or potentially dangerous. We limit these changes to 4 times per year so that users can have confidence that updating their QMK tree will not break their keymaps.","title":"QMK Breaking Change - 2020 Nov 28 Changelog"},{"location":"ChangeLog/20201128/#changes-requiring-user-action","text":"","title":"Changes Requiring User Action"},{"location":"ChangeLog/20201128/#relocated-keyboards","text":"","title":"Relocated Keyboards"},{"location":"ChangeLog/20201128/#keyboard-updates","text":"","title":"Updated Keyboard Codebases"},{"location":"ChangeLog/20201128/#core-changes","text":"","title":"Core Changes"},{"location":"ChangeLog/20201128/#core-fixes","text":"Reconnect the USB if users wake up a computer from the keyboard to restore the USB state ( #10088 ) Fix cursor position bug in oled_write_raw functions ( #10800 )","title":"Fixes"},{"location":"ChangeLog/20201128/#core-additions","text":"Allow MATRIX_ROWS to be greater than 32 ( #10183 ) Add support for soft serial to ATmega32U2 ( #10204 ) Allow direct control of MIDI velocity value ( #9940 ) Joystick 16-bit support ( #10439 ) Allow encoder resolutions to be set per encoder ( #10259 ) Share button state from mousekey to pointing_device ( #10179 ) Add advanced/efficient RGB Matrix Indicators ( #8564 ) OLED display update interval support ( #10388 ) Per-Key Retro Tapping ( #10622 ) Allow backlight duty cycle limit ( #10260 ) Add step sequencer feature ( #9703 ) Added add_oneshot_mods & del_oneshot_mods ( #10549 ) Add AT90USB support for serial.c ( #10706 ) Auto shift: support repeats and early registration (#9826)","title":"Additions and Enhancements"},{"location":"ChangeLog/20201128/#core-optimizations","text":"Haptic and solenoid cleanup ( #9700 ) XD75 cleanup ( #10524 ) Minor change to behavior allowing display updates to continue between task ticks ( #10750 ) Change some GPIO manipulations in matrix.c to be atomic ( #10491 ) combine repeated lines of code for ATmega32U2, ATmega16U2, ATmega328 and ATmega328P ( #10837 ) Remove references to HD44780 ( #10735 )","title":"Clean-ups and Optimizations"},{"location":"ChangeLog/20201128/#qmk-internals","text":"Add ability to build a subset of all keyboards based on platform. ( #10420 ) Initialise EEPROM drivers at startup, instead of upon first execution ( #10438 ) Make bootloader_jump weak for ChibiOS ( #10417 ) Support for STM32 GPIOF,G,H,I,J,K ( #10206 ) Add milc as a dependency and remove the installed milc ( #10563 ) ChibiOS upgrade: early init conversions ( #10214 ) ChibiOS upgrade: configuration file migrator ( #9952 ) Add definition based on currently-selected serial driver. ( #10716 ) Allow for modification of output RGB values when using rgblight/rgb_matrix. ( #10638 ) Allow keyboards/keymaps to execute code at each main loop iteration ( #10530 ) qmk cformat ( #10767 ) Add a Make variable to easily enable DEBUG_MATRIX_SCAN_RATE on the command line ( #10824 ) update Chibios OS USB for the OTG driver ( #8893 ) Fixup version.h writing when using SKIP_VERSION=yes ( #10972 , #10974 ) Rename ledmatrix.h to match .c file ( #7949 ) Split RGB_MATRIX_ENABLE into _ENABLE and _DRIVER ( #10231 ) Split LED_MATRIX_ENABLE into _ENABLE and _DRIVER ( #10840 )","title":"QMK Infrastructure and Internals"},{"location":"ChangeLog/20210227/","text":"QMK Breaking Changes - 2021 February 27 Changelog \u00b6 Changes Requiring User Action \u00b6 The following keyboards have had their source moved within QMK: Old Keyboard Name New Keyboard Name bear_65 jacky_studio/bear_65 s7_elephant/rev1 jacky_studio/s7_elephant/rev1 s7_elephant/rev2 jacky_studio/s7_elephant/rev2 aplx6 aplyard/aplx6/rev1 southpaw75 fr4/southpaw75 The Aplyard Aplx6 rev2 and the FR4Boards Unix60 have also been added as part of these changes. Additionally, the handwired/bluepill/bluepill70 keyboard has been removed. Core Changes \u00b6 ChibiOS Update and Config Migration \u00b6 QMK's ChibiOS and ChibiOS-Contrib submodules have been updated to version 20.3.2. Along with this, QMK now provides default configuration files for all commonly-supported ARM microcontrollers running on ChibiOS. As such, keyboards are now only required to define settings which differ from the defaults, thereby reducing the size of pull requests for keyboards running atop ChibiOS. QMK Infrastructure and Internals \u00b6 Python is now required to build QMK. The minimum Python version has been increased to 3.7. The power of info.json has been massively expanded. Most keyboard parameters can now be expressed in info.json instead of config.h / rules.mk . This should make maintaining keyboards easier, and will enable tooling that can allow non-technical users to add and maintain QMK keyboards without writing any code. To ease migration a new command has been provided, qmk generate-info-json -kb <keyboard> . You can use this command to generate a complete info.json file for a keyboard and then remove the duplicate information from config.h and rules.mk . Detailed example showing how to generate a new info.json and identify duplicate keys: user@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk generate-info-json > new-info.json user@hostname:~/qmk_firmware/keyboards/lets_split:0$ mv new-info.json info.json user@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk info \u26a0 lets_split/rev2: DEBOUNCE in config.h is overwriting debounce in info.json \u26a0 lets_split/rev2: DEVICE_VER in config.h is overwriting usb.device_ver in info.json \u26a0 lets_split/rev2: DIODE_DIRECTION in config.h is overwriting diode_direction in info.json \u26a0 lets_split/rev2: MANUFACTURER in config.h is overwriting manufacturer in info.json \u26a0 lets_split/rev2: RGB_DI_PIN in config.h is overwriting rgblight.pin in info.json \u26a0 lets_split/rev2: RGBLED_NUM in config.h is overwriting rgblight.led_count in info.json \u26a0 lets_split/rev2: PRODUCT_ID in config.h is overwriting usb.pid in info.json \u26a0 lets_split/rev2: VENDOR_ID in config.h is overwriting usb.vid in info.json \u26a0 lets_split/rev2: Matrix pins are specified in both info.json and config.h, the config.h values win. \u26a0 lets_split/rev2: LAYOUTS in rules.mk is overwriting community_layouts in info.json \u26a0 lets_split/rev2: Feature bootmagic is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature mousekey is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature extrakey is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature console is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature command is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature nkro is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature backlight is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature midi is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature audio is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature unicode is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature bluetooth is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature rgblight is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature sleep_led is specified in both info.json and rules.mk, the rules.mk value wins. Keyboard Name: Let's Split Manufacturer: Wootpatoot Website: Maintainer: QMK Community Keyboard Folder: lets_split/rev2 Layouts: LAYOUT, LAYOUT_ortho_4x12 Size: 13 x 4 Processor: atmega32u4 Bootloader: caterina Detailed Change List \u00b6 Changes Requiring User Action \u00b6 Refactor Jacky's boards (Bear65 and S7 Elephant) ( #10528 , #11981 ) Remove handwired/bluepill ( #11415 ) Aplyard Aplx6 Added rev2 & move rev1+rev2 to parent folder ( #10973 ) added unix60 , moved together with southpaw75 into fr4 folder ( #11195 ) Fixes \u00b6 GCC 10 can now compile Drop Alt firmware ( #9485 ) Fix compiling on develop branch ( #11409 ) Fix broken keyboards and keymaps ( #11412 , #11427 , #11448 , #11447 , #11473 , #11584 , #11600 ) Fixed up build dependencies so that generated files are made available before compiling any object files ( #11435 ) Formatting fixes ( 378edd9 , #11594 , 27749e1 ) Include stdbool.h in uart.h to fix compiler errors ( #11728 ) Decouple USB events from the USB interrupt handler in ChibiOS ( #10437 ) Fixes an issue while using Backlight and External EEPROM at the same time that would cause the MCU to lock up. Address wake from sleep instability ( #11450 ) Fix pressing media key on a momentarily activated layer may lead to missing key up events ( #11162 ) Fix an RGB initialisation bug on Massdrop keyboards ( #12022 ) Fix file encoding errors on Windows, and layouts not correctly merging into info.json ( #12039 ) Additions and Enhancements \u00b6 Allow configuration of serial USART timeout ( #11057 ) Added Sync Timer feature for Split Common keyboards ( #10997 ) Add modifier state to the Split Common transport ( #10400 ) Add Pix keyboard by sendz ( sendyyeah/pix ) ( #11154 ) Implement option for kinetic mouse movement algorithm for mouse keys ( #6739 ) Improved Language Specific Keycodes for US International and Extended Layouts ( #11307 ) Modified QWIIC_ENABLE in rules.mk to be yes/no choice, adding QWIIC_DRIVERS to allow for inclusion of specific drivers ( #11426 ) Allow AVR-based keyboards to override the bootloader_jump function ( #11418 ) Refine RGBLight Twinkle effect to be smoother (use breathing curve) ( #11350 ) Keep track of last matrix activity ( #10730 , ab375d3 , #11552 ) fix matrix_io_delay() timing in quantum/matrix.c ( #9603 ) Keep track of encoder activity ( #11595 ) Backport ChibiOS Audio changes from ZSA ( #11687 ) Add support for 8 buttons to mouse report ( #10807 ) Allow post_config.h to be implemented in userspace ( #11519 ) Adds AT90USB162 support ( #11570 ) Stop sounds when suspended ( #11553 ) Revamp spidey3 userspace and keymaps ( #11768 ) Add support for analog USBPD on STM32G4xx ( #11824 ) Master matrix can now be transported to the slave side in Split Common keyboards ( #11046 ) RGBLight: Allow configurable default settings ( #11912 ) Add tap_code_delay(code, delay) ( #11913 , #11938 ) Clean-ups and Optimizations \u00b6 Fix duplicate I2C_KEYMAP_START define ( #11237 ) Rewrite APA102 support for RGBLight ( #10894 ) Update ADB Protocol implementation in TMK Core ( #11168 ) Remove unused action_get_macro() usages in user files ( #11165 ) Remove QMK_KEYBOARD_CONFIG_H ( #11576 ) Remove duplicated housekeeping in arm_atsam ( #11672 ) UART driver refactor ( #11637 ) Move transport.c to QUANTUM_LIB_SRC ( #11751 ) Remove MIDI_ENABLE_STRICT from user keymaps ( #11750 ) Remove legacy print backward compatiblitly ( #11805 ) Migrate mousekey to quantum ( #11804 ) remove deprecated qmk json-keymap ( #11823 ) Remove FAUXCLICKY feature (deprecated) ( #11829 ) Refactor platform logic within print.h ( #11863 ) Audio system overhaul ( #11820 ) Output selection: Remove \"USB and BT\" option for Bluetooth ( #11940 ) tmk_core/common/action.c : refactor for code size; merge multiple case s into one ( #11943 ) Remove rules and settings from user keymaps that are already defined at keyboard level ( #11966 ) QMK Infrastructure and Internals \u00b6 bump to python 3.7 ( #11408 ) develop branch is now formatted as part of CI tasks ( #11893 , #11905 , #11907 , #11928 , #11936 ) Configure keyboard matrix from info.json ( #10817 ) Validate our JSON data using json_schema ( #11101 ) Use the schema to eliminate custom code ( #11108 ) Add support for specifying BOARD in info.json ( #11492 ) Document how to add data driven configurations ( #11502 ) Process info.json rules ahead of userspace rules ( #11542 ) Remove duplicate manufacturer definitions ( #11544 ) Update list of MCUs in keyboard.jsonschema to mirror qmk.constants.py ( #11688 ) Create a system to map between info.json and config.h / rules.mk ( #11548 ) Make LAYOUT parsing more robust ( #12000 ) ChibiOS Update and Config Migration \u00b6 Add board specific to Proton-C, with usual defaults turned on to match Pro-Micro ( #10976 ) Disable almost all ChibiOS subsystems in default configs ( #11111 ) Config Migrations ( #10418 , #11123 , #11261 , #11413 , #11414 , #11495 , #11504 , #11529 , #11588 , #11598 , #11607 , #11617 , #11620 , #11630 , #11646 , #11689 , #11846 , #11927 , #12001 ) Disable subsystems repo-wide ( #11449 ) Leftover early initialisation conversions ( #11615 ) Fix up comments showing how to execute config migration ( #11621 ) Add STM32G431 and STM32G474 board definitions ( #11793 )","title":"QMK Breaking Changes - 2021 February 27 Changelog"},{"location":"ChangeLog/20210227/#qmk-breaking-changes-2021-february-27-changelog","text":"","title":"QMK Breaking Changes - 2021 February 27 Changelog"},{"location":"ChangeLog/20210227/#changes-requiring-user-action","text":"The following keyboards have had their source moved within QMK: Old Keyboard Name New Keyboard Name bear_65 jacky_studio/bear_65 s7_elephant/rev1 jacky_studio/s7_elephant/rev1 s7_elephant/rev2 jacky_studio/s7_elephant/rev2 aplx6 aplyard/aplx6/rev1 southpaw75 fr4/southpaw75 The Aplyard Aplx6 rev2 and the FR4Boards Unix60 have also been added as part of these changes. Additionally, the handwired/bluepill/bluepill70 keyboard has been removed.","title":"Changes Requiring User Action"},{"location":"ChangeLog/20210227/#core-changes","text":"","title":"Core Changes"},{"location":"ChangeLog/20210227/#chibios-update-and-config-migration","text":"QMK's ChibiOS and ChibiOS-Contrib submodules have been updated to version 20.3.2. Along with this, QMK now provides default configuration files for all commonly-supported ARM microcontrollers running on ChibiOS. As such, keyboards are now only required to define settings which differ from the defaults, thereby reducing the size of pull requests for keyboards running atop ChibiOS.","title":"ChibiOS Update and Config Migration"},{"location":"ChangeLog/20210227/#qmk-infrastructure-and-internals","text":"Python is now required to build QMK. The minimum Python version has been increased to 3.7. The power of info.json has been massively expanded. Most keyboard parameters can now be expressed in info.json instead of config.h / rules.mk . This should make maintaining keyboards easier, and will enable tooling that can allow non-technical users to add and maintain QMK keyboards without writing any code. To ease migration a new command has been provided, qmk generate-info-json -kb <keyboard> . You can use this command to generate a complete info.json file for a keyboard and then remove the duplicate information from config.h and rules.mk . Detailed example showing how to generate a new info.json and identify duplicate keys: user@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk generate-info-json > new-info.json user@hostname:~/qmk_firmware/keyboards/lets_split:0$ mv new-info.json info.json user@hostname:~/qmk_firmware/keyboards/lets_split:0$ qmk info \u26a0 lets_split/rev2: DEBOUNCE in config.h is overwriting debounce in info.json \u26a0 lets_split/rev2: DEVICE_VER in config.h is overwriting usb.device_ver in info.json \u26a0 lets_split/rev2: DIODE_DIRECTION in config.h is overwriting diode_direction in info.json \u26a0 lets_split/rev2: MANUFACTURER in config.h is overwriting manufacturer in info.json \u26a0 lets_split/rev2: RGB_DI_PIN in config.h is overwriting rgblight.pin in info.json \u26a0 lets_split/rev2: RGBLED_NUM in config.h is overwriting rgblight.led_count in info.json \u26a0 lets_split/rev2: PRODUCT_ID in config.h is overwriting usb.pid in info.json \u26a0 lets_split/rev2: VENDOR_ID in config.h is overwriting usb.vid in info.json \u26a0 lets_split/rev2: Matrix pins are specified in both info.json and config.h, the config.h values win. \u26a0 lets_split/rev2: LAYOUTS in rules.mk is overwriting community_layouts in info.json \u26a0 lets_split/rev2: Feature bootmagic is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature mousekey is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature extrakey is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature console is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature command is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature nkro is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature backlight is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature midi is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature audio is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature unicode is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature bluetooth is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature rgblight is specified in both info.json and rules.mk, the rules.mk value wins. \u26a0 lets_split/rev2: Feature sleep_led is specified in both info.json and rules.mk, the rules.mk value wins. Keyboard Name: Let's Split Manufacturer: Wootpatoot Website: Maintainer: QMK Community Keyboard Folder: lets_split/rev2 Layouts: LAYOUT, LAYOUT_ortho_4x12 Size: 13 x 4 Processor: atmega32u4 Bootloader: caterina","title":"QMK Infrastructure and Internals"},{"location":"ChangeLog/20210227/#detailed-change-list","text":"","title":"Detailed Change List"},{"location":"ChangeLog/20210227/#changes-requiring-user-action_1","text":"Refactor Jacky's boards (Bear65 and S7 Elephant) ( #10528 , #11981 ) Remove handwired/bluepill ( #11415 ) Aplyard Aplx6 Added rev2 & move rev1+rev2 to parent folder ( #10973 ) added unix60 , moved together with southpaw75 into fr4 folder ( #11195 )","title":"Changes Requiring User Action"},{"location":"ChangeLog/20210227/#fixes","text":"GCC 10 can now compile Drop Alt firmware ( #9485 ) Fix compiling on develop branch ( #11409 ) Fix broken keyboards and keymaps ( #11412 , #11427 , #11448 , #11447 , #11473 , #11584 , #11600 ) Fixed up build dependencies so that generated files are made available before compiling any object files ( #11435 ) Formatting fixes ( 378edd9 , #11594 , 27749e1 ) Include stdbool.h in uart.h to fix compiler errors ( #11728 ) Decouple USB events from the USB interrupt handler in ChibiOS ( #10437 ) Fixes an issue while using Backlight and External EEPROM at the same time that would cause the MCU to lock up. Address wake from sleep instability ( #11450 ) Fix pressing media key on a momentarily activated layer may lead to missing key up events ( #11162 ) Fix an RGB initialisation bug on Massdrop keyboards ( #12022 ) Fix file encoding errors on Windows, and layouts not correctly merging into info.json ( #12039 )","title":"Fixes"},{"location":"ChangeLog/20210227/#additions-and-enhancements","text":"Allow configuration of serial USART timeout ( #11057 ) Added Sync Timer feature for Split Common keyboards ( #10997 ) Add modifier state to the Split Common transport ( #10400 ) Add Pix keyboard by sendz ( sendyyeah/pix ) ( #11154 ) Implement option for kinetic mouse movement algorithm for mouse keys ( #6739 ) Improved Language Specific Keycodes for US International and Extended Layouts ( #11307 ) Modified QWIIC_ENABLE in rules.mk to be yes/no choice, adding QWIIC_DRIVERS to allow for inclusion of specific drivers ( #11426 ) Allow AVR-based keyboards to override the bootloader_jump function ( #11418 ) Refine RGBLight Twinkle effect to be smoother (use breathing curve) ( #11350 ) Keep track of last matrix activity ( #10730 , ab375d3 , #11552 ) fix matrix_io_delay() timing in quantum/matrix.c ( #9603 ) Keep track of encoder activity ( #11595 ) Backport ChibiOS Audio changes from ZSA ( #11687 ) Add support for 8 buttons to mouse report ( #10807 ) Allow post_config.h to be implemented in userspace ( #11519 ) Adds AT90USB162 support ( #11570 ) Stop sounds when suspended ( #11553 ) Revamp spidey3 userspace and keymaps ( #11768 ) Add support for analog USBPD on STM32G4xx ( #11824 ) Master matrix can now be transported to the slave side in Split Common keyboards ( #11046 ) RGBLight: Allow configurable default settings ( #11912 ) Add tap_code_delay(code, delay) ( #11913 , #11938 )","title":"Additions and Enhancements"},{"location":"ChangeLog/20210227/#clean-ups-and-optimizations","text":"Fix duplicate I2C_KEYMAP_START define ( #11237 ) Rewrite APA102 support for RGBLight ( #10894 ) Update ADB Protocol implementation in TMK Core ( #11168 ) Remove unused action_get_macro() usages in user files ( #11165 ) Remove QMK_KEYBOARD_CONFIG_H ( #11576 ) Remove duplicated housekeeping in arm_atsam ( #11672 ) UART driver refactor ( #11637 ) Move transport.c to QUANTUM_LIB_SRC ( #11751 ) Remove MIDI_ENABLE_STRICT from user keymaps ( #11750 ) Remove legacy print backward compatiblitly ( #11805 ) Migrate mousekey to quantum ( #11804 ) remove deprecated qmk json-keymap ( #11823 ) Remove FAUXCLICKY feature (deprecated) ( #11829 ) Refactor platform logic within print.h ( #11863 ) Audio system overhaul ( #11820 ) Output selection: Remove \"USB and BT\" option for Bluetooth ( #11940 ) tmk_core/common/action.c : refactor for code size; merge multiple case s into one ( #11943 ) Remove rules and settings from user keymaps that are already defined at keyboard level ( #11966 )","title":"Clean-ups and Optimizations"},{"location":"ChangeLog/20210227/#qmk-infrastructure-and-internals_1","text":"bump to python 3.7 ( #11408 ) develop branch is now formatted as part of CI tasks ( #11893 , #11905 , #11907 , #11928 , #11936 ) Configure keyboard matrix from info.json ( #10817 ) Validate our JSON data using json_schema ( #11101 ) Use the schema to eliminate custom code ( #11108 ) Add support for specifying BOARD in info.json ( #11492 ) Document how to add data driven configurations ( #11502 ) Process info.json rules ahead of userspace rules ( #11542 ) Remove duplicate manufacturer definitions ( #11544 ) Update list of MCUs in keyboard.jsonschema to mirror qmk.constants.py ( #11688 ) Create a system to map between info.json and config.h / rules.mk ( #11548 ) Make LAYOUT parsing more robust ( #12000 )","title":"QMK Infrastructure and Internals"},{"location":"ChangeLog/20210227/#chibios-update-and-config-migration_1","text":"Add board specific to Proton-C, with usual defaults turned on to match Pro-Micro ( #10976 ) Disable almost all ChibiOS subsystems in default configs ( #11111 ) Config Migrations ( #10418 , #11123 , #11261 , #11413 , #11414 , #11495 , #11504 , #11529 , #11588 , #11598 , #11607 , #11617 , #11620 , #11630 , #11646 , #11689 , #11846 , #11927 , #12001 ) Disable subsystems repo-wide ( #11449 ) Leftover early initialisation conversions ( #11615 ) Fix up comments showing how to execute config migration ( #11621 ) Add STM32G431 and STM32G474 board definitions ( #11793 )","title":"ChibiOS Update and Config Migration"},{"location":"ChangeLog/20210529/","text":"QMK Breaking Changes - 2021 May 29 Changelog \u00b6 Notable Changes \u00b6 RGB Matrix support for split common ( #11055 ) \u00b6 Split boards can now use RGB Matrix without defining a custom matrix. Teensy 3.6 support ( #12258 ) {: id=teensy- }3-6-support \u00b6 Added support for MK66F18 (Teensy 3.6) microcontroller. New command: qmk console ( #12828 ) \u00b6 A new qmk console command has been added for attaching to your keyboard's console. It operates similiarly to QMK Toolbox by allowing you to connect to one or more keyboard consoles to display debugging messages. Improved command: qmk config \u00b6 We've updated the qmk config command to show only the configuration items you have actually set. You can now display (almost) all of the available configuration options, along with their default values, using qmk config -a . LED Matrix Improvements ( #12509 , #12580 , #12588 , #12633 , #12651 , #12685 ) \u00b6 LED Matrix has been improved with effects, CIE1931 curves, and a task system. Changes Requiring User Action \u00b6 Updated Keyboard Codebases \u00b6 Durgod keyboard refactor in preparation for adding additional durgod keyboards ( #11978 ) Updated Function96 with V2 files and removed chconf.h and halconf.h ( #12613 ) [Keyboard] updated a vendor name / fixed minor keymap issues ( #12881 ) [Keyboard] Corne - Remove legacy revision support ( #12226 ) The following keyboards have had their source moved within QMK: Old Keyboard Name New Keyboard Name crkbd/rev1/common crkbd/rev1 function96 function96/v1 nckiibs/flatbread60 delikeeb/flatbread60 nckiibs/vaguettelite delikeeb/vaguettelite nckiibs/vanana/rev1 delikeeb/vanana/rev1 nckiibs/vanana/rev2 delikeeb/vanana/rev2 nckiibs/vaneela delikeeb/vaneela nckiibs/vaneelaex delikeeb/vaneelaex nckiibs/waaffle/rev3/elite_c delikeeb/waaffle/rev3/elite_c nckiibs/waaffle/rev3/pro_micro delikeeb/waaffle/rev3/pro_micro The Function96 V2 has also been added as part of these changes. The codebase for the Durgod K320 has been reworked in anticipation of additional Durgod keyboards gaining QMK support. Additionally, the crkbd/rev1/legacy keyboard has been removed. Bootmagic Deprecation and Refactor ( #12172 ) \u00b6 QMK has decided to deprecate the full Bootmagic feature and leave Bootmagic Lite as the only remaining option. This pull request changes the behavior of BOOTMAGIC_ENABLE such that specifying BOOTMAGIC_ENABLE = yes enables Bootmagic Lite instead of full Bootmagic. If attempts to use Bootmagic functionality result in unexpected behavior, check your rules.mk file and change the BOOTMAGIC_ENABLE setting to specify either lite or full . Tentative Deprecation Schedule \u00b6 This is the current planned roadmap for the behavior of BOOTMAGIC_ENABLE : From 2021 May 29, setting BOOTMAGIC_ENABLE = yes will enable Bootmagic Lite instead of full Bootmagic. From 2021 Aug 28, BOOTMAGIC_ENABLE must be either yes , lite , or no \u2013 setting BOOTMAGIC_ENABLE = full will cause compilation to fail. From 2021 Nov 27, BOOTMAGIC_ENABLE must be either yes or no \u2013 setting BOOTMAGIC_ENABLE = lite will cause compilation to fail. Removal of LAYOUT_kc ( #12160 ) \u00b6 We've removed support for LAYOUT_kc macros, if your keymap uses one you will need to update it use a regular LAYOUT macro. Encoder callbacks are now boolean ( #12805 , #12985 ) \u00b6 To allow for keyboards to override (or not) keymap level code the encoder_update_kb function has been changed from void to bool . You will need to update your function definition to reflect this and ensure that you return a true or false value. Example code before change: void encoder_update_kb ( uint8_t index , bool clockwise ) { encoder_update_user ( index , clockwise ); } void encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } } Example code after change: bool encoder_update_kb ( uint8_t index , bool clockwise ) { return encoder_update_user ( index , clockwise ); } bool encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } return true ; // If you return true, this will allow the keyboard level code to run, as well. //Returning false will override the keyboard level code. Depending on how the keyboard level function is set up. } Core Changes \u00b6 Fixes \u00b6 Fix connection issue in split keyboards when slave and OLED display are connected via I2C (fixes #9335) ( #11487 ) Terrazzo: Fix wrong LED Matrix function names ( #12561 ) Apply the \"NO_LIMITED_CONTROLLER_CONNECT\" fix to atmega16u2 ( #12482 ) Fix comment parsing ( #12750 ) Turn OLED off on suspend in soundmonster Corne keymap ( #10419 ) Fixup build errors on develop branch. ( #12723 ) Fix syntax error when compiling for ARM ( #12866 ) Add missing LED Matrix suspend code to suspend.c ( #12878 ) Fix spelling mistake regarding LED Matrix in split_common. ( #12888 ) [Keymap] Fix QWERTY/DVORAK status output for kzar keymap ( #12895 ) Fixup housekeeping from being invoked twice per loop. ( #12933 ) wait for matrix row signal to go HIGH for every row ( #12945 ) ensure we do not conflict with existing keymap aliases ( #12976 ) [Keyboard] Fix Terrazzo build failure ( #12977 ) Do not hard set config in CPTC files ( #11864 ) Additions and Enhancements \u00b6 ARM - Refactor SLEEP_LED to support more platforms ( #8403 ) Add ability to toggle One Shot functionality ( #4198 ) Add RGB Matrix support to Split Common ( #11055 ) Add support for complementary outputs to the ChibiOS WS2812 PWM driver ( #11988 ) Enable RGB Matrix for Corne ( #12091 ) Set default OLED Update Interval for Split Keyboards to improve matrix scan performance ( #12107 ) Add support for MK66F18 (Teensy 3.6) micro controller ( #12258 ) Split RGB Matrix support for RGBKB Zygomorph ( #11083 ) Add baudrate and circular buffer to ARM WS2812 SPI config ( #12216 ) Add keyboard level weak function for slave matrix scan ( #12317 ) Add link to schematic on EasyEDA for XD60 ( #12018 ) Add Config functions for LED Matrix ( #12361 ) Add pin definitions for MK66F18 ( #12419 ) add kinesis/kint36 keyboard ( #10171 ) Add support for producing UF2-format binaries. ( #12435 ) Implement CIE1931 curve for LED Matrix ( #12417 ) Change BOOTMAGIC_ENABLE=yes to use Bootmagic Lite ( #12172 ) Add kzar keymap for Kinesis Advantage ( #12444 ) LED Matrix: suspend code ( #12509 ) LED Matrix: Task system ( #12580 ) Add missing RGB_MODE_TWINKLE / RGB_M_TW keycodes ( #11935 ) Enhancement of WPM feature ( #11727 ) Add Per Key functionality for AutoShift ( #11536 ) LED Matrix: Reactive effect buffers & advanced indicators ( #12588 ) LED Matrix: support for Split keyboards ( #12633 ) add setting to enable infinite timeout for leader key ( #6580 , #12721 ) Update ADC driver for STM32F1xx, STM32F3xx, STM32F4xx ( #12403 ) Add initial support for tinyuf2 bootloader (when hosted on F411 blackpill) ( #12600 ) Add support for STM32F446 MCU ( #12619 ) Add STM32L433 and L443 support ( #12063 ) Added OLED fade out support ( #12086 ) New command: qmk console ( #12828 ) LED Matrix: Effects! ( #12651 ) Add setup, clone, and env to the list of commands we allow even with broken modules ( #12868 ) LED Matrix: Documentation ( #12685 ) Add function to allow repeated blinking of one layer ( #12237 ) Add support for up to 4 IS31FL3733 drivers ( #12342 ) Convert Encoder callbacks to be boolean functions ( #12805 , #12985 ) [Keymap] Update to Drashna keymap and user code (based on develop) ( #12936 ) Add Full-duplex serial driver for ARM boards ( #9842 ) Document LED_MATRIX_FRAMEBUFFER_EFFECTS ( #12987 ) Backlight: add defines for default level and breathing state ( #12560 , #13024 ) Add dire message about LUFA mass storage bootloader ( #13014 ) Clean-ups and Optimizations \u00b6 Overhaul bootmagic logic to have single entrypoint ( #8532 ) Refactor of USB code within split_common ( #11890 ) Begin the process of deprecating bin/qmk in favor of the global CLI ( #12109 ) LED Matrix: decouple from Backlight ( #12054 ) Remove FUNC() ( #12161 ) Move gpio wait logic to wait.h ( #12067 ) LED Matrix: Clean up includes ( #12197 ) Consistently use bin/qmk when that script is called ( #12286 ) LED Matrix: Additional common_features.mk tweaks ( #12187 ) LED Matrix: Fix up eeconfig code ( #12327 ) Big quantum_keycodes cleanup ( #12249 ) Fix up builds that are now too big for develop branch. ( #12495 ) [Keyboard] kint36: switch to sym_eager_pk debouncing ( #12626 ) [Keyboard] kint2pp: reduce input latency by \u224810ms ( #12625 ) eeprom driver: Refactor where eeprom driver initialisation (and EEPROM emulation initialisation) occurs to make it non-target-specific. ( #12671 ) Change RGB/LED Matrix to use a simple define for USB suspend ( #12697 , #12770 ) Remove pointless SERIAL_LINK_ENABLE rules ( #12846 ) Make Swap Hands use PROGMEM ( #12284 ) Remove KEYMAP and LAYOUT_kc ( #12160 ) Rename point_t -> led_point_t ( #12864 ) Deprecate send_unicode_hex_string() ( #12602 ) [Keyboard] Remove redundant legacy and common headers for crkbd ( #13023 ) QMK Infrastructure and Internals \u00b6 trivial change to trigger api update ( b15288fb87 ) fix some references to bin/qmk that slipped in ( #12832 ) Resolve a number of warnings in qmk generate-api ( #12833 ) Fix another bin/qmk reference ( #12856 ) Use milc.subcommand.config instead of qmk.cli.config ( #12915 )","title":"QMK Breaking Changes - 2021 May 29 Changelog"},{"location":"ChangeLog/20210529/#qmk-breaking-changes-2021-may-29-changelog","text":"","title":"QMK Breaking Changes - 2021 May 29 Changelog"},{"location":"ChangeLog/20210529/#notable-changes","text":"","title":"Notable Changes"},{"location":"ChangeLog/20210529/#rgb-matrix-split-common","text":"Split boards can now use RGB Matrix without defining a custom matrix.","title":"RGB Matrix support for split common (#11055)"},{"location":"ChangeLog/20210529/#teensy-36-support-12258-idteensy-3-6-support","text":"Added support for MK66F18 (Teensy 3.6) microcontroller.","title":"Teensy 3.6 support (#12258) {: id=teensy- }3-6-support"},{"location":"ChangeLog/20210529/#new-command-qmk-console","text":"A new qmk console command has been added for attaching to your keyboard's console. It operates similiarly to QMK Toolbox by allowing you to connect to one or more keyboard consoles to display debugging messages.","title":"New command: qmk console (#12828)"},{"location":"ChangeLog/20210529/#improve-command-qmk-config","text":"We've updated the qmk config command to show only the configuration items you have actually set. You can now display (almost) all of the available configuration options, along with their default values, using qmk config -a .","title":"Improved command: qmk config"},{"location":"ChangeLog/20210529/#led-matrix-improvements","text":"LED Matrix has been improved with effects, CIE1931 curves, and a task system.","title":"LED Matrix Improvements (#12509, #12580, #12588, #12633, #12651, #12685)"},{"location":"ChangeLog/20210529/#changes-requiring-user-action","text":"","title":"Changes Requiring User Action"},{"location":"ChangeLog/20210529/#updated-keyboard-codebases","text":"Durgod keyboard refactor in preparation for adding additional durgod keyboards ( #11978 ) Updated Function96 with V2 files and removed chconf.h and halconf.h ( #12613 ) [Keyboard] updated a vendor name / fixed minor keymap issues ( #12881 ) [Keyboard] Corne - Remove legacy revision support ( #12226 ) The following keyboards have had their source moved within QMK: Old Keyboard Name New Keyboard Name crkbd/rev1/common crkbd/rev1 function96 function96/v1 nckiibs/flatbread60 delikeeb/flatbread60 nckiibs/vaguettelite delikeeb/vaguettelite nckiibs/vanana/rev1 delikeeb/vanana/rev1 nckiibs/vanana/rev2 delikeeb/vanana/rev2 nckiibs/vaneela delikeeb/vaneela nckiibs/vaneelaex delikeeb/vaneelaex nckiibs/waaffle/rev3/elite_c delikeeb/waaffle/rev3/elite_c nckiibs/waaffle/rev3/pro_micro delikeeb/waaffle/rev3/pro_micro The Function96 V2 has also been added as part of these changes. The codebase for the Durgod K320 has been reworked in anticipation of additional Durgod keyboards gaining QMK support. Additionally, the crkbd/rev1/legacy keyboard has been removed.","title":"Updated Keyboard Codebases"},{"location":"ChangeLog/20210529/#bootmagic-deprecation-and-refactor","text":"QMK has decided to deprecate the full Bootmagic feature and leave Bootmagic Lite as the only remaining option. This pull request changes the behavior of BOOTMAGIC_ENABLE such that specifying BOOTMAGIC_ENABLE = yes enables Bootmagic Lite instead of full Bootmagic. If attempts to use Bootmagic functionality result in unexpected behavior, check your rules.mk file and change the BOOTMAGIC_ENABLE setting to specify either lite or full .","title":"Bootmagic Deprecation and Refactor (#12172)"},{"location":"ChangeLog/20210529/#removal-of-layout-kc","text":"We've removed support for LAYOUT_kc macros, if your keymap uses one you will need to update it use a regular LAYOUT macro.","title":"Removal of LAYOUT_kc (#12160)"},{"location":"ChangeLog/20210529/#encoder-callback-boolean","text":"To allow for keyboards to override (or not) keymap level code the encoder_update_kb function has been changed from void to bool . You will need to update your function definition to reflect this and ensure that you return a true or false value. Example code before change: void encoder_update_kb ( uint8_t index , bool clockwise ) { encoder_update_user ( index , clockwise ); } void encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } } Example code after change: bool encoder_update_kb ( uint8_t index , bool clockwise ) { return encoder_update_user ( index , clockwise ); } bool encoder_update_user ( uint8_t index , bool clockwise ) { if ( index == 0 ) { /* First encoder */ if ( clockwise ) { tap_code ( KC_PGDN ); } else { tap_code ( KC_PGUP ); } } else if ( index == 1 ) { /* Second encoder */ if ( clockwise ) { tap_code ( KC_DOWN ); } else { tap_code ( KC_UP ); } } return true ; // If you return true, this will allow the keyboard level code to run, as well. //Returning false will override the keyboard level code. Depending on how the keyboard level function is set up. }","title":"Encoder callbacks are now boolean (#12805, #12985)"},{"location":"ChangeLog/20210529/#core-changes","text":"","title":"Core Changes"},{"location":"ChangeLog/20210529/#core-fixes","text":"Fix connection issue in split keyboards when slave and OLED display are connected via I2C (fixes #9335) ( #11487 ) Terrazzo: Fix wrong LED Matrix function names ( #12561 ) Apply the \"NO_LIMITED_CONTROLLER_CONNECT\" fix to atmega16u2 ( #12482 ) Fix comment parsing ( #12750 ) Turn OLED off on suspend in soundmonster Corne keymap ( #10419 ) Fixup build errors on develop branch. ( #12723 ) Fix syntax error when compiling for ARM ( #12866 ) Add missing LED Matrix suspend code to suspend.c ( #12878 ) Fix spelling mistake regarding LED Matrix in split_common. ( #12888 ) [Keymap] Fix QWERTY/DVORAK status output for kzar keymap ( #12895 ) Fixup housekeeping from being invoked twice per loop. ( #12933 ) wait for matrix row signal to go HIGH for every row ( #12945 ) ensure we do not conflict with existing keymap aliases ( #12976 ) [Keyboard] Fix Terrazzo build failure ( #12977 ) Do not hard set config in CPTC files ( #11864 )","title":"Fixes"},{"location":"ChangeLog/20210529/#core-additions","text":"ARM - Refactor SLEEP_LED to support more platforms ( #8403 ) Add ability to toggle One Shot functionality ( #4198 ) Add RGB Matrix support to Split Common ( #11055 ) Add support for complementary outputs to the ChibiOS WS2812 PWM driver ( #11988 ) Enable RGB Matrix for Corne ( #12091 ) Set default OLED Update Interval for Split Keyboards to improve matrix scan performance ( #12107 ) Add support for MK66F18 (Teensy 3.6) micro controller ( #12258 ) Split RGB Matrix support for RGBKB Zygomorph ( #11083 ) Add baudrate and circular buffer to ARM WS2812 SPI config ( #12216 ) Add keyboard level weak function for slave matrix scan ( #12317 ) Add link to schematic on EasyEDA for XD60 ( #12018 ) Add Config functions for LED Matrix ( #12361 ) Add pin definitions for MK66F18 ( #12419 ) add kinesis/kint36 keyboard ( #10171 ) Add support for producing UF2-format binaries. ( #12435 ) Implement CIE1931 curve for LED Matrix ( #12417 ) Change BOOTMAGIC_ENABLE=yes to use Bootmagic Lite ( #12172 ) Add kzar keymap for Kinesis Advantage ( #12444 ) LED Matrix: suspend code ( #12509 ) LED Matrix: Task system ( #12580 ) Add missing RGB_MODE_TWINKLE / RGB_M_TW keycodes ( #11935 ) Enhancement of WPM feature ( #11727 ) Add Per Key functionality for AutoShift ( #11536 ) LED Matrix: Reactive effect buffers & advanced indicators ( #12588 ) LED Matrix: support for Split keyboards ( #12633 ) add setting to enable infinite timeout for leader key ( #6580 , #12721 ) Update ADC driver for STM32F1xx, STM32F3xx, STM32F4xx ( #12403 ) Add initial support for tinyuf2 bootloader (when hosted on F411 blackpill) ( #12600 ) Add support for STM32F446 MCU ( #12619 ) Add STM32L433 and L443 support ( #12063 ) Added OLED fade out support ( #12086 ) New command: qmk console ( #12828 ) LED Matrix: Effects! ( #12651 ) Add setup, clone, and env to the list of commands we allow even with broken modules ( #12868 ) LED Matrix: Documentation ( #12685 ) Add function to allow repeated blinking of one layer ( #12237 ) Add support for up to 4 IS31FL3733 drivers ( #12342 ) Convert Encoder callbacks to be boolean functions ( #12805 , #12985 ) [Keymap] Update to Drashna keymap and user code (based on develop) ( #12936 ) Add Full-duplex serial driver for ARM boards ( #9842 ) Document LED_MATRIX_FRAMEBUFFER_EFFECTS ( #12987 ) Backlight: add defines for default level and breathing state ( #12560 , #13024 ) Add dire message about LUFA mass storage bootloader ( #13014 )","title":"Additions and Enhancements"},{"location":"ChangeLog/20210529/#core-optimizations","text":"Overhaul bootmagic logic to have single entrypoint ( #8532 ) Refactor of USB code within split_common ( #11890 ) Begin the process of deprecating bin/qmk in favor of the global CLI ( #12109 ) LED Matrix: decouple from Backlight ( #12054 ) Remove FUNC() ( #12161 ) Move gpio wait logic to wait.h ( #12067 ) LED Matrix: Clean up includes ( #12197 ) Consistently use bin/qmk when that script is called ( #12286 ) LED Matrix: Additional common_features.mk tweaks ( #12187 ) LED Matrix: Fix up eeconfig code ( #12327 ) Big quantum_keycodes cleanup ( #12249 ) Fix up builds that are now too big for develop branch. ( #12495 ) [Keyboard] kint36: switch to sym_eager_pk debouncing ( #12626 ) [Keyboard] kint2pp: reduce input latency by \u224810ms ( #12625 ) eeprom driver: Refactor where eeprom driver initialisation (and EEPROM emulation initialisation) occurs to make it non-target-specific. ( #12671 ) Change RGB/LED Matrix to use a simple define for USB suspend ( #12697 , #12770 ) Remove pointless SERIAL_LINK_ENABLE rules ( #12846 ) Make Swap Hands use PROGMEM ( #12284 ) Remove KEYMAP and LAYOUT_kc ( #12160 ) Rename point_t -> led_point_t ( #12864 ) Deprecate send_unicode_hex_string() ( #12602 ) [Keyboard] Remove redundant legacy and common headers for crkbd ( #13023 )","title":"Clean-ups and Optimizations"},{"location":"ChangeLog/20210529/#qmk-internals","text":"trivial change to trigger api update ( b15288fb87 ) fix some references to bin/qmk that slipped in ( #12832 ) Resolve a number of warnings in qmk generate-api ( #12833 ) Fix another bin/qmk reference ( #12856 ) Use milc.subcommand.config instead of qmk.cli.config ( #12915 )","title":"QMK Infrastructure and Internals"}]}